
openmv4_plus_diy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011a94  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08011d34  08011d34  00021d34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08011e20  08011e20  00021e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08011e24  08011e24  00021e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000768  24000000  08011e28  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .sram_data2   0000a000  24000768  08012590  00030768  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00001fcc  2400a768  0801c590  0003a768  2**2
                  ALLOC
  8 ._user_heap_stack 00006004  2400c734  0801c590  0003c734  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0003a768  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0003a796  2**0
                  CONTENTS, READONLY
 11 .debug_info   00022f01  00000000  00000000  0003a7d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00005b43  00000000  00000000  0005d6da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 000019b8  00000000  00000000  00063220  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000133f  00000000  00000000  00064bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  0003ef17  00000000  00000000  00065f17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0002ab10  00000000  00000000  000a4e2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00162ab4  00000000  00000000  000cf93e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00006eac  00000000  00000000  002323f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000066  00000000  00000000  002392a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400a768 	.word	0x2400a768
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08011d1c 	.word	0x08011d1c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2400a76c 	.word	0x2400a76c
 80002dc:	08011d1c 	.word	0x08011d1c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000384:	4b0d      	ldr	r3, [pc, #52]	; (80003bc <MX_CRC_Init+0x3c>)
 8000386:	4a0e      	ldr	r2, [pc, #56]	; (80003c0 <MX_CRC_Init+0x40>)
 8000388:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 800038a:	4b0c      	ldr	r3, [pc, #48]	; (80003bc <MX_CRC_Init+0x3c>)
 800038c:	2200      	movs	r2, #0
 800038e:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000390:	4b0a      	ldr	r3, [pc, #40]	; (80003bc <MX_CRC_Init+0x3c>)
 8000392:	2200      	movs	r2, #0
 8000394:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000396:	4b09      	ldr	r3, [pc, #36]	; (80003bc <MX_CRC_Init+0x3c>)
 8000398:	2200      	movs	r2, #0
 800039a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800039c:	4b07      	ldr	r3, [pc, #28]	; (80003bc <MX_CRC_Init+0x3c>)
 800039e:	2200      	movs	r2, #0
 80003a0:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 80003a2:	4b06      	ldr	r3, [pc, #24]	; (80003bc <MX_CRC_Init+0x3c>)
 80003a4:	2201      	movs	r2, #1
 80003a6:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80003a8:	4804      	ldr	r0, [pc, #16]	; (80003bc <MX_CRC_Init+0x3c>)
 80003aa:	f001 f8cf 	bl	800154c <HAL_CRC_Init>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d001      	beq.n	80003b8 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80003b4:	f000 fc2a 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80003b8:	bf00      	nop
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	2400a784 	.word	0x2400a784
 80003c0:	58024c00 	.word	0x58024c00

080003c4 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 80003c4:	b480      	push	{r7}
 80003c6:	b085      	sub	sp, #20
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	4a0b      	ldr	r2, [pc, #44]	; (8000400 <HAL_CRC_MspInit+0x3c>)
 80003d2:	4293      	cmp	r3, r2
 80003d4:	d10e      	bne.n	80003f4 <HAL_CRC_MspInit+0x30>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80003d6:	4b0b      	ldr	r3, [pc, #44]	; (8000404 <HAL_CRC_MspInit+0x40>)
 80003d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003dc:	4a09      	ldr	r2, [pc, #36]	; (8000404 <HAL_CRC_MspInit+0x40>)
 80003de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80003e6:	4b07      	ldr	r3, [pc, #28]	; (8000404 <HAL_CRC_MspInit+0x40>)
 80003e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80003ec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80003f0:	60fb      	str	r3, [r7, #12]
 80003f2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 80003f4:	bf00      	nop
 80003f6:	3714      	adds	r7, #20
 80003f8:	46bd      	mov	sp, r7
 80003fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fe:	4770      	bx	lr
 8000400:	58024c00 	.word	0x58024c00
 8000404:	58024400 	.word	0x58024400

08000408 <MX_DCMI_Init>:
DCMI_HandleTypeDef hdcmi;
DMA_HandleTypeDef hdma_dcmi;

/* DCMI init function */
void MX_DCMI_Init(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 800040c:	4b16      	ldr	r3, [pc, #88]	; (8000468 <MX_DCMI_Init+0x60>)
 800040e:	4a17      	ldr	r2, [pc, #92]	; (800046c <MX_DCMI_Init+0x64>)
 8000410:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000412:	4b15      	ldr	r3, [pc, #84]	; (8000468 <MX_DCMI_Init+0x60>)
 8000414:	2200      	movs	r2, #0
 8000416:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8000418:	4b13      	ldr	r3, [pc, #76]	; (8000468 <MX_DCMI_Init+0x60>)
 800041a:	2220      	movs	r2, #32
 800041c:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 800041e:	4b12      	ldr	r3, [pc, #72]	; (8000468 <MX_DCMI_Init+0x60>)
 8000420:	2200      	movs	r2, #0
 8000422:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000424:	4b10      	ldr	r3, [pc, #64]	; (8000468 <MX_DCMI_Init+0x60>)
 8000426:	2200      	movs	r2, #0
 8000428:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800042a:	4b0f      	ldr	r3, [pc, #60]	; (8000468 <MX_DCMI_Init+0x60>)
 800042c:	2200      	movs	r2, #0
 800042e:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000430:	4b0d      	ldr	r3, [pc, #52]	; (8000468 <MX_DCMI_Init+0x60>)
 8000432:	2200      	movs	r2, #0
 8000434:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_ENABLE;
 8000436:	4b0c      	ldr	r3, [pc, #48]	; (8000468 <MX_DCMI_Init+0x60>)
 8000438:	2208      	movs	r2, #8
 800043a:	621a      	str	r2, [r3, #32]
  hdcmi.Init.ByteSelectMode = DCMI_BSM_ALL;
 800043c:	4b0a      	ldr	r3, [pc, #40]	; (8000468 <MX_DCMI_Init+0x60>)
 800043e:	2200      	movs	r2, #0
 8000440:	625a      	str	r2, [r3, #36]	; 0x24
  hdcmi.Init.ByteSelectStart = DCMI_OEBS_ODD;
 8000442:	4b09      	ldr	r3, [pc, #36]	; (8000468 <MX_DCMI_Init+0x60>)
 8000444:	2200      	movs	r2, #0
 8000446:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi.Init.LineSelectMode = DCMI_LSM_ALL;
 8000448:	4b07      	ldr	r3, [pc, #28]	; (8000468 <MX_DCMI_Init+0x60>)
 800044a:	2200      	movs	r2, #0
 800044c:	62da      	str	r2, [r3, #44]	; 0x2c
  hdcmi.Init.LineSelectStart = DCMI_OELS_ODD;
 800044e:	4b06      	ldr	r3, [pc, #24]	; (8000468 <MX_DCMI_Init+0x60>)
 8000450:	2200      	movs	r2, #0
 8000452:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000454:	4804      	ldr	r0, [pc, #16]	; (8000468 <MX_DCMI_Init+0x60>)
 8000456:	f001 f96b 	bl	8001730 <HAL_DCMI_Init>
 800045a:	4603      	mov	r3, r0
 800045c:	2b00      	cmp	r3, #0
 800045e:	d001      	beq.n	8000464 <MX_DCMI_Init+0x5c>
  {
    Error_Handler();
 8000460:	f000 fbd4 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000464:	bf00      	nop
 8000466:	bd80      	pop	{r7, pc}
 8000468:	2400a7a8 	.word	0x2400a7a8
 800046c:	48020000 	.word	0x48020000

08000470 <HAL_DCMI_MspInit>:

void HAL_DCMI_MspInit(DCMI_HandleTypeDef* dcmiHandle)
{
 8000470:	b580      	push	{r7, lr}
 8000472:	b08e      	sub	sp, #56	; 0x38
 8000474:	af00      	add	r7, sp, #0
 8000476:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000478:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800047c:	2200      	movs	r2, #0
 800047e:	601a      	str	r2, [r3, #0]
 8000480:	605a      	str	r2, [r3, #4]
 8000482:	609a      	str	r2, [r3, #8]
 8000484:	60da      	str	r2, [r3, #12]
 8000486:	611a      	str	r2, [r3, #16]
  if(dcmiHandle->Instance==DCMI)
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4a82      	ldr	r2, [pc, #520]	; (8000698 <HAL_DCMI_MspInit+0x228>)
 800048e:	4293      	cmp	r3, r2
 8000490:	f040 80fd 	bne.w	800068e <HAL_DCMI_MspInit+0x21e>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* DCMI clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000494:	4b81      	ldr	r3, [pc, #516]	; (800069c <HAL_DCMI_MspInit+0x22c>)
 8000496:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800049a:	4a80      	ldr	r2, [pc, #512]	; (800069c <HAL_DCMI_MspInit+0x22c>)
 800049c:	f043 0301 	orr.w	r3, r3, #1
 80004a0:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 80004a4:	4b7d      	ldr	r3, [pc, #500]	; (800069c <HAL_DCMI_MspInit+0x22c>)
 80004a6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80004aa:	f003 0301 	and.w	r3, r3, #1
 80004ae:	623b      	str	r3, [r7, #32]
 80004b0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80004b2:	4b7a      	ldr	r3, [pc, #488]	; (800069c <HAL_DCMI_MspInit+0x22c>)
 80004b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004b8:	4a78      	ldr	r2, [pc, #480]	; (800069c <HAL_DCMI_MspInit+0x22c>)
 80004ba:	f043 0310 	orr.w	r3, r3, #16
 80004be:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80004c2:	4b76      	ldr	r3, [pc, #472]	; (800069c <HAL_DCMI_MspInit+0x22c>)
 80004c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004c8:	f003 0310 	and.w	r3, r3, #16
 80004cc:	61fb      	str	r3, [r7, #28]
 80004ce:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d0:	4b72      	ldr	r3, [pc, #456]	; (800069c <HAL_DCMI_MspInit+0x22c>)
 80004d2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004d6:	4a71      	ldr	r2, [pc, #452]	; (800069c <HAL_DCMI_MspInit+0x22c>)
 80004d8:	f043 0302 	orr.w	r3, r3, #2
 80004dc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80004e0:	4b6e      	ldr	r3, [pc, #440]	; (800069c <HAL_DCMI_MspInit+0x22c>)
 80004e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004e6:	f003 0302 	and.w	r3, r3, #2
 80004ea:	61bb      	str	r3, [r7, #24]
 80004ec:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80004ee:	4b6b      	ldr	r3, [pc, #428]	; (800069c <HAL_DCMI_MspInit+0x22c>)
 80004f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80004f4:	4a69      	ldr	r2, [pc, #420]	; (800069c <HAL_DCMI_MspInit+0x22c>)
 80004f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004fa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80004fe:	4b67      	ldr	r3, [pc, #412]	; (800069c <HAL_DCMI_MspInit+0x22c>)
 8000500:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000504:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000508:	617b      	str	r3, [r7, #20]
 800050a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800050c:	4b63      	ldr	r3, [pc, #396]	; (800069c <HAL_DCMI_MspInit+0x22c>)
 800050e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000512:	4a62      	ldr	r2, [pc, #392]	; (800069c <HAL_DCMI_MspInit+0x22c>)
 8000514:	f043 0304 	orr.w	r3, r3, #4
 8000518:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800051c:	4b5f      	ldr	r3, [pc, #380]	; (800069c <HAL_DCMI_MspInit+0x22c>)
 800051e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000522:	f003 0304 	and.w	r3, r3, #4
 8000526:	613b      	str	r3, [r7, #16]
 8000528:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800052a:	4b5c      	ldr	r3, [pc, #368]	; (800069c <HAL_DCMI_MspInit+0x22c>)
 800052c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000530:	4a5a      	ldr	r2, [pc, #360]	; (800069c <HAL_DCMI_MspInit+0x22c>)
 8000532:	f043 0301 	orr.w	r3, r3, #1
 8000536:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800053a:	4b58      	ldr	r3, [pc, #352]	; (800069c <HAL_DCMI_MspInit+0x22c>)
 800053c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000540:	f003 0301 	and.w	r3, r3, #1
 8000544:	60fb      	str	r3, [r7, #12]
 8000546:	68fb      	ldr	r3, [r7, #12]
    PC7     ------> DCMI_D1
    PC6     ------> DCMI_D0
    PA4     ------> DCMI_HSYNC
    PA6     ------> DCMI_PIXCLK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000548:	2370      	movs	r3, #112	; 0x70
 800054a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800054c:	2302      	movs	r3, #2
 800054e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000550:	2300      	movs	r3, #0
 8000552:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000554:	2303      	movs	r3, #3
 8000556:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000558:	230d      	movs	r3, #13
 800055a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800055c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000560:	4619      	mov	r1, r3
 8000562:	484f      	ldr	r0, [pc, #316]	; (80006a0 <HAL_DCMI_MspInit+0x230>)
 8000564:	f004 ff14 	bl	8005390 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8000568:	23c0      	movs	r3, #192	; 0xc0
 800056a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800056c:	2302      	movs	r3, #2
 800056e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000570:	2300      	movs	r3, #0
 8000572:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000574:	2303      	movs	r3, #3
 8000576:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000578:	230d      	movs	r3, #13
 800057a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800057c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000580:	4619      	mov	r1, r3
 8000582:	4848      	ldr	r0, [pc, #288]	; (80006a4 <HAL_DCMI_MspInit+0x234>)
 8000584:	f004 ff04 	bl	8005390 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 8000588:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800058c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800058e:	2302      	movs	r3, #2
 8000590:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000592:	2300      	movs	r3, #0
 8000594:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000596:	2303      	movs	r3, #3
 8000598:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800059a:	230d      	movs	r3, #13
 800059c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800059e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005a2:	4619      	mov	r1, r3
 80005a4:	4840      	ldr	r0, [pc, #256]	; (80006a8 <HAL_DCMI_MspInit+0x238>)
 80005a6:	f004 fef3 	bl	8005390 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80005aa:	23c0      	movs	r3, #192	; 0xc0
 80005ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ae:	2302      	movs	r3, #2
 80005b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b2:	2300      	movs	r3, #0
 80005b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005b6:	2303      	movs	r3, #3
 80005b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80005ba:	230d      	movs	r3, #13
 80005bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005c2:	4619      	mov	r1, r3
 80005c4:	4839      	ldr	r0, [pc, #228]	; (80006ac <HAL_DCMI_MspInit+0x23c>)
 80005c6:	f004 fee3 	bl	8005390 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80005ca:	2310      	movs	r3, #16
 80005cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ce:	2302      	movs	r3, #2
 80005d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005d2:	2300      	movs	r3, #0
 80005d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005d6:	2303      	movs	r3, #3
 80005d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80005da:	230d      	movs	r3, #13
 80005dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005e2:	4619      	mov	r1, r3
 80005e4:	4832      	ldr	r0, [pc, #200]	; (80006b0 <HAL_DCMI_MspInit+0x240>)
 80005e6:	f004 fed3 	bl	8005390 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80005ea:	2340      	movs	r3, #64	; 0x40
 80005ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005ee:	2302      	movs	r3, #2
 80005f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80005f2:	2301      	movs	r3, #1
 80005f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005f6:	2303      	movs	r3, #3
 80005f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80005fa:	230d      	movs	r3, #13
 80005fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000602:	4619      	mov	r1, r3
 8000604:	482a      	ldr	r0, [pc, #168]	; (80006b0 <HAL_DCMI_MspInit+0x240>)
 8000606:	f004 fec3 	bl	8005390 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA1_Stream1;
 800060a:	4b2a      	ldr	r3, [pc, #168]	; (80006b4 <HAL_DCMI_MspInit+0x244>)
 800060c:	4a2a      	ldr	r2, [pc, #168]	; (80006b8 <HAL_DCMI_MspInit+0x248>)
 800060e:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Request = DMA_REQUEST_DCMI;
 8000610:	4b28      	ldr	r3, [pc, #160]	; (80006b4 <HAL_DCMI_MspInit+0x244>)
 8000612:	224b      	movs	r2, #75	; 0x4b
 8000614:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000616:	4b27      	ldr	r3, [pc, #156]	; (80006b4 <HAL_DCMI_MspInit+0x244>)
 8000618:	2200      	movs	r2, #0
 800061a:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 800061c:	4b25      	ldr	r3, [pc, #148]	; (80006b4 <HAL_DCMI_MspInit+0x244>)
 800061e:	2200      	movs	r2, #0
 8000620:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8000622:	4b24      	ldr	r3, [pc, #144]	; (80006b4 <HAL_DCMI_MspInit+0x244>)
 8000624:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000628:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800062a:	4b22      	ldr	r3, [pc, #136]	; (80006b4 <HAL_DCMI_MspInit+0x244>)
 800062c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000630:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000632:	4b20      	ldr	r3, [pc, #128]	; (80006b4 <HAL_DCMI_MspInit+0x244>)
 8000634:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000638:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_CIRCULAR;
 800063a:	4b1e      	ldr	r3, [pc, #120]	; (80006b4 <HAL_DCMI_MspInit+0x244>)
 800063c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000640:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 8000642:	4b1c      	ldr	r3, [pc, #112]	; (80006b4 <HAL_DCMI_MspInit+0x244>)
 8000644:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000648:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800064a:	4b1a      	ldr	r3, [pc, #104]	; (80006b4 <HAL_DCMI_MspInit+0x244>)
 800064c:	2204      	movs	r2, #4
 800064e:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 8000650:	4b18      	ldr	r3, [pc, #96]	; (80006b4 <HAL_DCMI_MspInit+0x244>)
 8000652:	2201      	movs	r2, #1
 8000654:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 8000656:	4b17      	ldr	r3, [pc, #92]	; (80006b4 <HAL_DCMI_MspInit+0x244>)
 8000658:	2200      	movs	r2, #0
 800065a:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800065c:	4b15      	ldr	r3, [pc, #84]	; (80006b4 <HAL_DCMI_MspInit+0x244>)
 800065e:	2200      	movs	r2, #0
 8000660:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8000662:	4814      	ldr	r0, [pc, #80]	; (80006b4 <HAL_DCMI_MspInit+0x244>)
 8000664:	f001 fba8 	bl	8001db8 <HAL_DMA_Init>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <HAL_DCMI_MspInit+0x202>
    {
      Error_Handler();
 800066e:	f000 facd 	bl	8000c0c <Error_Handler>
    }

    __HAL_LINKDMA(dcmiHandle,DMA_Handle,hdma_dcmi);
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	4a0f      	ldr	r2, [pc, #60]	; (80006b4 <HAL_DCMI_MspInit+0x244>)
 8000676:	649a      	str	r2, [r3, #72]	; 0x48
 8000678:	4a0e      	ldr	r2, [pc, #56]	; (80006b4 <HAL_DCMI_MspInit+0x244>)
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 800067e:	2200      	movs	r2, #0
 8000680:	2100      	movs	r1, #0
 8000682:	204e      	movs	r0, #78	; 0x4e
 8000684:	f000 ff2d 	bl	80014e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8000688:	204e      	movs	r0, #78	; 0x4e
 800068a:	f000 ff44 	bl	8001516 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }
}
 800068e:	bf00      	nop
 8000690:	3738      	adds	r7, #56	; 0x38
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	48020000 	.word	0x48020000
 800069c:	58024400 	.word	0x58024400
 80006a0:	58021000 	.word	0x58021000
 80006a4:	58020400 	.word	0x58020400
 80006a8:	58021800 	.word	0x58021800
 80006ac:	58020800 	.word	0x58020800
 80006b0:	58020000 	.word	0x58020000
 80006b4:	2400a7f8 	.word	0x2400a7f8
 80006b8:	40020028 	.word	0x40020028

080006bc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b082      	sub	sp, #8
 80006c0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80006c2:	4b11      	ldr	r3, [pc, #68]	; (8000708 <MX_DMA_Init+0x4c>)
 80006c4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006c8:	4a0f      	ldr	r2, [pc, #60]	; (8000708 <MX_DMA_Init+0x4c>)
 80006ca:	f043 0301 	orr.w	r3, r3, #1
 80006ce:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80006d2:	4b0d      	ldr	r3, [pc, #52]	; (8000708 <MX_DMA_Init+0x4c>)
 80006d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80006d8:	f003 0301 	and.w	r3, r3, #1
 80006dc:	607b      	str	r3, [r7, #4]
 80006de:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80006e0:	2200      	movs	r2, #0
 80006e2:	2100      	movs	r1, #0
 80006e4:	200c      	movs	r0, #12
 80006e6:	f000 fefc 	bl	80014e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80006ea:	200c      	movs	r0, #12
 80006ec:	f000 ff13 	bl	8001516 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 3, 0);
 80006f0:	2200      	movs	r2, #0
 80006f2:	2103      	movs	r1, #3
 80006f4:	2010      	movs	r0, #16
 80006f6:	f000 fef4 	bl	80014e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80006fa:	2010      	movs	r0, #16
 80006fc:	f000 ff0b 	bl	8001516 <HAL_NVIC_EnableIRQ>

}
 8000700:	bf00      	nop
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	58024400 	.word	0x58024400

0800070c <MX_GPIO_Init>:
     PA8   ------> RCC_MCO_1
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08c      	sub	sp, #48	; 0x30
 8000710:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000712:	f107 031c 	add.w	r3, r7, #28
 8000716:	2200      	movs	r2, #0
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	605a      	str	r2, [r3, #4]
 800071c:	609a      	str	r2, [r3, #8]
 800071e:	60da      	str	r2, [r3, #12]
 8000720:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000722:	4b7b      	ldr	r3, [pc, #492]	; (8000910 <MX_GPIO_Init+0x204>)
 8000724:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000728:	4a79      	ldr	r2, [pc, #484]	; (8000910 <MX_GPIO_Init+0x204>)
 800072a:	f043 0302 	orr.w	r3, r3, #2
 800072e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000732:	4b77      	ldr	r3, [pc, #476]	; (8000910 <MX_GPIO_Init+0x204>)
 8000734:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000738:	f003 0302 	and.w	r3, r3, #2
 800073c:	61bb      	str	r3, [r7, #24]
 800073e:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000740:	4b73      	ldr	r3, [pc, #460]	; (8000910 <MX_GPIO_Init+0x204>)
 8000742:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000746:	4a72      	ldr	r2, [pc, #456]	; (8000910 <MX_GPIO_Init+0x204>)
 8000748:	f043 0308 	orr.w	r3, r3, #8
 800074c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000750:	4b6f      	ldr	r3, [pc, #444]	; (8000910 <MX_GPIO_Init+0x204>)
 8000752:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000756:	f003 0308 	and.w	r3, r3, #8
 800075a:	617b      	str	r3, [r7, #20]
 800075c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075e:	4b6c      	ldr	r3, [pc, #432]	; (8000910 <MX_GPIO_Init+0x204>)
 8000760:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000764:	4a6a      	ldr	r2, [pc, #424]	; (8000910 <MX_GPIO_Init+0x204>)
 8000766:	f043 0301 	orr.w	r3, r3, #1
 800076a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800076e:	4b68      	ldr	r3, [pc, #416]	; (8000910 <MX_GPIO_Init+0x204>)
 8000770:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000774:	f003 0301 	and.w	r3, r3, #1
 8000778:	613b      	str	r3, [r7, #16]
 800077a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800077c:	4b64      	ldr	r3, [pc, #400]	; (8000910 <MX_GPIO_Init+0x204>)
 800077e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000782:	4a63      	ldr	r2, [pc, #396]	; (8000910 <MX_GPIO_Init+0x204>)
 8000784:	f043 0310 	orr.w	r3, r3, #16
 8000788:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800078c:	4b60      	ldr	r3, [pc, #384]	; (8000910 <MX_GPIO_Init+0x204>)
 800078e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000792:	f003 0310 	and.w	r3, r3, #16
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800079a:	4b5d      	ldr	r3, [pc, #372]	; (8000910 <MX_GPIO_Init+0x204>)
 800079c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007a0:	4a5b      	ldr	r2, [pc, #364]	; (8000910 <MX_GPIO_Init+0x204>)
 80007a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007aa:	4b59      	ldr	r3, [pc, #356]	; (8000910 <MX_GPIO_Init+0x204>)
 80007ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007b4:	60bb      	str	r3, [r7, #8]
 80007b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007b8:	4b55      	ldr	r3, [pc, #340]	; (8000910 <MX_GPIO_Init+0x204>)
 80007ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007be:	4a54      	ldr	r2, [pc, #336]	; (8000910 <MX_GPIO_Init+0x204>)
 80007c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007c8:	4b51      	ldr	r3, [pc, #324]	; (8000910 <MX_GPIO_Init+0x204>)
 80007ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007d2:	607b      	str	r3, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d6:	4b4e      	ldr	r3, [pc, #312]	; (8000910 <MX_GPIO_Init+0x204>)
 80007d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007dc:	4a4c      	ldr	r2, [pc, #304]	; (8000910 <MX_GPIO_Init+0x204>)
 80007de:	f043 0304 	orr.w	r3, r3, #4
 80007e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007e6:	4b4a      	ldr	r3, [pc, #296]	; (8000910 <MX_GPIO_Init+0x204>)
 80007e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007ec:	f003 0304 	and.w	r3, r3, #4
 80007f0:	603b      	str	r3, [r7, #0]
 80007f2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_PWDN_GPIO_Port, DCMI_PWDN_Pin, GPIO_PIN_SET);
 80007f4:	2201      	movs	r2, #1
 80007f6:	2180      	movs	r1, #128	; 0x80
 80007f8:	4846      	ldr	r0, [pc, #280]	; (8000914 <MX_GPIO_Init+0x208>)
 80007fa:	f004 ff79 	bl	80056f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DCMI_RST_GPIO_Port, DCMI_RST_Pin, GPIO_PIN_SET);
 80007fe:	2201      	movs	r2, #1
 8000800:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000804:	4844      	ldr	r0, [pc, #272]	; (8000918 <MX_GPIO_Init+0x20c>)
 8000806:	f004 ff73 	bl	80056f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LED_R_Pin|LED_G_Pin|LED_B_Pin, GPIO_PIN_SET);
 800080a:	2201      	movs	r2, #1
 800080c:	2107      	movs	r1, #7
 800080e:	4843      	ldr	r0, [pc, #268]	; (800091c <MX_GPIO_Init+0x210>)
 8000810:	f004 ff6e 	bl	80056f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LCD_RS_Pin|LCD_RST_Pin, GPIO_PIN_RESET);
 8000814:	2200      	movs	r2, #0
 8000816:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 800081a:	483e      	ldr	r0, [pc, #248]	; (8000914 <MX_GPIO_Init+0x208>)
 800081c:	f004 ff68 	bl	80056f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_LED_GPIO_Port, LCD_LED_Pin, GPIO_PIN_RESET);
 8000820:	2200      	movs	r2, #0
 8000822:	2120      	movs	r1, #32
 8000824:	483c      	ldr	r0, [pc, #240]	; (8000918 <MX_GPIO_Init+0x20c>)
 8000826:	f004 ff63 	bl	80056f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800082a:	2200      	movs	r2, #0
 800082c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000830:	483b      	ldr	r0, [pc, #236]	; (8000920 <MX_GPIO_Init+0x214>)
 8000832:	f004 ff5d 	bl	80056f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_PWDN_Pin;
 8000836:	2380      	movs	r3, #128	; 0x80
 8000838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083a:	2301      	movs	r3, #1
 800083c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800083e:	2301      	movs	r3, #1
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000842:	2300      	movs	r3, #0
 8000844:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DCMI_PWDN_GPIO_Port, &GPIO_InitStruct);
 8000846:	f107 031c 	add.w	r3, r7, #28
 800084a:	4619      	mov	r1, r3
 800084c:	4831      	ldr	r0, [pc, #196]	; (8000914 <MX_GPIO_Init+0x208>)
 800084e:	f004 fd9f 	bl	8005390 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_RST_Pin;
 8000852:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000858:	2301      	movs	r3, #1
 800085a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800085c:	2301      	movs	r3, #1
 800085e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000860:	2300      	movs	r3, #0
 8000862:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(DCMI_RST_GPIO_Port, &GPIO_InitStruct);
 8000864:	f107 031c 	add.w	r3, r7, #28
 8000868:	4619      	mov	r1, r3
 800086a:	482b      	ldr	r0, [pc, #172]	; (8000918 <MX_GPIO_Init+0x20c>)
 800086c:	f004 fd90 	bl	8005390 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DCMI_CLK_Pin;
 8000870:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000874:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000876:	2302      	movs	r3, #2
 8000878:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800087e:	2303      	movs	r3, #3
 8000880:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000882:	2300      	movs	r3, #0
 8000884:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(DCMI_CLK_GPIO_Port, &GPIO_InitStruct);
 8000886:	f107 031c 	add.w	r3, r7, #28
 800088a:	4619      	mov	r1, r3
 800088c:	4822      	ldr	r0, [pc, #136]	; (8000918 <MX_GPIO_Init+0x20c>)
 800088e:	f004 fd7f 	bl	8005390 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = LED_R_Pin|LED_G_Pin|LED_B_Pin;
 8000892:	2307      	movs	r3, #7
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000896:	2301      	movs	r3, #1
 8000898:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089a:	2300      	movs	r3, #0
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800089e:	2300      	movs	r3, #0
 80008a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	4619      	mov	r1, r3
 80008a8:	481c      	ldr	r0, [pc, #112]	; (800091c <MX_GPIO_Init+0x210>)
 80008aa:	f004 fd71 	bl	8005390 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_RST_Pin;
 80008ae:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80008b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b4:	2301      	movs	r3, #1
 80008b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b8:	2300      	movs	r3, #0
 80008ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008bc:	2300      	movs	r3, #0
 80008be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008c0:	f107 031c 	add.w	r3, r7, #28
 80008c4:	4619      	mov	r1, r3
 80008c6:	4813      	ldr	r0, [pc, #76]	; (8000914 <MX_GPIO_Init+0x208>)
 80008c8:	f004 fd62 	bl	8005390 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_LED_Pin;
 80008cc:	2320      	movs	r3, #32
 80008ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d0:	2301      	movs	r3, #1
 80008d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d8:	2300      	movs	r3, #0
 80008da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_LED_GPIO_Port, &GPIO_InitStruct);
 80008dc:	f107 031c 	add.w	r3, r7, #28
 80008e0:	4619      	mov	r1, r3
 80008e2:	480d      	ldr	r0, [pc, #52]	; (8000918 <MX_GPIO_Init+0x20c>)
 80008e4:	f004 fd54 	bl	8005390 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LCD_CS_Pin;
 80008e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ee:	2301      	movs	r3, #1
 80008f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f6:	2300      	movs	r3, #0
 80008f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LCD_CS_GPIO_Port, &GPIO_InitStruct);
 80008fa:	f107 031c 	add.w	r3, r7, #28
 80008fe:	4619      	mov	r1, r3
 8000900:	4807      	ldr	r0, [pc, #28]	; (8000920 <MX_GPIO_Init+0x214>)
 8000902:	f004 fd45 	bl	8005390 <HAL_GPIO_Init>

}
 8000906:	bf00      	nop
 8000908:	3730      	adds	r7, #48	; 0x30
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	58024400 	.word	0x58024400
 8000914:	58020c00 	.word	0x58020c00
 8000918:	58020000 	.word	0x58020000
 800091c:	58020800 	.word	0x58020800
 8000920:	58020400 	.word	0x58020400

08000924 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000928:	4b1b      	ldr	r3, [pc, #108]	; (8000998 <MX_I2C1_Init+0x74>)
 800092a:	4a1c      	ldr	r2, [pc, #112]	; (800099c <MX_I2C1_Init+0x78>)
 800092c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10C0ECFF;
 800092e:	4b1a      	ldr	r3, [pc, #104]	; (8000998 <MX_I2C1_Init+0x74>)
 8000930:	4a1b      	ldr	r2, [pc, #108]	; (80009a0 <MX_I2C1_Init+0x7c>)
 8000932:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000934:	4b18      	ldr	r3, [pc, #96]	; (8000998 <MX_I2C1_Init+0x74>)
 8000936:	2200      	movs	r2, #0
 8000938:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800093a:	4b17      	ldr	r3, [pc, #92]	; (8000998 <MX_I2C1_Init+0x74>)
 800093c:	2201      	movs	r2, #1
 800093e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000940:	4b15      	ldr	r3, [pc, #84]	; (8000998 <MX_I2C1_Init+0x74>)
 8000942:	2200      	movs	r2, #0
 8000944:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000946:	4b14      	ldr	r3, [pc, #80]	; (8000998 <MX_I2C1_Init+0x74>)
 8000948:	2200      	movs	r2, #0
 800094a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800094c:	4b12      	ldr	r3, [pc, #72]	; (8000998 <MX_I2C1_Init+0x74>)
 800094e:	2200      	movs	r2, #0
 8000950:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000952:	4b11      	ldr	r3, [pc, #68]	; (8000998 <MX_I2C1_Init+0x74>)
 8000954:	2200      	movs	r2, #0
 8000956:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000958:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <MX_I2C1_Init+0x74>)
 800095a:	2200      	movs	r2, #0
 800095c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800095e:	480e      	ldr	r0, [pc, #56]	; (8000998 <MX_I2C1_Init+0x74>)
 8000960:	f004 fee0 	bl	8005724 <HAL_I2C_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800096a:	f000 f94f 	bl	8000c0c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800096e:	2100      	movs	r1, #0
 8000970:	4809      	ldr	r0, [pc, #36]	; (8000998 <MX_I2C1_Init+0x74>)
 8000972:	f005 fc4d 	bl	8006210 <HAL_I2CEx_ConfigAnalogFilter>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800097c:	f000 f946 	bl	8000c0c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000980:	2100      	movs	r1, #0
 8000982:	4805      	ldr	r0, [pc, #20]	; (8000998 <MX_I2C1_Init+0x74>)
 8000984:	f005 fc8f 	bl	80062a6 <HAL_I2CEx_ConfigDigitalFilter>
 8000988:	4603      	mov	r3, r0
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800098e:	f000 f93d 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	2400a870 	.word	0x2400a870
 800099c:	40005400 	.word	0x40005400
 80009a0:	10c0ecff 	.word	0x10c0ecff

080009a4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b0ba      	sub	sp, #232	; 0xe8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80009bc:	f107 0310 	add.w	r3, r7, #16
 80009c0:	22c0      	movs	r2, #192	; 0xc0
 80009c2:	2100      	movs	r1, #0
 80009c4:	4618      	mov	r0, r3
 80009c6:	f010 fbad 	bl	8011124 <memset>
  if(i2cHandle->Instance==I2C1)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a27      	ldr	r2, [pc, #156]	; (8000a6c <HAL_I2C_MspInit+0xc8>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d146      	bne.n	8000a62 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80009d4:	f04f 0208 	mov.w	r2, #8
 80009d8:	f04f 0300 	mov.w	r3, #0
 80009dc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 80009e0:	2300      	movs	r3, #0
 80009e2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80009e6:	f107 0310 	add.w	r3, r7, #16
 80009ea:	4618      	mov	r0, r3
 80009ec:	f007 ffce 	bl	800898c <HAL_RCCEx_PeriphCLKConfig>
 80009f0:	4603      	mov	r3, r0
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d001      	beq.n	80009fa <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 80009f6:	f000 f909 	bl	8000c0c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fa:	4b1d      	ldr	r3, [pc, #116]	; (8000a70 <HAL_I2C_MspInit+0xcc>)
 80009fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a00:	4a1b      	ldr	r2, [pc, #108]	; (8000a70 <HAL_I2C_MspInit+0xcc>)
 8000a02:	f043 0302 	orr.w	r3, r3, #2
 8000a06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a0a:	4b19      	ldr	r3, [pc, #100]	; (8000a70 <HAL_I2C_MspInit+0xcc>)
 8000a0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a10:	f003 0302 	and.w	r3, r3, #2
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a18:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a1c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a20:	2312      	movs	r3, #18
 8000a22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a32:	2304      	movs	r3, #4
 8000a34:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a38:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	480d      	ldr	r0, [pc, #52]	; (8000a74 <HAL_I2C_MspInit+0xd0>)
 8000a40:	f004 fca6 	bl	8005390 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a44:	4b0a      	ldr	r3, [pc, #40]	; (8000a70 <HAL_I2C_MspInit+0xcc>)
 8000a46:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000a4a:	4a09      	ldr	r2, [pc, #36]	; (8000a70 <HAL_I2C_MspInit+0xcc>)
 8000a4c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a50:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000a54:	4b06      	ldr	r3, [pc, #24]	; (8000a70 <HAL_I2C_MspInit+0xcc>)
 8000a56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000a5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a5e:	60bb      	str	r3, [r7, #8]
 8000a60:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a62:	bf00      	nop
 8000a64:	37e8      	adds	r7, #232	; 0xe8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40005400 	.word	0x40005400
 8000a70:	58024400 	.word	0x58024400
 8000a74:	58020400 	.word	0x58020400

08000a78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000a7c:	4b1f      	ldr	r3, [pc, #124]	; (8000afc <main+0x84>)
 8000a7e:	695b      	ldr	r3, [r3, #20]
 8000a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d11b      	bne.n	8000ac0 <main+0x48>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000a88:	f3bf 8f4f 	dsb	sy
}
 8000a8c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000a8e:	f3bf 8f6f 	isb	sy
}
 8000a92:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000a94:	4b19      	ldr	r3, [pc, #100]	; (8000afc <main+0x84>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000a9c:	f3bf 8f4f 	dsb	sy
}
 8000aa0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000aa2:	f3bf 8f6f 	isb	sy
}
 8000aa6:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000aa8:	4b14      	ldr	r3, [pc, #80]	; (8000afc <main+0x84>)
 8000aaa:	695b      	ldr	r3, [r3, #20]
 8000aac:	4a13      	ldr	r2, [pc, #76]	; (8000afc <main+0x84>)
 8000aae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ab2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000ab4:	f3bf 8f4f 	dsb	sy
}
 8000ab8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000aba:	f3bf 8f6f 	isb	sy
}
 8000abe:	e000      	b.n	8000ac2 <main+0x4a>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000ac0:	bf00      	nop
  SCB_EnableICache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ac2:	f000 fb71 	bl	80011a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ac6:	f000 f81d 	bl	8000b04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aca:	f7ff fe1f 	bl	800070c <MX_GPIO_Init>
  MX_DMA_Init();
 8000ace:	f7ff fdf5 	bl	80006bc <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000ad2:	f00d ff9d 	bl	800ea10 <MX_USB_DEVICE_Init>
  MX_DCMI_Init();
 8000ad6:	f7ff fc97 	bl	8000408 <MX_DCMI_Init>
  MX_I2C1_Init();
 8000ada:	f7ff ff23 	bl	8000924 <MX_I2C1_Init>
  MX_SPI2_Init();
 8000ade:	f000 f89b 	bl	8000c18 <MX_SPI2_Init>
  MX_CRC_Init();
 8000ae2:	f7ff fc4d 	bl	8000380 <MX_CRC_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  usb_printf("openmv4 plus board diy\r\n");
 8000ae6:	4806      	ldr	r0, [pc, #24]	; (8000b00 <main+0x88>)
 8000ae8:	f010 f8d8 	bl	8010c9c <usb_printf>
  lcd_init();
 8000aec:	f00d fc44 	bl	800e378 <lcd_init>
  camera_RGB565_init();
 8000af0:	f00e fcce 	bl	800f490 <camera_RGB565_init>
//	  usb_printf("openmv4 plus board diy\r\n");
//	  HAL_Delay(1000);
//	  HAL_GPIO_TogglePin(LED_R_GPIO_Port,LED_R_Pin);
//	  HAL_GPIO_TogglePin(LED_G_GPIO_Port,LED_G_Pin);
//	  HAL_GPIO_TogglePin(LED_B_GPIO_Port,LED_B_Pin);
	  TFT_LCD_RGB565_run();
 8000af4:	f00e fd98 	bl	800f628 <TFT_LCD_RGB565_run>
 8000af8:	e7fc      	b.n	8000af4 <main+0x7c>
 8000afa:	bf00      	nop
 8000afc:	e000ed00 	.word	0xe000ed00
 8000b00:	08011d34 	.word	0x08011d34

08000b04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b09c      	sub	sp, #112	; 0x70
 8000b08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b0a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b0e:	224c      	movs	r2, #76	; 0x4c
 8000b10:	2100      	movs	r1, #0
 8000b12:	4618      	mov	r0, r3
 8000b14:	f010 fb06 	bl	8011124 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b18:	1d3b      	adds	r3, r7, #4
 8000b1a:	2220      	movs	r2, #32
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	4618      	mov	r0, r3
 8000b20:	f010 fb00 	bl	8011124 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000b24:	2002      	movs	r0, #2
 8000b26:	f006 fec3 	bl	80078b0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	603b      	str	r3, [r7, #0]
 8000b2e:	4b35      	ldr	r3, [pc, #212]	; (8000c04 <SystemClock_Config+0x100>)
 8000b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b32:	4a34      	ldr	r2, [pc, #208]	; (8000c04 <SystemClock_Config+0x100>)
 8000b34:	f023 0301 	bic.w	r3, r3, #1
 8000b38:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000b3a:	4b32      	ldr	r3, [pc, #200]	; (8000c04 <SystemClock_Config+0x100>)
 8000b3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	603b      	str	r3, [r7, #0]
 8000b44:	4b30      	ldr	r3, [pc, #192]	; (8000c08 <SystemClock_Config+0x104>)
 8000b46:	699b      	ldr	r3, [r3, #24]
 8000b48:	4a2f      	ldr	r2, [pc, #188]	; (8000c08 <SystemClock_Config+0x104>)
 8000b4a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b4e:	6193      	str	r3, [r2, #24]
 8000b50:	4b2d      	ldr	r3, [pc, #180]	; (8000c08 <SystemClock_Config+0x104>)
 8000b52:	699b      	ldr	r3, [r3, #24]
 8000b54:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b58:	603b      	str	r3, [r7, #0]
 8000b5a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000b5c:	bf00      	nop
 8000b5e:	4b2a      	ldr	r3, [pc, #168]	; (8000c08 <SystemClock_Config+0x104>)
 8000b60:	699b      	ldr	r3, [r3, #24]
 8000b62:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000b66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000b6a:	d1f8      	bne.n	8000b5e <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000b6c:	2321      	movs	r3, #33	; 0x21
 8000b6e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b74:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000b76:	2301      	movs	r3, #1
 8000b78:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8000b82:	2303      	movs	r3, #3
 8000b84:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 200;
 8000b86:	23c8      	movs	r3, #200	; 0xc8
 8000b88:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000b8e:	2308      	movs	r3, #8
 8000b90:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b92:	2302      	movs	r3, #2
 8000b94:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8000b96:	2308      	movs	r3, #8
 8000b98:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f006 fecc 	bl	8007944 <HAL_RCC_OscConfig>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000bb2:	f000 f82b 	bl	8000c0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb6:	233f      	movs	r3, #63	; 0x3f
 8000bb8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bba:	2303      	movs	r3, #3
 8000bbc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000bc2:	2308      	movs	r3, #8
 8000bc4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000bc6:	2340      	movs	r3, #64	; 0x40
 8000bc8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000bca:	2340      	movs	r3, #64	; 0x40
 8000bcc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000bce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000bd2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000bd4:	2340      	movs	r3, #64	; 0x40
 8000bd6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bd8:	1d3b      	adds	r3, r7, #4
 8000bda:	2102      	movs	r1, #2
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f007 fb0b 	bl	80081f8 <HAL_RCC_ClockConfig>
 8000be2:	4603      	mov	r3, r0
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d001      	beq.n	8000bec <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000be8:	f000 f810 	bl	8000c0c <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI48, RCC_MCODIV_1);
 8000bec:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000bf0:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8000bf4:	2000      	movs	r0, #0
 8000bf6:	f007 fcb5 	bl	8008564 <HAL_RCC_MCOConfig>
}
 8000bfa:	bf00      	nop
 8000bfc:	3770      	adds	r7, #112	; 0x70
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	58000400 	.word	0x58000400
 8000c08:	58024800 	.word	0x58024800

08000c0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000c10:	b672      	cpsid	i
}
 8000c12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <Error_Handler+0x8>
	...

08000c18 <MX_SPI2_Init>:
SPI_HandleTypeDef hspi2;
DMA_HandleTypeDef hdma_spi2_tx;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8000c1c:	4b28      	ldr	r3, [pc, #160]	; (8000cc0 <MX_SPI2_Init+0xa8>)
 8000c1e:	4a29      	ldr	r2, [pc, #164]	; (8000cc4 <MX_SPI2_Init+0xac>)
 8000c20:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000c22:	4b27      	ldr	r3, [pc, #156]	; (8000cc0 <MX_SPI2_Init+0xa8>)
 8000c24:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8000c28:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES_TXONLY;
 8000c2a:	4b25      	ldr	r3, [pc, #148]	; (8000cc0 <MX_SPI2_Init+0xa8>)
 8000c2c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c30:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c32:	4b23      	ldr	r3, [pc, #140]	; (8000cc0 <MX_SPI2_Init+0xa8>)
 8000c34:	2207      	movs	r2, #7
 8000c36:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c38:	4b21      	ldr	r3, [pc, #132]	; (8000cc0 <MX_SPI2_Init+0xa8>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c3e:	4b20      	ldr	r3, [pc, #128]	; (8000cc0 <MX_SPI2_Init+0xa8>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000c44:	4b1e      	ldr	r3, [pc, #120]	; (8000cc0 <MX_SPI2_Init+0xa8>)
 8000c46:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000c4a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000c4c:	4b1c      	ldr	r3, [pc, #112]	; (8000cc0 <MX_SPI2_Init+0xa8>)
 8000c4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000c52:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c54:	4b1a      	ldr	r3, [pc, #104]	; (8000cc0 <MX_SPI2_Init+0xa8>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c5a:	4b19      	ldr	r3, [pc, #100]	; (8000cc0 <MX_SPI2_Init+0xa8>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c60:	4b17      	ldr	r3, [pc, #92]	; (8000cc0 <MX_SPI2_Init+0xa8>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000c66:	4b16      	ldr	r3, [pc, #88]	; (8000cc0 <MX_SPI2_Init+0xa8>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c6c:	4b14      	ldr	r3, [pc, #80]	; (8000cc0 <MX_SPI2_Init+0xa8>)
 8000c6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c72:	635a      	str	r2, [r3, #52]	; 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c74:	4b12      	ldr	r3, [pc, #72]	; (8000cc0 <MX_SPI2_Init+0xa8>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	639a      	str	r2, [r3, #56]	; 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c7a:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <MX_SPI2_Init+0xa8>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c80:	4b0f      	ldr	r3, [pc, #60]	; (8000cc0 <MX_SPI2_Init+0xa8>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	641a      	str	r2, [r3, #64]	; 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c86:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <MX_SPI2_Init+0xa8>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <MX_SPI2_Init+0xa8>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	649a      	str	r2, [r3, #72]	; 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000c92:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <MX_SPI2_Init+0xa8>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c98:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <MX_SPI2_Init+0xa8>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c9e:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <MX_SPI2_Init+0xa8>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000ca4:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <MX_SPI2_Init+0xa8>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	659a      	str	r2, [r3, #88]	; 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000caa:	4805      	ldr	r0, [pc, #20]	; (8000cc0 <MX_SPI2_Init+0xa8>)
 8000cac:	f009 f9dc 	bl	800a068 <HAL_SPI_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_SPI2_Init+0xa2>
  {
    Error_Handler();
 8000cb6:	f7ff ffa9 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	2400a8c4 	.word	0x2400a8c4
 8000cc4:	40003800 	.word	0x40003800

08000cc8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b0ba      	sub	sp, #232	; 0xe8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ce0:	f107 0310 	add.w	r3, r7, #16
 8000ce4:	22c0      	movs	r2, #192	; 0xc0
 8000ce6:	2100      	movs	r1, #0
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f010 fa1b 	bl	8011124 <memset>
  if(spiHandle->Instance==SPI2)
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4a42      	ldr	r2, [pc, #264]	; (8000dfc <HAL_SPI_MspInit+0x134>)
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	d17c      	bne.n	8000df2 <HAL_SPI_MspInit+0x12a>

  /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI2;
 8000cf8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cfc:	f04f 0300 	mov.w	r3, #0
 8000d00:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL;
 8000d04:	2300      	movs	r3, #0
 8000d06:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d08:	f107 0310 	add.w	r3, r7, #16
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	f007 fe3d 	bl	800898c <HAL_RCCEx_PeriphCLKConfig>
 8000d12:	4603      	mov	r3, r0
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d001      	beq.n	8000d1c <HAL_SPI_MspInit+0x54>
    {
      Error_Handler();
 8000d18:	f7ff ff78 	bl	8000c0c <Error_Handler>
    }

    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000d1c:	4b38      	ldr	r3, [pc, #224]	; (8000e00 <HAL_SPI_MspInit+0x138>)
 8000d1e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d22:	4a37      	ldr	r2, [pc, #220]	; (8000e00 <HAL_SPI_MspInit+0x138>)
 8000d24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d28:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d2c:	4b34      	ldr	r3, [pc, #208]	; (8000e00 <HAL_SPI_MspInit+0x138>)
 8000d2e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d36:	60fb      	str	r3, [r7, #12]
 8000d38:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3a:	4b31      	ldr	r3, [pc, #196]	; (8000e00 <HAL_SPI_MspInit+0x138>)
 8000d3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d40:	4a2f      	ldr	r2, [pc, #188]	; (8000e00 <HAL_SPI_MspInit+0x138>)
 8000d42:	f043 0302 	orr.w	r3, r3, #2
 8000d46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d4a:	4b2d      	ldr	r3, [pc, #180]	; (8000e00 <HAL_SPI_MspInit+0x138>)
 8000d4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d50:	f003 0302 	and.w	r3, r3, #2
 8000d54:	60bb      	str	r3, [r7, #8]
 8000d56:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000d58:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000d5c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d60:	2302      	movs	r3, #2
 8000d62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d72:	2305      	movs	r3, #5
 8000d74:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d78:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4821      	ldr	r0, [pc, #132]	; (8000e04 <HAL_SPI_MspInit+0x13c>)
 8000d80:	f004 fb06 	bl	8005390 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream5;
 8000d84:	4b20      	ldr	r3, [pc, #128]	; (8000e08 <HAL_SPI_MspInit+0x140>)
 8000d86:	4a21      	ldr	r2, [pc, #132]	; (8000e0c <HAL_SPI_MspInit+0x144>)
 8000d88:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_SPI2_TX;
 8000d8a:	4b1f      	ldr	r3, [pc, #124]	; (8000e08 <HAL_SPI_MspInit+0x140>)
 8000d8c:	2228      	movs	r2, #40	; 0x28
 8000d8e:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d90:	4b1d      	ldr	r3, [pc, #116]	; (8000e08 <HAL_SPI_MspInit+0x140>)
 8000d92:	2240      	movs	r2, #64	; 0x40
 8000d94:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d96:	4b1c      	ldr	r3, [pc, #112]	; (8000e08 <HAL_SPI_MspInit+0x140>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d9c:	4b1a      	ldr	r3, [pc, #104]	; (8000e08 <HAL_SPI_MspInit+0x140>)
 8000d9e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000da2:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000da4:	4b18      	ldr	r3, [pc, #96]	; (8000e08 <HAL_SPI_MspInit+0x140>)
 8000da6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000daa:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000dac:	4b16      	ldr	r3, [pc, #88]	; (8000e08 <HAL_SPI_MspInit+0x140>)
 8000dae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000db2:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000db4:	4b14      	ldr	r3, [pc, #80]	; (8000e08 <HAL_SPI_MspInit+0x140>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000dba:	4b13      	ldr	r3, [pc, #76]	; (8000e08 <HAL_SPI_MspInit+0x140>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000dc0:	4b11      	ldr	r3, [pc, #68]	; (8000e08 <HAL_SPI_MspInit+0x140>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000dc6:	4810      	ldr	r0, [pc, #64]	; (8000e08 <HAL_SPI_MspInit+0x140>)
 8000dc8:	f000 fff6 	bl	8001db8 <HAL_DMA_Init>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <HAL_SPI_MspInit+0x10e>
    {
      Error_Handler();
 8000dd2:	f7ff ff1b 	bl	8000c0c <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi2_tx);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4a0b      	ldr	r2, [pc, #44]	; (8000e08 <HAL_SPI_MspInit+0x140>)
 8000dda:	679a      	str	r2, [r3, #120]	; 0x78
 8000ddc:	4a0a      	ldr	r2, [pc, #40]	; (8000e08 <HAL_SPI_MspInit+0x140>)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 2, 0);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2102      	movs	r1, #2
 8000de6:	2024      	movs	r0, #36	; 0x24
 8000de8:	f000 fb7b 	bl	80014e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000dec:	2024      	movs	r0, #36	; 0x24
 8000dee:	f000 fb92 	bl	8001516 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8000df2:	bf00      	nop
 8000df4:	37e8      	adds	r7, #232	; 0xe8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	40003800 	.word	0x40003800
 8000e00:	58024400 	.word	0x58024400
 8000e04:	58020400 	.word	0x58020400
 8000e08:	2400a94c 	.word	0x2400a94c
 8000e0c:	40020088 	.word	0x40020088

08000e10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e16:	4b0a      	ldr	r3, [pc, #40]	; (8000e40 <HAL_MspInit+0x30>)
 8000e18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e1c:	4a08      	ldr	r2, [pc, #32]	; (8000e40 <HAL_MspInit+0x30>)
 8000e1e:	f043 0302 	orr.w	r3, r3, #2
 8000e22:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e26:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <HAL_MspInit+0x30>)
 8000e28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e2c:	f003 0302 	and.w	r3, r3, #2
 8000e30:	607b      	str	r3, [r7, #4]
 8000e32:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e34:	bf00      	nop
 8000e36:	370c      	adds	r7, #12
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3e:	4770      	bx	lr
 8000e40:	58024400 	.word	0x58024400

08000e44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e48:	e7fe      	b.n	8000e48 <NMI_Handler+0x4>

08000e4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e4a:	b480      	push	{r7}
 8000e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e4e:	e7fe      	b.n	8000e4e <HardFault_Handler+0x4>

08000e50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e54:	e7fe      	b.n	8000e54 <MemManage_Handler+0x4>

08000e56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e56:	b480      	push	{r7}
 8000e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e5a:	e7fe      	b.n	8000e5a <BusFault_Handler+0x4>

08000e5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e60:	e7fe      	b.n	8000e60 <UsageFault_Handler+0x4>

08000e62 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e62:	b480      	push	{r7}
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e74:	bf00      	nop
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr

08000e7e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e82:	bf00      	nop
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e90:	f000 f9fc 	bl	800128c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e94:	bf00      	nop
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8000e9c:	4802      	ldr	r0, [pc, #8]	; (8000ea8 <DMA1_Stream1_IRQHandler+0x10>)
 8000e9e:	f002 fab5 	bl	800340c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8000ea2:	bf00      	nop
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	2400a7f8 	.word	0x2400a7f8

08000eac <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000eb0:	4802      	ldr	r0, [pc, #8]	; (8000ebc <DMA1_Stream5_IRQHandler+0x10>)
 8000eb2:	f002 faab 	bl	800340c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	2400a94c 	.word	0x2400a94c

08000ec0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000ec4:	4802      	ldr	r0, [pc, #8]	; (8000ed0 <SPI2_IRQHandler+0x10>)
 8000ec6:	f009 fbef 	bl	800a6a8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	2400a8c4 	.word	0x2400a8c4

08000ed4 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8000ed8:	4802      	ldr	r0, [pc, #8]	; (8000ee4 <DCMI_IRQHandler+0x10>)
 8000eda:	f000 fe1d 	bl	8001b18 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8000ede:	bf00      	nop
 8000ee0:	bd80      	pop	{r7, pc}
 8000ee2:	bf00      	nop
 8000ee4:	2400a7a8 	.word	0x2400a7a8

08000ee8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000eec:	4802      	ldr	r0, [pc, #8]	; (8000ef8 <OTG_FS_IRQHandler+0x10>)
 8000eee:	f005 fb7f 	bl	80065f0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	2400beac 	.word	0x2400beac

08000efc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b086      	sub	sp, #24
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f08:	2300      	movs	r3, #0
 8000f0a:	617b      	str	r3, [r7, #20]
 8000f0c:	e00a      	b.n	8000f24 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f0e:	f3af 8000 	nop.w
 8000f12:	4601      	mov	r1, r0
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	1c5a      	adds	r2, r3, #1
 8000f18:	60ba      	str	r2, [r7, #8]
 8000f1a:	b2ca      	uxtb	r2, r1
 8000f1c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	3301      	adds	r3, #1
 8000f22:	617b      	str	r3, [r7, #20]
 8000f24:	697a      	ldr	r2, [r7, #20]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	dbf0      	blt.n	8000f0e <_read+0x12>
  }

  return len;
 8000f2c:	687b      	ldr	r3, [r7, #4]
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3718      	adds	r7, #24
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}

08000f36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f36:	b580      	push	{r7, lr}
 8000f38:	b086      	sub	sp, #24
 8000f3a:	af00      	add	r7, sp, #0
 8000f3c:	60f8      	str	r0, [r7, #12]
 8000f3e:	60b9      	str	r1, [r7, #8]
 8000f40:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f42:	2300      	movs	r3, #0
 8000f44:	617b      	str	r3, [r7, #20]
 8000f46:	e009      	b.n	8000f5c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000f48:	68bb      	ldr	r3, [r7, #8]
 8000f4a:	1c5a      	adds	r2, r3, #1
 8000f4c:	60ba      	str	r2, [r7, #8]
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	4618      	mov	r0, r3
 8000f52:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f56:	697b      	ldr	r3, [r7, #20]
 8000f58:	3301      	adds	r3, #1
 8000f5a:	617b      	str	r3, [r7, #20]
 8000f5c:	697a      	ldr	r2, [r7, #20]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	dbf1      	blt.n	8000f48 <_write+0x12>
  }
  return len;
 8000f64:	687b      	ldr	r3, [r7, #4]
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3718      	adds	r7, #24
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}

08000f6e <_close>:

int _close(int file)
{
 8000f6e:	b480      	push	{r7}
 8000f70:	b083      	sub	sp, #12
 8000f72:	af00      	add	r7, sp, #0
 8000f74:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000f76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	370c      	adds	r7, #12
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f86:	b480      	push	{r7}
 8000f88:	b083      	sub	sp, #12
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
 8000f8e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f90:	683b      	ldr	r3, [r7, #0]
 8000f92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f96:	605a      	str	r2, [r3, #4]
  return 0;
 8000f98:	2300      	movs	r3, #0
}
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	370c      	adds	r7, #12
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <_isatty>:

int _isatty(int file)
{
 8000fa6:	b480      	push	{r7}
 8000fa8:	b083      	sub	sp, #12
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000fae:	2301      	movs	r3, #1
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	370c      	adds	r7, #12
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fba:	4770      	bx	lr

08000fbc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	60f8      	str	r0, [r7, #12]
 8000fc4:	60b9      	str	r1, [r7, #8]
 8000fc6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000fc8:	2300      	movs	r3, #0
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	3714      	adds	r7, #20
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
	...

08000fd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fe0:	4a14      	ldr	r2, [pc, #80]	; (8001034 <_sbrk+0x5c>)
 8000fe2:	4b15      	ldr	r3, [pc, #84]	; (8001038 <_sbrk+0x60>)
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fe8:	697b      	ldr	r3, [r7, #20]
 8000fea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fec:	4b13      	ldr	r3, [pc, #76]	; (800103c <_sbrk+0x64>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d102      	bne.n	8000ffa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ff4:	4b11      	ldr	r3, [pc, #68]	; (800103c <_sbrk+0x64>)
 8000ff6:	4a12      	ldr	r2, [pc, #72]	; (8001040 <_sbrk+0x68>)
 8000ff8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ffa:	4b10      	ldr	r3, [pc, #64]	; (800103c <_sbrk+0x64>)
 8000ffc:	681a      	ldr	r2, [r3, #0]
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	4413      	add	r3, r2
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	429a      	cmp	r2, r3
 8001006:	d207      	bcs.n	8001018 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001008:	f010 f8da 	bl	80111c0 <__errno>
 800100c:	4603      	mov	r3, r0
 800100e:	220c      	movs	r2, #12
 8001010:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001012:	f04f 33ff 	mov.w	r3, #4294967295
 8001016:	e009      	b.n	800102c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001018:	4b08      	ldr	r3, [pc, #32]	; (800103c <_sbrk+0x64>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800101e:	4b07      	ldr	r3, [pc, #28]	; (800103c <_sbrk+0x64>)
 8001020:	681a      	ldr	r2, [r3, #0]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4413      	add	r3, r2
 8001026:	4a05      	ldr	r2, [pc, #20]	; (800103c <_sbrk+0x64>)
 8001028:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800102a:	68fb      	ldr	r3, [r7, #12]
}
 800102c:	4618      	mov	r0, r3
 800102e:	3718      	adds	r7, #24
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	24080000 	.word	0x24080000
 8001038:	00004000 	.word	0x00004000
 800103c:	2400a9c4 	.word	0x2400a9c4
 8001040:	2400c738 	.word	0x2400c738

08001044 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001048:	4b37      	ldr	r3, [pc, #220]	; (8001128 <SystemInit+0xe4>)
 800104a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800104e:	4a36      	ldr	r2, [pc, #216]	; (8001128 <SystemInit+0xe4>)
 8001050:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001054:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001058:	4b34      	ldr	r3, [pc, #208]	; (800112c <SystemInit+0xe8>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	f003 030f 	and.w	r3, r3, #15
 8001060:	2b06      	cmp	r3, #6
 8001062:	d807      	bhi.n	8001074 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001064:	4b31      	ldr	r3, [pc, #196]	; (800112c <SystemInit+0xe8>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f023 030f 	bic.w	r3, r3, #15
 800106c:	4a2f      	ldr	r2, [pc, #188]	; (800112c <SystemInit+0xe8>)
 800106e:	f043 0307 	orr.w	r3, r3, #7
 8001072:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001074:	4b2e      	ldr	r3, [pc, #184]	; (8001130 <SystemInit+0xec>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a2d      	ldr	r2, [pc, #180]	; (8001130 <SystemInit+0xec>)
 800107a:	f043 0301 	orr.w	r3, r3, #1
 800107e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001080:	4b2b      	ldr	r3, [pc, #172]	; (8001130 <SystemInit+0xec>)
 8001082:	2200      	movs	r2, #0
 8001084:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001086:	4b2a      	ldr	r3, [pc, #168]	; (8001130 <SystemInit+0xec>)
 8001088:	681a      	ldr	r2, [r3, #0]
 800108a:	4929      	ldr	r1, [pc, #164]	; (8001130 <SystemInit+0xec>)
 800108c:	4b29      	ldr	r3, [pc, #164]	; (8001134 <SystemInit+0xf0>)
 800108e:	4013      	ands	r3, r2
 8001090:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001092:	4b26      	ldr	r3, [pc, #152]	; (800112c <SystemInit+0xe8>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	f003 0308 	and.w	r3, r3, #8
 800109a:	2b00      	cmp	r3, #0
 800109c:	d007      	beq.n	80010ae <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800109e:	4b23      	ldr	r3, [pc, #140]	; (800112c <SystemInit+0xe8>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f023 030f 	bic.w	r3, r3, #15
 80010a6:	4a21      	ldr	r2, [pc, #132]	; (800112c <SystemInit+0xe8>)
 80010a8:	f043 0307 	orr.w	r3, r3, #7
 80010ac:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80010ae:	4b20      	ldr	r3, [pc, #128]	; (8001130 <SystemInit+0xec>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80010b4:	4b1e      	ldr	r3, [pc, #120]	; (8001130 <SystemInit+0xec>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80010ba:	4b1d      	ldr	r3, [pc, #116]	; (8001130 <SystemInit+0xec>)
 80010bc:	2200      	movs	r2, #0
 80010be:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80010c0:	4b1b      	ldr	r3, [pc, #108]	; (8001130 <SystemInit+0xec>)
 80010c2:	4a1d      	ldr	r2, [pc, #116]	; (8001138 <SystemInit+0xf4>)
 80010c4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80010c6:	4b1a      	ldr	r3, [pc, #104]	; (8001130 <SystemInit+0xec>)
 80010c8:	4a1c      	ldr	r2, [pc, #112]	; (800113c <SystemInit+0xf8>)
 80010ca:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80010cc:	4b18      	ldr	r3, [pc, #96]	; (8001130 <SystemInit+0xec>)
 80010ce:	4a1c      	ldr	r2, [pc, #112]	; (8001140 <SystemInit+0xfc>)
 80010d0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80010d2:	4b17      	ldr	r3, [pc, #92]	; (8001130 <SystemInit+0xec>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80010d8:	4b15      	ldr	r3, [pc, #84]	; (8001130 <SystemInit+0xec>)
 80010da:	4a19      	ldr	r2, [pc, #100]	; (8001140 <SystemInit+0xfc>)
 80010dc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80010de:	4b14      	ldr	r3, [pc, #80]	; (8001130 <SystemInit+0xec>)
 80010e0:	2200      	movs	r2, #0
 80010e2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80010e4:	4b12      	ldr	r3, [pc, #72]	; (8001130 <SystemInit+0xec>)
 80010e6:	4a16      	ldr	r2, [pc, #88]	; (8001140 <SystemInit+0xfc>)
 80010e8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80010ea:	4b11      	ldr	r3, [pc, #68]	; (8001130 <SystemInit+0xec>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010f0:	4b0f      	ldr	r3, [pc, #60]	; (8001130 <SystemInit+0xec>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	4a0e      	ldr	r2, [pc, #56]	; (8001130 <SystemInit+0xec>)
 80010f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010fa:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80010fc:	4b0c      	ldr	r3, [pc, #48]	; (8001130 <SystemInit+0xec>)
 80010fe:	2200      	movs	r2, #0
 8001100:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8001102:	4b10      	ldr	r3, [pc, #64]	; (8001144 <SystemInit+0x100>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	4b10      	ldr	r3, [pc, #64]	; (8001148 <SystemInit+0x104>)
 8001108:	4013      	ands	r3, r2
 800110a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800110e:	d202      	bcs.n	8001116 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001110:	4b0e      	ldr	r3, [pc, #56]	; (800114c <SystemInit+0x108>)
 8001112:	2201      	movs	r2, #1
 8001114:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001116:	4b0e      	ldr	r3, [pc, #56]	; (8001150 <SystemInit+0x10c>)
 8001118:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800111c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800111e:	bf00      	nop
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	e000ed00 	.word	0xe000ed00
 800112c:	52002000 	.word	0x52002000
 8001130:	58024400 	.word	0x58024400
 8001134:	eaf6ed7f 	.word	0xeaf6ed7f
 8001138:	02020200 	.word	0x02020200
 800113c:	01ff0000 	.word	0x01ff0000
 8001140:	01010280 	.word	0x01010280
 8001144:	5c001000 	.word	0x5c001000
 8001148:	ffff0000 	.word	0xffff0000
 800114c:	51008108 	.word	0x51008108
 8001150:	52004000 	.word	0x52004000

08001154 <Reset_Handler>:
 8001154:	f8df d034 	ldr.w	sp, [pc, #52]	; 800118c <LoopFillZerobss+0xe>
 8001158:	f7ff ff74 	bl	8001044 <SystemInit>
 800115c:	480c      	ldr	r0, [pc, #48]	; (8001190 <LoopFillZerobss+0x12>)
 800115e:	490d      	ldr	r1, [pc, #52]	; (8001194 <LoopFillZerobss+0x16>)
 8001160:	4a0d      	ldr	r2, [pc, #52]	; (8001198 <LoopFillZerobss+0x1a>)
 8001162:	2300      	movs	r3, #0
 8001164:	e002      	b.n	800116c <LoopCopyDataInit>

08001166 <CopyDataInit>:
 8001166:	58d4      	ldr	r4, [r2, r3]
 8001168:	50c4      	str	r4, [r0, r3]
 800116a:	3304      	adds	r3, #4

0800116c <LoopCopyDataInit>:
 800116c:	18c4      	adds	r4, r0, r3
 800116e:	428c      	cmp	r4, r1
 8001170:	d3f9      	bcc.n	8001166 <CopyDataInit>
 8001172:	4a0a      	ldr	r2, [pc, #40]	; (800119c <LoopFillZerobss+0x1e>)
 8001174:	4c0a      	ldr	r4, [pc, #40]	; (80011a0 <LoopFillZerobss+0x22>)
 8001176:	2300      	movs	r3, #0
 8001178:	e001      	b.n	800117e <LoopFillZerobss>

0800117a <FillZerobss>:
 800117a:	6013      	str	r3, [r2, #0]
 800117c:	3204      	adds	r2, #4

0800117e <LoopFillZerobss>:
 800117e:	42a2      	cmp	r2, r4
 8001180:	d3fb      	bcc.n	800117a <FillZerobss>
 8001182:	f010 f823 	bl	80111cc <__libc_init_array>
 8001186:	f7ff fc77 	bl	8000a78 <main>
 800118a:	4770      	bx	lr
 800118c:	24080000 	.word	0x24080000
 8001190:	24000000 	.word	0x24000000
 8001194:	24000768 	.word	0x24000768
 8001198:	08011e28 	.word	0x08011e28
 800119c:	2400a768 	.word	0x2400a768
 80011a0:	2400c734 	.word	0x2400c734

080011a4 <ADC3_IRQHandler>:
 80011a4:	e7fe      	b.n	80011a4 <ADC3_IRQHandler>
	...

080011a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ae:	2003      	movs	r0, #3
 80011b0:	f000 f98c 	bl	80014cc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80011b4:	f007 fa40 	bl	8008638 <HAL_RCC_GetSysClockFreq>
 80011b8:	4602      	mov	r2, r0
 80011ba:	4b15      	ldr	r3, [pc, #84]	; (8001210 <HAL_Init+0x68>)
 80011bc:	699b      	ldr	r3, [r3, #24]
 80011be:	0a1b      	lsrs	r3, r3, #8
 80011c0:	f003 030f 	and.w	r3, r3, #15
 80011c4:	4913      	ldr	r1, [pc, #76]	; (8001214 <HAL_Init+0x6c>)
 80011c6:	5ccb      	ldrb	r3, [r1, r3]
 80011c8:	f003 031f 	and.w	r3, r3, #31
 80011cc:	fa22 f303 	lsr.w	r3, r2, r3
 80011d0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80011d2:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <HAL_Init+0x68>)
 80011d4:	699b      	ldr	r3, [r3, #24]
 80011d6:	f003 030f 	and.w	r3, r3, #15
 80011da:	4a0e      	ldr	r2, [pc, #56]	; (8001214 <HAL_Init+0x6c>)
 80011dc:	5cd3      	ldrb	r3, [r2, r3]
 80011de:	f003 031f 	and.w	r3, r3, #31
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	fa22 f303 	lsr.w	r3, r2, r3
 80011e8:	4a0b      	ldr	r2, [pc, #44]	; (8001218 <HAL_Init+0x70>)
 80011ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80011ec:	4a0b      	ldr	r2, [pc, #44]	; (800121c <HAL_Init+0x74>)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011f2:	200f      	movs	r0, #15
 80011f4:	f000 f814 	bl	8001220 <HAL_InitTick>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e002      	b.n	8001208 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001202:	f7ff fe05 	bl	8000e10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001206:	2300      	movs	r3, #0
}
 8001208:	4618      	mov	r0, r3
 800120a:	3708      	adds	r7, #8
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	58024400 	.word	0x58024400
 8001214:	08011dd4 	.word	0x08011dd4
 8001218:	24000004 	.word	0x24000004
 800121c:	24000000 	.word	0x24000000

08001220 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001228:	4b15      	ldr	r3, [pc, #84]	; (8001280 <HAL_InitTick+0x60>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2b00      	cmp	r3, #0
 800122e:	d101      	bne.n	8001234 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	e021      	b.n	8001278 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001234:	4b13      	ldr	r3, [pc, #76]	; (8001284 <HAL_InitTick+0x64>)
 8001236:	681a      	ldr	r2, [r3, #0]
 8001238:	4b11      	ldr	r3, [pc, #68]	; (8001280 <HAL_InitTick+0x60>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	4619      	mov	r1, r3
 800123e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001242:	fbb3 f3f1 	udiv	r3, r3, r1
 8001246:	fbb2 f3f3 	udiv	r3, r2, r3
 800124a:	4618      	mov	r0, r3
 800124c:	f000 f971 	bl	8001532 <HAL_SYSTICK_Config>
 8001250:	4603      	mov	r3, r0
 8001252:	2b00      	cmp	r3, #0
 8001254:	d001      	beq.n	800125a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e00e      	b.n	8001278 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	2b0f      	cmp	r3, #15
 800125e:	d80a      	bhi.n	8001276 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001260:	2200      	movs	r2, #0
 8001262:	6879      	ldr	r1, [r7, #4]
 8001264:	f04f 30ff 	mov.w	r0, #4294967295
 8001268:	f000 f93b 	bl	80014e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800126c:	4a06      	ldr	r2, [pc, #24]	; (8001288 <HAL_InitTick+0x68>)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001272:	2300      	movs	r3, #0
 8001274:	e000      	b.n	8001278 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
}
 8001278:	4618      	mov	r0, r3
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	2400000c 	.word	0x2400000c
 8001284:	24000000 	.word	0x24000000
 8001288:	24000008 	.word	0x24000008

0800128c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001290:	4b06      	ldr	r3, [pc, #24]	; (80012ac <HAL_IncTick+0x20>)
 8001292:	781b      	ldrb	r3, [r3, #0]
 8001294:	461a      	mov	r2, r3
 8001296:	4b06      	ldr	r3, [pc, #24]	; (80012b0 <HAL_IncTick+0x24>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4413      	add	r3, r2
 800129c:	4a04      	ldr	r2, [pc, #16]	; (80012b0 <HAL_IncTick+0x24>)
 800129e:	6013      	str	r3, [r2, #0]
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	2400000c 	.word	0x2400000c
 80012b0:	2400a9c8 	.word	0x2400a9c8

080012b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012b4:	b480      	push	{r7}
 80012b6:	af00      	add	r7, sp, #0
  return uwTick;
 80012b8:	4b03      	ldr	r3, [pc, #12]	; (80012c8 <HAL_GetTick+0x14>)
 80012ba:	681b      	ldr	r3, [r3, #0]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	46bd      	mov	sp, r7
 80012c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop
 80012c8:	2400a9c8 	.word	0x2400a9c8

080012cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b084      	sub	sp, #16
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012d4:	f7ff ffee 	bl	80012b4 <HAL_GetTick>
 80012d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012e4:	d005      	beq.n	80012f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012e6:	4b0a      	ldr	r3, [pc, #40]	; (8001310 <HAL_Delay+0x44>)
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	461a      	mov	r2, r3
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	4413      	add	r3, r2
 80012f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012f2:	bf00      	nop
 80012f4:	f7ff ffde 	bl	80012b4 <HAL_GetTick>
 80012f8:	4602      	mov	r2, r0
 80012fa:	68bb      	ldr	r3, [r7, #8]
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	68fa      	ldr	r2, [r7, #12]
 8001300:	429a      	cmp	r2, r3
 8001302:	d8f7      	bhi.n	80012f4 <HAL_Delay+0x28>
  {
  }
}
 8001304:	bf00      	nop
 8001306:	bf00      	nop
 8001308:	3710      	adds	r7, #16
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	2400000c 	.word	0x2400000c

08001314 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001318:	4b03      	ldr	r3, [pc, #12]	; (8001328 <HAL_GetREVID+0x14>)
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	0c1b      	lsrs	r3, r3, #16
}
 800131e:	4618      	mov	r0, r3
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	5c001000 	.word	0x5c001000

0800132c <__NVIC_SetPriorityGrouping>:
{
 800132c:	b480      	push	{r7}
 800132e:	b085      	sub	sp, #20
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	f003 0307 	and.w	r3, r3, #7
 800133a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800133c:	4b0b      	ldr	r3, [pc, #44]	; (800136c <__NVIC_SetPriorityGrouping+0x40>)
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001342:	68ba      	ldr	r2, [r7, #8]
 8001344:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001348:	4013      	ands	r3, r2
 800134a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001350:	68bb      	ldr	r3, [r7, #8]
 8001352:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001354:	4b06      	ldr	r3, [pc, #24]	; (8001370 <__NVIC_SetPriorityGrouping+0x44>)
 8001356:	4313      	orrs	r3, r2
 8001358:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800135a:	4a04      	ldr	r2, [pc, #16]	; (800136c <__NVIC_SetPriorityGrouping+0x40>)
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	60d3      	str	r3, [r2, #12]
}
 8001360:	bf00      	nop
 8001362:	3714      	adds	r7, #20
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	e000ed00 	.word	0xe000ed00
 8001370:	05fa0000 	.word	0x05fa0000

08001374 <__NVIC_GetPriorityGrouping>:
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001378:	4b04      	ldr	r3, [pc, #16]	; (800138c <__NVIC_GetPriorityGrouping+0x18>)
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	0a1b      	lsrs	r3, r3, #8
 800137e:	f003 0307 	and.w	r3, r3, #7
}
 8001382:	4618      	mov	r0, r3
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr
 800138c:	e000ed00 	.word	0xe000ed00

08001390 <__NVIC_EnableIRQ>:
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800139a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	db0b      	blt.n	80013ba <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013a2:	88fb      	ldrh	r3, [r7, #6]
 80013a4:	f003 021f 	and.w	r2, r3, #31
 80013a8:	4907      	ldr	r1, [pc, #28]	; (80013c8 <__NVIC_EnableIRQ+0x38>)
 80013aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013ae:	095b      	lsrs	r3, r3, #5
 80013b0:	2001      	movs	r0, #1
 80013b2:	fa00 f202 	lsl.w	r2, r0, r2
 80013b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80013ba:	bf00      	nop
 80013bc:	370c      	adds	r7, #12
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	e000e100 	.word	0xe000e100

080013cc <__NVIC_SetPriority>:
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	6039      	str	r1, [r7, #0]
 80013d6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013d8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	db0a      	blt.n	80013f6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	b2da      	uxtb	r2, r3
 80013e4:	490c      	ldr	r1, [pc, #48]	; (8001418 <__NVIC_SetPriority+0x4c>)
 80013e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013ea:	0112      	lsls	r2, r2, #4
 80013ec:	b2d2      	uxtb	r2, r2
 80013ee:	440b      	add	r3, r1
 80013f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80013f4:	e00a      	b.n	800140c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	b2da      	uxtb	r2, r3
 80013fa:	4908      	ldr	r1, [pc, #32]	; (800141c <__NVIC_SetPriority+0x50>)
 80013fc:	88fb      	ldrh	r3, [r7, #6]
 80013fe:	f003 030f 	and.w	r3, r3, #15
 8001402:	3b04      	subs	r3, #4
 8001404:	0112      	lsls	r2, r2, #4
 8001406:	b2d2      	uxtb	r2, r2
 8001408:	440b      	add	r3, r1
 800140a:	761a      	strb	r2, [r3, #24]
}
 800140c:	bf00      	nop
 800140e:	370c      	adds	r7, #12
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	e000e100 	.word	0xe000e100
 800141c:	e000ed00 	.word	0xe000ed00

08001420 <NVIC_EncodePriority>:
{
 8001420:	b480      	push	{r7}
 8001422:	b089      	sub	sp, #36	; 0x24
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001434:	69fb      	ldr	r3, [r7, #28]
 8001436:	f1c3 0307 	rsb	r3, r3, #7
 800143a:	2b04      	cmp	r3, #4
 800143c:	bf28      	it	cs
 800143e:	2304      	movcs	r3, #4
 8001440:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001442:	69fb      	ldr	r3, [r7, #28]
 8001444:	3304      	adds	r3, #4
 8001446:	2b06      	cmp	r3, #6
 8001448:	d902      	bls.n	8001450 <NVIC_EncodePriority+0x30>
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	3b03      	subs	r3, #3
 800144e:	e000      	b.n	8001452 <NVIC_EncodePriority+0x32>
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001454:	f04f 32ff 	mov.w	r2, #4294967295
 8001458:	69bb      	ldr	r3, [r7, #24]
 800145a:	fa02 f303 	lsl.w	r3, r2, r3
 800145e:	43da      	mvns	r2, r3
 8001460:	68bb      	ldr	r3, [r7, #8]
 8001462:	401a      	ands	r2, r3
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001468:	f04f 31ff 	mov.w	r1, #4294967295
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	fa01 f303 	lsl.w	r3, r1, r3
 8001472:	43d9      	mvns	r1, r3
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001478:	4313      	orrs	r3, r2
}
 800147a:	4618      	mov	r0, r3
 800147c:	3724      	adds	r7, #36	; 0x24
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr
	...

08001488 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3b01      	subs	r3, #1
 8001494:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001498:	d301      	bcc.n	800149e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800149a:	2301      	movs	r3, #1
 800149c:	e00f      	b.n	80014be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800149e:	4a0a      	ldr	r2, [pc, #40]	; (80014c8 <SysTick_Config+0x40>)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	3b01      	subs	r3, #1
 80014a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014a6:	210f      	movs	r1, #15
 80014a8:	f04f 30ff 	mov.w	r0, #4294967295
 80014ac:	f7ff ff8e 	bl	80013cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014b0:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <SysTick_Config+0x40>)
 80014b2:	2200      	movs	r2, #0
 80014b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014b6:	4b04      	ldr	r3, [pc, #16]	; (80014c8 <SysTick_Config+0x40>)
 80014b8:	2207      	movs	r2, #7
 80014ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	e000e010 	.word	0xe000e010

080014cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f7ff ff29 	bl	800132c <__NVIC_SetPriorityGrouping>
}
 80014da:	bf00      	nop
 80014dc:	3708      	adds	r7, #8
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014e2:	b580      	push	{r7, lr}
 80014e4:	b086      	sub	sp, #24
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	4603      	mov	r3, r0
 80014ea:	60b9      	str	r1, [r7, #8]
 80014ec:	607a      	str	r2, [r7, #4]
 80014ee:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80014f0:	f7ff ff40 	bl	8001374 <__NVIC_GetPriorityGrouping>
 80014f4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014f6:	687a      	ldr	r2, [r7, #4]
 80014f8:	68b9      	ldr	r1, [r7, #8]
 80014fa:	6978      	ldr	r0, [r7, #20]
 80014fc:	f7ff ff90 	bl	8001420 <NVIC_EncodePriority>
 8001500:	4602      	mov	r2, r0
 8001502:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001506:	4611      	mov	r1, r2
 8001508:	4618      	mov	r0, r3
 800150a:	f7ff ff5f 	bl	80013cc <__NVIC_SetPriority>
}
 800150e:	bf00      	nop
 8001510:	3718      	adds	r7, #24
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}

08001516 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001516:	b580      	push	{r7, lr}
 8001518:	b082      	sub	sp, #8
 800151a:	af00      	add	r7, sp, #0
 800151c:	4603      	mov	r3, r0
 800151e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001520:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001524:	4618      	mov	r0, r3
 8001526:	f7ff ff33 	bl	8001390 <__NVIC_EnableIRQ>
}
 800152a:	bf00      	nop
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}

08001532 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001532:	b580      	push	{r7, lr}
 8001534:	b082      	sub	sp, #8
 8001536:	af00      	add	r7, sp, #0
 8001538:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800153a:	6878      	ldr	r0, [r7, #4]
 800153c:	f7ff ffa4 	bl	8001488 <SysTick_Config>
 8001540:	4603      	mov	r3, r0
}
 8001542:	4618      	mov	r0, r3
 8001544:	3708      	adds	r7, #8
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
	...

0800154c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d101      	bne.n	800155e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e054      	b.n	8001608 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	7f5b      	ldrb	r3, [r3, #29]
 8001562:	b2db      	uxtb	r3, r3
 8001564:	2b00      	cmp	r3, #0
 8001566:	d105      	bne.n	8001574 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2200      	movs	r2, #0
 800156c:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f7fe ff28 	bl	80003c4 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2202      	movs	r2, #2
 8001578:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	791b      	ldrb	r3, [r3, #4]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d10c      	bne.n	800159c <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a22      	ldr	r2, [pc, #136]	; (8001610 <HAL_CRC_Init+0xc4>)
 8001588:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	689a      	ldr	r2, [r3, #8]
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f022 0218 	bic.w	r2, r2, #24
 8001598:	609a      	str	r2, [r3, #8]
 800159a:	e00c      	b.n	80015b6 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	6899      	ldr	r1, [r3, #8]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	68db      	ldr	r3, [r3, #12]
 80015a4:	461a      	mov	r2, r3
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f000 f834 	bl	8001614 <HAL_CRCEx_Polynomial_Set>
 80015ac:	4603      	mov	r3, r0
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e028      	b.n	8001608 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	795b      	ldrb	r3, [r3, #5]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d105      	bne.n	80015ca <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f04f 32ff 	mov.w	r2, #4294967295
 80015c6:	611a      	str	r2, [r3, #16]
 80015c8:	e004      	b.n	80015d4 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	687a      	ldr	r2, [r7, #4]
 80015d0:	6912      	ldr	r2, [r2, #16]
 80015d2:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	689b      	ldr	r3, [r3, #8]
 80015da:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	695a      	ldr	r2, [r3, #20]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	430a      	orrs	r2, r1
 80015e8:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	699a      	ldr	r2, [r3, #24]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	430a      	orrs	r2, r1
 80015fe:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2201      	movs	r2, #1
 8001604:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001606:	2300      	movs	r3, #0
}
 8001608:	4618      	mov	r0, r3
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	04c11db7 	.word	0x04c11db7

08001614 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001614:	b480      	push	{r7}
 8001616:	b087      	sub	sp, #28
 8001618:	af00      	add	r7, sp, #0
 800161a:	60f8      	str	r0, [r7, #12]
 800161c:	60b9      	str	r1, [r7, #8]
 800161e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001620:	2300      	movs	r3, #0
 8001622:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001624:	231f      	movs	r3, #31
 8001626:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */ 
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	2b00      	cmp	r3, #0
 8001630:	d102      	bne.n	8001638 <HAL_CRCEx_Polynomial_Set+0x24>
  {
    status =  HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	75fb      	strb	r3, [r7, #23]
 8001636:	e063      	b.n	8001700 <HAL_CRCEx_Polynomial_Set+0xec>
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001638:	bf00      	nop
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1e5a      	subs	r2, r3, #1
 800163e:	613a      	str	r2, [r7, #16]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d009      	beq.n	8001658 <HAL_CRCEx_Polynomial_Set+0x44>
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	f003 031f 	and.w	r3, r3, #31
 800164a:	68ba      	ldr	r2, [r7, #8]
 800164c:	fa22 f303 	lsr.w	r3, r2, r3
 8001650:	f003 0301 	and.w	r3, r3, #1
 8001654:	2b00      	cmp	r3, #0
 8001656:	d0f0      	beq.n	800163a <HAL_CRCEx_Polynomial_Set+0x26>
    {
    }

    switch (PolyLength)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2b18      	cmp	r3, #24
 800165c:	d846      	bhi.n	80016ec <HAL_CRCEx_Polynomial_Set+0xd8>
 800165e:	a201      	add	r2, pc, #4	; (adr r2, 8001664 <HAL_CRCEx_Polynomial_Set+0x50>)
 8001660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001664:	080016f3 	.word	0x080016f3
 8001668:	080016ed 	.word	0x080016ed
 800166c:	080016ed 	.word	0x080016ed
 8001670:	080016ed 	.word	0x080016ed
 8001674:	080016ed 	.word	0x080016ed
 8001678:	080016ed 	.word	0x080016ed
 800167c:	080016ed 	.word	0x080016ed
 8001680:	080016ed 	.word	0x080016ed
 8001684:	080016e1 	.word	0x080016e1
 8001688:	080016ed 	.word	0x080016ed
 800168c:	080016ed 	.word	0x080016ed
 8001690:	080016ed 	.word	0x080016ed
 8001694:	080016ed 	.word	0x080016ed
 8001698:	080016ed 	.word	0x080016ed
 800169c:	080016ed 	.word	0x080016ed
 80016a0:	080016ed 	.word	0x080016ed
 80016a4:	080016d5 	.word	0x080016d5
 80016a8:	080016ed 	.word	0x080016ed
 80016ac:	080016ed 	.word	0x080016ed
 80016b0:	080016ed 	.word	0x080016ed
 80016b4:	080016ed 	.word	0x080016ed
 80016b8:	080016ed 	.word	0x080016ed
 80016bc:	080016ed 	.word	0x080016ed
 80016c0:	080016ed 	.word	0x080016ed
 80016c4:	080016c9 	.word	0x080016c9
    {
          
      case CRC_POLYLENGTH_7B:
        if (msb >= HAL_CRC_LENGTH_7B)
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	2b06      	cmp	r3, #6
 80016cc:	d913      	bls.n	80016f6 <HAL_CRCEx_Polynomial_Set+0xe2>
        {
          status =   HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80016d2:	e010      	b.n	80016f6 <HAL_CRCEx_Polynomial_Set+0xe2>
      case CRC_POLYLENGTH_8B:
        if (msb >= HAL_CRC_LENGTH_8B)
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	2b07      	cmp	r3, #7
 80016d8:	d90f      	bls.n	80016fa <HAL_CRCEx_Polynomial_Set+0xe6>
        {
          status =   HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80016de:	e00c      	b.n	80016fa <HAL_CRCEx_Polynomial_Set+0xe6>
      case CRC_POLYLENGTH_16B:
        if (msb >= HAL_CRC_LENGTH_16B)
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	2b0f      	cmp	r3, #15
 80016e4:	d90b      	bls.n	80016fe <HAL_CRCEx_Polynomial_Set+0xea>
        {
          status =   HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	75fb      	strb	r3, [r7, #23]
        }
        break;
 80016ea:	e008      	b.n	80016fe <HAL_CRCEx_Polynomial_Set+0xea>
 
      case CRC_POLYLENGTH_32B:
        /* no polynomial definition vs. polynomial length issue possible */
        break;
      default:
        status =  HAL_ERROR;
 80016ec:	2301      	movs	r3, #1
 80016ee:	75fb      	strb	r3, [r7, #23]
        break;
 80016f0:	e006      	b.n	8001700 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80016f2:	bf00      	nop
 80016f4:	e004      	b.n	8001700 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80016f6:	bf00      	nop
 80016f8:	e002      	b.n	8001700 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80016fa:	bf00      	nop
 80016fc:	e000      	b.n	8001700 <HAL_CRCEx_Polynomial_Set+0xec>
        break;
 80016fe:	bf00      	nop
    }
  }
  if (status == HAL_OK)
 8001700:	7dfb      	ldrb	r3, [r7, #23]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d10d      	bne.n	8001722 <HAL_CRCEx_Polynomial_Set+0x10e>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	68ba      	ldr	r2, [r7, #8]
 800170c:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 800170e:	68fb      	ldr	r3, [r7, #12]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f023 0118 	bic.w	r1, r3, #24
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	687a      	ldr	r2, [r7, #4]
 800171e:	430a      	orrs	r2, r1
 8001720:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001722:	7dfb      	ldrb	r3, [r7, #23]
}
 8001724:	4618      	mov	r0, r3
 8001726:	371c      	adds	r7, #28
 8001728:	46bd      	mov	sp, r7
 800172a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172e:	4770      	bx	lr

08001730 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d101      	bne.n	8001742 <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e069      	b.n	8001816 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001748:	b2db      	uxtb	r3, r3
 800174a:	2b00      	cmp	r3, #0
 800174c:	d102      	bne.n	8001754 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800174e:	6878      	ldr	r0, [r7, #4]
 8001750:	f7fe fe8e 	bl	8000470 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	2202      	movs	r2, #2
 8001758:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d002      	beq.n	800176a <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2200      	movs	r2, #0
 8001768:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	6819      	ldr	r1, [r3, #0]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681a      	ldr	r2, [r3, #0]
 8001774:	4b2a      	ldr	r3, [pc, #168]	; (8001820 <HAL_DCMI_Init+0xf0>)
 8001776:	400b      	ands	r3, r1
 8001778:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	6819      	ldr	r1, [r3, #0]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	685a      	ldr	r2, [r3, #4]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	695b      	ldr	r3, [r3, #20]
 8001788:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 800178e:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	691b      	ldr	r3, [r3, #16]
 8001794:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 800179a:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	699b      	ldr	r3, [r3, #24]
 80017a0:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 80017a6:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ac:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 80017b2:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017b8:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 80017be:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	430a      	orrs	r2, r1
 80017c6:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	2b10      	cmp	r3, #16
 80017ce:	d112      	bne.n	80017f6 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	7f1b      	ldrb	r3, [r3, #28]
 80017d4:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	7f5b      	ldrb	r3, [r3, #29]
 80017da:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80017dc:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	7f9b      	ldrb	r3, [r3, #30]
 80017e2:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 80017e4:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	7fdb      	ldrb	r3, [r3, #31]
 80017ec:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 80017f2:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 80017f4:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	68da      	ldr	r2, [r3, #12]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f042 021e 	orr.w	r2, r2, #30
 8001804:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2200      	movs	r2, #0
 800180a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2201      	movs	r2, #1
 8001810:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	ffe0f007 	.word	0xffe0f007

08001824 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b088      	sub	sp, #32
 8001828:	af02      	add	r7, sp, #8
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
 8001830:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001838:	2b01      	cmp	r3, #1
 800183a:	d101      	bne.n	8001840 <HAL_DCMI_Start_DMA+0x1c>
 800183c:	2302      	movs	r3, #2
 800183e:	e0ab      	b.n	8001998 <HAL_DCMI_Start_DMA+0x174>
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	2201      	movs	r2, #1
 8001844:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	2202      	movs	r2, #2
 800184c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800185e:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	f022 0202 	bic.w	r2, r2, #2
 800186e:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6819      	ldr	r1, [r3, #0]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	68ba      	ldr	r2, [r7, #8]
 800187c:	430a      	orrs	r2, r1
 800187e:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001884:	4a46      	ldr	r2, [pc, #280]	; (80019a0 <HAL_DCMI_Start_DMA+0x17c>)
 8001886:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800188c:	4a45      	ldr	r2, [pc, #276]	; (80019a4 <HAL_DCMI_Start_DMA+0x180>)
 800188e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001894:	2200      	movs	r2, #0
 8001896:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2200      	movs	r2, #0
 800189c:	639a      	str	r2, [r3, #56]	; 0x38
  hdcmi->XferTransferNumber = 0;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	2200      	movs	r2, #0
 80018a2:	641a      	str	r2, [r3, #64]	; 0x40
  hdcmi->XferSize = 0;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2200      	movs	r2, #0
 80018a8:	63da      	str	r2, [r3, #60]	; 0x3c
  hdcmi->pBuffPtr = 0;
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	2200      	movs	r2, #0
 80018ae:	645a      	str	r2, [r3, #68]	; 0x44

  if (Length <= 0xFFFFU)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018b6:	d219      	bcs.n	80018ec <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	3328      	adds	r3, #40	; 0x28
 80018c2:	4619      	mov	r1, r3
 80018c4:	683b      	ldr	r3, [r7, #0]
 80018c6:	687a      	ldr	r2, [r7, #4]
 80018c8:	f000 fdd2 	bl	8002470 <HAL_DMA_Start_IT>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d055      	beq.n	800197e <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2240      	movs	r2, #64	; 0x40
 80018d6:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2201      	movs	r2, #1
 80018dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2200      	movs	r2, #0
 80018e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e055      	b.n	8001998 <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018f0:	4a2b      	ldr	r2, [pc, #172]	; (80019a0 <HAL_DCMI_Start_DMA+0x17c>)
 80018f2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2201      	movs	r2, #1
 80018f8:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferSize = Length;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	683a      	ldr	r2, [r7, #0]
 80018fe:	63da      	str	r2, [r3, #60]	; 0x3c
    hdcmi->pBuffPtr = pData;
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	687a      	ldr	r2, [r7, #4]
 8001904:	645a      	str	r2, [r3, #68]	; 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 8001906:	e009      	b.n	800191c <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800190c:	085a      	lsrs	r2, r3, #1
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	63da      	str	r2, [r3, #60]	; 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001916:	005a      	lsls	r2, r3, #1
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	639a      	str	r2, [r3, #56]	; 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001924:	d2f0      	bcs.n	8001908 <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800192a:	1e9a      	subs	r2, r3, #2
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	639a      	str	r2, [r3, #56]	; 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	641a      	str	r2, [r3, #64]	; 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	4413      	add	r3, r2
 8001942:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	3328      	adds	r3, #40	; 0x28
 800194e:	4619      	mov	r1, r3
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001954:	9300      	str	r3, [sp, #0]
 8001956:	697b      	ldr	r3, [r7, #20]
 8001958:	687a      	ldr	r2, [r7, #4]
 800195a:	f003 f869 	bl	8004a30 <HAL_DMAEx_MultiBufferStart_IT>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d00c      	beq.n	800197e <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2240      	movs	r2, #64	; 0x40
 8001968:	64da      	str	r2, [r3, #76]	; 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2201      	movs	r2, #1
 800196e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2200      	movs	r2, #0
 8001976:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      /* Return function status */
      return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e00c      	b.n	8001998 <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f042 0201 	orr.w	r2, r2, #1
 800198c:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	2200      	movs	r2, #0
 8001992:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return HAL_OK;
 8001996:	2300      	movs	r3, #0
}
 8001998:	4618      	mov	r0, r3
 800199a:	3718      	adds	r7, #24
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	08001c59 	.word	0x08001c59
 80019a4:	08001d7f 	.word	0x08001d7f

080019a8 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b084      	sub	sp, #16
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 80019b0:	4b2b      	ldr	r3, [pc, #172]	; (8001a60 <HAL_DCMI_Stop+0xb8>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a2b      	ldr	r2, [pc, #172]	; (8001a64 <HAL_DCMI_Stop+0xbc>)
 80019b6:	fba2 2303 	umull	r2, r3, r2, r3
 80019ba:	0a5b      	lsrs	r3, r3, #9
 80019bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80019c0:	fb02 f303 	mul.w	r3, r2, r3
 80019c4:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 80019c6:	2300      	movs	r3, #0
 80019c8:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80019d0:	2b01      	cmp	r3, #1
 80019d2:	d101      	bne.n	80019d8 <HAL_DCMI_Stop+0x30>
 80019d4:	2302      	movs	r3, #2
 80019d6:	e03f      	b.n	8001a58 <HAL_DCMI_Stop+0xb0>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2201      	movs	r2, #1
 80019dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2202      	movs	r2, #2
 80019e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f022 0201 	bic.w	r2, r2, #1
 80019f6:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    count-- ;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	3b01      	subs	r3, #1
 80019fc:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d108      	bne.n	8001a16 <HAL_DCMI_Stop+0x6e>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a08:	f043 0220 	orr.w	r2, r3, #32
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	64da      	str	r2, [r3, #76]	; 0x4c

      status = HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	72fb      	strb	r3, [r7, #11]
      break;
 8001a14:	e006      	b.n	8001a24 <HAL_DCMI_Stop+0x7c>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0301 	and.w	r3, r3, #1
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d1e9      	bne.n	80019f8 <HAL_DCMI_Stop+0x50>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001a32:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f000 ff83 	bl	8002944 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2201      	movs	r2, #1
 8001a4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2200      	movs	r2, #0
 8001a52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 8001a56:	7afb      	ldrb	r3, [r7, #11]
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3710      	adds	r7, #16
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	24000000 	.word	0x24000000
 8001a64:	10624dd3 	.word	0x10624dd3

08001a68 <HAL_DCMI_Suspend>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Suspend(DCMI_HandleTypeDef *hdcmi)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b085      	sub	sp, #20
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8001a70:	4b27      	ldr	r3, [pc, #156]	; (8001b10 <HAL_DCMI_Suspend+0xa8>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a27      	ldr	r2, [pc, #156]	; (8001b14 <HAL_DCMI_Suspend+0xac>)
 8001a76:	fba2 2303 	umull	r2, r3, r2, r3
 8001a7a:	0a5b      	lsrs	r3, r3, #9
 8001a7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001a80:	fb02 f303 	mul.w	r3, r2, r3
 8001a84:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8001a86:	2300      	movs	r3, #0
 8001a88:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d101      	bne.n	8001a98 <HAL_DCMI_Suspend+0x30>
 8001a94:	2302      	movs	r3, #2
 8001a96:	e034      	b.n	8001b02 <HAL_DCMI_Suspend+0x9a>
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if (hdcmi->State == HAL_DCMI_STATE_BUSY)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d125      	bne.n	8001af8 <HAL_DCMI_Suspend+0x90>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_SUSPENDED;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2205      	movs	r2, #5
 8001ab0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Disable Capture */
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f022 0201 	bic.w	r2, r2, #1
 8001ac2:	601a      	str	r2, [r3, #0]

    /* Check if the DCMI capture effectively disabled */
    do
    {
      count-- ;
 8001ac4:	68fb      	ldr	r3, [r7, #12]
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d10c      	bne.n	8001aea <HAL_DCMI_Suspend+0x82>
      {
        /* Update error code */
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ad4:	f043 0220 	orr.w	r2, r3, #32
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Change DCMI state */
        hdcmi->State = HAL_DCMI_STATE_READY;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        status = HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	72fb      	strb	r3, [r7, #11]
        break;
 8001ae8:	e006      	b.n	8001af8 <HAL_DCMI_Suspend+0x90>
      }
    }
    while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0301 	and.w	r3, r3, #1
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d1e5      	bne.n	8001ac4 <HAL_DCMI_Suspend+0x5c>
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2200      	movs	r2, #0
 8001afc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Return function status */
  return status;
 8001b00:	7afb      	ldrb	r3, [r7, #11]
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	3714      	adds	r7, #20
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	24000000 	.word	0x24000000
 8001b14:	10624dd3 	.word	0x10624dd3

08001b18 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b084      	sub	sp, #16
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	691b      	ldr	r3, [r3, #16]
 8001b26:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f003 0304 	and.w	r3, r3, #4
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d016      	beq.n	8001b60 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2204      	movs	r2, #4
 8001b38:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b3e:	f043 0202 	orr.w	r2, r3, #2
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	2204      	movs	r2, #4
 8001b4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b52:	4a31      	ldr	r2, [pc, #196]	; (8001c18 <HAL_DCMI_IRQHandler+0x100>)
 8001b54:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f001 fa10 	bl	8002f80 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	f003 0302 	and.w	r3, r3, #2
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d016      	beq.n	8001b98 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2202      	movs	r2, #2
 8001b70:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b76:	f043 0201 	orr.w	r2, r3, #1
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2204      	movs	r2, #4
 8001b82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b8a:	4a23      	ldr	r2, [pc, #140]	; (8001c18 <HAL_DCMI_IRQHandler+0x100>)
 8001b8c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b92:	4618      	mov	r0, r3
 8001b94:	f001 f9f4 	bl	8002f80 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	f003 0310 	and.w	r3, r3, #16
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d006      	beq.n	8001bb0 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	2210      	movs	r2, #16
 8001ba8:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 f840 	bl	8001c30 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f003 0308 	and.w	r3, r3, #8
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d006      	beq.n	8001bc8 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	2208      	movs	r2, #8
 8001bc0:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f000 f83e 	bl	8001c44 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d01d      	beq.n	8001c0e <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d107      	bne.n	8001bf0 <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	68da      	ldr	r2, [r3, #12]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f022 021e 	bic.w	r2, r2, #30
 8001bee:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	68da      	ldr	r2, [r3, #12]
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f022 0201 	bic.w	r2, r2, #1
 8001bfe:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	2201      	movs	r2, #1
 8001c06:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8001c08:	6878      	ldr	r0, [r7, #4]
 8001c0a:	f00d fca7 	bl	800f55c <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8001c0e:	bf00      	nop
 8001c10:	3710      	adds	r7, #16
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	08001d7f 	.word	0x08001d7f

08001c1c <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8001c24:	bf00      	nop
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8001c38:	bf00      	nop
 8001c3a:	370c      	adds	r7, #12
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c42:	4770      	bx	lr

08001c44 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr

08001c58 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c64:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d043      	beq.n	8001cf6 <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c7a:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c80:	f003 0301 	and.w	r3, r3, #1
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d118      	bne.n	8001cba <DCMI_DMAXferCplt+0x62>
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d015      	beq.n	8001cba <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	68db      	ldr	r3, [r3, #12]
 8001c96:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ca0:	00da      	lsls	r2, r3, #3
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	4619      	mov	r1, r3
 8001caa:	f003 fa1f 	bl	80050ec <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cb2:	1e5a      	subs	r2, r3, #1
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	639a      	str	r2, [r3, #56]	; 0x38
 8001cb8:	e044      	b.n	8001d44 <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d13c      	bne.n	8001d44 <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cdc:	00da      	lsls	r2, r3, #3
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	f003 fa01 	bl	80050ec <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cee:	1e5a      	subs	r2, r3, #1
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	639a      	str	r2, [r3, #56]	; 0x38
 8001cf4:	e026      	b.n	8001d44 <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d006      	beq.n	8001d14 <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	68fa      	ldr	r2, [r7, #12]
 8001d0e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001d10:	60da      	str	r2, [r3, #12]
 8001d12:	e017      	b.n	8001d44 <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d10f      	bne.n	8001d44 <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d28:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d2e:	0099      	lsls	r1, r3, #2
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	68ba      	ldr	r2, [r7, #8]
 8001d38:	440a      	add	r2, r1
 8001d3a:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	639a      	str	r2, [r3, #56]	; 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d112      	bne.n	8001d76 <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	68da      	ldr	r2, [r3, #12]
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f042 0201 	orr.w	r2, r2, #1
 8001d5e:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0302 	and.w	r3, r3, #2
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d103      	bne.n	8001d76 <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2201      	movs	r2, #1
 8001d72:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }
  }
}
 8001d76:	bf00      	nop
 8001d78:	3710      	adds	r7, #16
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8001d7e:	b580      	push	{r7, lr}
 8001d80:	b084      	sub	sp, #16
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d8a:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d009      	beq.n	8001daa <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	2201      	movs	r2, #1
 8001d9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001da2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	64da      	str	r2, [r3, #76]	; 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8001daa:	68f8      	ldr	r0, [r7, #12]
 8001dac:	f7ff ff36 	bl	8001c1c <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8001db0:	bf00      	nop
 8001db2:	3710      	adds	r7, #16
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}

08001db8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b086      	sub	sp, #24
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8001dc0:	f7ff fa78 	bl	80012b4 <HAL_GetTick>
 8001dc4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d101      	bne.n	8001dd0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e316      	b.n	80023fe <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a66      	ldr	r2, [pc, #408]	; (8001f70 <HAL_DMA_Init+0x1b8>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d04a      	beq.n	8001e70 <HAL_DMA_Init+0xb8>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a65      	ldr	r2, [pc, #404]	; (8001f74 <HAL_DMA_Init+0x1bc>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d045      	beq.n	8001e70 <HAL_DMA_Init+0xb8>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a63      	ldr	r2, [pc, #396]	; (8001f78 <HAL_DMA_Init+0x1c0>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d040      	beq.n	8001e70 <HAL_DMA_Init+0xb8>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a62      	ldr	r2, [pc, #392]	; (8001f7c <HAL_DMA_Init+0x1c4>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d03b      	beq.n	8001e70 <HAL_DMA_Init+0xb8>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a60      	ldr	r2, [pc, #384]	; (8001f80 <HAL_DMA_Init+0x1c8>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d036      	beq.n	8001e70 <HAL_DMA_Init+0xb8>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a5f      	ldr	r2, [pc, #380]	; (8001f84 <HAL_DMA_Init+0x1cc>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d031      	beq.n	8001e70 <HAL_DMA_Init+0xb8>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4a5d      	ldr	r2, [pc, #372]	; (8001f88 <HAL_DMA_Init+0x1d0>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d02c      	beq.n	8001e70 <HAL_DMA_Init+0xb8>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4a5c      	ldr	r2, [pc, #368]	; (8001f8c <HAL_DMA_Init+0x1d4>)
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d027      	beq.n	8001e70 <HAL_DMA_Init+0xb8>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a5a      	ldr	r2, [pc, #360]	; (8001f90 <HAL_DMA_Init+0x1d8>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d022      	beq.n	8001e70 <HAL_DMA_Init+0xb8>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a59      	ldr	r2, [pc, #356]	; (8001f94 <HAL_DMA_Init+0x1dc>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d01d      	beq.n	8001e70 <HAL_DMA_Init+0xb8>
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4a57      	ldr	r2, [pc, #348]	; (8001f98 <HAL_DMA_Init+0x1e0>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d018      	beq.n	8001e70 <HAL_DMA_Init+0xb8>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4a56      	ldr	r2, [pc, #344]	; (8001f9c <HAL_DMA_Init+0x1e4>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d013      	beq.n	8001e70 <HAL_DMA_Init+0xb8>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a54      	ldr	r2, [pc, #336]	; (8001fa0 <HAL_DMA_Init+0x1e8>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d00e      	beq.n	8001e70 <HAL_DMA_Init+0xb8>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a53      	ldr	r2, [pc, #332]	; (8001fa4 <HAL_DMA_Init+0x1ec>)
 8001e58:	4293      	cmp	r3, r2
 8001e5a:	d009      	beq.n	8001e70 <HAL_DMA_Init+0xb8>
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a51      	ldr	r2, [pc, #324]	; (8001fa8 <HAL_DMA_Init+0x1f0>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d004      	beq.n	8001e70 <HAL_DMA_Init+0xb8>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4a50      	ldr	r2, [pc, #320]	; (8001fac <HAL_DMA_Init+0x1f4>)
 8001e6c:	4293      	cmp	r3, r2
 8001e6e:	d101      	bne.n	8001e74 <HAL_DMA_Init+0xbc>
 8001e70:	2301      	movs	r3, #1
 8001e72:	e000      	b.n	8001e76 <HAL_DMA_Init+0xbe>
 8001e74:	2300      	movs	r3, #0
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	f000 813b 	beq.w	80020f2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2202      	movs	r2, #2
 8001e80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a37      	ldr	r2, [pc, #220]	; (8001f70 <HAL_DMA_Init+0x1b8>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d04a      	beq.n	8001f2c <HAL_DMA_Init+0x174>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4a36      	ldr	r2, [pc, #216]	; (8001f74 <HAL_DMA_Init+0x1bc>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d045      	beq.n	8001f2c <HAL_DMA_Init+0x174>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a34      	ldr	r2, [pc, #208]	; (8001f78 <HAL_DMA_Init+0x1c0>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d040      	beq.n	8001f2c <HAL_DMA_Init+0x174>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	4a33      	ldr	r2, [pc, #204]	; (8001f7c <HAL_DMA_Init+0x1c4>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d03b      	beq.n	8001f2c <HAL_DMA_Init+0x174>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a31      	ldr	r2, [pc, #196]	; (8001f80 <HAL_DMA_Init+0x1c8>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d036      	beq.n	8001f2c <HAL_DMA_Init+0x174>
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	4a30      	ldr	r2, [pc, #192]	; (8001f84 <HAL_DMA_Init+0x1cc>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d031      	beq.n	8001f2c <HAL_DMA_Init+0x174>
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a2e      	ldr	r2, [pc, #184]	; (8001f88 <HAL_DMA_Init+0x1d0>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d02c      	beq.n	8001f2c <HAL_DMA_Init+0x174>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a2d      	ldr	r2, [pc, #180]	; (8001f8c <HAL_DMA_Init+0x1d4>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d027      	beq.n	8001f2c <HAL_DMA_Init+0x174>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a2b      	ldr	r2, [pc, #172]	; (8001f90 <HAL_DMA_Init+0x1d8>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d022      	beq.n	8001f2c <HAL_DMA_Init+0x174>
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a2a      	ldr	r2, [pc, #168]	; (8001f94 <HAL_DMA_Init+0x1dc>)
 8001eec:	4293      	cmp	r3, r2
 8001eee:	d01d      	beq.n	8001f2c <HAL_DMA_Init+0x174>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a28      	ldr	r2, [pc, #160]	; (8001f98 <HAL_DMA_Init+0x1e0>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d018      	beq.n	8001f2c <HAL_DMA_Init+0x174>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4a27      	ldr	r2, [pc, #156]	; (8001f9c <HAL_DMA_Init+0x1e4>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d013      	beq.n	8001f2c <HAL_DMA_Init+0x174>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a25      	ldr	r2, [pc, #148]	; (8001fa0 <HAL_DMA_Init+0x1e8>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d00e      	beq.n	8001f2c <HAL_DMA_Init+0x174>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a24      	ldr	r2, [pc, #144]	; (8001fa4 <HAL_DMA_Init+0x1ec>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d009      	beq.n	8001f2c <HAL_DMA_Init+0x174>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a22      	ldr	r2, [pc, #136]	; (8001fa8 <HAL_DMA_Init+0x1f0>)
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d004      	beq.n	8001f2c <HAL_DMA_Init+0x174>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a21      	ldr	r2, [pc, #132]	; (8001fac <HAL_DMA_Init+0x1f4>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d108      	bne.n	8001f3e <HAL_DMA_Init+0x186>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f022 0201 	bic.w	r2, r2, #1
 8001f3a:	601a      	str	r2, [r3, #0]
 8001f3c:	e007      	b.n	8001f4e <HAL_DMA_Init+0x196>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f022 0201 	bic.w	r2, r2, #1
 8001f4c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001f4e:	e02f      	b.n	8001fb0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f50:	f7ff f9b0 	bl	80012b4 <HAL_GetTick>
 8001f54:	4602      	mov	r2, r0
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	2b05      	cmp	r3, #5
 8001f5c:	d928      	bls.n	8001fb0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2220      	movs	r2, #32
 8001f62:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2203      	movs	r2, #3
 8001f68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e246      	b.n	80023fe <HAL_DMA_Init+0x646>
 8001f70:	40020010 	.word	0x40020010
 8001f74:	40020028 	.word	0x40020028
 8001f78:	40020040 	.word	0x40020040
 8001f7c:	40020058 	.word	0x40020058
 8001f80:	40020070 	.word	0x40020070
 8001f84:	40020088 	.word	0x40020088
 8001f88:	400200a0 	.word	0x400200a0
 8001f8c:	400200b8 	.word	0x400200b8
 8001f90:	40020410 	.word	0x40020410
 8001f94:	40020428 	.word	0x40020428
 8001f98:	40020440 	.word	0x40020440
 8001f9c:	40020458 	.word	0x40020458
 8001fa0:	40020470 	.word	0x40020470
 8001fa4:	40020488 	.word	0x40020488
 8001fa8:	400204a0 	.word	0x400204a0
 8001fac:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1c8      	bne.n	8001f50 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	4b83      	ldr	r3, [pc, #524]	; (80021d8 <HAL_DMA_Init+0x420>)
 8001fca:	4013      	ands	r3, r2
 8001fcc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8001fd6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	691b      	ldr	r3, [r3, #16]
 8001fdc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fe2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	699b      	ldr	r3, [r3, #24]
 8001fe8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fee:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a1b      	ldr	r3, [r3, #32]
 8001ff4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8001ff6:	697a      	ldr	r2, [r7, #20]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002000:	2b04      	cmp	r3, #4
 8002002:	d107      	bne.n	8002014 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200c:	4313      	orrs	r3, r2
 800200e:	697a      	ldr	r2, [r7, #20]
 8002010:	4313      	orrs	r3, r2
 8002012:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8002014:	4b71      	ldr	r3, [pc, #452]	; (80021dc <HAL_DMA_Init+0x424>)
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	4b71      	ldr	r3, [pc, #452]	; (80021e0 <HAL_DMA_Init+0x428>)
 800201a:	4013      	ands	r3, r2
 800201c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002020:	d328      	bcc.n	8002074 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	2b28      	cmp	r3, #40	; 0x28
 8002028:	d903      	bls.n	8002032 <HAL_DMA_Init+0x27a>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	2b2e      	cmp	r3, #46	; 0x2e
 8002030:	d917      	bls.n	8002062 <HAL_DMA_Init+0x2aa>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	2b3e      	cmp	r3, #62	; 0x3e
 8002038:	d903      	bls.n	8002042 <HAL_DMA_Init+0x28a>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	2b42      	cmp	r3, #66	; 0x42
 8002040:	d90f      	bls.n	8002062 <HAL_DMA_Init+0x2aa>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	2b46      	cmp	r3, #70	; 0x46
 8002048:	d903      	bls.n	8002052 <HAL_DMA_Init+0x29a>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	2b48      	cmp	r3, #72	; 0x48
 8002050:	d907      	bls.n	8002062 <HAL_DMA_Init+0x2aa>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	2b4e      	cmp	r3, #78	; 0x4e
 8002058:	d905      	bls.n	8002066 <HAL_DMA_Init+0x2ae>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	2b52      	cmp	r3, #82	; 0x52
 8002060:	d801      	bhi.n	8002066 <HAL_DMA_Init+0x2ae>
 8002062:	2301      	movs	r3, #1
 8002064:	e000      	b.n	8002068 <HAL_DMA_Init+0x2b0>
 8002066:	2300      	movs	r3, #0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d003      	beq.n	8002074 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002072:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	697a      	ldr	r2, [r7, #20]
 800207a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	695b      	ldr	r3, [r3, #20]
 8002082:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	f023 0307 	bic.w	r3, r3, #7
 800208a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002090:	697a      	ldr	r2, [r7, #20]
 8002092:	4313      	orrs	r3, r2
 8002094:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209a:	2b04      	cmp	r3, #4
 800209c:	d117      	bne.n	80020ce <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020a2:	697a      	ldr	r2, [r7, #20]
 80020a4:	4313      	orrs	r3, r2
 80020a6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d00e      	beq.n	80020ce <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f002 fb33 	bl	800471c <DMA_CheckFifoParam>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d008      	beq.n	80020ce <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2240      	movs	r2, #64	; 0x40
 80020c0:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	2201      	movs	r2, #1
 80020c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80020ca:	2301      	movs	r3, #1
 80020cc:	e197      	b.n	80023fe <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	697a      	ldr	r2, [r7, #20]
 80020d4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f002 fa6e 	bl	80045b8 <DMA_CalcBaseAndBitshift>
 80020dc:	4603      	mov	r3, r0
 80020de:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e4:	f003 031f 	and.w	r3, r3, #31
 80020e8:	223f      	movs	r2, #63	; 0x3f
 80020ea:	409a      	lsls	r2, r3
 80020ec:	68bb      	ldr	r3, [r7, #8]
 80020ee:	609a      	str	r2, [r3, #8]
 80020f0:	e0cd      	b.n	800228e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a3b      	ldr	r2, [pc, #236]	; (80021e4 <HAL_DMA_Init+0x42c>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d022      	beq.n	8002142 <HAL_DMA_Init+0x38a>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a39      	ldr	r2, [pc, #228]	; (80021e8 <HAL_DMA_Init+0x430>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d01d      	beq.n	8002142 <HAL_DMA_Init+0x38a>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	4a38      	ldr	r2, [pc, #224]	; (80021ec <HAL_DMA_Init+0x434>)
 800210c:	4293      	cmp	r3, r2
 800210e:	d018      	beq.n	8002142 <HAL_DMA_Init+0x38a>
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a36      	ldr	r2, [pc, #216]	; (80021f0 <HAL_DMA_Init+0x438>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d013      	beq.n	8002142 <HAL_DMA_Init+0x38a>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4a35      	ldr	r2, [pc, #212]	; (80021f4 <HAL_DMA_Init+0x43c>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d00e      	beq.n	8002142 <HAL_DMA_Init+0x38a>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a33      	ldr	r2, [pc, #204]	; (80021f8 <HAL_DMA_Init+0x440>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d009      	beq.n	8002142 <HAL_DMA_Init+0x38a>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a32      	ldr	r2, [pc, #200]	; (80021fc <HAL_DMA_Init+0x444>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d004      	beq.n	8002142 <HAL_DMA_Init+0x38a>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	4a30      	ldr	r2, [pc, #192]	; (8002200 <HAL_DMA_Init+0x448>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d101      	bne.n	8002146 <HAL_DMA_Init+0x38e>
 8002142:	2301      	movs	r3, #1
 8002144:	e000      	b.n	8002148 <HAL_DMA_Init+0x390>
 8002146:	2300      	movs	r3, #0
 8002148:	2b00      	cmp	r3, #0
 800214a:	f000 8097 	beq.w	800227c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a24      	ldr	r2, [pc, #144]	; (80021e4 <HAL_DMA_Init+0x42c>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d021      	beq.n	800219c <HAL_DMA_Init+0x3e4>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a22      	ldr	r2, [pc, #136]	; (80021e8 <HAL_DMA_Init+0x430>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d01c      	beq.n	800219c <HAL_DMA_Init+0x3e4>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a21      	ldr	r2, [pc, #132]	; (80021ec <HAL_DMA_Init+0x434>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d017      	beq.n	800219c <HAL_DMA_Init+0x3e4>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a1f      	ldr	r2, [pc, #124]	; (80021f0 <HAL_DMA_Init+0x438>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d012      	beq.n	800219c <HAL_DMA_Init+0x3e4>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a1e      	ldr	r2, [pc, #120]	; (80021f4 <HAL_DMA_Init+0x43c>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d00d      	beq.n	800219c <HAL_DMA_Init+0x3e4>
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4a1c      	ldr	r2, [pc, #112]	; (80021f8 <HAL_DMA_Init+0x440>)
 8002186:	4293      	cmp	r3, r2
 8002188:	d008      	beq.n	800219c <HAL_DMA_Init+0x3e4>
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a1b      	ldr	r2, [pc, #108]	; (80021fc <HAL_DMA_Init+0x444>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d003      	beq.n	800219c <HAL_DMA_Init+0x3e4>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a19      	ldr	r2, [pc, #100]	; (8002200 <HAL_DMA_Init+0x448>)
 800219a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2202      	movs	r2, #2
 80021a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80021b4:	697a      	ldr	r2, [r7, #20]
 80021b6:	4b13      	ldr	r3, [pc, #76]	; (8002204 <HAL_DMA_Init+0x44c>)
 80021b8:	4013      	ands	r3, r2
 80021ba:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	2b40      	cmp	r3, #64	; 0x40
 80021c2:	d021      	beq.n	8002208 <HAL_DMA_Init+0x450>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	2b80      	cmp	r3, #128	; 0x80
 80021ca:	d102      	bne.n	80021d2 <HAL_DMA_Init+0x41a>
 80021cc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80021d0:	e01b      	b.n	800220a <HAL_DMA_Init+0x452>
 80021d2:	2300      	movs	r3, #0
 80021d4:	e019      	b.n	800220a <HAL_DMA_Init+0x452>
 80021d6:	bf00      	nop
 80021d8:	fe10803f 	.word	0xfe10803f
 80021dc:	5c001000 	.word	0x5c001000
 80021e0:	ffff0000 	.word	0xffff0000
 80021e4:	58025408 	.word	0x58025408
 80021e8:	5802541c 	.word	0x5802541c
 80021ec:	58025430 	.word	0x58025430
 80021f0:	58025444 	.word	0x58025444
 80021f4:	58025458 	.word	0x58025458
 80021f8:	5802546c 	.word	0x5802546c
 80021fc:	58025480 	.word	0x58025480
 8002200:	58025494 	.word	0x58025494
 8002204:	fffe000f 	.word	0xfffe000f
 8002208:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 800220a:	687a      	ldr	r2, [r7, #4]
 800220c:	68d2      	ldr	r2, [r2, #12]
 800220e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8002210:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	691b      	ldr	r3, [r3, #16]
 8002216:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8002218:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	695b      	ldr	r3, [r3, #20]
 800221e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8002220:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	699b      	ldr	r3, [r3, #24]
 8002226:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8002228:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8002230:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6a1b      	ldr	r3, [r3, #32]
 8002236:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8002238:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800223a:	697a      	ldr	r2, [r7, #20]
 800223c:	4313      	orrs	r3, r2
 800223e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	697a      	ldr	r2, [r7, #20]
 8002246:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	461a      	mov	r2, r3
 800224e:	4b6e      	ldr	r3, [pc, #440]	; (8002408 <HAL_DMA_Init+0x650>)
 8002250:	4413      	add	r3, r2
 8002252:	4a6e      	ldr	r2, [pc, #440]	; (800240c <HAL_DMA_Init+0x654>)
 8002254:	fba2 2303 	umull	r2, r3, r2, r3
 8002258:	091b      	lsrs	r3, r3, #4
 800225a:	009a      	lsls	r2, r3, #2
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f002 f9a9 	bl	80045b8 <DMA_CalcBaseAndBitshift>
 8002266:	4603      	mov	r3, r0
 8002268:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800226e:	f003 031f 	and.w	r3, r3, #31
 8002272:	2201      	movs	r2, #1
 8002274:	409a      	lsls	r2, r3
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	605a      	str	r2, [r3, #4]
 800227a:	e008      	b.n	800228e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2240      	movs	r2, #64	; 0x40
 8002280:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	2203      	movs	r2, #3
 8002286:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800228a:	2301      	movs	r3, #1
 800228c:	e0b7      	b.n	80023fe <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a5f      	ldr	r2, [pc, #380]	; (8002410 <HAL_DMA_Init+0x658>)
 8002294:	4293      	cmp	r3, r2
 8002296:	d072      	beq.n	800237e <HAL_DMA_Init+0x5c6>
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a5d      	ldr	r2, [pc, #372]	; (8002414 <HAL_DMA_Init+0x65c>)
 800229e:	4293      	cmp	r3, r2
 80022a0:	d06d      	beq.n	800237e <HAL_DMA_Init+0x5c6>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4a5c      	ldr	r2, [pc, #368]	; (8002418 <HAL_DMA_Init+0x660>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d068      	beq.n	800237e <HAL_DMA_Init+0x5c6>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a5a      	ldr	r2, [pc, #360]	; (800241c <HAL_DMA_Init+0x664>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d063      	beq.n	800237e <HAL_DMA_Init+0x5c6>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a59      	ldr	r2, [pc, #356]	; (8002420 <HAL_DMA_Init+0x668>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d05e      	beq.n	800237e <HAL_DMA_Init+0x5c6>
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a57      	ldr	r2, [pc, #348]	; (8002424 <HAL_DMA_Init+0x66c>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d059      	beq.n	800237e <HAL_DMA_Init+0x5c6>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a56      	ldr	r2, [pc, #344]	; (8002428 <HAL_DMA_Init+0x670>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d054      	beq.n	800237e <HAL_DMA_Init+0x5c6>
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a54      	ldr	r2, [pc, #336]	; (800242c <HAL_DMA_Init+0x674>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d04f      	beq.n	800237e <HAL_DMA_Init+0x5c6>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a53      	ldr	r2, [pc, #332]	; (8002430 <HAL_DMA_Init+0x678>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d04a      	beq.n	800237e <HAL_DMA_Init+0x5c6>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a51      	ldr	r2, [pc, #324]	; (8002434 <HAL_DMA_Init+0x67c>)
 80022ee:	4293      	cmp	r3, r2
 80022f0:	d045      	beq.n	800237e <HAL_DMA_Init+0x5c6>
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a50      	ldr	r2, [pc, #320]	; (8002438 <HAL_DMA_Init+0x680>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d040      	beq.n	800237e <HAL_DMA_Init+0x5c6>
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4a4e      	ldr	r2, [pc, #312]	; (800243c <HAL_DMA_Init+0x684>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d03b      	beq.n	800237e <HAL_DMA_Init+0x5c6>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	4a4d      	ldr	r2, [pc, #308]	; (8002440 <HAL_DMA_Init+0x688>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d036      	beq.n	800237e <HAL_DMA_Init+0x5c6>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a4b      	ldr	r2, [pc, #300]	; (8002444 <HAL_DMA_Init+0x68c>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d031      	beq.n	800237e <HAL_DMA_Init+0x5c6>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a4a      	ldr	r2, [pc, #296]	; (8002448 <HAL_DMA_Init+0x690>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d02c      	beq.n	800237e <HAL_DMA_Init+0x5c6>
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a48      	ldr	r2, [pc, #288]	; (800244c <HAL_DMA_Init+0x694>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d027      	beq.n	800237e <HAL_DMA_Init+0x5c6>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a47      	ldr	r2, [pc, #284]	; (8002450 <HAL_DMA_Init+0x698>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d022      	beq.n	800237e <HAL_DMA_Init+0x5c6>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	4a45      	ldr	r2, [pc, #276]	; (8002454 <HAL_DMA_Init+0x69c>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d01d      	beq.n	800237e <HAL_DMA_Init+0x5c6>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	4a44      	ldr	r2, [pc, #272]	; (8002458 <HAL_DMA_Init+0x6a0>)
 8002348:	4293      	cmp	r3, r2
 800234a:	d018      	beq.n	800237e <HAL_DMA_Init+0x5c6>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a42      	ldr	r2, [pc, #264]	; (800245c <HAL_DMA_Init+0x6a4>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d013      	beq.n	800237e <HAL_DMA_Init+0x5c6>
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a41      	ldr	r2, [pc, #260]	; (8002460 <HAL_DMA_Init+0x6a8>)
 800235c:	4293      	cmp	r3, r2
 800235e:	d00e      	beq.n	800237e <HAL_DMA_Init+0x5c6>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a3f      	ldr	r2, [pc, #252]	; (8002464 <HAL_DMA_Init+0x6ac>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d009      	beq.n	800237e <HAL_DMA_Init+0x5c6>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a3e      	ldr	r2, [pc, #248]	; (8002468 <HAL_DMA_Init+0x6b0>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d004      	beq.n	800237e <HAL_DMA_Init+0x5c6>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a3c      	ldr	r2, [pc, #240]	; (800246c <HAL_DMA_Init+0x6b4>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d101      	bne.n	8002382 <HAL_DMA_Init+0x5ca>
 800237e:	2301      	movs	r3, #1
 8002380:	e000      	b.n	8002384 <HAL_DMA_Init+0x5cc>
 8002382:	2300      	movs	r3, #0
 8002384:	2b00      	cmp	r3, #0
 8002386:	d032      	beq.n	80023ee <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f002 fa43 	bl	8004814 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	2b80      	cmp	r3, #128	; 0x80
 8002394:	d102      	bne.n	800239c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685a      	ldr	r2, [r3, #4]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023a4:	b2d2      	uxtb	r2, r2
 80023a6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80023b0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d010      	beq.n	80023dc <HAL_DMA_Init+0x624>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	2b08      	cmp	r3, #8
 80023c0:	d80c      	bhi.n	80023dc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f002 fac0 	bl	8004948 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80023d8:	605a      	str	r2, [r3, #4]
 80023da:	e008      	b.n	80023ee <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2200      	movs	r2, #0
 80023e0:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	2200      	movs	r2, #0
 80023e6:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2200      	movs	r2, #0
 80023ec:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2201      	movs	r2, #1
 80023f8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3718      	adds	r7, #24
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	a7fdabf8 	.word	0xa7fdabf8
 800240c:	cccccccd 	.word	0xcccccccd
 8002410:	40020010 	.word	0x40020010
 8002414:	40020028 	.word	0x40020028
 8002418:	40020040 	.word	0x40020040
 800241c:	40020058 	.word	0x40020058
 8002420:	40020070 	.word	0x40020070
 8002424:	40020088 	.word	0x40020088
 8002428:	400200a0 	.word	0x400200a0
 800242c:	400200b8 	.word	0x400200b8
 8002430:	40020410 	.word	0x40020410
 8002434:	40020428 	.word	0x40020428
 8002438:	40020440 	.word	0x40020440
 800243c:	40020458 	.word	0x40020458
 8002440:	40020470 	.word	0x40020470
 8002444:	40020488 	.word	0x40020488
 8002448:	400204a0 	.word	0x400204a0
 800244c:	400204b8 	.word	0x400204b8
 8002450:	58025408 	.word	0x58025408
 8002454:	5802541c 	.word	0x5802541c
 8002458:	58025430 	.word	0x58025430
 800245c:	58025444 	.word	0x58025444
 8002460:	58025458 	.word	0x58025458
 8002464:	5802546c 	.word	0x5802546c
 8002468:	58025480 	.word	0x58025480
 800246c:	58025494 	.word	0x58025494

08002470 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b086      	sub	sp, #24
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
 800247c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800247e:	2300      	movs	r3, #0
 8002480:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d101      	bne.n	800248c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8002488:	2301      	movs	r3, #1
 800248a:	e226      	b.n	80028da <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002492:	2b01      	cmp	r3, #1
 8002494:	d101      	bne.n	800249a <HAL_DMA_Start_IT+0x2a>
 8002496:	2302      	movs	r3, #2
 8002498:	e21f      	b.n	80028da <HAL_DMA_Start_IT+0x46a>
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2201      	movs	r2, #1
 800249e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	f040 820a 	bne.w	80028c4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2202      	movs	r2, #2
 80024b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2200      	movs	r2, #0
 80024bc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a68      	ldr	r2, [pc, #416]	; (8002664 <HAL_DMA_Start_IT+0x1f4>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d04a      	beq.n	800255e <HAL_DMA_Start_IT+0xee>
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a66      	ldr	r2, [pc, #408]	; (8002668 <HAL_DMA_Start_IT+0x1f8>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d045      	beq.n	800255e <HAL_DMA_Start_IT+0xee>
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	4a65      	ldr	r2, [pc, #404]	; (800266c <HAL_DMA_Start_IT+0x1fc>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d040      	beq.n	800255e <HAL_DMA_Start_IT+0xee>
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a63      	ldr	r2, [pc, #396]	; (8002670 <HAL_DMA_Start_IT+0x200>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d03b      	beq.n	800255e <HAL_DMA_Start_IT+0xee>
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4a62      	ldr	r2, [pc, #392]	; (8002674 <HAL_DMA_Start_IT+0x204>)
 80024ec:	4293      	cmp	r3, r2
 80024ee:	d036      	beq.n	800255e <HAL_DMA_Start_IT+0xee>
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a60      	ldr	r2, [pc, #384]	; (8002678 <HAL_DMA_Start_IT+0x208>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d031      	beq.n	800255e <HAL_DMA_Start_IT+0xee>
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a5f      	ldr	r2, [pc, #380]	; (800267c <HAL_DMA_Start_IT+0x20c>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d02c      	beq.n	800255e <HAL_DMA_Start_IT+0xee>
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a5d      	ldr	r2, [pc, #372]	; (8002680 <HAL_DMA_Start_IT+0x210>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d027      	beq.n	800255e <HAL_DMA_Start_IT+0xee>
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a5c      	ldr	r2, [pc, #368]	; (8002684 <HAL_DMA_Start_IT+0x214>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d022      	beq.n	800255e <HAL_DMA_Start_IT+0xee>
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a5a      	ldr	r2, [pc, #360]	; (8002688 <HAL_DMA_Start_IT+0x218>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d01d      	beq.n	800255e <HAL_DMA_Start_IT+0xee>
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a59      	ldr	r2, [pc, #356]	; (800268c <HAL_DMA_Start_IT+0x21c>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d018      	beq.n	800255e <HAL_DMA_Start_IT+0xee>
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a57      	ldr	r2, [pc, #348]	; (8002690 <HAL_DMA_Start_IT+0x220>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d013      	beq.n	800255e <HAL_DMA_Start_IT+0xee>
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a56      	ldr	r2, [pc, #344]	; (8002694 <HAL_DMA_Start_IT+0x224>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d00e      	beq.n	800255e <HAL_DMA_Start_IT+0xee>
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a54      	ldr	r2, [pc, #336]	; (8002698 <HAL_DMA_Start_IT+0x228>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d009      	beq.n	800255e <HAL_DMA_Start_IT+0xee>
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a53      	ldr	r2, [pc, #332]	; (800269c <HAL_DMA_Start_IT+0x22c>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d004      	beq.n	800255e <HAL_DMA_Start_IT+0xee>
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a51      	ldr	r2, [pc, #324]	; (80026a0 <HAL_DMA_Start_IT+0x230>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d108      	bne.n	8002570 <HAL_DMA_Start_IT+0x100>
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f022 0201 	bic.w	r2, r2, #1
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	e007      	b.n	8002580 <HAL_DMA_Start_IT+0x110>
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	681a      	ldr	r2, [r3, #0]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f022 0201 	bic.w	r2, r2, #1
 800257e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	68b9      	ldr	r1, [r7, #8]
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	f001 fe6a 	bl	8004260 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	4a34      	ldr	r2, [pc, #208]	; (8002664 <HAL_DMA_Start_IT+0x1f4>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d04a      	beq.n	800262c <HAL_DMA_Start_IT+0x1bc>
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a33      	ldr	r2, [pc, #204]	; (8002668 <HAL_DMA_Start_IT+0x1f8>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d045      	beq.n	800262c <HAL_DMA_Start_IT+0x1bc>
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a31      	ldr	r2, [pc, #196]	; (800266c <HAL_DMA_Start_IT+0x1fc>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d040      	beq.n	800262c <HAL_DMA_Start_IT+0x1bc>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a30      	ldr	r2, [pc, #192]	; (8002670 <HAL_DMA_Start_IT+0x200>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d03b      	beq.n	800262c <HAL_DMA_Start_IT+0x1bc>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a2e      	ldr	r2, [pc, #184]	; (8002674 <HAL_DMA_Start_IT+0x204>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d036      	beq.n	800262c <HAL_DMA_Start_IT+0x1bc>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a2d      	ldr	r2, [pc, #180]	; (8002678 <HAL_DMA_Start_IT+0x208>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d031      	beq.n	800262c <HAL_DMA_Start_IT+0x1bc>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a2b      	ldr	r2, [pc, #172]	; (800267c <HAL_DMA_Start_IT+0x20c>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d02c      	beq.n	800262c <HAL_DMA_Start_IT+0x1bc>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a2a      	ldr	r2, [pc, #168]	; (8002680 <HAL_DMA_Start_IT+0x210>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d027      	beq.n	800262c <HAL_DMA_Start_IT+0x1bc>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a28      	ldr	r2, [pc, #160]	; (8002684 <HAL_DMA_Start_IT+0x214>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d022      	beq.n	800262c <HAL_DMA_Start_IT+0x1bc>
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a27      	ldr	r2, [pc, #156]	; (8002688 <HAL_DMA_Start_IT+0x218>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d01d      	beq.n	800262c <HAL_DMA_Start_IT+0x1bc>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a25      	ldr	r2, [pc, #148]	; (800268c <HAL_DMA_Start_IT+0x21c>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d018      	beq.n	800262c <HAL_DMA_Start_IT+0x1bc>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a24      	ldr	r2, [pc, #144]	; (8002690 <HAL_DMA_Start_IT+0x220>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d013      	beq.n	800262c <HAL_DMA_Start_IT+0x1bc>
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a22      	ldr	r2, [pc, #136]	; (8002694 <HAL_DMA_Start_IT+0x224>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d00e      	beq.n	800262c <HAL_DMA_Start_IT+0x1bc>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4a21      	ldr	r2, [pc, #132]	; (8002698 <HAL_DMA_Start_IT+0x228>)
 8002614:	4293      	cmp	r3, r2
 8002616:	d009      	beq.n	800262c <HAL_DMA_Start_IT+0x1bc>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a1f      	ldr	r2, [pc, #124]	; (800269c <HAL_DMA_Start_IT+0x22c>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d004      	beq.n	800262c <HAL_DMA_Start_IT+0x1bc>
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a1e      	ldr	r2, [pc, #120]	; (80026a0 <HAL_DMA_Start_IT+0x230>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d101      	bne.n	8002630 <HAL_DMA_Start_IT+0x1c0>
 800262c:	2301      	movs	r3, #1
 800262e:	e000      	b.n	8002632 <HAL_DMA_Start_IT+0x1c2>
 8002630:	2300      	movs	r3, #0
 8002632:	2b00      	cmp	r3, #0
 8002634:	d036      	beq.n	80026a4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f023 021e 	bic.w	r2, r3, #30
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f042 0216 	orr.w	r2, r2, #22
 8002648:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264e:	2b00      	cmp	r3, #0
 8002650:	d03e      	beq.n	80026d0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681a      	ldr	r2, [r3, #0]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f042 0208 	orr.w	r2, r2, #8
 8002660:	601a      	str	r2, [r3, #0]
 8002662:	e035      	b.n	80026d0 <HAL_DMA_Start_IT+0x260>
 8002664:	40020010 	.word	0x40020010
 8002668:	40020028 	.word	0x40020028
 800266c:	40020040 	.word	0x40020040
 8002670:	40020058 	.word	0x40020058
 8002674:	40020070 	.word	0x40020070
 8002678:	40020088 	.word	0x40020088
 800267c:	400200a0 	.word	0x400200a0
 8002680:	400200b8 	.word	0x400200b8
 8002684:	40020410 	.word	0x40020410
 8002688:	40020428 	.word	0x40020428
 800268c:	40020440 	.word	0x40020440
 8002690:	40020458 	.word	0x40020458
 8002694:	40020470 	.word	0x40020470
 8002698:	40020488 	.word	0x40020488
 800269c:	400204a0 	.word	0x400204a0
 80026a0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f023 020e 	bic.w	r2, r3, #14
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f042 020a 	orr.w	r2, r2, #10
 80026b6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d007      	beq.n	80026d0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f042 0204 	orr.w	r2, r2, #4
 80026ce:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	4a83      	ldr	r2, [pc, #524]	; (80028e4 <HAL_DMA_Start_IT+0x474>)
 80026d6:	4293      	cmp	r3, r2
 80026d8:	d072      	beq.n	80027c0 <HAL_DMA_Start_IT+0x350>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a82      	ldr	r2, [pc, #520]	; (80028e8 <HAL_DMA_Start_IT+0x478>)
 80026e0:	4293      	cmp	r3, r2
 80026e2:	d06d      	beq.n	80027c0 <HAL_DMA_Start_IT+0x350>
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a80      	ldr	r2, [pc, #512]	; (80028ec <HAL_DMA_Start_IT+0x47c>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d068      	beq.n	80027c0 <HAL_DMA_Start_IT+0x350>
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a7f      	ldr	r2, [pc, #508]	; (80028f0 <HAL_DMA_Start_IT+0x480>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d063      	beq.n	80027c0 <HAL_DMA_Start_IT+0x350>
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a7d      	ldr	r2, [pc, #500]	; (80028f4 <HAL_DMA_Start_IT+0x484>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d05e      	beq.n	80027c0 <HAL_DMA_Start_IT+0x350>
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a7c      	ldr	r2, [pc, #496]	; (80028f8 <HAL_DMA_Start_IT+0x488>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d059      	beq.n	80027c0 <HAL_DMA_Start_IT+0x350>
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a7a      	ldr	r2, [pc, #488]	; (80028fc <HAL_DMA_Start_IT+0x48c>)
 8002712:	4293      	cmp	r3, r2
 8002714:	d054      	beq.n	80027c0 <HAL_DMA_Start_IT+0x350>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a79      	ldr	r2, [pc, #484]	; (8002900 <HAL_DMA_Start_IT+0x490>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d04f      	beq.n	80027c0 <HAL_DMA_Start_IT+0x350>
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a77      	ldr	r2, [pc, #476]	; (8002904 <HAL_DMA_Start_IT+0x494>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d04a      	beq.n	80027c0 <HAL_DMA_Start_IT+0x350>
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a76      	ldr	r2, [pc, #472]	; (8002908 <HAL_DMA_Start_IT+0x498>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d045      	beq.n	80027c0 <HAL_DMA_Start_IT+0x350>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a74      	ldr	r2, [pc, #464]	; (800290c <HAL_DMA_Start_IT+0x49c>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d040      	beq.n	80027c0 <HAL_DMA_Start_IT+0x350>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4a73      	ldr	r2, [pc, #460]	; (8002910 <HAL_DMA_Start_IT+0x4a0>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d03b      	beq.n	80027c0 <HAL_DMA_Start_IT+0x350>
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a71      	ldr	r2, [pc, #452]	; (8002914 <HAL_DMA_Start_IT+0x4a4>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d036      	beq.n	80027c0 <HAL_DMA_Start_IT+0x350>
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a70      	ldr	r2, [pc, #448]	; (8002918 <HAL_DMA_Start_IT+0x4a8>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d031      	beq.n	80027c0 <HAL_DMA_Start_IT+0x350>
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a6e      	ldr	r2, [pc, #440]	; (800291c <HAL_DMA_Start_IT+0x4ac>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d02c      	beq.n	80027c0 <HAL_DMA_Start_IT+0x350>
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a6d      	ldr	r2, [pc, #436]	; (8002920 <HAL_DMA_Start_IT+0x4b0>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d027      	beq.n	80027c0 <HAL_DMA_Start_IT+0x350>
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	4a6b      	ldr	r2, [pc, #428]	; (8002924 <HAL_DMA_Start_IT+0x4b4>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d022      	beq.n	80027c0 <HAL_DMA_Start_IT+0x350>
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a6a      	ldr	r2, [pc, #424]	; (8002928 <HAL_DMA_Start_IT+0x4b8>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d01d      	beq.n	80027c0 <HAL_DMA_Start_IT+0x350>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4a68      	ldr	r2, [pc, #416]	; (800292c <HAL_DMA_Start_IT+0x4bc>)
 800278a:	4293      	cmp	r3, r2
 800278c:	d018      	beq.n	80027c0 <HAL_DMA_Start_IT+0x350>
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4a67      	ldr	r2, [pc, #412]	; (8002930 <HAL_DMA_Start_IT+0x4c0>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d013      	beq.n	80027c0 <HAL_DMA_Start_IT+0x350>
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a65      	ldr	r2, [pc, #404]	; (8002934 <HAL_DMA_Start_IT+0x4c4>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d00e      	beq.n	80027c0 <HAL_DMA_Start_IT+0x350>
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a64      	ldr	r2, [pc, #400]	; (8002938 <HAL_DMA_Start_IT+0x4c8>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d009      	beq.n	80027c0 <HAL_DMA_Start_IT+0x350>
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a62      	ldr	r2, [pc, #392]	; (800293c <HAL_DMA_Start_IT+0x4cc>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d004      	beq.n	80027c0 <HAL_DMA_Start_IT+0x350>
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a61      	ldr	r2, [pc, #388]	; (8002940 <HAL_DMA_Start_IT+0x4d0>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d101      	bne.n	80027c4 <HAL_DMA_Start_IT+0x354>
 80027c0:	2301      	movs	r3, #1
 80027c2:	e000      	b.n	80027c6 <HAL_DMA_Start_IT+0x356>
 80027c4:	2300      	movs	r3, #0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d01a      	beq.n	8002800 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d007      	beq.n	80027e8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027e2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027e6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d007      	beq.n	8002800 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027f4:	681a      	ldr	r2, [r3, #0]
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80027fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027fe:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a37      	ldr	r2, [pc, #220]	; (80028e4 <HAL_DMA_Start_IT+0x474>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d04a      	beq.n	80028a0 <HAL_DMA_Start_IT+0x430>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a36      	ldr	r2, [pc, #216]	; (80028e8 <HAL_DMA_Start_IT+0x478>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d045      	beq.n	80028a0 <HAL_DMA_Start_IT+0x430>
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a34      	ldr	r2, [pc, #208]	; (80028ec <HAL_DMA_Start_IT+0x47c>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d040      	beq.n	80028a0 <HAL_DMA_Start_IT+0x430>
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a33      	ldr	r2, [pc, #204]	; (80028f0 <HAL_DMA_Start_IT+0x480>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d03b      	beq.n	80028a0 <HAL_DMA_Start_IT+0x430>
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4a31      	ldr	r2, [pc, #196]	; (80028f4 <HAL_DMA_Start_IT+0x484>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d036      	beq.n	80028a0 <HAL_DMA_Start_IT+0x430>
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a30      	ldr	r2, [pc, #192]	; (80028f8 <HAL_DMA_Start_IT+0x488>)
 8002838:	4293      	cmp	r3, r2
 800283a:	d031      	beq.n	80028a0 <HAL_DMA_Start_IT+0x430>
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a2e      	ldr	r2, [pc, #184]	; (80028fc <HAL_DMA_Start_IT+0x48c>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d02c      	beq.n	80028a0 <HAL_DMA_Start_IT+0x430>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4a2d      	ldr	r2, [pc, #180]	; (8002900 <HAL_DMA_Start_IT+0x490>)
 800284c:	4293      	cmp	r3, r2
 800284e:	d027      	beq.n	80028a0 <HAL_DMA_Start_IT+0x430>
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	4a2b      	ldr	r2, [pc, #172]	; (8002904 <HAL_DMA_Start_IT+0x494>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d022      	beq.n	80028a0 <HAL_DMA_Start_IT+0x430>
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a2a      	ldr	r2, [pc, #168]	; (8002908 <HAL_DMA_Start_IT+0x498>)
 8002860:	4293      	cmp	r3, r2
 8002862:	d01d      	beq.n	80028a0 <HAL_DMA_Start_IT+0x430>
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a28      	ldr	r2, [pc, #160]	; (800290c <HAL_DMA_Start_IT+0x49c>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d018      	beq.n	80028a0 <HAL_DMA_Start_IT+0x430>
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a27      	ldr	r2, [pc, #156]	; (8002910 <HAL_DMA_Start_IT+0x4a0>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d013      	beq.n	80028a0 <HAL_DMA_Start_IT+0x430>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a25      	ldr	r2, [pc, #148]	; (8002914 <HAL_DMA_Start_IT+0x4a4>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d00e      	beq.n	80028a0 <HAL_DMA_Start_IT+0x430>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a24      	ldr	r2, [pc, #144]	; (8002918 <HAL_DMA_Start_IT+0x4a8>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d009      	beq.n	80028a0 <HAL_DMA_Start_IT+0x430>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a22      	ldr	r2, [pc, #136]	; (800291c <HAL_DMA_Start_IT+0x4ac>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d004      	beq.n	80028a0 <HAL_DMA_Start_IT+0x430>
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a21      	ldr	r2, [pc, #132]	; (8002920 <HAL_DMA_Start_IT+0x4b0>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d108      	bne.n	80028b2 <HAL_DMA_Start_IT+0x442>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f042 0201 	orr.w	r2, r2, #1
 80028ae:	601a      	str	r2, [r3, #0]
 80028b0:	e012      	b.n	80028d8 <HAL_DMA_Start_IT+0x468>
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	f042 0201 	orr.w	r2, r2, #1
 80028c0:	601a      	str	r2, [r3, #0]
 80028c2:	e009      	b.n	80028d8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80028ca:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80028d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3718      	adds	r7, #24
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	40020010 	.word	0x40020010
 80028e8:	40020028 	.word	0x40020028
 80028ec:	40020040 	.word	0x40020040
 80028f0:	40020058 	.word	0x40020058
 80028f4:	40020070 	.word	0x40020070
 80028f8:	40020088 	.word	0x40020088
 80028fc:	400200a0 	.word	0x400200a0
 8002900:	400200b8 	.word	0x400200b8
 8002904:	40020410 	.word	0x40020410
 8002908:	40020428 	.word	0x40020428
 800290c:	40020440 	.word	0x40020440
 8002910:	40020458 	.word	0x40020458
 8002914:	40020470 	.word	0x40020470
 8002918:	40020488 	.word	0x40020488
 800291c:	400204a0 	.word	0x400204a0
 8002920:	400204b8 	.word	0x400204b8
 8002924:	58025408 	.word	0x58025408
 8002928:	5802541c 	.word	0x5802541c
 800292c:	58025430 	.word	0x58025430
 8002930:	58025444 	.word	0x58025444
 8002934:	58025458 	.word	0x58025458
 8002938:	5802546c 	.word	0x5802546c
 800293c:	58025480 	.word	0x58025480
 8002940:	58025494 	.word	0x58025494

08002944 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800294c:	f7fe fcb2 	bl	80012b4 <HAL_GetTick>
 8002950:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d101      	bne.n	800295c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8002958:	2301      	movs	r3, #1
 800295a:	e2dc      	b.n	8002f16 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002962:	b2db      	uxtb	r3, r3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d008      	beq.n	800297a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	2280      	movs	r2, #128	; 0x80
 800296c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e2cd      	b.n	8002f16 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	4a76      	ldr	r2, [pc, #472]	; (8002b58 <HAL_DMA_Abort+0x214>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d04a      	beq.n	8002a1a <HAL_DMA_Abort+0xd6>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a74      	ldr	r2, [pc, #464]	; (8002b5c <HAL_DMA_Abort+0x218>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d045      	beq.n	8002a1a <HAL_DMA_Abort+0xd6>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a73      	ldr	r2, [pc, #460]	; (8002b60 <HAL_DMA_Abort+0x21c>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d040      	beq.n	8002a1a <HAL_DMA_Abort+0xd6>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a71      	ldr	r2, [pc, #452]	; (8002b64 <HAL_DMA_Abort+0x220>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d03b      	beq.n	8002a1a <HAL_DMA_Abort+0xd6>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a70      	ldr	r2, [pc, #448]	; (8002b68 <HAL_DMA_Abort+0x224>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d036      	beq.n	8002a1a <HAL_DMA_Abort+0xd6>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a6e      	ldr	r2, [pc, #440]	; (8002b6c <HAL_DMA_Abort+0x228>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d031      	beq.n	8002a1a <HAL_DMA_Abort+0xd6>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a6d      	ldr	r2, [pc, #436]	; (8002b70 <HAL_DMA_Abort+0x22c>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d02c      	beq.n	8002a1a <HAL_DMA_Abort+0xd6>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a6b      	ldr	r2, [pc, #428]	; (8002b74 <HAL_DMA_Abort+0x230>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d027      	beq.n	8002a1a <HAL_DMA_Abort+0xd6>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a6a      	ldr	r2, [pc, #424]	; (8002b78 <HAL_DMA_Abort+0x234>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d022      	beq.n	8002a1a <HAL_DMA_Abort+0xd6>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a68      	ldr	r2, [pc, #416]	; (8002b7c <HAL_DMA_Abort+0x238>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d01d      	beq.n	8002a1a <HAL_DMA_Abort+0xd6>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a67      	ldr	r2, [pc, #412]	; (8002b80 <HAL_DMA_Abort+0x23c>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d018      	beq.n	8002a1a <HAL_DMA_Abort+0xd6>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a65      	ldr	r2, [pc, #404]	; (8002b84 <HAL_DMA_Abort+0x240>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d013      	beq.n	8002a1a <HAL_DMA_Abort+0xd6>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	4a64      	ldr	r2, [pc, #400]	; (8002b88 <HAL_DMA_Abort+0x244>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d00e      	beq.n	8002a1a <HAL_DMA_Abort+0xd6>
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	4a62      	ldr	r2, [pc, #392]	; (8002b8c <HAL_DMA_Abort+0x248>)
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d009      	beq.n	8002a1a <HAL_DMA_Abort+0xd6>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	4a61      	ldr	r2, [pc, #388]	; (8002b90 <HAL_DMA_Abort+0x24c>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d004      	beq.n	8002a1a <HAL_DMA_Abort+0xd6>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a5f      	ldr	r2, [pc, #380]	; (8002b94 <HAL_DMA_Abort+0x250>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d101      	bne.n	8002a1e <HAL_DMA_Abort+0xda>
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e000      	b.n	8002a20 <HAL_DMA_Abort+0xdc>
 8002a1e:	2300      	movs	r3, #0
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d013      	beq.n	8002a4c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f022 021e 	bic.w	r2, r2, #30
 8002a32:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	695a      	ldr	r2, [r3, #20]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a42:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	617b      	str	r3, [r7, #20]
 8002a4a:	e00a      	b.n	8002a62 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f022 020e 	bic.w	r2, r2, #14
 8002a5a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	4a3c      	ldr	r2, [pc, #240]	; (8002b58 <HAL_DMA_Abort+0x214>)
 8002a68:	4293      	cmp	r3, r2
 8002a6a:	d072      	beq.n	8002b52 <HAL_DMA_Abort+0x20e>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a3a      	ldr	r2, [pc, #232]	; (8002b5c <HAL_DMA_Abort+0x218>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d06d      	beq.n	8002b52 <HAL_DMA_Abort+0x20e>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a39      	ldr	r2, [pc, #228]	; (8002b60 <HAL_DMA_Abort+0x21c>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d068      	beq.n	8002b52 <HAL_DMA_Abort+0x20e>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a37      	ldr	r2, [pc, #220]	; (8002b64 <HAL_DMA_Abort+0x220>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d063      	beq.n	8002b52 <HAL_DMA_Abort+0x20e>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4a36      	ldr	r2, [pc, #216]	; (8002b68 <HAL_DMA_Abort+0x224>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d05e      	beq.n	8002b52 <HAL_DMA_Abort+0x20e>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a34      	ldr	r2, [pc, #208]	; (8002b6c <HAL_DMA_Abort+0x228>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d059      	beq.n	8002b52 <HAL_DMA_Abort+0x20e>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a33      	ldr	r2, [pc, #204]	; (8002b70 <HAL_DMA_Abort+0x22c>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d054      	beq.n	8002b52 <HAL_DMA_Abort+0x20e>
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a31      	ldr	r2, [pc, #196]	; (8002b74 <HAL_DMA_Abort+0x230>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d04f      	beq.n	8002b52 <HAL_DMA_Abort+0x20e>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a30      	ldr	r2, [pc, #192]	; (8002b78 <HAL_DMA_Abort+0x234>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d04a      	beq.n	8002b52 <HAL_DMA_Abort+0x20e>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4a2e      	ldr	r2, [pc, #184]	; (8002b7c <HAL_DMA_Abort+0x238>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d045      	beq.n	8002b52 <HAL_DMA_Abort+0x20e>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a2d      	ldr	r2, [pc, #180]	; (8002b80 <HAL_DMA_Abort+0x23c>)
 8002acc:	4293      	cmp	r3, r2
 8002ace:	d040      	beq.n	8002b52 <HAL_DMA_Abort+0x20e>
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	4a2b      	ldr	r2, [pc, #172]	; (8002b84 <HAL_DMA_Abort+0x240>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d03b      	beq.n	8002b52 <HAL_DMA_Abort+0x20e>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	4a2a      	ldr	r2, [pc, #168]	; (8002b88 <HAL_DMA_Abort+0x244>)
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d036      	beq.n	8002b52 <HAL_DMA_Abort+0x20e>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a28      	ldr	r2, [pc, #160]	; (8002b8c <HAL_DMA_Abort+0x248>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d031      	beq.n	8002b52 <HAL_DMA_Abort+0x20e>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a27      	ldr	r2, [pc, #156]	; (8002b90 <HAL_DMA_Abort+0x24c>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d02c      	beq.n	8002b52 <HAL_DMA_Abort+0x20e>
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a25      	ldr	r2, [pc, #148]	; (8002b94 <HAL_DMA_Abort+0x250>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d027      	beq.n	8002b52 <HAL_DMA_Abort+0x20e>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a24      	ldr	r2, [pc, #144]	; (8002b98 <HAL_DMA_Abort+0x254>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d022      	beq.n	8002b52 <HAL_DMA_Abort+0x20e>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a22      	ldr	r2, [pc, #136]	; (8002b9c <HAL_DMA_Abort+0x258>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d01d      	beq.n	8002b52 <HAL_DMA_Abort+0x20e>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a21      	ldr	r2, [pc, #132]	; (8002ba0 <HAL_DMA_Abort+0x25c>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d018      	beq.n	8002b52 <HAL_DMA_Abort+0x20e>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a1f      	ldr	r2, [pc, #124]	; (8002ba4 <HAL_DMA_Abort+0x260>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d013      	beq.n	8002b52 <HAL_DMA_Abort+0x20e>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a1e      	ldr	r2, [pc, #120]	; (8002ba8 <HAL_DMA_Abort+0x264>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d00e      	beq.n	8002b52 <HAL_DMA_Abort+0x20e>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a1c      	ldr	r2, [pc, #112]	; (8002bac <HAL_DMA_Abort+0x268>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d009      	beq.n	8002b52 <HAL_DMA_Abort+0x20e>
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a1b      	ldr	r2, [pc, #108]	; (8002bb0 <HAL_DMA_Abort+0x26c>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d004      	beq.n	8002b52 <HAL_DMA_Abort+0x20e>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a19      	ldr	r2, [pc, #100]	; (8002bb4 <HAL_DMA_Abort+0x270>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d132      	bne.n	8002bb8 <HAL_DMA_Abort+0x274>
 8002b52:	2301      	movs	r3, #1
 8002b54:	e031      	b.n	8002bba <HAL_DMA_Abort+0x276>
 8002b56:	bf00      	nop
 8002b58:	40020010 	.word	0x40020010
 8002b5c:	40020028 	.word	0x40020028
 8002b60:	40020040 	.word	0x40020040
 8002b64:	40020058 	.word	0x40020058
 8002b68:	40020070 	.word	0x40020070
 8002b6c:	40020088 	.word	0x40020088
 8002b70:	400200a0 	.word	0x400200a0
 8002b74:	400200b8 	.word	0x400200b8
 8002b78:	40020410 	.word	0x40020410
 8002b7c:	40020428 	.word	0x40020428
 8002b80:	40020440 	.word	0x40020440
 8002b84:	40020458 	.word	0x40020458
 8002b88:	40020470 	.word	0x40020470
 8002b8c:	40020488 	.word	0x40020488
 8002b90:	400204a0 	.word	0x400204a0
 8002b94:	400204b8 	.word	0x400204b8
 8002b98:	58025408 	.word	0x58025408
 8002b9c:	5802541c 	.word	0x5802541c
 8002ba0:	58025430 	.word	0x58025430
 8002ba4:	58025444 	.word	0x58025444
 8002ba8:	58025458 	.word	0x58025458
 8002bac:	5802546c 	.word	0x5802546c
 8002bb0:	58025480 	.word	0x58025480
 8002bb4:	58025494 	.word	0x58025494
 8002bb8:	2300      	movs	r3, #0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d007      	beq.n	8002bce <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bc8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002bcc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a6d      	ldr	r2, [pc, #436]	; (8002d88 <HAL_DMA_Abort+0x444>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d04a      	beq.n	8002c6e <HAL_DMA_Abort+0x32a>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a6b      	ldr	r2, [pc, #428]	; (8002d8c <HAL_DMA_Abort+0x448>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d045      	beq.n	8002c6e <HAL_DMA_Abort+0x32a>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a6a      	ldr	r2, [pc, #424]	; (8002d90 <HAL_DMA_Abort+0x44c>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d040      	beq.n	8002c6e <HAL_DMA_Abort+0x32a>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a68      	ldr	r2, [pc, #416]	; (8002d94 <HAL_DMA_Abort+0x450>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d03b      	beq.n	8002c6e <HAL_DMA_Abort+0x32a>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a67      	ldr	r2, [pc, #412]	; (8002d98 <HAL_DMA_Abort+0x454>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d036      	beq.n	8002c6e <HAL_DMA_Abort+0x32a>
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a65      	ldr	r2, [pc, #404]	; (8002d9c <HAL_DMA_Abort+0x458>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d031      	beq.n	8002c6e <HAL_DMA_Abort+0x32a>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a64      	ldr	r2, [pc, #400]	; (8002da0 <HAL_DMA_Abort+0x45c>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d02c      	beq.n	8002c6e <HAL_DMA_Abort+0x32a>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a62      	ldr	r2, [pc, #392]	; (8002da4 <HAL_DMA_Abort+0x460>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d027      	beq.n	8002c6e <HAL_DMA_Abort+0x32a>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a61      	ldr	r2, [pc, #388]	; (8002da8 <HAL_DMA_Abort+0x464>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d022      	beq.n	8002c6e <HAL_DMA_Abort+0x32a>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a5f      	ldr	r2, [pc, #380]	; (8002dac <HAL_DMA_Abort+0x468>)
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d01d      	beq.n	8002c6e <HAL_DMA_Abort+0x32a>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4a5e      	ldr	r2, [pc, #376]	; (8002db0 <HAL_DMA_Abort+0x46c>)
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d018      	beq.n	8002c6e <HAL_DMA_Abort+0x32a>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a5c      	ldr	r2, [pc, #368]	; (8002db4 <HAL_DMA_Abort+0x470>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d013      	beq.n	8002c6e <HAL_DMA_Abort+0x32a>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a5b      	ldr	r2, [pc, #364]	; (8002db8 <HAL_DMA_Abort+0x474>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d00e      	beq.n	8002c6e <HAL_DMA_Abort+0x32a>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	4a59      	ldr	r2, [pc, #356]	; (8002dbc <HAL_DMA_Abort+0x478>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d009      	beq.n	8002c6e <HAL_DMA_Abort+0x32a>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a58      	ldr	r2, [pc, #352]	; (8002dc0 <HAL_DMA_Abort+0x47c>)
 8002c60:	4293      	cmp	r3, r2
 8002c62:	d004      	beq.n	8002c6e <HAL_DMA_Abort+0x32a>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a56      	ldr	r2, [pc, #344]	; (8002dc4 <HAL_DMA_Abort+0x480>)
 8002c6a:	4293      	cmp	r3, r2
 8002c6c:	d108      	bne.n	8002c80 <HAL_DMA_Abort+0x33c>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	681a      	ldr	r2, [r3, #0]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f022 0201 	bic.w	r2, r2, #1
 8002c7c:	601a      	str	r2, [r3, #0]
 8002c7e:	e007      	b.n	8002c90 <HAL_DMA_Abort+0x34c>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f022 0201 	bic.w	r2, r2, #1
 8002c8e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002c90:	e013      	b.n	8002cba <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002c92:	f7fe fb0f 	bl	80012b4 <HAL_GetTick>
 8002c96:	4602      	mov	r2, r0
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	1ad3      	subs	r3, r2, r3
 8002c9c:	2b05      	cmp	r3, #5
 8002c9e:	d90c      	bls.n	8002cba <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2220      	movs	r2, #32
 8002ca4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2203      	movs	r2, #3
 8002caa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	e12d      	b.n	8002f16 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1e5      	bne.n	8002c92 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a2f      	ldr	r2, [pc, #188]	; (8002d88 <HAL_DMA_Abort+0x444>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d04a      	beq.n	8002d66 <HAL_DMA_Abort+0x422>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a2d      	ldr	r2, [pc, #180]	; (8002d8c <HAL_DMA_Abort+0x448>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d045      	beq.n	8002d66 <HAL_DMA_Abort+0x422>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a2c      	ldr	r2, [pc, #176]	; (8002d90 <HAL_DMA_Abort+0x44c>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d040      	beq.n	8002d66 <HAL_DMA_Abort+0x422>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a2a      	ldr	r2, [pc, #168]	; (8002d94 <HAL_DMA_Abort+0x450>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d03b      	beq.n	8002d66 <HAL_DMA_Abort+0x422>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a29      	ldr	r2, [pc, #164]	; (8002d98 <HAL_DMA_Abort+0x454>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d036      	beq.n	8002d66 <HAL_DMA_Abort+0x422>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a27      	ldr	r2, [pc, #156]	; (8002d9c <HAL_DMA_Abort+0x458>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d031      	beq.n	8002d66 <HAL_DMA_Abort+0x422>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a26      	ldr	r2, [pc, #152]	; (8002da0 <HAL_DMA_Abort+0x45c>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d02c      	beq.n	8002d66 <HAL_DMA_Abort+0x422>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a24      	ldr	r2, [pc, #144]	; (8002da4 <HAL_DMA_Abort+0x460>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d027      	beq.n	8002d66 <HAL_DMA_Abort+0x422>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a23      	ldr	r2, [pc, #140]	; (8002da8 <HAL_DMA_Abort+0x464>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d022      	beq.n	8002d66 <HAL_DMA_Abort+0x422>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a21      	ldr	r2, [pc, #132]	; (8002dac <HAL_DMA_Abort+0x468>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d01d      	beq.n	8002d66 <HAL_DMA_Abort+0x422>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a20      	ldr	r2, [pc, #128]	; (8002db0 <HAL_DMA_Abort+0x46c>)
 8002d30:	4293      	cmp	r3, r2
 8002d32:	d018      	beq.n	8002d66 <HAL_DMA_Abort+0x422>
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a1e      	ldr	r2, [pc, #120]	; (8002db4 <HAL_DMA_Abort+0x470>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d013      	beq.n	8002d66 <HAL_DMA_Abort+0x422>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a1d      	ldr	r2, [pc, #116]	; (8002db8 <HAL_DMA_Abort+0x474>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d00e      	beq.n	8002d66 <HAL_DMA_Abort+0x422>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a1b      	ldr	r2, [pc, #108]	; (8002dbc <HAL_DMA_Abort+0x478>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d009      	beq.n	8002d66 <HAL_DMA_Abort+0x422>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a1a      	ldr	r2, [pc, #104]	; (8002dc0 <HAL_DMA_Abort+0x47c>)
 8002d58:	4293      	cmp	r3, r2
 8002d5a:	d004      	beq.n	8002d66 <HAL_DMA_Abort+0x422>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a18      	ldr	r2, [pc, #96]	; (8002dc4 <HAL_DMA_Abort+0x480>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d101      	bne.n	8002d6a <HAL_DMA_Abort+0x426>
 8002d66:	2301      	movs	r3, #1
 8002d68:	e000      	b.n	8002d6c <HAL_DMA_Abort+0x428>
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d02b      	beq.n	8002dc8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d74:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d7a:	f003 031f 	and.w	r3, r3, #31
 8002d7e:	223f      	movs	r2, #63	; 0x3f
 8002d80:	409a      	lsls	r2, r3
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	609a      	str	r2, [r3, #8]
 8002d86:	e02a      	b.n	8002dde <HAL_DMA_Abort+0x49a>
 8002d88:	40020010 	.word	0x40020010
 8002d8c:	40020028 	.word	0x40020028
 8002d90:	40020040 	.word	0x40020040
 8002d94:	40020058 	.word	0x40020058
 8002d98:	40020070 	.word	0x40020070
 8002d9c:	40020088 	.word	0x40020088
 8002da0:	400200a0 	.word	0x400200a0
 8002da4:	400200b8 	.word	0x400200b8
 8002da8:	40020410 	.word	0x40020410
 8002dac:	40020428 	.word	0x40020428
 8002db0:	40020440 	.word	0x40020440
 8002db4:	40020458 	.word	0x40020458
 8002db8:	40020470 	.word	0x40020470
 8002dbc:	40020488 	.word	0x40020488
 8002dc0:	400204a0 	.word	0x400204a0
 8002dc4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002dcc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dd2:	f003 031f 	and.w	r3, r3, #31
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	409a      	lsls	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a4f      	ldr	r2, [pc, #316]	; (8002f20 <HAL_DMA_Abort+0x5dc>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d072      	beq.n	8002ece <HAL_DMA_Abort+0x58a>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a4d      	ldr	r2, [pc, #308]	; (8002f24 <HAL_DMA_Abort+0x5e0>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d06d      	beq.n	8002ece <HAL_DMA_Abort+0x58a>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a4c      	ldr	r2, [pc, #304]	; (8002f28 <HAL_DMA_Abort+0x5e4>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d068      	beq.n	8002ece <HAL_DMA_Abort+0x58a>
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	4a4a      	ldr	r2, [pc, #296]	; (8002f2c <HAL_DMA_Abort+0x5e8>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d063      	beq.n	8002ece <HAL_DMA_Abort+0x58a>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4a49      	ldr	r2, [pc, #292]	; (8002f30 <HAL_DMA_Abort+0x5ec>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d05e      	beq.n	8002ece <HAL_DMA_Abort+0x58a>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a47      	ldr	r2, [pc, #284]	; (8002f34 <HAL_DMA_Abort+0x5f0>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d059      	beq.n	8002ece <HAL_DMA_Abort+0x58a>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4a46      	ldr	r2, [pc, #280]	; (8002f38 <HAL_DMA_Abort+0x5f4>)
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d054      	beq.n	8002ece <HAL_DMA_Abort+0x58a>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a44      	ldr	r2, [pc, #272]	; (8002f3c <HAL_DMA_Abort+0x5f8>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d04f      	beq.n	8002ece <HAL_DMA_Abort+0x58a>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a43      	ldr	r2, [pc, #268]	; (8002f40 <HAL_DMA_Abort+0x5fc>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d04a      	beq.n	8002ece <HAL_DMA_Abort+0x58a>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a41      	ldr	r2, [pc, #260]	; (8002f44 <HAL_DMA_Abort+0x600>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d045      	beq.n	8002ece <HAL_DMA_Abort+0x58a>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a40      	ldr	r2, [pc, #256]	; (8002f48 <HAL_DMA_Abort+0x604>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d040      	beq.n	8002ece <HAL_DMA_Abort+0x58a>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a3e      	ldr	r2, [pc, #248]	; (8002f4c <HAL_DMA_Abort+0x608>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d03b      	beq.n	8002ece <HAL_DMA_Abort+0x58a>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a3d      	ldr	r2, [pc, #244]	; (8002f50 <HAL_DMA_Abort+0x60c>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d036      	beq.n	8002ece <HAL_DMA_Abort+0x58a>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a3b      	ldr	r2, [pc, #236]	; (8002f54 <HAL_DMA_Abort+0x610>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d031      	beq.n	8002ece <HAL_DMA_Abort+0x58a>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a3a      	ldr	r2, [pc, #232]	; (8002f58 <HAL_DMA_Abort+0x614>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d02c      	beq.n	8002ece <HAL_DMA_Abort+0x58a>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a38      	ldr	r2, [pc, #224]	; (8002f5c <HAL_DMA_Abort+0x618>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d027      	beq.n	8002ece <HAL_DMA_Abort+0x58a>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a37      	ldr	r2, [pc, #220]	; (8002f60 <HAL_DMA_Abort+0x61c>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d022      	beq.n	8002ece <HAL_DMA_Abort+0x58a>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a35      	ldr	r2, [pc, #212]	; (8002f64 <HAL_DMA_Abort+0x620>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d01d      	beq.n	8002ece <HAL_DMA_Abort+0x58a>
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a34      	ldr	r2, [pc, #208]	; (8002f68 <HAL_DMA_Abort+0x624>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d018      	beq.n	8002ece <HAL_DMA_Abort+0x58a>
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a32      	ldr	r2, [pc, #200]	; (8002f6c <HAL_DMA_Abort+0x628>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d013      	beq.n	8002ece <HAL_DMA_Abort+0x58a>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a31      	ldr	r2, [pc, #196]	; (8002f70 <HAL_DMA_Abort+0x62c>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d00e      	beq.n	8002ece <HAL_DMA_Abort+0x58a>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a2f      	ldr	r2, [pc, #188]	; (8002f74 <HAL_DMA_Abort+0x630>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d009      	beq.n	8002ece <HAL_DMA_Abort+0x58a>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a2e      	ldr	r2, [pc, #184]	; (8002f78 <HAL_DMA_Abort+0x634>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d004      	beq.n	8002ece <HAL_DMA_Abort+0x58a>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a2c      	ldr	r2, [pc, #176]	; (8002f7c <HAL_DMA_Abort+0x638>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d101      	bne.n	8002ed2 <HAL_DMA_Abort+0x58e>
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e000      	b.n	8002ed4 <HAL_DMA_Abort+0x590>
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d015      	beq.n	8002f04 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8002ee0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d00c      	beq.n	8002f04 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ef4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ef8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8002f02:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2201      	movs	r2, #1
 8002f08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3718      	adds	r7, #24
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	40020010 	.word	0x40020010
 8002f24:	40020028 	.word	0x40020028
 8002f28:	40020040 	.word	0x40020040
 8002f2c:	40020058 	.word	0x40020058
 8002f30:	40020070 	.word	0x40020070
 8002f34:	40020088 	.word	0x40020088
 8002f38:	400200a0 	.word	0x400200a0
 8002f3c:	400200b8 	.word	0x400200b8
 8002f40:	40020410 	.word	0x40020410
 8002f44:	40020428 	.word	0x40020428
 8002f48:	40020440 	.word	0x40020440
 8002f4c:	40020458 	.word	0x40020458
 8002f50:	40020470 	.word	0x40020470
 8002f54:	40020488 	.word	0x40020488
 8002f58:	400204a0 	.word	0x400204a0
 8002f5c:	400204b8 	.word	0x400204b8
 8002f60:	58025408 	.word	0x58025408
 8002f64:	5802541c 	.word	0x5802541c
 8002f68:	58025430 	.word	0x58025430
 8002f6c:	58025444 	.word	0x58025444
 8002f70:	58025458 	.word	0x58025458
 8002f74:	5802546c 	.word	0x5802546c
 8002f78:	58025480 	.word	0x58025480
 8002f7c:	58025494 	.word	0x58025494

08002f80 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d101      	bne.n	8002f92 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e237      	b.n	8003402 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f98:	b2db      	uxtb	r3, r3
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d004      	beq.n	8002fa8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2280      	movs	r2, #128	; 0x80
 8002fa2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e22c      	b.n	8003402 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a5c      	ldr	r2, [pc, #368]	; (8003120 <HAL_DMA_Abort_IT+0x1a0>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d04a      	beq.n	8003048 <HAL_DMA_Abort_IT+0xc8>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a5b      	ldr	r2, [pc, #364]	; (8003124 <HAL_DMA_Abort_IT+0x1a4>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d045      	beq.n	8003048 <HAL_DMA_Abort_IT+0xc8>
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a59      	ldr	r2, [pc, #356]	; (8003128 <HAL_DMA_Abort_IT+0x1a8>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d040      	beq.n	8003048 <HAL_DMA_Abort_IT+0xc8>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a58      	ldr	r2, [pc, #352]	; (800312c <HAL_DMA_Abort_IT+0x1ac>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d03b      	beq.n	8003048 <HAL_DMA_Abort_IT+0xc8>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a56      	ldr	r2, [pc, #344]	; (8003130 <HAL_DMA_Abort_IT+0x1b0>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d036      	beq.n	8003048 <HAL_DMA_Abort_IT+0xc8>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a55      	ldr	r2, [pc, #340]	; (8003134 <HAL_DMA_Abort_IT+0x1b4>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d031      	beq.n	8003048 <HAL_DMA_Abort_IT+0xc8>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a53      	ldr	r2, [pc, #332]	; (8003138 <HAL_DMA_Abort_IT+0x1b8>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d02c      	beq.n	8003048 <HAL_DMA_Abort_IT+0xc8>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a52      	ldr	r2, [pc, #328]	; (800313c <HAL_DMA_Abort_IT+0x1bc>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d027      	beq.n	8003048 <HAL_DMA_Abort_IT+0xc8>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a50      	ldr	r2, [pc, #320]	; (8003140 <HAL_DMA_Abort_IT+0x1c0>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d022      	beq.n	8003048 <HAL_DMA_Abort_IT+0xc8>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a4f      	ldr	r2, [pc, #316]	; (8003144 <HAL_DMA_Abort_IT+0x1c4>)
 8003008:	4293      	cmp	r3, r2
 800300a:	d01d      	beq.n	8003048 <HAL_DMA_Abort_IT+0xc8>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4a4d      	ldr	r2, [pc, #308]	; (8003148 <HAL_DMA_Abort_IT+0x1c8>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d018      	beq.n	8003048 <HAL_DMA_Abort_IT+0xc8>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	4a4c      	ldr	r2, [pc, #304]	; (800314c <HAL_DMA_Abort_IT+0x1cc>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d013      	beq.n	8003048 <HAL_DMA_Abort_IT+0xc8>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a4a      	ldr	r2, [pc, #296]	; (8003150 <HAL_DMA_Abort_IT+0x1d0>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d00e      	beq.n	8003048 <HAL_DMA_Abort_IT+0xc8>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4a49      	ldr	r2, [pc, #292]	; (8003154 <HAL_DMA_Abort_IT+0x1d4>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d009      	beq.n	8003048 <HAL_DMA_Abort_IT+0xc8>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a47      	ldr	r2, [pc, #284]	; (8003158 <HAL_DMA_Abort_IT+0x1d8>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d004      	beq.n	8003048 <HAL_DMA_Abort_IT+0xc8>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	4a46      	ldr	r2, [pc, #280]	; (800315c <HAL_DMA_Abort_IT+0x1dc>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d101      	bne.n	800304c <HAL_DMA_Abort_IT+0xcc>
 8003048:	2301      	movs	r3, #1
 800304a:	e000      	b.n	800304e <HAL_DMA_Abort_IT+0xce>
 800304c:	2300      	movs	r3, #0
 800304e:	2b00      	cmp	r3, #0
 8003050:	f000 8086 	beq.w	8003160 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2204      	movs	r2, #4
 8003058:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a2f      	ldr	r2, [pc, #188]	; (8003120 <HAL_DMA_Abort_IT+0x1a0>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d04a      	beq.n	80030fc <HAL_DMA_Abort_IT+0x17c>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a2e      	ldr	r2, [pc, #184]	; (8003124 <HAL_DMA_Abort_IT+0x1a4>)
 800306c:	4293      	cmp	r3, r2
 800306e:	d045      	beq.n	80030fc <HAL_DMA_Abort_IT+0x17c>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	4a2c      	ldr	r2, [pc, #176]	; (8003128 <HAL_DMA_Abort_IT+0x1a8>)
 8003076:	4293      	cmp	r3, r2
 8003078:	d040      	beq.n	80030fc <HAL_DMA_Abort_IT+0x17c>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a2b      	ldr	r2, [pc, #172]	; (800312c <HAL_DMA_Abort_IT+0x1ac>)
 8003080:	4293      	cmp	r3, r2
 8003082:	d03b      	beq.n	80030fc <HAL_DMA_Abort_IT+0x17c>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	4a29      	ldr	r2, [pc, #164]	; (8003130 <HAL_DMA_Abort_IT+0x1b0>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d036      	beq.n	80030fc <HAL_DMA_Abort_IT+0x17c>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4a28      	ldr	r2, [pc, #160]	; (8003134 <HAL_DMA_Abort_IT+0x1b4>)
 8003094:	4293      	cmp	r3, r2
 8003096:	d031      	beq.n	80030fc <HAL_DMA_Abort_IT+0x17c>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4a26      	ldr	r2, [pc, #152]	; (8003138 <HAL_DMA_Abort_IT+0x1b8>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d02c      	beq.n	80030fc <HAL_DMA_Abort_IT+0x17c>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a25      	ldr	r2, [pc, #148]	; (800313c <HAL_DMA_Abort_IT+0x1bc>)
 80030a8:	4293      	cmp	r3, r2
 80030aa:	d027      	beq.n	80030fc <HAL_DMA_Abort_IT+0x17c>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a23      	ldr	r2, [pc, #140]	; (8003140 <HAL_DMA_Abort_IT+0x1c0>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d022      	beq.n	80030fc <HAL_DMA_Abort_IT+0x17c>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a22      	ldr	r2, [pc, #136]	; (8003144 <HAL_DMA_Abort_IT+0x1c4>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d01d      	beq.n	80030fc <HAL_DMA_Abort_IT+0x17c>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a20      	ldr	r2, [pc, #128]	; (8003148 <HAL_DMA_Abort_IT+0x1c8>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d018      	beq.n	80030fc <HAL_DMA_Abort_IT+0x17c>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a1f      	ldr	r2, [pc, #124]	; (800314c <HAL_DMA_Abort_IT+0x1cc>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d013      	beq.n	80030fc <HAL_DMA_Abort_IT+0x17c>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a1d      	ldr	r2, [pc, #116]	; (8003150 <HAL_DMA_Abort_IT+0x1d0>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d00e      	beq.n	80030fc <HAL_DMA_Abort_IT+0x17c>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a1c      	ldr	r2, [pc, #112]	; (8003154 <HAL_DMA_Abort_IT+0x1d4>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d009      	beq.n	80030fc <HAL_DMA_Abort_IT+0x17c>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a1a      	ldr	r2, [pc, #104]	; (8003158 <HAL_DMA_Abort_IT+0x1d8>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d004      	beq.n	80030fc <HAL_DMA_Abort_IT+0x17c>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a19      	ldr	r2, [pc, #100]	; (800315c <HAL_DMA_Abort_IT+0x1dc>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d108      	bne.n	800310e <HAL_DMA_Abort_IT+0x18e>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f022 0201 	bic.w	r2, r2, #1
 800310a:	601a      	str	r2, [r3, #0]
 800310c:	e178      	b.n	8003400 <HAL_DMA_Abort_IT+0x480>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	681a      	ldr	r2, [r3, #0]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f022 0201 	bic.w	r2, r2, #1
 800311c:	601a      	str	r2, [r3, #0]
 800311e:	e16f      	b.n	8003400 <HAL_DMA_Abort_IT+0x480>
 8003120:	40020010 	.word	0x40020010
 8003124:	40020028 	.word	0x40020028
 8003128:	40020040 	.word	0x40020040
 800312c:	40020058 	.word	0x40020058
 8003130:	40020070 	.word	0x40020070
 8003134:	40020088 	.word	0x40020088
 8003138:	400200a0 	.word	0x400200a0
 800313c:	400200b8 	.word	0x400200b8
 8003140:	40020410 	.word	0x40020410
 8003144:	40020428 	.word	0x40020428
 8003148:	40020440 	.word	0x40020440
 800314c:	40020458 	.word	0x40020458
 8003150:	40020470 	.word	0x40020470
 8003154:	40020488 	.word	0x40020488
 8003158:	400204a0 	.word	0x400204a0
 800315c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f022 020e 	bic.w	r2, r2, #14
 800316e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a6c      	ldr	r2, [pc, #432]	; (8003328 <HAL_DMA_Abort_IT+0x3a8>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d04a      	beq.n	8003210 <HAL_DMA_Abort_IT+0x290>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a6b      	ldr	r2, [pc, #428]	; (800332c <HAL_DMA_Abort_IT+0x3ac>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d045      	beq.n	8003210 <HAL_DMA_Abort_IT+0x290>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a69      	ldr	r2, [pc, #420]	; (8003330 <HAL_DMA_Abort_IT+0x3b0>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d040      	beq.n	8003210 <HAL_DMA_Abort_IT+0x290>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a68      	ldr	r2, [pc, #416]	; (8003334 <HAL_DMA_Abort_IT+0x3b4>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d03b      	beq.n	8003210 <HAL_DMA_Abort_IT+0x290>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a66      	ldr	r2, [pc, #408]	; (8003338 <HAL_DMA_Abort_IT+0x3b8>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d036      	beq.n	8003210 <HAL_DMA_Abort_IT+0x290>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a65      	ldr	r2, [pc, #404]	; (800333c <HAL_DMA_Abort_IT+0x3bc>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d031      	beq.n	8003210 <HAL_DMA_Abort_IT+0x290>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a63      	ldr	r2, [pc, #396]	; (8003340 <HAL_DMA_Abort_IT+0x3c0>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d02c      	beq.n	8003210 <HAL_DMA_Abort_IT+0x290>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a62      	ldr	r2, [pc, #392]	; (8003344 <HAL_DMA_Abort_IT+0x3c4>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d027      	beq.n	8003210 <HAL_DMA_Abort_IT+0x290>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a60      	ldr	r2, [pc, #384]	; (8003348 <HAL_DMA_Abort_IT+0x3c8>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d022      	beq.n	8003210 <HAL_DMA_Abort_IT+0x290>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a5f      	ldr	r2, [pc, #380]	; (800334c <HAL_DMA_Abort_IT+0x3cc>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d01d      	beq.n	8003210 <HAL_DMA_Abort_IT+0x290>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a5d      	ldr	r2, [pc, #372]	; (8003350 <HAL_DMA_Abort_IT+0x3d0>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d018      	beq.n	8003210 <HAL_DMA_Abort_IT+0x290>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a5c      	ldr	r2, [pc, #368]	; (8003354 <HAL_DMA_Abort_IT+0x3d4>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d013      	beq.n	8003210 <HAL_DMA_Abort_IT+0x290>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a5a      	ldr	r2, [pc, #360]	; (8003358 <HAL_DMA_Abort_IT+0x3d8>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d00e      	beq.n	8003210 <HAL_DMA_Abort_IT+0x290>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a59      	ldr	r2, [pc, #356]	; (800335c <HAL_DMA_Abort_IT+0x3dc>)
 80031f8:	4293      	cmp	r3, r2
 80031fa:	d009      	beq.n	8003210 <HAL_DMA_Abort_IT+0x290>
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4a57      	ldr	r2, [pc, #348]	; (8003360 <HAL_DMA_Abort_IT+0x3e0>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d004      	beq.n	8003210 <HAL_DMA_Abort_IT+0x290>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	4a56      	ldr	r2, [pc, #344]	; (8003364 <HAL_DMA_Abort_IT+0x3e4>)
 800320c:	4293      	cmp	r3, r2
 800320e:	d108      	bne.n	8003222 <HAL_DMA_Abort_IT+0x2a2>
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f022 0201 	bic.w	r2, r2, #1
 800321e:	601a      	str	r2, [r3, #0]
 8003220:	e007      	b.n	8003232 <HAL_DMA_Abort_IT+0x2b2>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f022 0201 	bic.w	r2, r2, #1
 8003230:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a3c      	ldr	r2, [pc, #240]	; (8003328 <HAL_DMA_Abort_IT+0x3a8>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d072      	beq.n	8003322 <HAL_DMA_Abort_IT+0x3a2>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a3a      	ldr	r2, [pc, #232]	; (800332c <HAL_DMA_Abort_IT+0x3ac>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d06d      	beq.n	8003322 <HAL_DMA_Abort_IT+0x3a2>
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a39      	ldr	r2, [pc, #228]	; (8003330 <HAL_DMA_Abort_IT+0x3b0>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d068      	beq.n	8003322 <HAL_DMA_Abort_IT+0x3a2>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a37      	ldr	r2, [pc, #220]	; (8003334 <HAL_DMA_Abort_IT+0x3b4>)
 8003256:	4293      	cmp	r3, r2
 8003258:	d063      	beq.n	8003322 <HAL_DMA_Abort_IT+0x3a2>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a36      	ldr	r2, [pc, #216]	; (8003338 <HAL_DMA_Abort_IT+0x3b8>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d05e      	beq.n	8003322 <HAL_DMA_Abort_IT+0x3a2>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	4a34      	ldr	r2, [pc, #208]	; (800333c <HAL_DMA_Abort_IT+0x3bc>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d059      	beq.n	8003322 <HAL_DMA_Abort_IT+0x3a2>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4a33      	ldr	r2, [pc, #204]	; (8003340 <HAL_DMA_Abort_IT+0x3c0>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d054      	beq.n	8003322 <HAL_DMA_Abort_IT+0x3a2>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a31      	ldr	r2, [pc, #196]	; (8003344 <HAL_DMA_Abort_IT+0x3c4>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d04f      	beq.n	8003322 <HAL_DMA_Abort_IT+0x3a2>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	4a30      	ldr	r2, [pc, #192]	; (8003348 <HAL_DMA_Abort_IT+0x3c8>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d04a      	beq.n	8003322 <HAL_DMA_Abort_IT+0x3a2>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a2e      	ldr	r2, [pc, #184]	; (800334c <HAL_DMA_Abort_IT+0x3cc>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d045      	beq.n	8003322 <HAL_DMA_Abort_IT+0x3a2>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a2d      	ldr	r2, [pc, #180]	; (8003350 <HAL_DMA_Abort_IT+0x3d0>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d040      	beq.n	8003322 <HAL_DMA_Abort_IT+0x3a2>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4a2b      	ldr	r2, [pc, #172]	; (8003354 <HAL_DMA_Abort_IT+0x3d4>)
 80032a6:	4293      	cmp	r3, r2
 80032a8:	d03b      	beq.n	8003322 <HAL_DMA_Abort_IT+0x3a2>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a2a      	ldr	r2, [pc, #168]	; (8003358 <HAL_DMA_Abort_IT+0x3d8>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d036      	beq.n	8003322 <HAL_DMA_Abort_IT+0x3a2>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a28      	ldr	r2, [pc, #160]	; (800335c <HAL_DMA_Abort_IT+0x3dc>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d031      	beq.n	8003322 <HAL_DMA_Abort_IT+0x3a2>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a27      	ldr	r2, [pc, #156]	; (8003360 <HAL_DMA_Abort_IT+0x3e0>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d02c      	beq.n	8003322 <HAL_DMA_Abort_IT+0x3a2>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a25      	ldr	r2, [pc, #148]	; (8003364 <HAL_DMA_Abort_IT+0x3e4>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d027      	beq.n	8003322 <HAL_DMA_Abort_IT+0x3a2>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a24      	ldr	r2, [pc, #144]	; (8003368 <HAL_DMA_Abort_IT+0x3e8>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d022      	beq.n	8003322 <HAL_DMA_Abort_IT+0x3a2>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a22      	ldr	r2, [pc, #136]	; (800336c <HAL_DMA_Abort_IT+0x3ec>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d01d      	beq.n	8003322 <HAL_DMA_Abort_IT+0x3a2>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a21      	ldr	r2, [pc, #132]	; (8003370 <HAL_DMA_Abort_IT+0x3f0>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d018      	beq.n	8003322 <HAL_DMA_Abort_IT+0x3a2>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a1f      	ldr	r2, [pc, #124]	; (8003374 <HAL_DMA_Abort_IT+0x3f4>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d013      	beq.n	8003322 <HAL_DMA_Abort_IT+0x3a2>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a1e      	ldr	r2, [pc, #120]	; (8003378 <HAL_DMA_Abort_IT+0x3f8>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d00e      	beq.n	8003322 <HAL_DMA_Abort_IT+0x3a2>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a1c      	ldr	r2, [pc, #112]	; (800337c <HAL_DMA_Abort_IT+0x3fc>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d009      	beq.n	8003322 <HAL_DMA_Abort_IT+0x3a2>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a1b      	ldr	r2, [pc, #108]	; (8003380 <HAL_DMA_Abort_IT+0x400>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d004      	beq.n	8003322 <HAL_DMA_Abort_IT+0x3a2>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a19      	ldr	r2, [pc, #100]	; (8003384 <HAL_DMA_Abort_IT+0x404>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d132      	bne.n	8003388 <HAL_DMA_Abort_IT+0x408>
 8003322:	2301      	movs	r3, #1
 8003324:	e031      	b.n	800338a <HAL_DMA_Abort_IT+0x40a>
 8003326:	bf00      	nop
 8003328:	40020010 	.word	0x40020010
 800332c:	40020028 	.word	0x40020028
 8003330:	40020040 	.word	0x40020040
 8003334:	40020058 	.word	0x40020058
 8003338:	40020070 	.word	0x40020070
 800333c:	40020088 	.word	0x40020088
 8003340:	400200a0 	.word	0x400200a0
 8003344:	400200b8 	.word	0x400200b8
 8003348:	40020410 	.word	0x40020410
 800334c:	40020428 	.word	0x40020428
 8003350:	40020440 	.word	0x40020440
 8003354:	40020458 	.word	0x40020458
 8003358:	40020470 	.word	0x40020470
 800335c:	40020488 	.word	0x40020488
 8003360:	400204a0 	.word	0x400204a0
 8003364:	400204b8 	.word	0x400204b8
 8003368:	58025408 	.word	0x58025408
 800336c:	5802541c 	.word	0x5802541c
 8003370:	58025430 	.word	0x58025430
 8003374:	58025444 	.word	0x58025444
 8003378:	58025458 	.word	0x58025458
 800337c:	5802546c 	.word	0x5802546c
 8003380:	58025480 	.word	0x58025480
 8003384:	58025494 	.word	0x58025494
 8003388:	2300      	movs	r3, #0
 800338a:	2b00      	cmp	r3, #0
 800338c:	d028      	beq.n	80033e0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003392:	681a      	ldr	r2, [r3, #0]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003398:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800339c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033a2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a8:	f003 031f 	and.w	r3, r3, #31
 80033ac:	2201      	movs	r2, #1
 80033ae:	409a      	lsls	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80033bc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d00c      	beq.n	80033e0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80033d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80033d4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80033de:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d003      	beq.n	8003400 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8003400:	2300      	movs	r3, #0
}
 8003402:	4618      	mov	r0, r3
 8003404:	3710      	adds	r7, #16
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop

0800340c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b08a      	sub	sp, #40	; 0x28
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8003414:	2300      	movs	r3, #0
 8003416:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003418:	4b67      	ldr	r3, [pc, #412]	; (80035b8 <HAL_DMA_IRQHandler+0x1ac>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a67      	ldr	r2, [pc, #412]	; (80035bc <HAL_DMA_IRQHandler+0x1b0>)
 800341e:	fba2 2303 	umull	r2, r3, r2, r3
 8003422:	0a9b      	lsrs	r3, r3, #10
 8003424:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800342a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003430:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8003432:	6a3b      	ldr	r3, [r7, #32]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	4a5f      	ldr	r2, [pc, #380]	; (80035c0 <HAL_DMA_IRQHandler+0x1b4>)
 8003444:	4293      	cmp	r3, r2
 8003446:	d04a      	beq.n	80034de <HAL_DMA_IRQHandler+0xd2>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a5d      	ldr	r2, [pc, #372]	; (80035c4 <HAL_DMA_IRQHandler+0x1b8>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d045      	beq.n	80034de <HAL_DMA_IRQHandler+0xd2>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a5c      	ldr	r2, [pc, #368]	; (80035c8 <HAL_DMA_IRQHandler+0x1bc>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d040      	beq.n	80034de <HAL_DMA_IRQHandler+0xd2>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a5a      	ldr	r2, [pc, #360]	; (80035cc <HAL_DMA_IRQHandler+0x1c0>)
 8003462:	4293      	cmp	r3, r2
 8003464:	d03b      	beq.n	80034de <HAL_DMA_IRQHandler+0xd2>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a59      	ldr	r2, [pc, #356]	; (80035d0 <HAL_DMA_IRQHandler+0x1c4>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d036      	beq.n	80034de <HAL_DMA_IRQHandler+0xd2>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4a57      	ldr	r2, [pc, #348]	; (80035d4 <HAL_DMA_IRQHandler+0x1c8>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d031      	beq.n	80034de <HAL_DMA_IRQHandler+0xd2>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4a56      	ldr	r2, [pc, #344]	; (80035d8 <HAL_DMA_IRQHandler+0x1cc>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d02c      	beq.n	80034de <HAL_DMA_IRQHandler+0xd2>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a54      	ldr	r2, [pc, #336]	; (80035dc <HAL_DMA_IRQHandler+0x1d0>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d027      	beq.n	80034de <HAL_DMA_IRQHandler+0xd2>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a53      	ldr	r2, [pc, #332]	; (80035e0 <HAL_DMA_IRQHandler+0x1d4>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d022      	beq.n	80034de <HAL_DMA_IRQHandler+0xd2>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a51      	ldr	r2, [pc, #324]	; (80035e4 <HAL_DMA_IRQHandler+0x1d8>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d01d      	beq.n	80034de <HAL_DMA_IRQHandler+0xd2>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a50      	ldr	r2, [pc, #320]	; (80035e8 <HAL_DMA_IRQHandler+0x1dc>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d018      	beq.n	80034de <HAL_DMA_IRQHandler+0xd2>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a4e      	ldr	r2, [pc, #312]	; (80035ec <HAL_DMA_IRQHandler+0x1e0>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d013      	beq.n	80034de <HAL_DMA_IRQHandler+0xd2>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a4d      	ldr	r2, [pc, #308]	; (80035f0 <HAL_DMA_IRQHandler+0x1e4>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d00e      	beq.n	80034de <HAL_DMA_IRQHandler+0xd2>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a4b      	ldr	r2, [pc, #300]	; (80035f4 <HAL_DMA_IRQHandler+0x1e8>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d009      	beq.n	80034de <HAL_DMA_IRQHandler+0xd2>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a4a      	ldr	r2, [pc, #296]	; (80035f8 <HAL_DMA_IRQHandler+0x1ec>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d004      	beq.n	80034de <HAL_DMA_IRQHandler+0xd2>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a48      	ldr	r2, [pc, #288]	; (80035fc <HAL_DMA_IRQHandler+0x1f0>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d101      	bne.n	80034e2 <HAL_DMA_IRQHandler+0xd6>
 80034de:	2301      	movs	r3, #1
 80034e0:	e000      	b.n	80034e4 <HAL_DMA_IRQHandler+0xd8>
 80034e2:	2300      	movs	r3, #0
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	f000 842b 	beq.w	8003d40 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80034ee:	f003 031f 	and.w	r3, r3, #31
 80034f2:	2208      	movs	r2, #8
 80034f4:	409a      	lsls	r2, r3
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	4013      	ands	r3, r2
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	f000 80a2 	beq.w	8003644 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a2e      	ldr	r2, [pc, #184]	; (80035c0 <HAL_DMA_IRQHandler+0x1b4>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d04a      	beq.n	80035a0 <HAL_DMA_IRQHandler+0x194>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a2d      	ldr	r2, [pc, #180]	; (80035c4 <HAL_DMA_IRQHandler+0x1b8>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d045      	beq.n	80035a0 <HAL_DMA_IRQHandler+0x194>
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a2b      	ldr	r2, [pc, #172]	; (80035c8 <HAL_DMA_IRQHandler+0x1bc>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d040      	beq.n	80035a0 <HAL_DMA_IRQHandler+0x194>
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a2a      	ldr	r2, [pc, #168]	; (80035cc <HAL_DMA_IRQHandler+0x1c0>)
 8003524:	4293      	cmp	r3, r2
 8003526:	d03b      	beq.n	80035a0 <HAL_DMA_IRQHandler+0x194>
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a28      	ldr	r2, [pc, #160]	; (80035d0 <HAL_DMA_IRQHandler+0x1c4>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d036      	beq.n	80035a0 <HAL_DMA_IRQHandler+0x194>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a27      	ldr	r2, [pc, #156]	; (80035d4 <HAL_DMA_IRQHandler+0x1c8>)
 8003538:	4293      	cmp	r3, r2
 800353a:	d031      	beq.n	80035a0 <HAL_DMA_IRQHandler+0x194>
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	4a25      	ldr	r2, [pc, #148]	; (80035d8 <HAL_DMA_IRQHandler+0x1cc>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d02c      	beq.n	80035a0 <HAL_DMA_IRQHandler+0x194>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a24      	ldr	r2, [pc, #144]	; (80035dc <HAL_DMA_IRQHandler+0x1d0>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d027      	beq.n	80035a0 <HAL_DMA_IRQHandler+0x194>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	4a22      	ldr	r2, [pc, #136]	; (80035e0 <HAL_DMA_IRQHandler+0x1d4>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d022      	beq.n	80035a0 <HAL_DMA_IRQHandler+0x194>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	4a21      	ldr	r2, [pc, #132]	; (80035e4 <HAL_DMA_IRQHandler+0x1d8>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d01d      	beq.n	80035a0 <HAL_DMA_IRQHandler+0x194>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a1f      	ldr	r2, [pc, #124]	; (80035e8 <HAL_DMA_IRQHandler+0x1dc>)
 800356a:	4293      	cmp	r3, r2
 800356c:	d018      	beq.n	80035a0 <HAL_DMA_IRQHandler+0x194>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a1e      	ldr	r2, [pc, #120]	; (80035ec <HAL_DMA_IRQHandler+0x1e0>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d013      	beq.n	80035a0 <HAL_DMA_IRQHandler+0x194>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	4a1c      	ldr	r2, [pc, #112]	; (80035f0 <HAL_DMA_IRQHandler+0x1e4>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d00e      	beq.n	80035a0 <HAL_DMA_IRQHandler+0x194>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a1b      	ldr	r2, [pc, #108]	; (80035f4 <HAL_DMA_IRQHandler+0x1e8>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d009      	beq.n	80035a0 <HAL_DMA_IRQHandler+0x194>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a19      	ldr	r2, [pc, #100]	; (80035f8 <HAL_DMA_IRQHandler+0x1ec>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d004      	beq.n	80035a0 <HAL_DMA_IRQHandler+0x194>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a18      	ldr	r2, [pc, #96]	; (80035fc <HAL_DMA_IRQHandler+0x1f0>)
 800359c:	4293      	cmp	r3, r2
 800359e:	d12f      	bne.n	8003600 <HAL_DMA_IRQHandler+0x1f4>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0304 	and.w	r3, r3, #4
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	bf14      	ite	ne
 80035ae:	2301      	movne	r3, #1
 80035b0:	2300      	moveq	r3, #0
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	e02e      	b.n	8003614 <HAL_DMA_IRQHandler+0x208>
 80035b6:	bf00      	nop
 80035b8:	24000000 	.word	0x24000000
 80035bc:	1b4e81b5 	.word	0x1b4e81b5
 80035c0:	40020010 	.word	0x40020010
 80035c4:	40020028 	.word	0x40020028
 80035c8:	40020040 	.word	0x40020040
 80035cc:	40020058 	.word	0x40020058
 80035d0:	40020070 	.word	0x40020070
 80035d4:	40020088 	.word	0x40020088
 80035d8:	400200a0 	.word	0x400200a0
 80035dc:	400200b8 	.word	0x400200b8
 80035e0:	40020410 	.word	0x40020410
 80035e4:	40020428 	.word	0x40020428
 80035e8:	40020440 	.word	0x40020440
 80035ec:	40020458 	.word	0x40020458
 80035f0:	40020470 	.word	0x40020470
 80035f4:	40020488 	.word	0x40020488
 80035f8:	400204a0 	.word	0x400204a0
 80035fc:	400204b8 	.word	0x400204b8
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0308 	and.w	r3, r3, #8
 800360a:	2b00      	cmp	r3, #0
 800360c:	bf14      	ite	ne
 800360e:	2301      	movne	r3, #1
 8003610:	2300      	moveq	r3, #0
 8003612:	b2db      	uxtb	r3, r3
 8003614:	2b00      	cmp	r3, #0
 8003616:	d015      	beq.n	8003644 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f022 0204 	bic.w	r2, r2, #4
 8003626:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800362c:	f003 031f 	and.w	r3, r3, #31
 8003630:	2208      	movs	r2, #8
 8003632:	409a      	lsls	r2, r3
 8003634:	6a3b      	ldr	r3, [r7, #32]
 8003636:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800363c:	f043 0201 	orr.w	r2, r3, #1
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003648:	f003 031f 	and.w	r3, r3, #31
 800364c:	69ba      	ldr	r2, [r7, #24]
 800364e:	fa22 f303 	lsr.w	r3, r2, r3
 8003652:	f003 0301 	and.w	r3, r3, #1
 8003656:	2b00      	cmp	r3, #0
 8003658:	d06e      	beq.n	8003738 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a69      	ldr	r2, [pc, #420]	; (8003804 <HAL_DMA_IRQHandler+0x3f8>)
 8003660:	4293      	cmp	r3, r2
 8003662:	d04a      	beq.n	80036fa <HAL_DMA_IRQHandler+0x2ee>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a67      	ldr	r2, [pc, #412]	; (8003808 <HAL_DMA_IRQHandler+0x3fc>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d045      	beq.n	80036fa <HAL_DMA_IRQHandler+0x2ee>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	4a66      	ldr	r2, [pc, #408]	; (800380c <HAL_DMA_IRQHandler+0x400>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d040      	beq.n	80036fa <HAL_DMA_IRQHandler+0x2ee>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	4a64      	ldr	r2, [pc, #400]	; (8003810 <HAL_DMA_IRQHandler+0x404>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d03b      	beq.n	80036fa <HAL_DMA_IRQHandler+0x2ee>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a63      	ldr	r2, [pc, #396]	; (8003814 <HAL_DMA_IRQHandler+0x408>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d036      	beq.n	80036fa <HAL_DMA_IRQHandler+0x2ee>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a61      	ldr	r2, [pc, #388]	; (8003818 <HAL_DMA_IRQHandler+0x40c>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d031      	beq.n	80036fa <HAL_DMA_IRQHandler+0x2ee>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a60      	ldr	r2, [pc, #384]	; (800381c <HAL_DMA_IRQHandler+0x410>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d02c      	beq.n	80036fa <HAL_DMA_IRQHandler+0x2ee>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4a5e      	ldr	r2, [pc, #376]	; (8003820 <HAL_DMA_IRQHandler+0x414>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d027      	beq.n	80036fa <HAL_DMA_IRQHandler+0x2ee>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	4a5d      	ldr	r2, [pc, #372]	; (8003824 <HAL_DMA_IRQHandler+0x418>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d022      	beq.n	80036fa <HAL_DMA_IRQHandler+0x2ee>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a5b      	ldr	r2, [pc, #364]	; (8003828 <HAL_DMA_IRQHandler+0x41c>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d01d      	beq.n	80036fa <HAL_DMA_IRQHandler+0x2ee>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a5a      	ldr	r2, [pc, #360]	; (800382c <HAL_DMA_IRQHandler+0x420>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d018      	beq.n	80036fa <HAL_DMA_IRQHandler+0x2ee>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	4a58      	ldr	r2, [pc, #352]	; (8003830 <HAL_DMA_IRQHandler+0x424>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d013      	beq.n	80036fa <HAL_DMA_IRQHandler+0x2ee>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a57      	ldr	r2, [pc, #348]	; (8003834 <HAL_DMA_IRQHandler+0x428>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d00e      	beq.n	80036fa <HAL_DMA_IRQHandler+0x2ee>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	4a55      	ldr	r2, [pc, #340]	; (8003838 <HAL_DMA_IRQHandler+0x42c>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d009      	beq.n	80036fa <HAL_DMA_IRQHandler+0x2ee>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	4a54      	ldr	r2, [pc, #336]	; (800383c <HAL_DMA_IRQHandler+0x430>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d004      	beq.n	80036fa <HAL_DMA_IRQHandler+0x2ee>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a52      	ldr	r2, [pc, #328]	; (8003840 <HAL_DMA_IRQHandler+0x434>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d10a      	bne.n	8003710 <HAL_DMA_IRQHandler+0x304>
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	695b      	ldr	r3, [r3, #20]
 8003700:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003704:	2b00      	cmp	r3, #0
 8003706:	bf14      	ite	ne
 8003708:	2301      	movne	r3, #1
 800370a:	2300      	moveq	r3, #0
 800370c:	b2db      	uxtb	r3, r3
 800370e:	e003      	b.n	8003718 <HAL_DMA_IRQHandler+0x30c>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2300      	movs	r3, #0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d00d      	beq.n	8003738 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003720:	f003 031f 	and.w	r3, r3, #31
 8003724:	2201      	movs	r2, #1
 8003726:	409a      	lsls	r2, r3
 8003728:	6a3b      	ldr	r3, [r7, #32]
 800372a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003730:	f043 0202 	orr.w	r2, r3, #2
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800373c:	f003 031f 	and.w	r3, r3, #31
 8003740:	2204      	movs	r2, #4
 8003742:	409a      	lsls	r2, r3
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	4013      	ands	r3, r2
 8003748:	2b00      	cmp	r3, #0
 800374a:	f000 808f 	beq.w	800386c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4a2c      	ldr	r2, [pc, #176]	; (8003804 <HAL_DMA_IRQHandler+0x3f8>)
 8003754:	4293      	cmp	r3, r2
 8003756:	d04a      	beq.n	80037ee <HAL_DMA_IRQHandler+0x3e2>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4a2a      	ldr	r2, [pc, #168]	; (8003808 <HAL_DMA_IRQHandler+0x3fc>)
 800375e:	4293      	cmp	r3, r2
 8003760:	d045      	beq.n	80037ee <HAL_DMA_IRQHandler+0x3e2>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a29      	ldr	r2, [pc, #164]	; (800380c <HAL_DMA_IRQHandler+0x400>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d040      	beq.n	80037ee <HAL_DMA_IRQHandler+0x3e2>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	4a27      	ldr	r2, [pc, #156]	; (8003810 <HAL_DMA_IRQHandler+0x404>)
 8003772:	4293      	cmp	r3, r2
 8003774:	d03b      	beq.n	80037ee <HAL_DMA_IRQHandler+0x3e2>
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4a26      	ldr	r2, [pc, #152]	; (8003814 <HAL_DMA_IRQHandler+0x408>)
 800377c:	4293      	cmp	r3, r2
 800377e:	d036      	beq.n	80037ee <HAL_DMA_IRQHandler+0x3e2>
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a24      	ldr	r2, [pc, #144]	; (8003818 <HAL_DMA_IRQHandler+0x40c>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d031      	beq.n	80037ee <HAL_DMA_IRQHandler+0x3e2>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a23      	ldr	r2, [pc, #140]	; (800381c <HAL_DMA_IRQHandler+0x410>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d02c      	beq.n	80037ee <HAL_DMA_IRQHandler+0x3e2>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a21      	ldr	r2, [pc, #132]	; (8003820 <HAL_DMA_IRQHandler+0x414>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d027      	beq.n	80037ee <HAL_DMA_IRQHandler+0x3e2>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a20      	ldr	r2, [pc, #128]	; (8003824 <HAL_DMA_IRQHandler+0x418>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d022      	beq.n	80037ee <HAL_DMA_IRQHandler+0x3e2>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a1e      	ldr	r2, [pc, #120]	; (8003828 <HAL_DMA_IRQHandler+0x41c>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d01d      	beq.n	80037ee <HAL_DMA_IRQHandler+0x3e2>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a1d      	ldr	r2, [pc, #116]	; (800382c <HAL_DMA_IRQHandler+0x420>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d018      	beq.n	80037ee <HAL_DMA_IRQHandler+0x3e2>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a1b      	ldr	r2, [pc, #108]	; (8003830 <HAL_DMA_IRQHandler+0x424>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d013      	beq.n	80037ee <HAL_DMA_IRQHandler+0x3e2>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a1a      	ldr	r2, [pc, #104]	; (8003834 <HAL_DMA_IRQHandler+0x428>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d00e      	beq.n	80037ee <HAL_DMA_IRQHandler+0x3e2>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a18      	ldr	r2, [pc, #96]	; (8003838 <HAL_DMA_IRQHandler+0x42c>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d009      	beq.n	80037ee <HAL_DMA_IRQHandler+0x3e2>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a17      	ldr	r2, [pc, #92]	; (800383c <HAL_DMA_IRQHandler+0x430>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d004      	beq.n	80037ee <HAL_DMA_IRQHandler+0x3e2>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a15      	ldr	r2, [pc, #84]	; (8003840 <HAL_DMA_IRQHandler+0x434>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d12a      	bne.n	8003844 <HAL_DMA_IRQHandler+0x438>
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0302 	and.w	r3, r3, #2
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	bf14      	ite	ne
 80037fc:	2301      	movne	r3, #1
 80037fe:	2300      	moveq	r3, #0
 8003800:	b2db      	uxtb	r3, r3
 8003802:	e023      	b.n	800384c <HAL_DMA_IRQHandler+0x440>
 8003804:	40020010 	.word	0x40020010
 8003808:	40020028 	.word	0x40020028
 800380c:	40020040 	.word	0x40020040
 8003810:	40020058 	.word	0x40020058
 8003814:	40020070 	.word	0x40020070
 8003818:	40020088 	.word	0x40020088
 800381c:	400200a0 	.word	0x400200a0
 8003820:	400200b8 	.word	0x400200b8
 8003824:	40020410 	.word	0x40020410
 8003828:	40020428 	.word	0x40020428
 800382c:	40020440 	.word	0x40020440
 8003830:	40020458 	.word	0x40020458
 8003834:	40020470 	.word	0x40020470
 8003838:	40020488 	.word	0x40020488
 800383c:	400204a0 	.word	0x400204a0
 8003840:	400204b8 	.word	0x400204b8
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2300      	movs	r3, #0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00d      	beq.n	800386c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003854:	f003 031f 	and.w	r3, r3, #31
 8003858:	2204      	movs	r2, #4
 800385a:	409a      	lsls	r2, r3
 800385c:	6a3b      	ldr	r3, [r7, #32]
 800385e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003864:	f043 0204 	orr.w	r2, r3, #4
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003870:	f003 031f 	and.w	r3, r3, #31
 8003874:	2210      	movs	r2, #16
 8003876:	409a      	lsls	r2, r3
 8003878:	69bb      	ldr	r3, [r7, #24]
 800387a:	4013      	ands	r3, r2
 800387c:	2b00      	cmp	r3, #0
 800387e:	f000 80a6 	beq.w	80039ce <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	4a85      	ldr	r2, [pc, #532]	; (8003a9c <HAL_DMA_IRQHandler+0x690>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d04a      	beq.n	8003922 <HAL_DMA_IRQHandler+0x516>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	4a83      	ldr	r2, [pc, #524]	; (8003aa0 <HAL_DMA_IRQHandler+0x694>)
 8003892:	4293      	cmp	r3, r2
 8003894:	d045      	beq.n	8003922 <HAL_DMA_IRQHandler+0x516>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4a82      	ldr	r2, [pc, #520]	; (8003aa4 <HAL_DMA_IRQHandler+0x698>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d040      	beq.n	8003922 <HAL_DMA_IRQHandler+0x516>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a80      	ldr	r2, [pc, #512]	; (8003aa8 <HAL_DMA_IRQHandler+0x69c>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d03b      	beq.n	8003922 <HAL_DMA_IRQHandler+0x516>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a7f      	ldr	r2, [pc, #508]	; (8003aac <HAL_DMA_IRQHandler+0x6a0>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d036      	beq.n	8003922 <HAL_DMA_IRQHandler+0x516>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a7d      	ldr	r2, [pc, #500]	; (8003ab0 <HAL_DMA_IRQHandler+0x6a4>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d031      	beq.n	8003922 <HAL_DMA_IRQHandler+0x516>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a7c      	ldr	r2, [pc, #496]	; (8003ab4 <HAL_DMA_IRQHandler+0x6a8>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d02c      	beq.n	8003922 <HAL_DMA_IRQHandler+0x516>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a7a      	ldr	r2, [pc, #488]	; (8003ab8 <HAL_DMA_IRQHandler+0x6ac>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d027      	beq.n	8003922 <HAL_DMA_IRQHandler+0x516>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a79      	ldr	r2, [pc, #484]	; (8003abc <HAL_DMA_IRQHandler+0x6b0>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d022      	beq.n	8003922 <HAL_DMA_IRQHandler+0x516>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a77      	ldr	r2, [pc, #476]	; (8003ac0 <HAL_DMA_IRQHandler+0x6b4>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d01d      	beq.n	8003922 <HAL_DMA_IRQHandler+0x516>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a76      	ldr	r2, [pc, #472]	; (8003ac4 <HAL_DMA_IRQHandler+0x6b8>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d018      	beq.n	8003922 <HAL_DMA_IRQHandler+0x516>
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4a74      	ldr	r2, [pc, #464]	; (8003ac8 <HAL_DMA_IRQHandler+0x6bc>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d013      	beq.n	8003922 <HAL_DMA_IRQHandler+0x516>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	4a73      	ldr	r2, [pc, #460]	; (8003acc <HAL_DMA_IRQHandler+0x6c0>)
 8003900:	4293      	cmp	r3, r2
 8003902:	d00e      	beq.n	8003922 <HAL_DMA_IRQHandler+0x516>
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	4a71      	ldr	r2, [pc, #452]	; (8003ad0 <HAL_DMA_IRQHandler+0x6c4>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d009      	beq.n	8003922 <HAL_DMA_IRQHandler+0x516>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	4a70      	ldr	r2, [pc, #448]	; (8003ad4 <HAL_DMA_IRQHandler+0x6c8>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d004      	beq.n	8003922 <HAL_DMA_IRQHandler+0x516>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a6e      	ldr	r2, [pc, #440]	; (8003ad8 <HAL_DMA_IRQHandler+0x6cc>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d10a      	bne.n	8003938 <HAL_DMA_IRQHandler+0x52c>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0308 	and.w	r3, r3, #8
 800392c:	2b00      	cmp	r3, #0
 800392e:	bf14      	ite	ne
 8003930:	2301      	movne	r3, #1
 8003932:	2300      	moveq	r3, #0
 8003934:	b2db      	uxtb	r3, r3
 8003936:	e009      	b.n	800394c <HAL_DMA_IRQHandler+0x540>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0304 	and.w	r3, r3, #4
 8003942:	2b00      	cmp	r3, #0
 8003944:	bf14      	ite	ne
 8003946:	2301      	movne	r3, #1
 8003948:	2300      	moveq	r3, #0
 800394a:	b2db      	uxtb	r3, r3
 800394c:	2b00      	cmp	r3, #0
 800394e:	d03e      	beq.n	80039ce <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003954:	f003 031f 	and.w	r3, r3, #31
 8003958:	2210      	movs	r2, #16
 800395a:	409a      	lsls	r2, r3
 800395c:	6a3b      	ldr	r3, [r7, #32]
 800395e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800396a:	2b00      	cmp	r3, #0
 800396c:	d018      	beq.n	80039a0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003978:	2b00      	cmp	r3, #0
 800397a:	d108      	bne.n	800398e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003980:	2b00      	cmp	r3, #0
 8003982:	d024      	beq.n	80039ce <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003988:	6878      	ldr	r0, [r7, #4]
 800398a:	4798      	blx	r3
 800398c:	e01f      	b.n	80039ce <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003992:	2b00      	cmp	r3, #0
 8003994:	d01b      	beq.n	80039ce <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800399a:	6878      	ldr	r0, [r7, #4]
 800399c:	4798      	blx	r3
 800399e:	e016      	b.n	80039ce <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d107      	bne.n	80039be <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f022 0208 	bic.w	r2, r2, #8
 80039bc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d003      	beq.n	80039ce <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039d2:	f003 031f 	and.w	r3, r3, #31
 80039d6:	2220      	movs	r2, #32
 80039d8:	409a      	lsls	r2, r3
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	4013      	ands	r3, r2
 80039de:	2b00      	cmp	r3, #0
 80039e0:	f000 8110 	beq.w	8003c04 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a2c      	ldr	r2, [pc, #176]	; (8003a9c <HAL_DMA_IRQHandler+0x690>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d04a      	beq.n	8003a84 <HAL_DMA_IRQHandler+0x678>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a2b      	ldr	r2, [pc, #172]	; (8003aa0 <HAL_DMA_IRQHandler+0x694>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d045      	beq.n	8003a84 <HAL_DMA_IRQHandler+0x678>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a29      	ldr	r2, [pc, #164]	; (8003aa4 <HAL_DMA_IRQHandler+0x698>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d040      	beq.n	8003a84 <HAL_DMA_IRQHandler+0x678>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a28      	ldr	r2, [pc, #160]	; (8003aa8 <HAL_DMA_IRQHandler+0x69c>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d03b      	beq.n	8003a84 <HAL_DMA_IRQHandler+0x678>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a26      	ldr	r2, [pc, #152]	; (8003aac <HAL_DMA_IRQHandler+0x6a0>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d036      	beq.n	8003a84 <HAL_DMA_IRQHandler+0x678>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a25      	ldr	r2, [pc, #148]	; (8003ab0 <HAL_DMA_IRQHandler+0x6a4>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d031      	beq.n	8003a84 <HAL_DMA_IRQHandler+0x678>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a23      	ldr	r2, [pc, #140]	; (8003ab4 <HAL_DMA_IRQHandler+0x6a8>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d02c      	beq.n	8003a84 <HAL_DMA_IRQHandler+0x678>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a22      	ldr	r2, [pc, #136]	; (8003ab8 <HAL_DMA_IRQHandler+0x6ac>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d027      	beq.n	8003a84 <HAL_DMA_IRQHandler+0x678>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a20      	ldr	r2, [pc, #128]	; (8003abc <HAL_DMA_IRQHandler+0x6b0>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d022      	beq.n	8003a84 <HAL_DMA_IRQHandler+0x678>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a1f      	ldr	r2, [pc, #124]	; (8003ac0 <HAL_DMA_IRQHandler+0x6b4>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d01d      	beq.n	8003a84 <HAL_DMA_IRQHandler+0x678>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a1d      	ldr	r2, [pc, #116]	; (8003ac4 <HAL_DMA_IRQHandler+0x6b8>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d018      	beq.n	8003a84 <HAL_DMA_IRQHandler+0x678>
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a1c      	ldr	r2, [pc, #112]	; (8003ac8 <HAL_DMA_IRQHandler+0x6bc>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d013      	beq.n	8003a84 <HAL_DMA_IRQHandler+0x678>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a1a      	ldr	r2, [pc, #104]	; (8003acc <HAL_DMA_IRQHandler+0x6c0>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d00e      	beq.n	8003a84 <HAL_DMA_IRQHandler+0x678>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a19      	ldr	r2, [pc, #100]	; (8003ad0 <HAL_DMA_IRQHandler+0x6c4>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d009      	beq.n	8003a84 <HAL_DMA_IRQHandler+0x678>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a17      	ldr	r2, [pc, #92]	; (8003ad4 <HAL_DMA_IRQHandler+0x6c8>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d004      	beq.n	8003a84 <HAL_DMA_IRQHandler+0x678>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a16      	ldr	r2, [pc, #88]	; (8003ad8 <HAL_DMA_IRQHandler+0x6cc>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d12b      	bne.n	8003adc <HAL_DMA_IRQHandler+0x6d0>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0310 	and.w	r3, r3, #16
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	bf14      	ite	ne
 8003a92:	2301      	movne	r3, #1
 8003a94:	2300      	moveq	r3, #0
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	e02a      	b.n	8003af0 <HAL_DMA_IRQHandler+0x6e4>
 8003a9a:	bf00      	nop
 8003a9c:	40020010 	.word	0x40020010
 8003aa0:	40020028 	.word	0x40020028
 8003aa4:	40020040 	.word	0x40020040
 8003aa8:	40020058 	.word	0x40020058
 8003aac:	40020070 	.word	0x40020070
 8003ab0:	40020088 	.word	0x40020088
 8003ab4:	400200a0 	.word	0x400200a0
 8003ab8:	400200b8 	.word	0x400200b8
 8003abc:	40020410 	.word	0x40020410
 8003ac0:	40020428 	.word	0x40020428
 8003ac4:	40020440 	.word	0x40020440
 8003ac8:	40020458 	.word	0x40020458
 8003acc:	40020470 	.word	0x40020470
 8003ad0:	40020488 	.word	0x40020488
 8003ad4:	400204a0 	.word	0x400204a0
 8003ad8:	400204b8 	.word	0x400204b8
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	bf14      	ite	ne
 8003aea:	2301      	movne	r3, #1
 8003aec:	2300      	moveq	r3, #0
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	f000 8087 	beq.w	8003c04 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003afa:	f003 031f 	and.w	r3, r3, #31
 8003afe:	2220      	movs	r2, #32
 8003b00:	409a      	lsls	r2, r3
 8003b02:	6a3b      	ldr	r3, [r7, #32]
 8003b04:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b04      	cmp	r3, #4
 8003b10:	d139      	bne.n	8003b86 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 0216 	bic.w	r2, r2, #22
 8003b20:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	695a      	ldr	r2, [r3, #20]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003b30:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d103      	bne.n	8003b42 <HAL_DMA_IRQHandler+0x736>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d007      	beq.n	8003b52 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f022 0208 	bic.w	r2, r2, #8
 8003b50:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b56:	f003 031f 	and.w	r3, r3, #31
 8003b5a:	223f      	movs	r2, #63	; 0x3f
 8003b5c:	409a      	lsls	r2, r3
 8003b5e:	6a3b      	ldr	r3, [r7, #32]
 8003b60:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2201      	movs	r2, #1
 8003b66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	f000 834a 	beq.w	8004210 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	4798      	blx	r3
          }
          return;
 8003b84:	e344      	b.n	8004210 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d018      	beq.n	8003bc6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d108      	bne.n	8003bb4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d02c      	beq.n	8003c04 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	4798      	blx	r3
 8003bb2:	e027      	b.n	8003c04 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d023      	beq.n	8003c04 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	4798      	blx	r3
 8003bc4:	e01e      	b.n	8003c04 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d10f      	bne.n	8003bf4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f022 0210 	bic.w	r2, r2, #16
 8003be2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d003      	beq.n	8003c04 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c00:	6878      	ldr	r0, [r7, #4]
 8003c02:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f000 8306 	beq.w	800421a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c12:	f003 0301 	and.w	r3, r3, #1
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	f000 8088 	beq.w	8003d2c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2204      	movs	r2, #4
 8003c20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a7a      	ldr	r2, [pc, #488]	; (8003e14 <HAL_DMA_IRQHandler+0xa08>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d04a      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0x8b8>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a79      	ldr	r2, [pc, #484]	; (8003e18 <HAL_DMA_IRQHandler+0xa0c>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d045      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0x8b8>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a77      	ldr	r2, [pc, #476]	; (8003e1c <HAL_DMA_IRQHandler+0xa10>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d040      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0x8b8>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a76      	ldr	r2, [pc, #472]	; (8003e20 <HAL_DMA_IRQHandler+0xa14>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d03b      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0x8b8>
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a74      	ldr	r2, [pc, #464]	; (8003e24 <HAL_DMA_IRQHandler+0xa18>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d036      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0x8b8>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a73      	ldr	r2, [pc, #460]	; (8003e28 <HAL_DMA_IRQHandler+0xa1c>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d031      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0x8b8>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a71      	ldr	r2, [pc, #452]	; (8003e2c <HAL_DMA_IRQHandler+0xa20>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d02c      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0x8b8>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a70      	ldr	r2, [pc, #448]	; (8003e30 <HAL_DMA_IRQHandler+0xa24>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d027      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0x8b8>
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a6e      	ldr	r2, [pc, #440]	; (8003e34 <HAL_DMA_IRQHandler+0xa28>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d022      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0x8b8>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a6d      	ldr	r2, [pc, #436]	; (8003e38 <HAL_DMA_IRQHandler+0xa2c>)
 8003c84:	4293      	cmp	r3, r2
 8003c86:	d01d      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0x8b8>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a6b      	ldr	r2, [pc, #428]	; (8003e3c <HAL_DMA_IRQHandler+0xa30>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d018      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0x8b8>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a6a      	ldr	r2, [pc, #424]	; (8003e40 <HAL_DMA_IRQHandler+0xa34>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d013      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0x8b8>
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	4a68      	ldr	r2, [pc, #416]	; (8003e44 <HAL_DMA_IRQHandler+0xa38>)
 8003ca2:	4293      	cmp	r3, r2
 8003ca4:	d00e      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0x8b8>
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a67      	ldr	r2, [pc, #412]	; (8003e48 <HAL_DMA_IRQHandler+0xa3c>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d009      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0x8b8>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	4a65      	ldr	r2, [pc, #404]	; (8003e4c <HAL_DMA_IRQHandler+0xa40>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d004      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0x8b8>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a64      	ldr	r2, [pc, #400]	; (8003e50 <HAL_DMA_IRQHandler+0xa44>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d108      	bne.n	8003cd6 <HAL_DMA_IRQHandler+0x8ca>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	681a      	ldr	r2, [r3, #0]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f022 0201 	bic.w	r2, r2, #1
 8003cd2:	601a      	str	r2, [r3, #0]
 8003cd4:	e007      	b.n	8003ce6 <HAL_DMA_IRQHandler+0x8da>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f022 0201 	bic.w	r2, r2, #1
 8003ce4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	3301      	adds	r3, #1
 8003cea:	60fb      	str	r3, [r7, #12]
 8003cec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d307      	bcc.n	8003d02 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0301 	and.w	r3, r3, #1
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d1f2      	bne.n	8003ce6 <HAL_DMA_IRQHandler+0x8da>
 8003d00:	e000      	b.n	8003d04 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8003d02:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d004      	beq.n	8003d1c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2203      	movs	r2, #3
 8003d16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8003d1a:	e003      	b.n	8003d24 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f000 8272 	beq.w	800421a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	4798      	blx	r3
 8003d3e:	e26c      	b.n	800421a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	4a43      	ldr	r2, [pc, #268]	; (8003e54 <HAL_DMA_IRQHandler+0xa48>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d022      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x984>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	4a42      	ldr	r2, [pc, #264]	; (8003e58 <HAL_DMA_IRQHandler+0xa4c>)
 8003d50:	4293      	cmp	r3, r2
 8003d52:	d01d      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x984>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a40      	ldr	r2, [pc, #256]	; (8003e5c <HAL_DMA_IRQHandler+0xa50>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d018      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x984>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a3f      	ldr	r2, [pc, #252]	; (8003e60 <HAL_DMA_IRQHandler+0xa54>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d013      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x984>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a3d      	ldr	r2, [pc, #244]	; (8003e64 <HAL_DMA_IRQHandler+0xa58>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d00e      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x984>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a3c      	ldr	r2, [pc, #240]	; (8003e68 <HAL_DMA_IRQHandler+0xa5c>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d009      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x984>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a3a      	ldr	r2, [pc, #232]	; (8003e6c <HAL_DMA_IRQHandler+0xa60>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d004      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x984>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a39      	ldr	r2, [pc, #228]	; (8003e70 <HAL_DMA_IRQHandler+0xa64>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d101      	bne.n	8003d94 <HAL_DMA_IRQHandler+0x988>
 8003d90:	2301      	movs	r3, #1
 8003d92:	e000      	b.n	8003d96 <HAL_DMA_IRQHandler+0x98a>
 8003d94:	2300      	movs	r3, #0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	f000 823f 	beq.w	800421a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003da8:	f003 031f 	and.w	r3, r3, #31
 8003dac:	2204      	movs	r2, #4
 8003dae:	409a      	lsls	r2, r3
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	4013      	ands	r3, r2
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f000 80cd 	beq.w	8003f54 <HAL_DMA_IRQHandler+0xb48>
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	f003 0304 	and.w	r3, r3, #4
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f000 80c7 	beq.w	8003f54 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dca:	f003 031f 	and.w	r3, r3, #31
 8003dce:	2204      	movs	r2, #4
 8003dd0:	409a      	lsls	r2, r3
 8003dd2:	69fb      	ldr	r3, [r7, #28]
 8003dd4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d049      	beq.n	8003e74 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003de0:	693b      	ldr	r3, [r7, #16]
 8003de2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d109      	bne.n	8003dfe <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f000 8210 	beq.w	8004214 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003df8:	6878      	ldr	r0, [r7, #4]
 8003dfa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003dfc:	e20a      	b.n	8004214 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	f000 8206 	beq.w	8004214 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003e10:	e200      	b.n	8004214 <HAL_DMA_IRQHandler+0xe08>
 8003e12:	bf00      	nop
 8003e14:	40020010 	.word	0x40020010
 8003e18:	40020028 	.word	0x40020028
 8003e1c:	40020040 	.word	0x40020040
 8003e20:	40020058 	.word	0x40020058
 8003e24:	40020070 	.word	0x40020070
 8003e28:	40020088 	.word	0x40020088
 8003e2c:	400200a0 	.word	0x400200a0
 8003e30:	400200b8 	.word	0x400200b8
 8003e34:	40020410 	.word	0x40020410
 8003e38:	40020428 	.word	0x40020428
 8003e3c:	40020440 	.word	0x40020440
 8003e40:	40020458 	.word	0x40020458
 8003e44:	40020470 	.word	0x40020470
 8003e48:	40020488 	.word	0x40020488
 8003e4c:	400204a0 	.word	0x400204a0
 8003e50:	400204b8 	.word	0x400204b8
 8003e54:	58025408 	.word	0x58025408
 8003e58:	5802541c 	.word	0x5802541c
 8003e5c:	58025430 	.word	0x58025430
 8003e60:	58025444 	.word	0x58025444
 8003e64:	58025458 	.word	0x58025458
 8003e68:	5802546c 	.word	0x5802546c
 8003e6c:	58025480 	.word	0x58025480
 8003e70:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	f003 0320 	and.w	r3, r3, #32
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d160      	bne.n	8003f40 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a7f      	ldr	r2, [pc, #508]	; (8004080 <HAL_DMA_IRQHandler+0xc74>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d04a      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xb12>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a7d      	ldr	r2, [pc, #500]	; (8004084 <HAL_DMA_IRQHandler+0xc78>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d045      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xb12>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a7c      	ldr	r2, [pc, #496]	; (8004088 <HAL_DMA_IRQHandler+0xc7c>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d040      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xb12>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	4a7a      	ldr	r2, [pc, #488]	; (800408c <HAL_DMA_IRQHandler+0xc80>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d03b      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xb12>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a79      	ldr	r2, [pc, #484]	; (8004090 <HAL_DMA_IRQHandler+0xc84>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d036      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xb12>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a77      	ldr	r2, [pc, #476]	; (8004094 <HAL_DMA_IRQHandler+0xc88>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d031      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xb12>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a76      	ldr	r2, [pc, #472]	; (8004098 <HAL_DMA_IRQHandler+0xc8c>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d02c      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xb12>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a74      	ldr	r2, [pc, #464]	; (800409c <HAL_DMA_IRQHandler+0xc90>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d027      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xb12>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a73      	ldr	r2, [pc, #460]	; (80040a0 <HAL_DMA_IRQHandler+0xc94>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d022      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xb12>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a71      	ldr	r2, [pc, #452]	; (80040a4 <HAL_DMA_IRQHandler+0xc98>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d01d      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xb12>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	4a70      	ldr	r2, [pc, #448]	; (80040a8 <HAL_DMA_IRQHandler+0xc9c>)
 8003ee8:	4293      	cmp	r3, r2
 8003eea:	d018      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xb12>
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	4a6e      	ldr	r2, [pc, #440]	; (80040ac <HAL_DMA_IRQHandler+0xca0>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d013      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xb12>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a6d      	ldr	r2, [pc, #436]	; (80040b0 <HAL_DMA_IRQHandler+0xca4>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d00e      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xb12>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4a6b      	ldr	r2, [pc, #428]	; (80040b4 <HAL_DMA_IRQHandler+0xca8>)
 8003f06:	4293      	cmp	r3, r2
 8003f08:	d009      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xb12>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4a6a      	ldr	r2, [pc, #424]	; (80040b8 <HAL_DMA_IRQHandler+0xcac>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d004      	beq.n	8003f1e <HAL_DMA_IRQHandler+0xb12>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a68      	ldr	r2, [pc, #416]	; (80040bc <HAL_DMA_IRQHandler+0xcb0>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d108      	bne.n	8003f30 <HAL_DMA_IRQHandler+0xb24>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	681a      	ldr	r2, [r3, #0]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f022 0208 	bic.w	r2, r2, #8
 8003f2c:	601a      	str	r2, [r3, #0]
 8003f2e:	e007      	b.n	8003f40 <HAL_DMA_IRQHandler+0xb34>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f022 0204 	bic.w	r2, r2, #4
 8003f3e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	f000 8165 	beq.w	8004214 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f52:	e15f      	b.n	8004214 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f58:	f003 031f 	and.w	r3, r3, #31
 8003f5c:	2202      	movs	r2, #2
 8003f5e:	409a      	lsls	r2, r3
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	4013      	ands	r3, r2
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	f000 80c5 	beq.w	80040f4 <HAL_DMA_IRQHandler+0xce8>
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	f003 0302 	and.w	r3, r3, #2
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f000 80bf 	beq.w	80040f4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f7a:	f003 031f 	and.w	r3, r3, #31
 8003f7e:	2202      	movs	r2, #2
 8003f80:	409a      	lsls	r2, r3
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d018      	beq.n	8003fc2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d109      	bne.n	8003fae <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	f000 813a 	beq.w	8004218 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003fac:	e134      	b.n	8004218 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	f000 8130 	beq.w	8004218 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8003fc0:	e12a      	b.n	8004218 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	f003 0320 	and.w	r3, r3, #32
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	f040 8089 	bne.w	80040e0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4a2b      	ldr	r2, [pc, #172]	; (8004080 <HAL_DMA_IRQHandler+0xc74>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d04a      	beq.n	800406e <HAL_DMA_IRQHandler+0xc62>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a29      	ldr	r2, [pc, #164]	; (8004084 <HAL_DMA_IRQHandler+0xc78>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d045      	beq.n	800406e <HAL_DMA_IRQHandler+0xc62>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4a28      	ldr	r2, [pc, #160]	; (8004088 <HAL_DMA_IRQHandler+0xc7c>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d040      	beq.n	800406e <HAL_DMA_IRQHandler+0xc62>
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a26      	ldr	r2, [pc, #152]	; (800408c <HAL_DMA_IRQHandler+0xc80>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d03b      	beq.n	800406e <HAL_DMA_IRQHandler+0xc62>
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a25      	ldr	r2, [pc, #148]	; (8004090 <HAL_DMA_IRQHandler+0xc84>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d036      	beq.n	800406e <HAL_DMA_IRQHandler+0xc62>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	4a23      	ldr	r2, [pc, #140]	; (8004094 <HAL_DMA_IRQHandler+0xc88>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d031      	beq.n	800406e <HAL_DMA_IRQHandler+0xc62>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a22      	ldr	r2, [pc, #136]	; (8004098 <HAL_DMA_IRQHandler+0xc8c>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d02c      	beq.n	800406e <HAL_DMA_IRQHandler+0xc62>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a20      	ldr	r2, [pc, #128]	; (800409c <HAL_DMA_IRQHandler+0xc90>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d027      	beq.n	800406e <HAL_DMA_IRQHandler+0xc62>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a1f      	ldr	r2, [pc, #124]	; (80040a0 <HAL_DMA_IRQHandler+0xc94>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d022      	beq.n	800406e <HAL_DMA_IRQHandler+0xc62>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a1d      	ldr	r2, [pc, #116]	; (80040a4 <HAL_DMA_IRQHandler+0xc98>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d01d      	beq.n	800406e <HAL_DMA_IRQHandler+0xc62>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a1c      	ldr	r2, [pc, #112]	; (80040a8 <HAL_DMA_IRQHandler+0xc9c>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d018      	beq.n	800406e <HAL_DMA_IRQHandler+0xc62>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a1a      	ldr	r2, [pc, #104]	; (80040ac <HAL_DMA_IRQHandler+0xca0>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d013      	beq.n	800406e <HAL_DMA_IRQHandler+0xc62>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a19      	ldr	r2, [pc, #100]	; (80040b0 <HAL_DMA_IRQHandler+0xca4>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d00e      	beq.n	800406e <HAL_DMA_IRQHandler+0xc62>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a17      	ldr	r2, [pc, #92]	; (80040b4 <HAL_DMA_IRQHandler+0xca8>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d009      	beq.n	800406e <HAL_DMA_IRQHandler+0xc62>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a16      	ldr	r2, [pc, #88]	; (80040b8 <HAL_DMA_IRQHandler+0xcac>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d004      	beq.n	800406e <HAL_DMA_IRQHandler+0xc62>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4a14      	ldr	r2, [pc, #80]	; (80040bc <HAL_DMA_IRQHandler+0xcb0>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d128      	bne.n	80040c0 <HAL_DMA_IRQHandler+0xcb4>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f022 0214 	bic.w	r2, r2, #20
 800407c:	601a      	str	r2, [r3, #0]
 800407e:	e027      	b.n	80040d0 <HAL_DMA_IRQHandler+0xcc4>
 8004080:	40020010 	.word	0x40020010
 8004084:	40020028 	.word	0x40020028
 8004088:	40020040 	.word	0x40020040
 800408c:	40020058 	.word	0x40020058
 8004090:	40020070 	.word	0x40020070
 8004094:	40020088 	.word	0x40020088
 8004098:	400200a0 	.word	0x400200a0
 800409c:	400200b8 	.word	0x400200b8
 80040a0:	40020410 	.word	0x40020410
 80040a4:	40020428 	.word	0x40020428
 80040a8:	40020440 	.word	0x40020440
 80040ac:	40020458 	.word	0x40020458
 80040b0:	40020470 	.word	0x40020470
 80040b4:	40020488 	.word	0x40020488
 80040b8:	400204a0 	.word	0x400204a0
 80040bc:	400204b8 	.word	0x400204b8
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	681a      	ldr	r2, [r3, #0]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f022 020a 	bic.w	r2, r2, #10
 80040ce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	f000 8097 	beq.w	8004218 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80040f2:	e091      	b.n	8004218 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040f8:	f003 031f 	and.w	r3, r3, #31
 80040fc:	2208      	movs	r2, #8
 80040fe:	409a      	lsls	r2, r3
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	4013      	ands	r3, r2
 8004104:	2b00      	cmp	r3, #0
 8004106:	f000 8088 	beq.w	800421a <HAL_DMA_IRQHandler+0xe0e>
 800410a:	693b      	ldr	r3, [r7, #16]
 800410c:	f003 0308 	and.w	r3, r3, #8
 8004110:	2b00      	cmp	r3, #0
 8004112:	f000 8082 	beq.w	800421a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a41      	ldr	r2, [pc, #260]	; (8004220 <HAL_DMA_IRQHandler+0xe14>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d04a      	beq.n	80041b6 <HAL_DMA_IRQHandler+0xdaa>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	4a3f      	ldr	r2, [pc, #252]	; (8004224 <HAL_DMA_IRQHandler+0xe18>)
 8004126:	4293      	cmp	r3, r2
 8004128:	d045      	beq.n	80041b6 <HAL_DMA_IRQHandler+0xdaa>
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4a3e      	ldr	r2, [pc, #248]	; (8004228 <HAL_DMA_IRQHandler+0xe1c>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d040      	beq.n	80041b6 <HAL_DMA_IRQHandler+0xdaa>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	4a3c      	ldr	r2, [pc, #240]	; (800422c <HAL_DMA_IRQHandler+0xe20>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d03b      	beq.n	80041b6 <HAL_DMA_IRQHandler+0xdaa>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a3b      	ldr	r2, [pc, #236]	; (8004230 <HAL_DMA_IRQHandler+0xe24>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d036      	beq.n	80041b6 <HAL_DMA_IRQHandler+0xdaa>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4a39      	ldr	r2, [pc, #228]	; (8004234 <HAL_DMA_IRQHandler+0xe28>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d031      	beq.n	80041b6 <HAL_DMA_IRQHandler+0xdaa>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a38      	ldr	r2, [pc, #224]	; (8004238 <HAL_DMA_IRQHandler+0xe2c>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d02c      	beq.n	80041b6 <HAL_DMA_IRQHandler+0xdaa>
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a36      	ldr	r2, [pc, #216]	; (800423c <HAL_DMA_IRQHandler+0xe30>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d027      	beq.n	80041b6 <HAL_DMA_IRQHandler+0xdaa>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a35      	ldr	r2, [pc, #212]	; (8004240 <HAL_DMA_IRQHandler+0xe34>)
 800416c:	4293      	cmp	r3, r2
 800416e:	d022      	beq.n	80041b6 <HAL_DMA_IRQHandler+0xdaa>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a33      	ldr	r2, [pc, #204]	; (8004244 <HAL_DMA_IRQHandler+0xe38>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d01d      	beq.n	80041b6 <HAL_DMA_IRQHandler+0xdaa>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	4a32      	ldr	r2, [pc, #200]	; (8004248 <HAL_DMA_IRQHandler+0xe3c>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d018      	beq.n	80041b6 <HAL_DMA_IRQHandler+0xdaa>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	4a30      	ldr	r2, [pc, #192]	; (800424c <HAL_DMA_IRQHandler+0xe40>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d013      	beq.n	80041b6 <HAL_DMA_IRQHandler+0xdaa>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a2f      	ldr	r2, [pc, #188]	; (8004250 <HAL_DMA_IRQHandler+0xe44>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d00e      	beq.n	80041b6 <HAL_DMA_IRQHandler+0xdaa>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a2d      	ldr	r2, [pc, #180]	; (8004254 <HAL_DMA_IRQHandler+0xe48>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d009      	beq.n	80041b6 <HAL_DMA_IRQHandler+0xdaa>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a2c      	ldr	r2, [pc, #176]	; (8004258 <HAL_DMA_IRQHandler+0xe4c>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d004      	beq.n	80041b6 <HAL_DMA_IRQHandler+0xdaa>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4a2a      	ldr	r2, [pc, #168]	; (800425c <HAL_DMA_IRQHandler+0xe50>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d108      	bne.n	80041c8 <HAL_DMA_IRQHandler+0xdbc>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f022 021c 	bic.w	r2, r2, #28
 80041c4:	601a      	str	r2, [r3, #0]
 80041c6:	e007      	b.n	80041d8 <HAL_DMA_IRQHandler+0xdcc>
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f022 020e 	bic.w	r2, r2, #14
 80041d6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041dc:	f003 031f 	and.w	r3, r3, #31
 80041e0:	2201      	movs	r2, #1
 80041e2:	409a      	lsls	r2, r3
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2201      	movs	r2, #1
 80041f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	2200      	movs	r2, #0
 80041fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004202:	2b00      	cmp	r3, #0
 8004204:	d009      	beq.n	800421a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	4798      	blx	r3
 800420e:	e004      	b.n	800421a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8004210:	bf00      	nop
 8004212:	e002      	b.n	800421a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004214:	bf00      	nop
 8004216:	e000      	b.n	800421a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8004218:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800421a:	3728      	adds	r7, #40	; 0x28
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}
 8004220:	40020010 	.word	0x40020010
 8004224:	40020028 	.word	0x40020028
 8004228:	40020040 	.word	0x40020040
 800422c:	40020058 	.word	0x40020058
 8004230:	40020070 	.word	0x40020070
 8004234:	40020088 	.word	0x40020088
 8004238:	400200a0 	.word	0x400200a0
 800423c:	400200b8 	.word	0x400200b8
 8004240:	40020410 	.word	0x40020410
 8004244:	40020428 	.word	0x40020428
 8004248:	40020440 	.word	0x40020440
 800424c:	40020458 	.word	0x40020458
 8004250:	40020470 	.word	0x40020470
 8004254:	40020488 	.word	0x40020488
 8004258:	400204a0 	.word	0x400204a0
 800425c:	400204b8 	.word	0x400204b8

08004260 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004260:	b480      	push	{r7}
 8004262:	b087      	sub	sp, #28
 8004264:	af00      	add	r7, sp, #0
 8004266:	60f8      	str	r0, [r7, #12]
 8004268:	60b9      	str	r1, [r7, #8]
 800426a:	607a      	str	r2, [r7, #4]
 800426c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004272:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004278:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a7f      	ldr	r2, [pc, #508]	; (800447c <DMA_SetConfig+0x21c>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d072      	beq.n	800436a <DMA_SetConfig+0x10a>
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a7d      	ldr	r2, [pc, #500]	; (8004480 <DMA_SetConfig+0x220>)
 800428a:	4293      	cmp	r3, r2
 800428c:	d06d      	beq.n	800436a <DMA_SetConfig+0x10a>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a7c      	ldr	r2, [pc, #496]	; (8004484 <DMA_SetConfig+0x224>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d068      	beq.n	800436a <DMA_SetConfig+0x10a>
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a7a      	ldr	r2, [pc, #488]	; (8004488 <DMA_SetConfig+0x228>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d063      	beq.n	800436a <DMA_SetConfig+0x10a>
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	4a79      	ldr	r2, [pc, #484]	; (800448c <DMA_SetConfig+0x22c>)
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d05e      	beq.n	800436a <DMA_SetConfig+0x10a>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a77      	ldr	r2, [pc, #476]	; (8004490 <DMA_SetConfig+0x230>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d059      	beq.n	800436a <DMA_SetConfig+0x10a>
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a76      	ldr	r2, [pc, #472]	; (8004494 <DMA_SetConfig+0x234>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d054      	beq.n	800436a <DMA_SetConfig+0x10a>
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	4a74      	ldr	r2, [pc, #464]	; (8004498 <DMA_SetConfig+0x238>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d04f      	beq.n	800436a <DMA_SetConfig+0x10a>
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	4a73      	ldr	r2, [pc, #460]	; (800449c <DMA_SetConfig+0x23c>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d04a      	beq.n	800436a <DMA_SetConfig+0x10a>
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4a71      	ldr	r2, [pc, #452]	; (80044a0 <DMA_SetConfig+0x240>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d045      	beq.n	800436a <DMA_SetConfig+0x10a>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	4a70      	ldr	r2, [pc, #448]	; (80044a4 <DMA_SetConfig+0x244>)
 80042e4:	4293      	cmp	r3, r2
 80042e6:	d040      	beq.n	800436a <DMA_SetConfig+0x10a>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4a6e      	ldr	r2, [pc, #440]	; (80044a8 <DMA_SetConfig+0x248>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d03b      	beq.n	800436a <DMA_SetConfig+0x10a>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a6d      	ldr	r2, [pc, #436]	; (80044ac <DMA_SetConfig+0x24c>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d036      	beq.n	800436a <DMA_SetConfig+0x10a>
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a6b      	ldr	r2, [pc, #428]	; (80044b0 <DMA_SetConfig+0x250>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d031      	beq.n	800436a <DMA_SetConfig+0x10a>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a6a      	ldr	r2, [pc, #424]	; (80044b4 <DMA_SetConfig+0x254>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d02c      	beq.n	800436a <DMA_SetConfig+0x10a>
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a68      	ldr	r2, [pc, #416]	; (80044b8 <DMA_SetConfig+0x258>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d027      	beq.n	800436a <DMA_SetConfig+0x10a>
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a67      	ldr	r2, [pc, #412]	; (80044bc <DMA_SetConfig+0x25c>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d022      	beq.n	800436a <DMA_SetConfig+0x10a>
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a65      	ldr	r2, [pc, #404]	; (80044c0 <DMA_SetConfig+0x260>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d01d      	beq.n	800436a <DMA_SetConfig+0x10a>
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	4a64      	ldr	r2, [pc, #400]	; (80044c4 <DMA_SetConfig+0x264>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d018      	beq.n	800436a <DMA_SetConfig+0x10a>
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a62      	ldr	r2, [pc, #392]	; (80044c8 <DMA_SetConfig+0x268>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d013      	beq.n	800436a <DMA_SetConfig+0x10a>
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4a61      	ldr	r2, [pc, #388]	; (80044cc <DMA_SetConfig+0x26c>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d00e      	beq.n	800436a <DMA_SetConfig+0x10a>
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	4a5f      	ldr	r2, [pc, #380]	; (80044d0 <DMA_SetConfig+0x270>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d009      	beq.n	800436a <DMA_SetConfig+0x10a>
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4a5e      	ldr	r2, [pc, #376]	; (80044d4 <DMA_SetConfig+0x274>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d004      	beq.n	800436a <DMA_SetConfig+0x10a>
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4a5c      	ldr	r2, [pc, #368]	; (80044d8 <DMA_SetConfig+0x278>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d101      	bne.n	800436e <DMA_SetConfig+0x10e>
 800436a:	2301      	movs	r3, #1
 800436c:	e000      	b.n	8004370 <DMA_SetConfig+0x110>
 800436e:	2300      	movs	r3, #0
 8004370:	2b00      	cmp	r3, #0
 8004372:	d00d      	beq.n	8004390 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004378:	68fa      	ldr	r2, [r7, #12]
 800437a:	6e92      	ldr	r2, [r2, #104]	; 0x68
 800437c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004382:	2b00      	cmp	r3, #0
 8004384:	d004      	beq.n	8004390 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800438a:	68fa      	ldr	r2, [r7, #12]
 800438c:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800438e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a39      	ldr	r2, [pc, #228]	; (800447c <DMA_SetConfig+0x21c>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d04a      	beq.n	8004430 <DMA_SetConfig+0x1d0>
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a38      	ldr	r2, [pc, #224]	; (8004480 <DMA_SetConfig+0x220>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d045      	beq.n	8004430 <DMA_SetConfig+0x1d0>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a36      	ldr	r2, [pc, #216]	; (8004484 <DMA_SetConfig+0x224>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d040      	beq.n	8004430 <DMA_SetConfig+0x1d0>
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a35      	ldr	r2, [pc, #212]	; (8004488 <DMA_SetConfig+0x228>)
 80043b4:	4293      	cmp	r3, r2
 80043b6:	d03b      	beq.n	8004430 <DMA_SetConfig+0x1d0>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a33      	ldr	r2, [pc, #204]	; (800448c <DMA_SetConfig+0x22c>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d036      	beq.n	8004430 <DMA_SetConfig+0x1d0>
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	4a32      	ldr	r2, [pc, #200]	; (8004490 <DMA_SetConfig+0x230>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d031      	beq.n	8004430 <DMA_SetConfig+0x1d0>
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a30      	ldr	r2, [pc, #192]	; (8004494 <DMA_SetConfig+0x234>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d02c      	beq.n	8004430 <DMA_SetConfig+0x1d0>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	4a2f      	ldr	r2, [pc, #188]	; (8004498 <DMA_SetConfig+0x238>)
 80043dc:	4293      	cmp	r3, r2
 80043de:	d027      	beq.n	8004430 <DMA_SetConfig+0x1d0>
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a2d      	ldr	r2, [pc, #180]	; (800449c <DMA_SetConfig+0x23c>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d022      	beq.n	8004430 <DMA_SetConfig+0x1d0>
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a2c      	ldr	r2, [pc, #176]	; (80044a0 <DMA_SetConfig+0x240>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d01d      	beq.n	8004430 <DMA_SetConfig+0x1d0>
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a2a      	ldr	r2, [pc, #168]	; (80044a4 <DMA_SetConfig+0x244>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d018      	beq.n	8004430 <DMA_SetConfig+0x1d0>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a29      	ldr	r2, [pc, #164]	; (80044a8 <DMA_SetConfig+0x248>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d013      	beq.n	8004430 <DMA_SetConfig+0x1d0>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a27      	ldr	r2, [pc, #156]	; (80044ac <DMA_SetConfig+0x24c>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d00e      	beq.n	8004430 <DMA_SetConfig+0x1d0>
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a26      	ldr	r2, [pc, #152]	; (80044b0 <DMA_SetConfig+0x250>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d009      	beq.n	8004430 <DMA_SetConfig+0x1d0>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a24      	ldr	r2, [pc, #144]	; (80044b4 <DMA_SetConfig+0x254>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d004      	beq.n	8004430 <DMA_SetConfig+0x1d0>
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	4a23      	ldr	r2, [pc, #140]	; (80044b8 <DMA_SetConfig+0x258>)
 800442c:	4293      	cmp	r3, r2
 800442e:	d101      	bne.n	8004434 <DMA_SetConfig+0x1d4>
 8004430:	2301      	movs	r3, #1
 8004432:	e000      	b.n	8004436 <DMA_SetConfig+0x1d6>
 8004434:	2300      	movs	r3, #0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d059      	beq.n	80044ee <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800443e:	f003 031f 	and.w	r3, r3, #31
 8004442:	223f      	movs	r2, #63	; 0x3f
 8004444:	409a      	lsls	r2, r3
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004458:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	683a      	ldr	r2, [r7, #0]
 8004460:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	2b40      	cmp	r3, #64	; 0x40
 8004468:	d138      	bne.n	80044dc <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68ba      	ldr	r2, [r7, #8]
 8004478:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800447a:	e086      	b.n	800458a <DMA_SetConfig+0x32a>
 800447c:	40020010 	.word	0x40020010
 8004480:	40020028 	.word	0x40020028
 8004484:	40020040 	.word	0x40020040
 8004488:	40020058 	.word	0x40020058
 800448c:	40020070 	.word	0x40020070
 8004490:	40020088 	.word	0x40020088
 8004494:	400200a0 	.word	0x400200a0
 8004498:	400200b8 	.word	0x400200b8
 800449c:	40020410 	.word	0x40020410
 80044a0:	40020428 	.word	0x40020428
 80044a4:	40020440 	.word	0x40020440
 80044a8:	40020458 	.word	0x40020458
 80044ac:	40020470 	.word	0x40020470
 80044b0:	40020488 	.word	0x40020488
 80044b4:	400204a0 	.word	0x400204a0
 80044b8:	400204b8 	.word	0x400204b8
 80044bc:	58025408 	.word	0x58025408
 80044c0:	5802541c 	.word	0x5802541c
 80044c4:	58025430 	.word	0x58025430
 80044c8:	58025444 	.word	0x58025444
 80044cc:	58025458 	.word	0x58025458
 80044d0:	5802546c 	.word	0x5802546c
 80044d4:	58025480 	.word	0x58025480
 80044d8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68ba      	ldr	r2, [r7, #8]
 80044e2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	60da      	str	r2, [r3, #12]
}
 80044ec:	e04d      	b.n	800458a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	4a29      	ldr	r2, [pc, #164]	; (8004598 <DMA_SetConfig+0x338>)
 80044f4:	4293      	cmp	r3, r2
 80044f6:	d022      	beq.n	800453e <DMA_SetConfig+0x2de>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a27      	ldr	r2, [pc, #156]	; (800459c <DMA_SetConfig+0x33c>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d01d      	beq.n	800453e <DMA_SetConfig+0x2de>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a26      	ldr	r2, [pc, #152]	; (80045a0 <DMA_SetConfig+0x340>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d018      	beq.n	800453e <DMA_SetConfig+0x2de>
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a24      	ldr	r2, [pc, #144]	; (80045a4 <DMA_SetConfig+0x344>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d013      	beq.n	800453e <DMA_SetConfig+0x2de>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a23      	ldr	r2, [pc, #140]	; (80045a8 <DMA_SetConfig+0x348>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d00e      	beq.n	800453e <DMA_SetConfig+0x2de>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a21      	ldr	r2, [pc, #132]	; (80045ac <DMA_SetConfig+0x34c>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d009      	beq.n	800453e <DMA_SetConfig+0x2de>
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a20      	ldr	r2, [pc, #128]	; (80045b0 <DMA_SetConfig+0x350>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d004      	beq.n	800453e <DMA_SetConfig+0x2de>
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4a1e      	ldr	r2, [pc, #120]	; (80045b4 <DMA_SetConfig+0x354>)
 800453a:	4293      	cmp	r3, r2
 800453c:	d101      	bne.n	8004542 <DMA_SetConfig+0x2e2>
 800453e:	2301      	movs	r3, #1
 8004540:	e000      	b.n	8004544 <DMA_SetConfig+0x2e4>
 8004542:	2300      	movs	r3, #0
 8004544:	2b00      	cmp	r3, #0
 8004546:	d020      	beq.n	800458a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800454c:	f003 031f 	and.w	r3, r3, #31
 8004550:	2201      	movs	r2, #1
 8004552:	409a      	lsls	r2, r3
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	683a      	ldr	r2, [r7, #0]
 800455e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	2b40      	cmp	r3, #64	; 0x40
 8004566:	d108      	bne.n	800457a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	687a      	ldr	r2, [r7, #4]
 800456e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	68ba      	ldr	r2, [r7, #8]
 8004576:	60da      	str	r2, [r3, #12]
}
 8004578:	e007      	b.n	800458a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68ba      	ldr	r2, [r7, #8]
 8004580:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	60da      	str	r2, [r3, #12]
}
 800458a:	bf00      	nop
 800458c:	371c      	adds	r7, #28
 800458e:	46bd      	mov	sp, r7
 8004590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004594:	4770      	bx	lr
 8004596:	bf00      	nop
 8004598:	58025408 	.word	0x58025408
 800459c:	5802541c 	.word	0x5802541c
 80045a0:	58025430 	.word	0x58025430
 80045a4:	58025444 	.word	0x58025444
 80045a8:	58025458 	.word	0x58025458
 80045ac:	5802546c 	.word	0x5802546c
 80045b0:	58025480 	.word	0x58025480
 80045b4:	58025494 	.word	0x58025494

080045b8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b085      	sub	sp, #20
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4a42      	ldr	r2, [pc, #264]	; (80046d0 <DMA_CalcBaseAndBitshift+0x118>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d04a      	beq.n	8004660 <DMA_CalcBaseAndBitshift+0xa8>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a41      	ldr	r2, [pc, #260]	; (80046d4 <DMA_CalcBaseAndBitshift+0x11c>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d045      	beq.n	8004660 <DMA_CalcBaseAndBitshift+0xa8>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a3f      	ldr	r2, [pc, #252]	; (80046d8 <DMA_CalcBaseAndBitshift+0x120>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d040      	beq.n	8004660 <DMA_CalcBaseAndBitshift+0xa8>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	4a3e      	ldr	r2, [pc, #248]	; (80046dc <DMA_CalcBaseAndBitshift+0x124>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d03b      	beq.n	8004660 <DMA_CalcBaseAndBitshift+0xa8>
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a3c      	ldr	r2, [pc, #240]	; (80046e0 <DMA_CalcBaseAndBitshift+0x128>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d036      	beq.n	8004660 <DMA_CalcBaseAndBitshift+0xa8>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a3b      	ldr	r2, [pc, #236]	; (80046e4 <DMA_CalcBaseAndBitshift+0x12c>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d031      	beq.n	8004660 <DMA_CalcBaseAndBitshift+0xa8>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a39      	ldr	r2, [pc, #228]	; (80046e8 <DMA_CalcBaseAndBitshift+0x130>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d02c      	beq.n	8004660 <DMA_CalcBaseAndBitshift+0xa8>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a38      	ldr	r2, [pc, #224]	; (80046ec <DMA_CalcBaseAndBitshift+0x134>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d027      	beq.n	8004660 <DMA_CalcBaseAndBitshift+0xa8>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a36      	ldr	r2, [pc, #216]	; (80046f0 <DMA_CalcBaseAndBitshift+0x138>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d022      	beq.n	8004660 <DMA_CalcBaseAndBitshift+0xa8>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a35      	ldr	r2, [pc, #212]	; (80046f4 <DMA_CalcBaseAndBitshift+0x13c>)
 8004620:	4293      	cmp	r3, r2
 8004622:	d01d      	beq.n	8004660 <DMA_CalcBaseAndBitshift+0xa8>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4a33      	ldr	r2, [pc, #204]	; (80046f8 <DMA_CalcBaseAndBitshift+0x140>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d018      	beq.n	8004660 <DMA_CalcBaseAndBitshift+0xa8>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	4a32      	ldr	r2, [pc, #200]	; (80046fc <DMA_CalcBaseAndBitshift+0x144>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d013      	beq.n	8004660 <DMA_CalcBaseAndBitshift+0xa8>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	4a30      	ldr	r2, [pc, #192]	; (8004700 <DMA_CalcBaseAndBitshift+0x148>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d00e      	beq.n	8004660 <DMA_CalcBaseAndBitshift+0xa8>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a2f      	ldr	r2, [pc, #188]	; (8004704 <DMA_CalcBaseAndBitshift+0x14c>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d009      	beq.n	8004660 <DMA_CalcBaseAndBitshift+0xa8>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a2d      	ldr	r2, [pc, #180]	; (8004708 <DMA_CalcBaseAndBitshift+0x150>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d004      	beq.n	8004660 <DMA_CalcBaseAndBitshift+0xa8>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	4a2c      	ldr	r2, [pc, #176]	; (800470c <DMA_CalcBaseAndBitshift+0x154>)
 800465c:	4293      	cmp	r3, r2
 800465e:	d101      	bne.n	8004664 <DMA_CalcBaseAndBitshift+0xac>
 8004660:	2301      	movs	r3, #1
 8004662:	e000      	b.n	8004666 <DMA_CalcBaseAndBitshift+0xae>
 8004664:	2300      	movs	r3, #0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d024      	beq.n	80046b4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	b2db      	uxtb	r3, r3
 8004670:	3b10      	subs	r3, #16
 8004672:	4a27      	ldr	r2, [pc, #156]	; (8004710 <DMA_CalcBaseAndBitshift+0x158>)
 8004674:	fba2 2303 	umull	r2, r3, r2, r3
 8004678:	091b      	lsrs	r3, r3, #4
 800467a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f003 0307 	and.w	r3, r3, #7
 8004682:	4a24      	ldr	r2, [pc, #144]	; (8004714 <DMA_CalcBaseAndBitshift+0x15c>)
 8004684:	5cd3      	ldrb	r3, [r2, r3]
 8004686:	461a      	mov	r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2b03      	cmp	r3, #3
 8004690:	d908      	bls.n	80046a4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	461a      	mov	r2, r3
 8004698:	4b1f      	ldr	r3, [pc, #124]	; (8004718 <DMA_CalcBaseAndBitshift+0x160>)
 800469a:	4013      	ands	r3, r2
 800469c:	1d1a      	adds	r2, r3, #4
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	659a      	str	r2, [r3, #88]	; 0x58
 80046a2:	e00d      	b.n	80046c0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	461a      	mov	r2, r3
 80046aa:	4b1b      	ldr	r3, [pc, #108]	; (8004718 <DMA_CalcBaseAndBitshift+0x160>)
 80046ac:	4013      	ands	r3, r2
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	6593      	str	r3, [r2, #88]	; 0x58
 80046b2:	e005      	b.n	80046c0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3714      	adds	r7, #20
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr
 80046d0:	40020010 	.word	0x40020010
 80046d4:	40020028 	.word	0x40020028
 80046d8:	40020040 	.word	0x40020040
 80046dc:	40020058 	.word	0x40020058
 80046e0:	40020070 	.word	0x40020070
 80046e4:	40020088 	.word	0x40020088
 80046e8:	400200a0 	.word	0x400200a0
 80046ec:	400200b8 	.word	0x400200b8
 80046f0:	40020410 	.word	0x40020410
 80046f4:	40020428 	.word	0x40020428
 80046f8:	40020440 	.word	0x40020440
 80046fc:	40020458 	.word	0x40020458
 8004700:	40020470 	.word	0x40020470
 8004704:	40020488 	.word	0x40020488
 8004708:	400204a0 	.word	0x400204a0
 800470c:	400204b8 	.word	0x400204b8
 8004710:	aaaaaaab 	.word	0xaaaaaaab
 8004714:	08011de4 	.word	0x08011de4
 8004718:	fffffc00 	.word	0xfffffc00

0800471c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800471c:	b480      	push	{r7}
 800471e:	b085      	sub	sp, #20
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004724:	2300      	movs	r3, #0
 8004726:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d120      	bne.n	8004772 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004734:	2b03      	cmp	r3, #3
 8004736:	d858      	bhi.n	80047ea <DMA_CheckFifoParam+0xce>
 8004738:	a201      	add	r2, pc, #4	; (adr r2, 8004740 <DMA_CheckFifoParam+0x24>)
 800473a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800473e:	bf00      	nop
 8004740:	08004751 	.word	0x08004751
 8004744:	08004763 	.word	0x08004763
 8004748:	08004751 	.word	0x08004751
 800474c:	080047eb 	.word	0x080047eb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004754:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d048      	beq.n	80047ee <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800475c:	2301      	movs	r3, #1
 800475e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004760:	e045      	b.n	80047ee <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004766:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800476a:	d142      	bne.n	80047f2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800476c:	2301      	movs	r3, #1
 800476e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8004770:	e03f      	b.n	80047f2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	699b      	ldr	r3, [r3, #24]
 8004776:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800477a:	d123      	bne.n	80047c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004780:	2b03      	cmp	r3, #3
 8004782:	d838      	bhi.n	80047f6 <DMA_CheckFifoParam+0xda>
 8004784:	a201      	add	r2, pc, #4	; (adr r2, 800478c <DMA_CheckFifoParam+0x70>)
 8004786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800478a:	bf00      	nop
 800478c:	0800479d 	.word	0x0800479d
 8004790:	080047a3 	.word	0x080047a3
 8004794:	0800479d 	.word	0x0800479d
 8004798:	080047b5 	.word	0x080047b5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	73fb      	strb	r3, [r7, #15]
        break;
 80047a0:	e030      	b.n	8004804 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d025      	beq.n	80047fa <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80047b2:	e022      	b.n	80047fa <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80047bc:	d11f      	bne.n	80047fe <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80047c2:	e01c      	b.n	80047fe <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047c8:	2b02      	cmp	r3, #2
 80047ca:	d902      	bls.n	80047d2 <DMA_CheckFifoParam+0xb6>
 80047cc:	2b03      	cmp	r3, #3
 80047ce:	d003      	beq.n	80047d8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80047d0:	e018      	b.n	8004804 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	73fb      	strb	r3, [r7, #15]
        break;
 80047d6:	e015      	b.n	8004804 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d00e      	beq.n	8004802 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	73fb      	strb	r3, [r7, #15]
    break;
 80047e8:	e00b      	b.n	8004802 <DMA_CheckFifoParam+0xe6>
        break;
 80047ea:	bf00      	nop
 80047ec:	e00a      	b.n	8004804 <DMA_CheckFifoParam+0xe8>
        break;
 80047ee:	bf00      	nop
 80047f0:	e008      	b.n	8004804 <DMA_CheckFifoParam+0xe8>
        break;
 80047f2:	bf00      	nop
 80047f4:	e006      	b.n	8004804 <DMA_CheckFifoParam+0xe8>
        break;
 80047f6:	bf00      	nop
 80047f8:	e004      	b.n	8004804 <DMA_CheckFifoParam+0xe8>
        break;
 80047fa:	bf00      	nop
 80047fc:	e002      	b.n	8004804 <DMA_CheckFifoParam+0xe8>
        break;
 80047fe:	bf00      	nop
 8004800:	e000      	b.n	8004804 <DMA_CheckFifoParam+0xe8>
    break;
 8004802:	bf00      	nop
    }
  }

  return status;
 8004804:	7bfb      	ldrb	r3, [r7, #15]
}
 8004806:	4618      	mov	r0, r3
 8004808:	3714      	adds	r7, #20
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop

08004814 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004814:	b480      	push	{r7}
 8004816:	b085      	sub	sp, #20
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a38      	ldr	r2, [pc, #224]	; (8004908 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d022      	beq.n	8004872 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a36      	ldr	r2, [pc, #216]	; (800490c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d01d      	beq.n	8004872 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a35      	ldr	r2, [pc, #212]	; (8004910 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d018      	beq.n	8004872 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a33      	ldr	r2, [pc, #204]	; (8004914 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d013      	beq.n	8004872 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a32      	ldr	r2, [pc, #200]	; (8004918 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d00e      	beq.n	8004872 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	4a30      	ldr	r2, [pc, #192]	; (800491c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d009      	beq.n	8004872 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a2f      	ldr	r2, [pc, #188]	; (8004920 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8004864:	4293      	cmp	r3, r2
 8004866:	d004      	beq.n	8004872 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a2d      	ldr	r2, [pc, #180]	; (8004924 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d101      	bne.n	8004876 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8004872:	2301      	movs	r3, #1
 8004874:	e000      	b.n	8004878 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8004876:	2300      	movs	r3, #0
 8004878:	2b00      	cmp	r3, #0
 800487a:	d01a      	beq.n	80048b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	b2db      	uxtb	r3, r3
 8004882:	3b08      	subs	r3, #8
 8004884:	4a28      	ldr	r2, [pc, #160]	; (8004928 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8004886:	fba2 2303 	umull	r2, r3, r2, r3
 800488a:	091b      	lsrs	r3, r3, #4
 800488c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	4b26      	ldr	r3, [pc, #152]	; (800492c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8004892:	4413      	add	r3, r2
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	461a      	mov	r2, r3
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4a24      	ldr	r2, [pc, #144]	; (8004930 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80048a0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f003 031f 	and.w	r3, r3, #31
 80048a8:	2201      	movs	r2, #1
 80048aa:	409a      	lsls	r2, r3
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80048b0:	e024      	b.n	80048fc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	3b10      	subs	r3, #16
 80048ba:	4a1e      	ldr	r2, [pc, #120]	; (8004934 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80048bc:	fba2 2303 	umull	r2, r3, r2, r3
 80048c0:	091b      	lsrs	r3, r3, #4
 80048c2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	4a1c      	ldr	r2, [pc, #112]	; (8004938 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80048c8:	4293      	cmp	r3, r2
 80048ca:	d806      	bhi.n	80048da <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	4a1b      	ldr	r2, [pc, #108]	; (800493c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d902      	bls.n	80048da <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	3308      	adds	r3, #8
 80048d8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	4b18      	ldr	r3, [pc, #96]	; (8004940 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80048de:	4413      	add	r3, r2
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	461a      	mov	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	4a16      	ldr	r2, [pc, #88]	; (8004944 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80048ec:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f003 031f 	and.w	r3, r3, #31
 80048f4:	2201      	movs	r2, #1
 80048f6:	409a      	lsls	r2, r3
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	669a      	str	r2, [r3, #104]	; 0x68
}
 80048fc:	bf00      	nop
 80048fe:	3714      	adds	r7, #20
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr
 8004908:	58025408 	.word	0x58025408
 800490c:	5802541c 	.word	0x5802541c
 8004910:	58025430 	.word	0x58025430
 8004914:	58025444 	.word	0x58025444
 8004918:	58025458 	.word	0x58025458
 800491c:	5802546c 	.word	0x5802546c
 8004920:	58025480 	.word	0x58025480
 8004924:	58025494 	.word	0x58025494
 8004928:	cccccccd 	.word	0xcccccccd
 800492c:	16009600 	.word	0x16009600
 8004930:	58025880 	.word	0x58025880
 8004934:	aaaaaaab 	.word	0xaaaaaaab
 8004938:	400204b8 	.word	0x400204b8
 800493c:	4002040f 	.word	0x4002040f
 8004940:	10008200 	.word	0x10008200
 8004944:	40020880 	.word	0x40020880

08004948 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004948:	b480      	push	{r7}
 800494a:	b085      	sub	sp, #20
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	685b      	ldr	r3, [r3, #4]
 8004954:	b2db      	uxtb	r3, r3
 8004956:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d04a      	beq.n	80049f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2b08      	cmp	r3, #8
 8004962:	d847      	bhi.n	80049f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a25      	ldr	r2, [pc, #148]	; (8004a00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800496a:	4293      	cmp	r3, r2
 800496c:	d022      	beq.n	80049b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	4a24      	ldr	r2, [pc, #144]	; (8004a04 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8004974:	4293      	cmp	r3, r2
 8004976:	d01d      	beq.n	80049b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	4a22      	ldr	r2, [pc, #136]	; (8004a08 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800497e:	4293      	cmp	r3, r2
 8004980:	d018      	beq.n	80049b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4a21      	ldr	r2, [pc, #132]	; (8004a0c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8004988:	4293      	cmp	r3, r2
 800498a:	d013      	beq.n	80049b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4a1f      	ldr	r2, [pc, #124]	; (8004a10 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d00e      	beq.n	80049b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4a1e      	ldr	r2, [pc, #120]	; (8004a14 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800499c:	4293      	cmp	r3, r2
 800499e:	d009      	beq.n	80049b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a1c      	ldr	r2, [pc, #112]	; (8004a18 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d004      	beq.n	80049b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a1b      	ldr	r2, [pc, #108]	; (8004a1c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d101      	bne.n	80049b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80049b4:	2301      	movs	r3, #1
 80049b6:	e000      	b.n	80049ba <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80049b8:	2300      	movs	r3, #0
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d00a      	beq.n	80049d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	4b17      	ldr	r3, [pc, #92]	; (8004a20 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80049c2:	4413      	add	r3, r2
 80049c4:	009b      	lsls	r3, r3, #2
 80049c6:	461a      	mov	r2, r3
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	4a15      	ldr	r2, [pc, #84]	; (8004a24 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80049d0:	671a      	str	r2, [r3, #112]	; 0x70
 80049d2:	e009      	b.n	80049e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	4b14      	ldr	r3, [pc, #80]	; (8004a28 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80049d8:	4413      	add	r3, r2
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	461a      	mov	r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a11      	ldr	r2, [pc, #68]	; (8004a2c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80049e6:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	3b01      	subs	r3, #1
 80049ec:	2201      	movs	r2, #1
 80049ee:	409a      	lsls	r2, r3
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 80049f4:	bf00      	nop
 80049f6:	3714      	adds	r7, #20
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr
 8004a00:	58025408 	.word	0x58025408
 8004a04:	5802541c 	.word	0x5802541c
 8004a08:	58025430 	.word	0x58025430
 8004a0c:	58025444 	.word	0x58025444
 8004a10:	58025458 	.word	0x58025458
 8004a14:	5802546c 	.word	0x5802546c
 8004a18:	58025480 	.word	0x58025480
 8004a1c:	58025494 	.word	0x58025494
 8004a20:	1600963f 	.word	0x1600963f
 8004a24:	58025940 	.word	0x58025940
 8004a28:	1000823f 	.word	0x1000823f
 8004a2c:	40020940 	.word	0x40020940

08004a30 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b086      	sub	sp, #24
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	607a      	str	r2, [r7, #4]
 8004a3c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	2b80      	cmp	r3, #128	; 0x80
 8004a48:	d105      	bne.n	8004a56 <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004a50:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e315      	b.n	8005082 <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004a5c:	2b01      	cmp	r3, #1
 8004a5e:	d101      	bne.n	8004a64 <HAL_DMAEx_MultiBufferStart_IT+0x34>
 8004a60:	2302      	movs	r3, #2
 8004a62:	e30e      	b.n	8005082 <HAL_DMAEx_MultiBufferStart_IT+0x652>
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2201      	movs	r2, #1
 8004a68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a72:	b2db      	uxtb	r3, r3
 8004a74:	2b01      	cmp	r3, #1
 8004a76:	f040 82fd 	bne.w	8005074 <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2202      	movs	r2, #2
 8004a7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2200      	movs	r2, #0
 8004a86:	655a      	str	r2, [r3, #84]	; 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	4a82      	ldr	r2, [pc, #520]	; (8004c98 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d04a      	beq.n	8004b28 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	4a81      	ldr	r2, [pc, #516]	; (8004c9c <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8004a98:	4293      	cmp	r3, r2
 8004a9a:	d045      	beq.n	8004b28 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a7f      	ldr	r2, [pc, #508]	; (8004ca0 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d040      	beq.n	8004b28 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a7e      	ldr	r2, [pc, #504]	; (8004ca4 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d03b      	beq.n	8004b28 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a7c      	ldr	r2, [pc, #496]	; (8004ca8 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d036      	beq.n	8004b28 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a7b      	ldr	r2, [pc, #492]	; (8004cac <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d031      	beq.n	8004b28 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4a79      	ldr	r2, [pc, #484]	; (8004cb0 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d02c      	beq.n	8004b28 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a78      	ldr	r2, [pc, #480]	; (8004cb4 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d027      	beq.n	8004b28 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a76      	ldr	r2, [pc, #472]	; (8004cb8 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d022      	beq.n	8004b28 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a75      	ldr	r2, [pc, #468]	; (8004cbc <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d01d      	beq.n	8004b28 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a73      	ldr	r2, [pc, #460]	; (8004cc0 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d018      	beq.n	8004b28 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a72      	ldr	r2, [pc, #456]	; (8004cc4 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d013      	beq.n	8004b28 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a70      	ldr	r2, [pc, #448]	; (8004cc8 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d00e      	beq.n	8004b28 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	4a6f      	ldr	r2, [pc, #444]	; (8004ccc <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d009      	beq.n	8004b28 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	4a6d      	ldr	r2, [pc, #436]	; (8004cd0 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d004      	beq.n	8004b28 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4a6c      	ldr	r2, [pc, #432]	; (8004cd4 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d101      	bne.n	8004b2c <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e000      	b.n	8004b2e <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 8004b2c:	2300      	movs	r3, #0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d018      	beq.n	8004b64 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004b40:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	683a      	ldr	r2, [r7, #0]
 8004b48:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b4e:	3308      	adds	r3, #8
 8004b50:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b56:	f003 031f 	and.w	r3, r3, #31
 8004b5a:	223f      	movs	r2, #63	; 0x3f
 8004b5c:	409a      	lsls	r2, r3
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	601a      	str	r2, [r3, #0]
 8004b62:	e018      	b.n	8004b96 <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	6819      	ldr	r1, [r3, #0]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	f248 0320 	movw	r3, #32800	; 0x8020
 8004b72:	430b      	orrs	r3, r1
 8004b74:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	683a      	ldr	r2, [r7, #0]
 8004b7c:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b82:	3304      	adds	r3, #4
 8004b84:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b8a:	f003 031f 	and.w	r3, r3, #31
 8004b8e:	2201      	movs	r2, #1
 8004b90:	409a      	lsls	r2, r3
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004b96:	6a3b      	ldr	r3, [r7, #32]
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	68b9      	ldr	r1, [r7, #8]
 8004b9c:	68f8      	ldr	r0, [r7, #12]
 8004b9e:	f000 fb41 	bl	8005224 <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a3c      	ldr	r2, [pc, #240]	; (8004c98 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d072      	beq.n	8004c92 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a3a      	ldr	r2, [pc, #232]	; (8004c9c <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d06d      	beq.n	8004c92 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a39      	ldr	r2, [pc, #228]	; (8004ca0 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d068      	beq.n	8004c92 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a37      	ldr	r2, [pc, #220]	; (8004ca4 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d063      	beq.n	8004c92 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a36      	ldr	r2, [pc, #216]	; (8004ca8 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d05e      	beq.n	8004c92 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a34      	ldr	r2, [pc, #208]	; (8004cac <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d059      	beq.n	8004c92 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a33      	ldr	r2, [pc, #204]	; (8004cb0 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d054      	beq.n	8004c92 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a31      	ldr	r2, [pc, #196]	; (8004cb4 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d04f      	beq.n	8004c92 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a30      	ldr	r2, [pc, #192]	; (8004cb8 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d04a      	beq.n	8004c92 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a2e      	ldr	r2, [pc, #184]	; (8004cbc <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d045      	beq.n	8004c92 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a2d      	ldr	r2, [pc, #180]	; (8004cc0 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d040      	beq.n	8004c92 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a2b      	ldr	r2, [pc, #172]	; (8004cc4 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d03b      	beq.n	8004c92 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a2a      	ldr	r2, [pc, #168]	; (8004cc8 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d036      	beq.n	8004c92 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a28      	ldr	r2, [pc, #160]	; (8004ccc <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d031      	beq.n	8004c92 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a27      	ldr	r2, [pc, #156]	; (8004cd0 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d02c      	beq.n	8004c92 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a25      	ldr	r2, [pc, #148]	; (8004cd4 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d027      	beq.n	8004c92 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a24      	ldr	r2, [pc, #144]	; (8004cd8 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d022      	beq.n	8004c92 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a22      	ldr	r2, [pc, #136]	; (8004cdc <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d01d      	beq.n	8004c92 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a21      	ldr	r2, [pc, #132]	; (8004ce0 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d018      	beq.n	8004c92 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a1f      	ldr	r2, [pc, #124]	; (8004ce4 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d013      	beq.n	8004c92 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a1e      	ldr	r2, [pc, #120]	; (8004ce8 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d00e      	beq.n	8004c92 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a1c      	ldr	r2, [pc, #112]	; (8004cec <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d009      	beq.n	8004c92 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a1b      	ldr	r2, [pc, #108]	; (8004cf0 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d004      	beq.n	8004c92 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a19      	ldr	r2, [pc, #100]	; (8004cf4 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d132      	bne.n	8004cf8 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 8004c92:	2301      	movs	r3, #1
 8004c94:	e031      	b.n	8004cfa <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 8004c96:	bf00      	nop
 8004c98:	40020010 	.word	0x40020010
 8004c9c:	40020028 	.word	0x40020028
 8004ca0:	40020040 	.word	0x40020040
 8004ca4:	40020058 	.word	0x40020058
 8004ca8:	40020070 	.word	0x40020070
 8004cac:	40020088 	.word	0x40020088
 8004cb0:	400200a0 	.word	0x400200a0
 8004cb4:	400200b8 	.word	0x400200b8
 8004cb8:	40020410 	.word	0x40020410
 8004cbc:	40020428 	.word	0x40020428
 8004cc0:	40020440 	.word	0x40020440
 8004cc4:	40020458 	.word	0x40020458
 8004cc8:	40020470 	.word	0x40020470
 8004ccc:	40020488 	.word	0x40020488
 8004cd0:	400204a0 	.word	0x400204a0
 8004cd4:	400204b8 	.word	0x400204b8
 8004cd8:	58025408 	.word	0x58025408
 8004cdc:	5802541c 	.word	0x5802541c
 8004ce0:	58025430 	.word	0x58025430
 8004ce4:	58025444 	.word	0x58025444
 8004ce8:	58025458 	.word	0x58025458
 8004cec:	5802546c 	.word	0x5802546c
 8004cf0:	58025480 	.word	0x58025480
 8004cf4:	58025494 	.word	0x58025494
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d00d      	beq.n	8004d1a <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d02:	68fa      	ldr	r2, [r7, #12]
 8004d04:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8004d06:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d004      	beq.n	8004d1a <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8004d18:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	4a3b      	ldr	r2, [pc, #236]	; (8004e0c <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 8004d20:	4293      	cmp	r3, r2
 8004d22:	d04a      	beq.n	8004dba <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	4a39      	ldr	r2, [pc, #228]	; (8004e10 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 8004d2a:	4293      	cmp	r3, r2
 8004d2c:	d045      	beq.n	8004dba <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a38      	ldr	r2, [pc, #224]	; (8004e14 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d040      	beq.n	8004dba <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4a36      	ldr	r2, [pc, #216]	; (8004e18 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d03b      	beq.n	8004dba <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4a35      	ldr	r2, [pc, #212]	; (8004e1c <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 8004d48:	4293      	cmp	r3, r2
 8004d4a:	d036      	beq.n	8004dba <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a33      	ldr	r2, [pc, #204]	; (8004e20 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d031      	beq.n	8004dba <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a32      	ldr	r2, [pc, #200]	; (8004e24 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d02c      	beq.n	8004dba <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a30      	ldr	r2, [pc, #192]	; (8004e28 <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d027      	beq.n	8004dba <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	4a2f      	ldr	r2, [pc, #188]	; (8004e2c <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 8004d70:	4293      	cmp	r3, r2
 8004d72:	d022      	beq.n	8004dba <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a2d      	ldr	r2, [pc, #180]	; (8004e30 <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d01d      	beq.n	8004dba <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a2c      	ldr	r2, [pc, #176]	; (8004e34 <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d018      	beq.n	8004dba <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a2a      	ldr	r2, [pc, #168]	; (8004e38 <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d013      	beq.n	8004dba <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	4a29      	ldr	r2, [pc, #164]	; (8004e3c <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	d00e      	beq.n	8004dba <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a27      	ldr	r2, [pc, #156]	; (8004e40 <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d009      	beq.n	8004dba <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a26      	ldr	r2, [pc, #152]	; (8004e44 <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d004      	beq.n	8004dba <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	4a24      	ldr	r2, [pc, #144]	; (8004e48 <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d101      	bne.n	8004dbe <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 8004dba:	2301      	movs	r3, #1
 8004dbc:	e000      	b.n	8004dc0 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 8004dbe:	2300      	movs	r3, #0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d043      	beq.n	8004e4c <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f023 021e 	bic.w	r2, r3, #30
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f042 0216 	orr.w	r2, r2, #22
 8004dd6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	695a      	ldr	r2, [r3, #20]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004de6:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d103      	bne.n	8004df8 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d043      	beq.n	8004e80 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	681a      	ldr	r2, [r3, #0]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f042 0208 	orr.w	r2, r2, #8
 8004e06:	601a      	str	r2, [r3, #0]
 8004e08:	e03a      	b.n	8004e80 <HAL_DMAEx_MultiBufferStart_IT+0x450>
 8004e0a:	bf00      	nop
 8004e0c:	40020010 	.word	0x40020010
 8004e10:	40020028 	.word	0x40020028
 8004e14:	40020040 	.word	0x40020040
 8004e18:	40020058 	.word	0x40020058
 8004e1c:	40020070 	.word	0x40020070
 8004e20:	40020088 	.word	0x40020088
 8004e24:	400200a0 	.word	0x400200a0
 8004e28:	400200b8 	.word	0x400200b8
 8004e2c:	40020410 	.word	0x40020410
 8004e30:	40020428 	.word	0x40020428
 8004e34:	40020440 	.word	0x40020440
 8004e38:	40020458 	.word	0x40020458
 8004e3c:	40020470 	.word	0x40020470
 8004e40:	40020488 	.word	0x40020488
 8004e44:	400204a0 	.word	0x400204a0
 8004e48:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f023 020e 	bic.w	r2, r3, #14
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	f042 020a 	orr.w	r2, r2, #10
 8004e5e:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d103      	bne.n	8004e70 <HAL_DMAEx_MultiBufferStart_IT+0x440>
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d007      	beq.n	8004e80 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f042 0204 	orr.w	r2, r2, #4
 8004e7e:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a81      	ldr	r2, [pc, #516]	; (800508c <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d072      	beq.n	8004f70 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4a80      	ldr	r2, [pc, #512]	; (8005090 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d06d      	beq.n	8004f70 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a7e      	ldr	r2, [pc, #504]	; (8005094 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d068      	beq.n	8004f70 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a7d      	ldr	r2, [pc, #500]	; (8005098 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d063      	beq.n	8004f70 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4a7b      	ldr	r2, [pc, #492]	; (800509c <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8004eae:	4293      	cmp	r3, r2
 8004eb0:	d05e      	beq.n	8004f70 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a7a      	ldr	r2, [pc, #488]	; (80050a0 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d059      	beq.n	8004f70 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a78      	ldr	r2, [pc, #480]	; (80050a4 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d054      	beq.n	8004f70 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a77      	ldr	r2, [pc, #476]	; (80050a8 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d04f      	beq.n	8004f70 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a75      	ldr	r2, [pc, #468]	; (80050ac <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d04a      	beq.n	8004f70 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a74      	ldr	r2, [pc, #464]	; (80050b0 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d045      	beq.n	8004f70 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a72      	ldr	r2, [pc, #456]	; (80050b4 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d040      	beq.n	8004f70 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	4a71      	ldr	r2, [pc, #452]	; (80050b8 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8004ef4:	4293      	cmp	r3, r2
 8004ef6:	d03b      	beq.n	8004f70 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4a6f      	ldr	r2, [pc, #444]	; (80050bc <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d036      	beq.n	8004f70 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	4a6e      	ldr	r2, [pc, #440]	; (80050c0 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d031      	beq.n	8004f70 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a6c      	ldr	r2, [pc, #432]	; (80050c4 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d02c      	beq.n	8004f70 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	4a6b      	ldr	r2, [pc, #428]	; (80050c8 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d027      	beq.n	8004f70 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	4a69      	ldr	r2, [pc, #420]	; (80050cc <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d022      	beq.n	8004f70 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4a68      	ldr	r2, [pc, #416]	; (80050d0 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d01d      	beq.n	8004f70 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a66      	ldr	r2, [pc, #408]	; (80050d4 <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d018      	beq.n	8004f70 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a65      	ldr	r2, [pc, #404]	; (80050d8 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d013      	beq.n	8004f70 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a63      	ldr	r2, [pc, #396]	; (80050dc <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d00e      	beq.n	8004f70 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a62      	ldr	r2, [pc, #392]	; (80050e0 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d009      	beq.n	8004f70 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a60      	ldr	r2, [pc, #384]	; (80050e4 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d004      	beq.n	8004f70 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a5f      	ldr	r2, [pc, #380]	; (80050e8 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d101      	bne.n	8004f74 <HAL_DMAEx_MultiBufferStart_IT+0x544>
 8004f70:	2301      	movs	r3, #1
 8004f72:	e000      	b.n	8004f76 <HAL_DMAEx_MultiBufferStart_IT+0x546>
 8004f74:	2300      	movs	r3, #0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d01a      	beq.n	8004fb0 <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d007      	beq.n	8004f98 <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004f92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f96:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d007      	beq.n	8004fb0 <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fa4:	681a      	ldr	r2, [r3, #0]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004faa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004fae:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	4a35      	ldr	r2, [pc, #212]	; (800508c <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 8004fb6:	4293      	cmp	r3, r2
 8004fb8:	d04a      	beq.n	8005050 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	4a34      	ldr	r2, [pc, #208]	; (8005090 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 8004fc0:	4293      	cmp	r3, r2
 8004fc2:	d045      	beq.n	8005050 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	4a32      	ldr	r2, [pc, #200]	; (8005094 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d040      	beq.n	8005050 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	4a31      	ldr	r2, [pc, #196]	; (8005098 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d03b      	beq.n	8005050 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	4a2f      	ldr	r2, [pc, #188]	; (800509c <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 8004fde:	4293      	cmp	r3, r2
 8004fe0:	d036      	beq.n	8005050 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	4a2e      	ldr	r2, [pc, #184]	; (80050a0 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d031      	beq.n	8005050 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	4a2c      	ldr	r2, [pc, #176]	; (80050a4 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8004ff2:	4293      	cmp	r3, r2
 8004ff4:	d02c      	beq.n	8005050 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a2b      	ldr	r2, [pc, #172]	; (80050a8 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d027      	beq.n	8005050 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a29      	ldr	r2, [pc, #164]	; (80050ac <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8005006:	4293      	cmp	r3, r2
 8005008:	d022      	beq.n	8005050 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a28      	ldr	r2, [pc, #160]	; (80050b0 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d01d      	beq.n	8005050 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a26      	ldr	r2, [pc, #152]	; (80050b4 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d018      	beq.n	8005050 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a25      	ldr	r2, [pc, #148]	; (80050b8 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d013      	beq.n	8005050 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a23      	ldr	r2, [pc, #140]	; (80050bc <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d00e      	beq.n	8005050 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4a22      	ldr	r2, [pc, #136]	; (80050c0 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d009      	beq.n	8005050 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a20      	ldr	r2, [pc, #128]	; (80050c4 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d004      	beq.n	8005050 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a1f      	ldr	r2, [pc, #124]	; (80050c8 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d108      	bne.n	8005062 <HAL_DMAEx_MultiBufferStart_IT+0x632>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f042 0201 	orr.w	r2, r2, #1
 800505e:	601a      	str	r2, [r3, #0]
 8005060:	e00e      	b.n	8005080 <HAL_DMAEx_MultiBufferStart_IT+0x650>
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f042 0201 	orr.w	r2, r2, #1
 8005070:	601a      	str	r2, [r3, #0]
 8005072:	e005      	b.n	8005080 <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800507a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Return error status */
    status = HAL_ERROR;
 800507c:	2301      	movs	r3, #1
 800507e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005080:	7dfb      	ldrb	r3, [r7, #23]
}
 8005082:	4618      	mov	r0, r3
 8005084:	3718      	adds	r7, #24
 8005086:	46bd      	mov	sp, r7
 8005088:	bd80      	pop	{r7, pc}
 800508a:	bf00      	nop
 800508c:	40020010 	.word	0x40020010
 8005090:	40020028 	.word	0x40020028
 8005094:	40020040 	.word	0x40020040
 8005098:	40020058 	.word	0x40020058
 800509c:	40020070 	.word	0x40020070
 80050a0:	40020088 	.word	0x40020088
 80050a4:	400200a0 	.word	0x400200a0
 80050a8:	400200b8 	.word	0x400200b8
 80050ac:	40020410 	.word	0x40020410
 80050b0:	40020428 	.word	0x40020428
 80050b4:	40020440 	.word	0x40020440
 80050b8:	40020458 	.word	0x40020458
 80050bc:	40020470 	.word	0x40020470
 80050c0:	40020488 	.word	0x40020488
 80050c4:	400204a0 	.word	0x400204a0
 80050c8:	400204b8 	.word	0x400204b8
 80050cc:	58025408 	.word	0x58025408
 80050d0:	5802541c 	.word	0x5802541c
 80050d4:	58025430 	.word	0x58025430
 80050d8:	58025444 	.word	0x58025444
 80050dc:	58025458 	.word	0x58025458
 80050e0:	5802546c 	.word	0x5802546c
 80050e4:	58025480 	.word	0x58025480
 80050e8:	58025494 	.word	0x58025494

080050ec <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b085      	sub	sp, #20
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	4613      	mov	r3, r2
 80050f8:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a39      	ldr	r2, [pc, #228]	; (80051e4 <HAL_DMAEx_ChangeMemory+0xf8>)
 8005100:	4293      	cmp	r3, r2
 8005102:	d04a      	beq.n	800519a <HAL_DMAEx_ChangeMemory+0xae>
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4a37      	ldr	r2, [pc, #220]	; (80051e8 <HAL_DMAEx_ChangeMemory+0xfc>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d045      	beq.n	800519a <HAL_DMAEx_ChangeMemory+0xae>
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a36      	ldr	r2, [pc, #216]	; (80051ec <HAL_DMAEx_ChangeMemory+0x100>)
 8005114:	4293      	cmp	r3, r2
 8005116:	d040      	beq.n	800519a <HAL_DMAEx_ChangeMemory+0xae>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	4a34      	ldr	r2, [pc, #208]	; (80051f0 <HAL_DMAEx_ChangeMemory+0x104>)
 800511e:	4293      	cmp	r3, r2
 8005120:	d03b      	beq.n	800519a <HAL_DMAEx_ChangeMemory+0xae>
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	4a33      	ldr	r2, [pc, #204]	; (80051f4 <HAL_DMAEx_ChangeMemory+0x108>)
 8005128:	4293      	cmp	r3, r2
 800512a:	d036      	beq.n	800519a <HAL_DMAEx_ChangeMemory+0xae>
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	4a31      	ldr	r2, [pc, #196]	; (80051f8 <HAL_DMAEx_ChangeMemory+0x10c>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d031      	beq.n	800519a <HAL_DMAEx_ChangeMemory+0xae>
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	4a30      	ldr	r2, [pc, #192]	; (80051fc <HAL_DMAEx_ChangeMemory+0x110>)
 800513c:	4293      	cmp	r3, r2
 800513e:	d02c      	beq.n	800519a <HAL_DMAEx_ChangeMemory+0xae>
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a2e      	ldr	r2, [pc, #184]	; (8005200 <HAL_DMAEx_ChangeMemory+0x114>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d027      	beq.n	800519a <HAL_DMAEx_ChangeMemory+0xae>
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a2d      	ldr	r2, [pc, #180]	; (8005204 <HAL_DMAEx_ChangeMemory+0x118>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d022      	beq.n	800519a <HAL_DMAEx_ChangeMemory+0xae>
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a2b      	ldr	r2, [pc, #172]	; (8005208 <HAL_DMAEx_ChangeMemory+0x11c>)
 800515a:	4293      	cmp	r3, r2
 800515c:	d01d      	beq.n	800519a <HAL_DMAEx_ChangeMemory+0xae>
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	4a2a      	ldr	r2, [pc, #168]	; (800520c <HAL_DMAEx_ChangeMemory+0x120>)
 8005164:	4293      	cmp	r3, r2
 8005166:	d018      	beq.n	800519a <HAL_DMAEx_ChangeMemory+0xae>
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a28      	ldr	r2, [pc, #160]	; (8005210 <HAL_DMAEx_ChangeMemory+0x124>)
 800516e:	4293      	cmp	r3, r2
 8005170:	d013      	beq.n	800519a <HAL_DMAEx_ChangeMemory+0xae>
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	4a27      	ldr	r2, [pc, #156]	; (8005214 <HAL_DMAEx_ChangeMemory+0x128>)
 8005178:	4293      	cmp	r3, r2
 800517a:	d00e      	beq.n	800519a <HAL_DMAEx_ChangeMemory+0xae>
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	4a25      	ldr	r2, [pc, #148]	; (8005218 <HAL_DMAEx_ChangeMemory+0x12c>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d009      	beq.n	800519a <HAL_DMAEx_ChangeMemory+0xae>
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a24      	ldr	r2, [pc, #144]	; (800521c <HAL_DMAEx_ChangeMemory+0x130>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d004      	beq.n	800519a <HAL_DMAEx_ChangeMemory+0xae>
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4a22      	ldr	r2, [pc, #136]	; (8005220 <HAL_DMAEx_ChangeMemory+0x134>)
 8005196:	4293      	cmp	r3, r2
 8005198:	d101      	bne.n	800519e <HAL_DMAEx_ChangeMemory+0xb2>
 800519a:	2301      	movs	r3, #1
 800519c:	e000      	b.n	80051a0 <HAL_DMAEx_ChangeMemory+0xb4>
 800519e:	2300      	movs	r3, #0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d00c      	beq.n	80051be <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 80051a4:	79fb      	ldrb	r3, [r7, #7]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d104      	bne.n	80051b4 <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	68ba      	ldr	r2, [r7, #8]
 80051b0:	60da      	str	r2, [r3, #12]
 80051b2:	e010      	b.n	80051d6 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68ba      	ldr	r2, [r7, #8]
 80051ba:	611a      	str	r2, [r3, #16]
 80051bc:	e00b      	b.n	80051d6 <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 80051be:	79fb      	ldrb	r3, [r7, #7]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d104      	bne.n	80051ce <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	68ba      	ldr	r2, [r7, #8]
 80051ca:	60da      	str	r2, [r3, #12]
 80051cc:	e003      	b.n	80051d6 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	68ba      	ldr	r2, [r7, #8]
 80051d4:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 80051d6:	2300      	movs	r3, #0
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3714      	adds	r7, #20
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr
 80051e4:	40020010 	.word	0x40020010
 80051e8:	40020028 	.word	0x40020028
 80051ec:	40020040 	.word	0x40020040
 80051f0:	40020058 	.word	0x40020058
 80051f4:	40020070 	.word	0x40020070
 80051f8:	40020088 	.word	0x40020088
 80051fc:	400200a0 	.word	0x400200a0
 8005200:	400200b8 	.word	0x400200b8
 8005204:	40020410 	.word	0x40020410
 8005208:	40020428 	.word	0x40020428
 800520c:	40020440 	.word	0x40020440
 8005210:	40020458 	.word	0x40020458
 8005214:	40020470 	.word	0x40020470
 8005218:	40020488 	.word	0x40020488
 800521c:	400204a0 	.word	0x400204a0
 8005220:	400204b8 	.word	0x400204b8

08005224 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005224:	b480      	push	{r7}
 8005226:	b085      	sub	sp, #20
 8005228:	af00      	add	r7, sp, #0
 800522a:	60f8      	str	r0, [r7, #12]
 800522c:	60b9      	str	r1, [r7, #8]
 800522e:	607a      	str	r2, [r7, #4]
 8005230:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	4a46      	ldr	r2, [pc, #280]	; (8005350 <DMA_MultiBufferSetConfig+0x12c>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d04a      	beq.n	80052d2 <DMA_MultiBufferSetConfig+0xae>
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4a44      	ldr	r2, [pc, #272]	; (8005354 <DMA_MultiBufferSetConfig+0x130>)
 8005242:	4293      	cmp	r3, r2
 8005244:	d045      	beq.n	80052d2 <DMA_MultiBufferSetConfig+0xae>
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	4a43      	ldr	r2, [pc, #268]	; (8005358 <DMA_MultiBufferSetConfig+0x134>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d040      	beq.n	80052d2 <DMA_MultiBufferSetConfig+0xae>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4a41      	ldr	r2, [pc, #260]	; (800535c <DMA_MultiBufferSetConfig+0x138>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d03b      	beq.n	80052d2 <DMA_MultiBufferSetConfig+0xae>
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	4a40      	ldr	r2, [pc, #256]	; (8005360 <DMA_MultiBufferSetConfig+0x13c>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d036      	beq.n	80052d2 <DMA_MultiBufferSetConfig+0xae>
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a3e      	ldr	r2, [pc, #248]	; (8005364 <DMA_MultiBufferSetConfig+0x140>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d031      	beq.n	80052d2 <DMA_MultiBufferSetConfig+0xae>
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4a3d      	ldr	r2, [pc, #244]	; (8005368 <DMA_MultiBufferSetConfig+0x144>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d02c      	beq.n	80052d2 <DMA_MultiBufferSetConfig+0xae>
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a3b      	ldr	r2, [pc, #236]	; (800536c <DMA_MultiBufferSetConfig+0x148>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d027      	beq.n	80052d2 <DMA_MultiBufferSetConfig+0xae>
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	4a3a      	ldr	r2, [pc, #232]	; (8005370 <DMA_MultiBufferSetConfig+0x14c>)
 8005288:	4293      	cmp	r3, r2
 800528a:	d022      	beq.n	80052d2 <DMA_MultiBufferSetConfig+0xae>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a38      	ldr	r2, [pc, #224]	; (8005374 <DMA_MultiBufferSetConfig+0x150>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d01d      	beq.n	80052d2 <DMA_MultiBufferSetConfig+0xae>
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4a37      	ldr	r2, [pc, #220]	; (8005378 <DMA_MultiBufferSetConfig+0x154>)
 800529c:	4293      	cmp	r3, r2
 800529e:	d018      	beq.n	80052d2 <DMA_MultiBufferSetConfig+0xae>
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4a35      	ldr	r2, [pc, #212]	; (800537c <DMA_MultiBufferSetConfig+0x158>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d013      	beq.n	80052d2 <DMA_MultiBufferSetConfig+0xae>
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a34      	ldr	r2, [pc, #208]	; (8005380 <DMA_MultiBufferSetConfig+0x15c>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d00e      	beq.n	80052d2 <DMA_MultiBufferSetConfig+0xae>
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a32      	ldr	r2, [pc, #200]	; (8005384 <DMA_MultiBufferSetConfig+0x160>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d009      	beq.n	80052d2 <DMA_MultiBufferSetConfig+0xae>
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	4a31      	ldr	r2, [pc, #196]	; (8005388 <DMA_MultiBufferSetConfig+0x164>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d004      	beq.n	80052d2 <DMA_MultiBufferSetConfig+0xae>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	4a2f      	ldr	r2, [pc, #188]	; (800538c <DMA_MultiBufferSetConfig+0x168>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d101      	bne.n	80052d6 <DMA_MultiBufferSetConfig+0xb2>
 80052d2:	2301      	movs	r3, #1
 80052d4:	e000      	b.n	80052d8 <DMA_MultiBufferSetConfig+0xb4>
 80052d6:	2300      	movs	r3, #0
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d019      	beq.n	8005310 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	683a      	ldr	r2, [r7, #0]
 80052e2:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	2b40      	cmp	r3, #64	; 0x40
 80052ea:	d108      	bne.n	80052fe <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68ba      	ldr	r2, [r7, #8]
 80052fa:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 80052fc:	e021      	b.n	8005342 <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	68ba      	ldr	r2, [r7, #8]
 8005304:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	687a      	ldr	r2, [r7, #4]
 800530c:	60da      	str	r2, [r3, #12]
}
 800530e:	e018      	b.n	8005342 <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	683a      	ldr	r2, [r7, #0]
 8005316:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	689b      	ldr	r3, [r3, #8]
 800531c:	2b40      	cmp	r3, #64	; 0x40
 800531e:	d108      	bne.n	8005332 <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	687a      	ldr	r2, [r7, #4]
 8005326:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	68ba      	ldr	r2, [r7, #8]
 800532e:	60da      	str	r2, [r3, #12]
}
 8005330:	e007      	b.n	8005342 <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	68ba      	ldr	r2, [r7, #8]
 8005338:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	60da      	str	r2, [r3, #12]
}
 8005342:	bf00      	nop
 8005344:	3714      	adds	r7, #20
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	40020010 	.word	0x40020010
 8005354:	40020028 	.word	0x40020028
 8005358:	40020040 	.word	0x40020040
 800535c:	40020058 	.word	0x40020058
 8005360:	40020070 	.word	0x40020070
 8005364:	40020088 	.word	0x40020088
 8005368:	400200a0 	.word	0x400200a0
 800536c:	400200b8 	.word	0x400200b8
 8005370:	40020410 	.word	0x40020410
 8005374:	40020428 	.word	0x40020428
 8005378:	40020440 	.word	0x40020440
 800537c:	40020458 	.word	0x40020458
 8005380:	40020470 	.word	0x40020470
 8005384:	40020488 	.word	0x40020488
 8005388:	400204a0 	.word	0x400204a0
 800538c:	400204b8 	.word	0x400204b8

08005390 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005390:	b480      	push	{r7}
 8005392:	b089      	sub	sp, #36	; 0x24
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800539a:	2300      	movs	r3, #0
 800539c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800539e:	4b89      	ldr	r3, [pc, #548]	; (80055c4 <HAL_GPIO_Init+0x234>)
 80053a0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80053a2:	e194      	b.n	80056ce <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	2101      	movs	r1, #1
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	fa01 f303 	lsl.w	r3, r1, r3
 80053b0:	4013      	ands	r3, r2
 80053b2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80053b4:	693b      	ldr	r3, [r7, #16]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	f000 8186 	beq.w	80056c8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	f003 0303 	and.w	r3, r3, #3
 80053c4:	2b01      	cmp	r3, #1
 80053c6:	d005      	beq.n	80053d4 <HAL_GPIO_Init+0x44>
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	f003 0303 	and.w	r3, r3, #3
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	d130      	bne.n	8005436 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80053da:	69fb      	ldr	r3, [r7, #28]
 80053dc:	005b      	lsls	r3, r3, #1
 80053de:	2203      	movs	r2, #3
 80053e0:	fa02 f303 	lsl.w	r3, r2, r3
 80053e4:	43db      	mvns	r3, r3
 80053e6:	69ba      	ldr	r2, [r7, #24]
 80053e8:	4013      	ands	r3, r2
 80053ea:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	68da      	ldr	r2, [r3, #12]
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	005b      	lsls	r3, r3, #1
 80053f4:	fa02 f303 	lsl.w	r3, r2, r3
 80053f8:	69ba      	ldr	r2, [r7, #24]
 80053fa:	4313      	orrs	r3, r2
 80053fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	69ba      	ldr	r2, [r7, #24]
 8005402:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800540a:	2201      	movs	r2, #1
 800540c:	69fb      	ldr	r3, [r7, #28]
 800540e:	fa02 f303 	lsl.w	r3, r2, r3
 8005412:	43db      	mvns	r3, r3
 8005414:	69ba      	ldr	r2, [r7, #24]
 8005416:	4013      	ands	r3, r2
 8005418:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800541a:	683b      	ldr	r3, [r7, #0]
 800541c:	685b      	ldr	r3, [r3, #4]
 800541e:	091b      	lsrs	r3, r3, #4
 8005420:	f003 0201 	and.w	r2, r3, #1
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	fa02 f303 	lsl.w	r3, r2, r3
 800542a:	69ba      	ldr	r2, [r7, #24]
 800542c:	4313      	orrs	r3, r2
 800542e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	69ba      	ldr	r2, [r7, #24]
 8005434:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	f003 0303 	and.w	r3, r3, #3
 800543e:	2b03      	cmp	r3, #3
 8005440:	d017      	beq.n	8005472 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	68db      	ldr	r3, [r3, #12]
 8005446:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005448:	69fb      	ldr	r3, [r7, #28]
 800544a:	005b      	lsls	r3, r3, #1
 800544c:	2203      	movs	r2, #3
 800544e:	fa02 f303 	lsl.w	r3, r2, r3
 8005452:	43db      	mvns	r3, r3
 8005454:	69ba      	ldr	r2, [r7, #24]
 8005456:	4013      	ands	r3, r2
 8005458:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	689a      	ldr	r2, [r3, #8]
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	005b      	lsls	r3, r3, #1
 8005462:	fa02 f303 	lsl.w	r3, r2, r3
 8005466:	69ba      	ldr	r2, [r7, #24]
 8005468:	4313      	orrs	r3, r2
 800546a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	69ba      	ldr	r2, [r7, #24]
 8005470:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	f003 0303 	and.w	r3, r3, #3
 800547a:	2b02      	cmp	r3, #2
 800547c:	d123      	bne.n	80054c6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800547e:	69fb      	ldr	r3, [r7, #28]
 8005480:	08da      	lsrs	r2, r3, #3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	3208      	adds	r2, #8
 8005486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800548a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800548c:	69fb      	ldr	r3, [r7, #28]
 800548e:	f003 0307 	and.w	r3, r3, #7
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	220f      	movs	r2, #15
 8005496:	fa02 f303 	lsl.w	r3, r2, r3
 800549a:	43db      	mvns	r3, r3
 800549c:	69ba      	ldr	r2, [r7, #24]
 800549e:	4013      	ands	r3, r2
 80054a0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	691a      	ldr	r2, [r3, #16]
 80054a6:	69fb      	ldr	r3, [r7, #28]
 80054a8:	f003 0307 	and.w	r3, r3, #7
 80054ac:	009b      	lsls	r3, r3, #2
 80054ae:	fa02 f303 	lsl.w	r3, r2, r3
 80054b2:	69ba      	ldr	r2, [r7, #24]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80054b8:	69fb      	ldr	r3, [r7, #28]
 80054ba:	08da      	lsrs	r2, r3, #3
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	3208      	adds	r2, #8
 80054c0:	69b9      	ldr	r1, [r7, #24]
 80054c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80054cc:	69fb      	ldr	r3, [r7, #28]
 80054ce:	005b      	lsls	r3, r3, #1
 80054d0:	2203      	movs	r2, #3
 80054d2:	fa02 f303 	lsl.w	r3, r2, r3
 80054d6:	43db      	mvns	r3, r3
 80054d8:	69ba      	ldr	r2, [r7, #24]
 80054da:	4013      	ands	r3, r2
 80054dc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	685b      	ldr	r3, [r3, #4]
 80054e2:	f003 0203 	and.w	r2, r3, #3
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	005b      	lsls	r3, r3, #1
 80054ea:	fa02 f303 	lsl.w	r3, r2, r3
 80054ee:	69ba      	ldr	r2, [r7, #24]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	69ba      	ldr	r2, [r7, #24]
 80054f8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005502:	2b00      	cmp	r3, #0
 8005504:	f000 80e0 	beq.w	80056c8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005508:	4b2f      	ldr	r3, [pc, #188]	; (80055c8 <HAL_GPIO_Init+0x238>)
 800550a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800550e:	4a2e      	ldr	r2, [pc, #184]	; (80055c8 <HAL_GPIO_Init+0x238>)
 8005510:	f043 0302 	orr.w	r3, r3, #2
 8005514:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8005518:	4b2b      	ldr	r3, [pc, #172]	; (80055c8 <HAL_GPIO_Init+0x238>)
 800551a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800551e:	f003 0302 	and.w	r3, r3, #2
 8005522:	60fb      	str	r3, [r7, #12]
 8005524:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005526:	4a29      	ldr	r2, [pc, #164]	; (80055cc <HAL_GPIO_Init+0x23c>)
 8005528:	69fb      	ldr	r3, [r7, #28]
 800552a:	089b      	lsrs	r3, r3, #2
 800552c:	3302      	adds	r3, #2
 800552e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005532:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005534:	69fb      	ldr	r3, [r7, #28]
 8005536:	f003 0303 	and.w	r3, r3, #3
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	220f      	movs	r2, #15
 800553e:	fa02 f303 	lsl.w	r3, r2, r3
 8005542:	43db      	mvns	r3, r3
 8005544:	69ba      	ldr	r2, [r7, #24]
 8005546:	4013      	ands	r3, r2
 8005548:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a20      	ldr	r2, [pc, #128]	; (80055d0 <HAL_GPIO_Init+0x240>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d052      	beq.n	80055f8 <HAL_GPIO_Init+0x268>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a1f      	ldr	r2, [pc, #124]	; (80055d4 <HAL_GPIO_Init+0x244>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d031      	beq.n	80055be <HAL_GPIO_Init+0x22e>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a1e      	ldr	r2, [pc, #120]	; (80055d8 <HAL_GPIO_Init+0x248>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d02b      	beq.n	80055ba <HAL_GPIO_Init+0x22a>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a1d      	ldr	r2, [pc, #116]	; (80055dc <HAL_GPIO_Init+0x24c>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d025      	beq.n	80055b6 <HAL_GPIO_Init+0x226>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a1c      	ldr	r2, [pc, #112]	; (80055e0 <HAL_GPIO_Init+0x250>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d01f      	beq.n	80055b2 <HAL_GPIO_Init+0x222>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a1b      	ldr	r2, [pc, #108]	; (80055e4 <HAL_GPIO_Init+0x254>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d019      	beq.n	80055ae <HAL_GPIO_Init+0x21e>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a1a      	ldr	r2, [pc, #104]	; (80055e8 <HAL_GPIO_Init+0x258>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d013      	beq.n	80055aa <HAL_GPIO_Init+0x21a>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a19      	ldr	r2, [pc, #100]	; (80055ec <HAL_GPIO_Init+0x25c>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d00d      	beq.n	80055a6 <HAL_GPIO_Init+0x216>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a18      	ldr	r2, [pc, #96]	; (80055f0 <HAL_GPIO_Init+0x260>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d007      	beq.n	80055a2 <HAL_GPIO_Init+0x212>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a17      	ldr	r2, [pc, #92]	; (80055f4 <HAL_GPIO_Init+0x264>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d101      	bne.n	800559e <HAL_GPIO_Init+0x20e>
 800559a:	2309      	movs	r3, #9
 800559c:	e02d      	b.n	80055fa <HAL_GPIO_Init+0x26a>
 800559e:	230a      	movs	r3, #10
 80055a0:	e02b      	b.n	80055fa <HAL_GPIO_Init+0x26a>
 80055a2:	2308      	movs	r3, #8
 80055a4:	e029      	b.n	80055fa <HAL_GPIO_Init+0x26a>
 80055a6:	2307      	movs	r3, #7
 80055a8:	e027      	b.n	80055fa <HAL_GPIO_Init+0x26a>
 80055aa:	2306      	movs	r3, #6
 80055ac:	e025      	b.n	80055fa <HAL_GPIO_Init+0x26a>
 80055ae:	2305      	movs	r3, #5
 80055b0:	e023      	b.n	80055fa <HAL_GPIO_Init+0x26a>
 80055b2:	2304      	movs	r3, #4
 80055b4:	e021      	b.n	80055fa <HAL_GPIO_Init+0x26a>
 80055b6:	2303      	movs	r3, #3
 80055b8:	e01f      	b.n	80055fa <HAL_GPIO_Init+0x26a>
 80055ba:	2302      	movs	r3, #2
 80055bc:	e01d      	b.n	80055fa <HAL_GPIO_Init+0x26a>
 80055be:	2301      	movs	r3, #1
 80055c0:	e01b      	b.n	80055fa <HAL_GPIO_Init+0x26a>
 80055c2:	bf00      	nop
 80055c4:	58000080 	.word	0x58000080
 80055c8:	58024400 	.word	0x58024400
 80055cc:	58000400 	.word	0x58000400
 80055d0:	58020000 	.word	0x58020000
 80055d4:	58020400 	.word	0x58020400
 80055d8:	58020800 	.word	0x58020800
 80055dc:	58020c00 	.word	0x58020c00
 80055e0:	58021000 	.word	0x58021000
 80055e4:	58021400 	.word	0x58021400
 80055e8:	58021800 	.word	0x58021800
 80055ec:	58021c00 	.word	0x58021c00
 80055f0:	58022000 	.word	0x58022000
 80055f4:	58022400 	.word	0x58022400
 80055f8:	2300      	movs	r3, #0
 80055fa:	69fa      	ldr	r2, [r7, #28]
 80055fc:	f002 0203 	and.w	r2, r2, #3
 8005600:	0092      	lsls	r2, r2, #2
 8005602:	4093      	lsls	r3, r2
 8005604:	69ba      	ldr	r2, [r7, #24]
 8005606:	4313      	orrs	r3, r2
 8005608:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800560a:	4938      	ldr	r1, [pc, #224]	; (80056ec <HAL_GPIO_Init+0x35c>)
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	089b      	lsrs	r3, r3, #2
 8005610:	3302      	adds	r3, #2
 8005612:	69ba      	ldr	r2, [r7, #24]
 8005614:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005618:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	43db      	mvns	r3, r3
 8005624:	69ba      	ldr	r2, [r7, #24]
 8005626:	4013      	ands	r3, r2
 8005628:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005632:	2b00      	cmp	r3, #0
 8005634:	d003      	beq.n	800563e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8005636:	69ba      	ldr	r2, [r7, #24]
 8005638:	693b      	ldr	r3, [r7, #16]
 800563a:	4313      	orrs	r3, r2
 800563c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800563e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8005646:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800564a:	685b      	ldr	r3, [r3, #4]
 800564c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	43db      	mvns	r3, r3
 8005652:	69ba      	ldr	r2, [r7, #24]
 8005654:	4013      	ands	r3, r2
 8005656:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	685b      	ldr	r3, [r3, #4]
 800565c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005660:	2b00      	cmp	r3, #0
 8005662:	d003      	beq.n	800566c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8005664:	69ba      	ldr	r2, [r7, #24]
 8005666:	693b      	ldr	r3, [r7, #16]
 8005668:	4313      	orrs	r3, r2
 800566a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800566c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8005670:	69bb      	ldr	r3, [r7, #24]
 8005672:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	685b      	ldr	r3, [r3, #4]
 8005678:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800567a:	693b      	ldr	r3, [r7, #16]
 800567c:	43db      	mvns	r3, r3
 800567e:	69ba      	ldr	r2, [r7, #24]
 8005680:	4013      	ands	r3, r2
 8005682:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d003      	beq.n	8005698 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8005690:	69ba      	ldr	r2, [r7, #24]
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	4313      	orrs	r3, r2
 8005696:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	69ba      	ldr	r2, [r7, #24]
 800569c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800569e:	697b      	ldr	r3, [r7, #20]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	43db      	mvns	r3, r3
 80056a8:	69ba      	ldr	r2, [r7, #24]
 80056aa:	4013      	ands	r3, r2
 80056ac:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d003      	beq.n	80056c2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80056ba:	69ba      	ldr	r2, [r7, #24]
 80056bc:	693b      	ldr	r3, [r7, #16]
 80056be:	4313      	orrs	r3, r2
 80056c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80056c2:	697b      	ldr	r3, [r7, #20]
 80056c4:	69ba      	ldr	r2, [r7, #24]
 80056c6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80056c8:	69fb      	ldr	r3, [r7, #28]
 80056ca:	3301      	adds	r3, #1
 80056cc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80056ce:	683b      	ldr	r3, [r7, #0]
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	69fb      	ldr	r3, [r7, #28]
 80056d4:	fa22 f303 	lsr.w	r3, r2, r3
 80056d8:	2b00      	cmp	r3, #0
 80056da:	f47f ae63 	bne.w	80053a4 <HAL_GPIO_Init+0x14>
  }
}
 80056de:	bf00      	nop
 80056e0:	bf00      	nop
 80056e2:	3724      	adds	r7, #36	; 0x24
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr
 80056ec:	58000400 	.word	0x58000400

080056f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b083      	sub	sp, #12
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	460b      	mov	r3, r1
 80056fa:	807b      	strh	r3, [r7, #2]
 80056fc:	4613      	mov	r3, r2
 80056fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005700:	787b      	ldrb	r3, [r7, #1]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d003      	beq.n	800570e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005706:	887a      	ldrh	r2, [r7, #2]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800570c:	e003      	b.n	8005716 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800570e:	887b      	ldrh	r3, [r7, #2]
 8005710:	041a      	lsls	r2, r3, #16
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	619a      	str	r2, [r3, #24]
}
 8005716:	bf00      	nop
 8005718:	370c      	adds	r7, #12
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr
	...

08005724 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b082      	sub	sp, #8
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d101      	bne.n	8005736 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e07f      	b.n	8005836 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800573c:	b2db      	uxtb	r3, r3
 800573e:	2b00      	cmp	r3, #0
 8005740:	d106      	bne.n	8005750 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f7fb f92a 	bl	80009a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2224      	movs	r2, #36	; 0x24
 8005754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f022 0201 	bic.w	r2, r2, #1
 8005766:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	685a      	ldr	r2, [r3, #4]
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005774:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	689a      	ldr	r2, [r3, #8]
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005784:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	2b01      	cmp	r3, #1
 800578c:	d107      	bne.n	800579e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	689a      	ldr	r2, [r3, #8]
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800579a:	609a      	str	r2, [r3, #8]
 800579c:	e006      	b.n	80057ac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	689a      	ldr	r2, [r3, #8]
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80057aa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	2b02      	cmp	r3, #2
 80057b2:	d104      	bne.n	80057be <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80057bc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	6859      	ldr	r1, [r3, #4]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	4b1d      	ldr	r3, [pc, #116]	; (8005840 <HAL_I2C_Init+0x11c>)
 80057ca:	430b      	orrs	r3, r1
 80057cc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68da      	ldr	r2, [r3, #12]
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80057dc:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	691a      	ldr	r2, [r3, #16]
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	695b      	ldr	r3, [r3, #20]
 80057e6:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	699b      	ldr	r3, [r3, #24]
 80057ee:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	430a      	orrs	r2, r1
 80057f6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	69d9      	ldr	r1, [r3, #28]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6a1a      	ldr	r2, [r3, #32]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	430a      	orrs	r2, r1
 8005806:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681a      	ldr	r2, [r3, #0]
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	f042 0201 	orr.w	r2, r2, #1
 8005816:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2220      	movs	r2, #32
 8005822:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2200      	movs	r2, #0
 8005830:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	3708      	adds	r7, #8
 800583a:	46bd      	mov	sp, r7
 800583c:	bd80      	pop	{r7, pc}
 800583e:	bf00      	nop
 8005840:	02008000 	.word	0x02008000

08005844 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b088      	sub	sp, #32
 8005848:	af02      	add	r7, sp, #8
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	4608      	mov	r0, r1
 800584e:	4611      	mov	r1, r2
 8005850:	461a      	mov	r2, r3
 8005852:	4603      	mov	r3, r0
 8005854:	817b      	strh	r3, [r7, #10]
 8005856:	460b      	mov	r3, r1
 8005858:	813b      	strh	r3, [r7, #8]
 800585a:	4613      	mov	r3, r2
 800585c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005864:	b2db      	uxtb	r3, r3
 8005866:	2b20      	cmp	r3, #32
 8005868:	f040 80f9 	bne.w	8005a5e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800586c:	6a3b      	ldr	r3, [r7, #32]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d002      	beq.n	8005878 <HAL_I2C_Mem_Write+0x34>
 8005872:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005874:	2b00      	cmp	r3, #0
 8005876:	d105      	bne.n	8005884 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800587e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e0ed      	b.n	8005a60 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800588a:	2b01      	cmp	r3, #1
 800588c:	d101      	bne.n	8005892 <HAL_I2C_Mem_Write+0x4e>
 800588e:	2302      	movs	r3, #2
 8005890:	e0e6      	b.n	8005a60 <HAL_I2C_Mem_Write+0x21c>
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2201      	movs	r2, #1
 8005896:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800589a:	f7fb fd0b 	bl	80012b4 <HAL_GetTick>
 800589e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	9300      	str	r3, [sp, #0]
 80058a4:	2319      	movs	r3, #25
 80058a6:	2201      	movs	r2, #1
 80058a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80058ac:	68f8      	ldr	r0, [r7, #12]
 80058ae:	f000 fac3 	bl	8005e38 <I2C_WaitOnFlagUntilTimeout>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d001      	beq.n	80058bc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e0d1      	b.n	8005a60 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2221      	movs	r2, #33	; 0x21
 80058c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2240      	movs	r2, #64	; 0x40
 80058c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2200      	movs	r2, #0
 80058d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	6a3a      	ldr	r2, [r7, #32]
 80058d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80058dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2200      	movs	r2, #0
 80058e2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80058e4:	88f8      	ldrh	r0, [r7, #6]
 80058e6:	893a      	ldrh	r2, [r7, #8]
 80058e8:	8979      	ldrh	r1, [r7, #10]
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	9301      	str	r3, [sp, #4]
 80058ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f0:	9300      	str	r3, [sp, #0]
 80058f2:	4603      	mov	r3, r0
 80058f4:	68f8      	ldr	r0, [r7, #12]
 80058f6:	f000 f9d3 	bl	8005ca0 <I2C_RequestMemoryWrite>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d005      	beq.n	800590c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2200      	movs	r2, #0
 8005904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005908:	2301      	movs	r3, #1
 800590a:	e0a9      	b.n	8005a60 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005910:	b29b      	uxth	r3, r3
 8005912:	2bff      	cmp	r3, #255	; 0xff
 8005914:	d90e      	bls.n	8005934 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	22ff      	movs	r2, #255	; 0xff
 800591a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005920:	b2da      	uxtb	r2, r3
 8005922:	8979      	ldrh	r1, [r7, #10]
 8005924:	2300      	movs	r3, #0
 8005926:	9300      	str	r3, [sp, #0]
 8005928:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800592c:	68f8      	ldr	r0, [r7, #12]
 800592e:	f000 fc3d 	bl	80061ac <I2C_TransferConfig>
 8005932:	e00f      	b.n	8005954 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005938:	b29a      	uxth	r2, r3
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005942:	b2da      	uxtb	r2, r3
 8005944:	8979      	ldrh	r1, [r7, #10]
 8005946:	2300      	movs	r3, #0
 8005948:	9300      	str	r3, [sp, #0]
 800594a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800594e:	68f8      	ldr	r0, [r7, #12]
 8005950:	f000 fc2c 	bl	80061ac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005954:	697a      	ldr	r2, [r7, #20]
 8005956:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005958:	68f8      	ldr	r0, [r7, #12]
 800595a:	f000 fabc 	bl	8005ed6 <I2C_WaitOnTXISFlagUntilTimeout>
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d001      	beq.n	8005968 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e07b      	b.n	8005a60 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596c:	781a      	ldrb	r2, [r3, #0]
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005978:	1c5a      	adds	r2, r3, #1
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005982:	b29b      	uxth	r3, r3
 8005984:	3b01      	subs	r3, #1
 8005986:	b29a      	uxth	r2, r3
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005990:	3b01      	subs	r3, #1
 8005992:	b29a      	uxth	r2, r3
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800599c:	b29b      	uxth	r3, r3
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d034      	beq.n	8005a0c <HAL_I2C_Mem_Write+0x1c8>
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d130      	bne.n	8005a0c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	9300      	str	r3, [sp, #0]
 80059ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059b0:	2200      	movs	r2, #0
 80059b2:	2180      	movs	r1, #128	; 0x80
 80059b4:	68f8      	ldr	r0, [r7, #12]
 80059b6:	f000 fa3f 	bl	8005e38 <I2C_WaitOnFlagUntilTimeout>
 80059ba:	4603      	mov	r3, r0
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d001      	beq.n	80059c4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80059c0:	2301      	movs	r3, #1
 80059c2:	e04d      	b.n	8005a60 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059c8:	b29b      	uxth	r3, r3
 80059ca:	2bff      	cmp	r3, #255	; 0xff
 80059cc:	d90e      	bls.n	80059ec <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	22ff      	movs	r2, #255	; 0xff
 80059d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059d8:	b2da      	uxtb	r2, r3
 80059da:	8979      	ldrh	r1, [r7, #10]
 80059dc:	2300      	movs	r3, #0
 80059de:	9300      	str	r3, [sp, #0]
 80059e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80059e4:	68f8      	ldr	r0, [r7, #12]
 80059e6:	f000 fbe1 	bl	80061ac <I2C_TransferConfig>
 80059ea:	e00f      	b.n	8005a0c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059f0:	b29a      	uxth	r2, r3
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059fa:	b2da      	uxtb	r2, r3
 80059fc:	8979      	ldrh	r1, [r7, #10]
 80059fe:	2300      	movs	r3, #0
 8005a00:	9300      	str	r3, [sp, #0]
 8005a02:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005a06:	68f8      	ldr	r0, [r7, #12]
 8005a08:	f000 fbd0 	bl	80061ac <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d19e      	bne.n	8005954 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a16:	697a      	ldr	r2, [r7, #20]
 8005a18:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a1a:	68f8      	ldr	r0, [r7, #12]
 8005a1c:	f000 faa2 	bl	8005f64 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d001      	beq.n	8005a2a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e01a      	b.n	8005a60 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	2220      	movs	r2, #32
 8005a30:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	6859      	ldr	r1, [r3, #4]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	4b0a      	ldr	r3, [pc, #40]	; (8005a68 <HAL_I2C_Mem_Write+0x224>)
 8005a3e:	400b      	ands	r3, r1
 8005a40:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	2220      	movs	r2, #32
 8005a46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	2200      	movs	r2, #0
 8005a56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	e000      	b.n	8005a60 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005a5e:	2302      	movs	r3, #2
  }
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3718      	adds	r7, #24
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bd80      	pop	{r7, pc}
 8005a68:	fe00e800 	.word	0xfe00e800

08005a6c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b088      	sub	sp, #32
 8005a70:	af02      	add	r7, sp, #8
 8005a72:	60f8      	str	r0, [r7, #12]
 8005a74:	4608      	mov	r0, r1
 8005a76:	4611      	mov	r1, r2
 8005a78:	461a      	mov	r2, r3
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	817b      	strh	r3, [r7, #10]
 8005a7e:	460b      	mov	r3, r1
 8005a80:	813b      	strh	r3, [r7, #8]
 8005a82:	4613      	mov	r3, r2
 8005a84:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	2b20      	cmp	r3, #32
 8005a90:	f040 80fd 	bne.w	8005c8e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a94:	6a3b      	ldr	r3, [r7, #32]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d002      	beq.n	8005aa0 <HAL_I2C_Mem_Read+0x34>
 8005a9a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d105      	bne.n	8005aac <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005aa6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e0f1      	b.n	8005c90 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d101      	bne.n	8005aba <HAL_I2C_Mem_Read+0x4e>
 8005ab6:	2302      	movs	r3, #2
 8005ab8:	e0ea      	b.n	8005c90 <HAL_I2C_Mem_Read+0x224>
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2201      	movs	r2, #1
 8005abe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005ac2:	f7fb fbf7 	bl	80012b4 <HAL_GetTick>
 8005ac6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005ac8:	697b      	ldr	r3, [r7, #20]
 8005aca:	9300      	str	r3, [sp, #0]
 8005acc:	2319      	movs	r3, #25
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005ad4:	68f8      	ldr	r0, [r7, #12]
 8005ad6:	f000 f9af 	bl	8005e38 <I2C_WaitOnFlagUntilTimeout>
 8005ada:	4603      	mov	r3, r0
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d001      	beq.n	8005ae4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e0d5      	b.n	8005c90 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2222      	movs	r2, #34	; 0x22
 8005ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	2240      	movs	r2, #64	; 0x40
 8005af0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2200      	movs	r2, #0
 8005af8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6a3a      	ldr	r2, [r7, #32]
 8005afe:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8005b04:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b0c:	88f8      	ldrh	r0, [r7, #6]
 8005b0e:	893a      	ldrh	r2, [r7, #8]
 8005b10:	8979      	ldrh	r1, [r7, #10]
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	9301      	str	r3, [sp, #4]
 8005b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b18:	9300      	str	r3, [sp, #0]
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	68f8      	ldr	r0, [r7, #12]
 8005b1e:	f000 f913 	bl	8005d48 <I2C_RequestMemoryRead>
 8005b22:	4603      	mov	r3, r0
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d005      	beq.n	8005b34 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8005b30:	2301      	movs	r3, #1
 8005b32:	e0ad      	b.n	8005c90 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b38:	b29b      	uxth	r3, r3
 8005b3a:	2bff      	cmp	r3, #255	; 0xff
 8005b3c:	d90e      	bls.n	8005b5c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	22ff      	movs	r2, #255	; 0xff
 8005b42:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b48:	b2da      	uxtb	r2, r3
 8005b4a:	8979      	ldrh	r1, [r7, #10]
 8005b4c:	4b52      	ldr	r3, [pc, #328]	; (8005c98 <HAL_I2C_Mem_Read+0x22c>)
 8005b4e:	9300      	str	r3, [sp, #0]
 8005b50:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005b54:	68f8      	ldr	r0, [r7, #12]
 8005b56:	f000 fb29 	bl	80061ac <I2C_TransferConfig>
 8005b5a:	e00f      	b.n	8005b7c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b60:	b29a      	uxth	r2, r3
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b6a:	b2da      	uxtb	r2, r3
 8005b6c:	8979      	ldrh	r1, [r7, #10]
 8005b6e:	4b4a      	ldr	r3, [pc, #296]	; (8005c98 <HAL_I2C_Mem_Read+0x22c>)
 8005b70:	9300      	str	r3, [sp, #0]
 8005b72:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005b76:	68f8      	ldr	r0, [r7, #12]
 8005b78:	f000 fb18 	bl	80061ac <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005b7c:	697b      	ldr	r3, [r7, #20]
 8005b7e:	9300      	str	r3, [sp, #0]
 8005b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b82:	2200      	movs	r2, #0
 8005b84:	2104      	movs	r1, #4
 8005b86:	68f8      	ldr	r0, [r7, #12]
 8005b88:	f000 f956 	bl	8005e38 <I2C_WaitOnFlagUntilTimeout>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d001      	beq.n	8005b96 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005b92:	2301      	movs	r3, #1
 8005b94:	e07c      	b.n	8005c90 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba0:	b2d2      	uxtb	r2, r2
 8005ba2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba8:	1c5a      	adds	r2, r3, #1
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bb2:	3b01      	subs	r3, #1
 8005bb4:	b29a      	uxth	r2, r3
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	3b01      	subs	r3, #1
 8005bc2:	b29a      	uxth	r2, r3
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bcc:	b29b      	uxth	r3, r3
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d034      	beq.n	8005c3c <HAL_I2C_Mem_Read+0x1d0>
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d130      	bne.n	8005c3c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	9300      	str	r3, [sp, #0]
 8005bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005be0:	2200      	movs	r2, #0
 8005be2:	2180      	movs	r1, #128	; 0x80
 8005be4:	68f8      	ldr	r0, [r7, #12]
 8005be6:	f000 f927 	bl	8005e38 <I2C_WaitOnFlagUntilTimeout>
 8005bea:	4603      	mov	r3, r0
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d001      	beq.n	8005bf4 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005bf0:	2301      	movs	r3, #1
 8005bf2:	e04d      	b.n	8005c90 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	2bff      	cmp	r3, #255	; 0xff
 8005bfc:	d90e      	bls.n	8005c1c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	22ff      	movs	r2, #255	; 0xff
 8005c02:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c08:	b2da      	uxtb	r2, r3
 8005c0a:	8979      	ldrh	r1, [r7, #10]
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	9300      	str	r3, [sp, #0]
 8005c10:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	f000 fac9 	bl	80061ac <I2C_TransferConfig>
 8005c1a:	e00f      	b.n	8005c3c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c20:	b29a      	uxth	r2, r3
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c2a:	b2da      	uxtb	r2, r3
 8005c2c:	8979      	ldrh	r1, [r7, #10]
 8005c2e:	2300      	movs	r3, #0
 8005c30:	9300      	str	r3, [sp, #0]
 8005c32:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005c36:	68f8      	ldr	r0, [r7, #12]
 8005c38:	f000 fab8 	bl	80061ac <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d19a      	bne.n	8005b7c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c46:	697a      	ldr	r2, [r7, #20]
 8005c48:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005c4a:	68f8      	ldr	r0, [r7, #12]
 8005c4c:	f000 f98a 	bl	8005f64 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005c50:	4603      	mov	r3, r0
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d001      	beq.n	8005c5a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005c56:	2301      	movs	r3, #1
 8005c58:	e01a      	b.n	8005c90 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	2220      	movs	r2, #32
 8005c60:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	6859      	ldr	r1, [r3, #4]
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681a      	ldr	r2, [r3, #0]
 8005c6c:	4b0b      	ldr	r3, [pc, #44]	; (8005c9c <HAL_I2C_Mem_Read+0x230>)
 8005c6e:	400b      	ands	r3, r1
 8005c70:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	2220      	movs	r2, #32
 8005c76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	e000      	b.n	8005c90 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005c8e:	2302      	movs	r3, #2
  }
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3718      	adds	r7, #24
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}
 8005c98:	80002400 	.word	0x80002400
 8005c9c:	fe00e800 	.word	0xfe00e800

08005ca0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b086      	sub	sp, #24
 8005ca4:	af02      	add	r7, sp, #8
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	4608      	mov	r0, r1
 8005caa:	4611      	mov	r1, r2
 8005cac:	461a      	mov	r2, r3
 8005cae:	4603      	mov	r3, r0
 8005cb0:	817b      	strh	r3, [r7, #10]
 8005cb2:	460b      	mov	r3, r1
 8005cb4:	813b      	strh	r3, [r7, #8]
 8005cb6:	4613      	mov	r3, r2
 8005cb8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005cba:	88fb      	ldrh	r3, [r7, #6]
 8005cbc:	b2da      	uxtb	r2, r3
 8005cbe:	8979      	ldrh	r1, [r7, #10]
 8005cc0:	4b20      	ldr	r3, [pc, #128]	; (8005d44 <I2C_RequestMemoryWrite+0xa4>)
 8005cc2:	9300      	str	r3, [sp, #0]
 8005cc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005cc8:	68f8      	ldr	r0, [r7, #12]
 8005cca:	f000 fa6f 	bl	80061ac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cce:	69fa      	ldr	r2, [r7, #28]
 8005cd0:	69b9      	ldr	r1, [r7, #24]
 8005cd2:	68f8      	ldr	r0, [r7, #12]
 8005cd4:	f000 f8ff 	bl	8005ed6 <I2C_WaitOnTXISFlagUntilTimeout>
 8005cd8:	4603      	mov	r3, r0
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d001      	beq.n	8005ce2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8005cde:	2301      	movs	r3, #1
 8005ce0:	e02c      	b.n	8005d3c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005ce2:	88fb      	ldrh	r3, [r7, #6]
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d105      	bne.n	8005cf4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005ce8:	893b      	ldrh	r3, [r7, #8]
 8005cea:	b2da      	uxtb	r2, r3
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	629a      	str	r2, [r3, #40]	; 0x28
 8005cf2:	e015      	b.n	8005d20 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005cf4:	893b      	ldrh	r3, [r7, #8]
 8005cf6:	0a1b      	lsrs	r3, r3, #8
 8005cf8:	b29b      	uxth	r3, r3
 8005cfa:	b2da      	uxtb	r2, r3
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d02:	69fa      	ldr	r2, [r7, #28]
 8005d04:	69b9      	ldr	r1, [r7, #24]
 8005d06:	68f8      	ldr	r0, [r7, #12]
 8005d08:	f000 f8e5 	bl	8005ed6 <I2C_WaitOnTXISFlagUntilTimeout>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d001      	beq.n	8005d16 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8005d12:	2301      	movs	r3, #1
 8005d14:	e012      	b.n	8005d3c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005d16:	893b      	ldrh	r3, [r7, #8]
 8005d18:	b2da      	uxtb	r2, r3
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8005d20:	69fb      	ldr	r3, [r7, #28]
 8005d22:	9300      	str	r3, [sp, #0]
 8005d24:	69bb      	ldr	r3, [r7, #24]
 8005d26:	2200      	movs	r2, #0
 8005d28:	2180      	movs	r1, #128	; 0x80
 8005d2a:	68f8      	ldr	r0, [r7, #12]
 8005d2c:	f000 f884 	bl	8005e38 <I2C_WaitOnFlagUntilTimeout>
 8005d30:	4603      	mov	r3, r0
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d001      	beq.n	8005d3a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8005d36:	2301      	movs	r3, #1
 8005d38:	e000      	b.n	8005d3c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8005d3a:	2300      	movs	r3, #0
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3710      	adds	r7, #16
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	80002000 	.word	0x80002000

08005d48 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b086      	sub	sp, #24
 8005d4c:	af02      	add	r7, sp, #8
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	4608      	mov	r0, r1
 8005d52:	4611      	mov	r1, r2
 8005d54:	461a      	mov	r2, r3
 8005d56:	4603      	mov	r3, r0
 8005d58:	817b      	strh	r3, [r7, #10]
 8005d5a:	460b      	mov	r3, r1
 8005d5c:	813b      	strh	r3, [r7, #8]
 8005d5e:	4613      	mov	r3, r2
 8005d60:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8005d62:	88fb      	ldrh	r3, [r7, #6]
 8005d64:	b2da      	uxtb	r2, r3
 8005d66:	8979      	ldrh	r1, [r7, #10]
 8005d68:	4b20      	ldr	r3, [pc, #128]	; (8005dec <I2C_RequestMemoryRead+0xa4>)
 8005d6a:	9300      	str	r3, [sp, #0]
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	68f8      	ldr	r0, [r7, #12]
 8005d70:	f000 fa1c 	bl	80061ac <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005d74:	69fa      	ldr	r2, [r7, #28]
 8005d76:	69b9      	ldr	r1, [r7, #24]
 8005d78:	68f8      	ldr	r0, [r7, #12]
 8005d7a:	f000 f8ac 	bl	8005ed6 <I2C_WaitOnTXISFlagUntilTimeout>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d001      	beq.n	8005d88 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	e02c      	b.n	8005de2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005d88:	88fb      	ldrh	r3, [r7, #6]
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d105      	bne.n	8005d9a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005d8e:	893b      	ldrh	r3, [r7, #8]
 8005d90:	b2da      	uxtb	r2, r3
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	629a      	str	r2, [r3, #40]	; 0x28
 8005d98:	e015      	b.n	8005dc6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8005d9a:	893b      	ldrh	r3, [r7, #8]
 8005d9c:	0a1b      	lsrs	r3, r3, #8
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	b2da      	uxtb	r2, r3
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005da8:	69fa      	ldr	r2, [r7, #28]
 8005daa:	69b9      	ldr	r1, [r7, #24]
 8005dac:	68f8      	ldr	r0, [r7, #12]
 8005dae:	f000 f892 	bl	8005ed6 <I2C_WaitOnTXISFlagUntilTimeout>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d001      	beq.n	8005dbc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8005db8:	2301      	movs	r3, #1
 8005dba:	e012      	b.n	8005de2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8005dbc:	893b      	ldrh	r3, [r7, #8]
 8005dbe:	b2da      	uxtb	r2, r3
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	9300      	str	r3, [sp, #0]
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	2140      	movs	r1, #64	; 0x40
 8005dd0:	68f8      	ldr	r0, [r7, #12]
 8005dd2:	f000 f831 	bl	8005e38 <I2C_WaitOnFlagUntilTimeout>
 8005dd6:	4603      	mov	r3, r0
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d001      	beq.n	8005de0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8005ddc:	2301      	movs	r3, #1
 8005dde:	e000      	b.n	8005de2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8005de0:	2300      	movs	r3, #0
}
 8005de2:	4618      	mov	r0, r3
 8005de4:	3710      	adds	r7, #16
 8005de6:	46bd      	mov	sp, r7
 8005de8:	bd80      	pop	{r7, pc}
 8005dea:	bf00      	nop
 8005dec:	80002000 	.word	0x80002000

08005df0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b083      	sub	sp, #12
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	699b      	ldr	r3, [r3, #24]
 8005dfe:	f003 0302 	and.w	r3, r3, #2
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d103      	bne.n	8005e0e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	699b      	ldr	r3, [r3, #24]
 8005e14:	f003 0301 	and.w	r3, r3, #1
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d007      	beq.n	8005e2c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	699a      	ldr	r2, [r3, #24]
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f042 0201 	orr.w	r2, r2, #1
 8005e2a:	619a      	str	r2, [r3, #24]
  }
}
 8005e2c:	bf00      	nop
 8005e2e:	370c      	adds	r7, #12
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr

08005e38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	60b9      	str	r1, [r7, #8]
 8005e42:	603b      	str	r3, [r7, #0]
 8005e44:	4613      	mov	r3, r2
 8005e46:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005e48:	e031      	b.n	8005eae <I2C_WaitOnFlagUntilTimeout+0x76>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e50:	d02d      	beq.n	8005eae <I2C_WaitOnFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005e52:	f7fb fa2f 	bl	80012b4 <HAL_GetTick>
 8005e56:	4602      	mov	r2, r0
 8005e58:	69bb      	ldr	r3, [r7, #24]
 8005e5a:	1ad3      	subs	r3, r2, r3
 8005e5c:	683a      	ldr	r2, [r7, #0]
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d302      	bcc.n	8005e68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d122      	bne.n	8005eae <I2C_WaitOnFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	699a      	ldr	r2, [r3, #24]
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	4013      	ands	r3, r2
 8005e72:	68ba      	ldr	r2, [r7, #8]
 8005e74:	429a      	cmp	r2, r3
 8005e76:	bf0c      	ite	eq
 8005e78:	2301      	moveq	r3, #1
 8005e7a:	2300      	movne	r3, #0
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	461a      	mov	r2, r3
 8005e80:	79fb      	ldrb	r3, [r7, #7]
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d113      	bne.n	8005eae <I2C_WaitOnFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e8a:	f043 0220 	orr.w	r2, r3, #32
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	2220      	movs	r2, #32
 8005e96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_ERROR;
 8005eaa:	2301      	movs	r3, #1
 8005eac:	e00f      	b.n	8005ece <I2C_WaitOnFlagUntilTimeout+0x96>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	699a      	ldr	r2, [r3, #24]
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	4013      	ands	r3, r2
 8005eb8:	68ba      	ldr	r2, [r7, #8]
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	bf0c      	ite	eq
 8005ebe:	2301      	moveq	r3, #1
 8005ec0:	2300      	movne	r3, #0
 8005ec2:	b2db      	uxtb	r3, r3
 8005ec4:	461a      	mov	r2, r3
 8005ec6:	79fb      	ldrb	r3, [r7, #7]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d0be      	beq.n	8005e4a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005ecc:	2300      	movs	r3, #0
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	3710      	adds	r7, #16
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}

08005ed6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005ed6:	b580      	push	{r7, lr}
 8005ed8:	b084      	sub	sp, #16
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	60f8      	str	r0, [r7, #12]
 8005ede:	60b9      	str	r1, [r7, #8]
 8005ee0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005ee2:	e033      	b.n	8005f4c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005ee4:	687a      	ldr	r2, [r7, #4]
 8005ee6:	68b9      	ldr	r1, [r7, #8]
 8005ee8:	68f8      	ldr	r0, [r7, #12]
 8005eea:	f000 f87f 	bl	8005fec <I2C_IsErrorOccurred>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d001      	beq.n	8005ef8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	e031      	b.n	8005f5c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005efe:	d025      	beq.n	8005f4c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f00:	f7fb f9d8 	bl	80012b4 <HAL_GetTick>
 8005f04:	4602      	mov	r2, r0
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	1ad3      	subs	r3, r2, r3
 8005f0a:	68ba      	ldr	r2, [r7, #8]
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d302      	bcc.n	8005f16 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d11a      	bne.n	8005f4c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	699b      	ldr	r3, [r3, #24]
 8005f1c:	f003 0302 	and.w	r3, r3, #2
 8005f20:	2b02      	cmp	r3, #2
 8005f22:	d013      	beq.n	8005f4c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f28:	f043 0220 	orr.w	r2, r3, #32
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2220      	movs	r2, #32
 8005f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	2200      	movs	r2, #0
 8005f44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e007      	b.n	8005f5c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	699b      	ldr	r3, [r3, #24]
 8005f52:	f003 0302 	and.w	r3, r3, #2
 8005f56:	2b02      	cmp	r3, #2
 8005f58:	d1c4      	bne.n	8005ee4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005f5a:	2300      	movs	r3, #0
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3710      	adds	r7, #16
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}

08005f64 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	60f8      	str	r0, [r7, #12]
 8005f6c:	60b9      	str	r1, [r7, #8]
 8005f6e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005f70:	e02f      	b.n	8005fd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8005f72:	687a      	ldr	r2, [r7, #4]
 8005f74:	68b9      	ldr	r1, [r7, #8]
 8005f76:	68f8      	ldr	r0, [r7, #12]
 8005f78:	f000 f838 	bl	8005fec <I2C_IsErrorOccurred>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d001      	beq.n	8005f86 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8005f82:	2301      	movs	r3, #1
 8005f84:	e02d      	b.n	8005fe2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005f86:	f7fb f995 	bl	80012b4 <HAL_GetTick>
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	1ad3      	subs	r3, r2, r3
 8005f90:	68ba      	ldr	r2, [r7, #8]
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d302      	bcc.n	8005f9c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d11a      	bne.n	8005fd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	699b      	ldr	r3, [r3, #24]
 8005fa2:	f003 0320 	and.w	r3, r3, #32
 8005fa6:	2b20      	cmp	r3, #32
 8005fa8:	d013      	beq.n	8005fd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fae:	f043 0220 	orr.w	r2, r3, #32
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	2220      	movs	r2, #32
 8005fba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e007      	b.n	8005fe2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	699b      	ldr	r3, [r3, #24]
 8005fd8:	f003 0320 	and.w	r3, r3, #32
 8005fdc:	2b20      	cmp	r3, #32
 8005fde:	d1c8      	bne.n	8005f72 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3710      	adds	r7, #16
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
	...

08005fec <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b08a      	sub	sp, #40	; 0x28
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	60f8      	str	r0, [r7, #12]
 8005ff4:	60b9      	str	r1, [r7, #8]
 8005ff6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	699b      	ldr	r3, [r3, #24]
 8006004:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006006:	2300      	movs	r3, #0
 8006008:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	f003 0310 	and.w	r3, r3, #16
 8006014:	2b00      	cmp	r3, #0
 8006016:	d068      	beq.n	80060ea <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2210      	movs	r2, #16
 800601e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006020:	e049      	b.n	80060b6 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006028:	d045      	beq.n	80060b6 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800602a:	f7fb f943 	bl	80012b4 <HAL_GetTick>
 800602e:	4602      	mov	r2, r0
 8006030:	69fb      	ldr	r3, [r7, #28]
 8006032:	1ad3      	subs	r3, r2, r3
 8006034:	68ba      	ldr	r2, [r7, #8]
 8006036:	429a      	cmp	r2, r3
 8006038:	d302      	bcc.n	8006040 <I2C_IsErrorOccurred+0x54>
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d13a      	bne.n	80060b6 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800604a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006052:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	699b      	ldr	r3, [r3, #24]
 800605a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800605e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006062:	d121      	bne.n	80060a8 <I2C_IsErrorOccurred+0xbc>
 8006064:	697b      	ldr	r3, [r7, #20]
 8006066:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800606a:	d01d      	beq.n	80060a8 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800606c:	7cfb      	ldrb	r3, [r7, #19]
 800606e:	2b20      	cmp	r3, #32
 8006070:	d01a      	beq.n	80060a8 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	685a      	ldr	r2, [r3, #4]
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006080:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8006082:	f7fb f917 	bl	80012b4 <HAL_GetTick>
 8006086:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006088:	e00e      	b.n	80060a8 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800608a:	f7fb f913 	bl	80012b4 <HAL_GetTick>
 800608e:	4602      	mov	r2, r0
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	1ad3      	subs	r3, r2, r3
 8006094:	2b19      	cmp	r3, #25
 8006096:	d907      	bls.n	80060a8 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006098:	6a3b      	ldr	r3, [r7, #32]
 800609a:	f043 0320 	orr.w	r3, r3, #32
 800609e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80060a0:	2301      	movs	r3, #1
 80060a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80060a6:	e006      	b.n	80060b6 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	699b      	ldr	r3, [r3, #24]
 80060ae:	f003 0320 	and.w	r3, r3, #32
 80060b2:	2b20      	cmp	r3, #32
 80060b4:	d1e9      	bne.n	800608a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	699b      	ldr	r3, [r3, #24]
 80060bc:	f003 0320 	and.w	r3, r3, #32
 80060c0:	2b20      	cmp	r3, #32
 80060c2:	d003      	beq.n	80060cc <I2C_IsErrorOccurred+0xe0>
 80060c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d0aa      	beq.n	8006022 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80060cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80060d0:	2b00      	cmp	r3, #0
 80060d2:	d103      	bne.n	80060dc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	2220      	movs	r2, #32
 80060da:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80060dc:	6a3b      	ldr	r3, [r7, #32]
 80060de:	f043 0304 	orr.w	r3, r3, #4
 80060e2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80060e4:	2301      	movs	r3, #1
 80060e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	699b      	ldr	r3, [r3, #24]
 80060f0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80060f2:	69bb      	ldr	r3, [r7, #24]
 80060f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d00b      	beq.n	8006114 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80060fc:	6a3b      	ldr	r3, [r7, #32]
 80060fe:	f043 0301 	orr.w	r3, r3, #1
 8006102:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f44f 7280 	mov.w	r2, #256	; 0x100
 800610c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800610e:	2301      	movs	r3, #1
 8006110:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800611a:	2b00      	cmp	r3, #0
 800611c:	d00b      	beq.n	8006136 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800611e:	6a3b      	ldr	r3, [r7, #32]
 8006120:	f043 0308 	orr.w	r3, r3, #8
 8006124:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800612e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006130:	2301      	movs	r3, #1
 8006132:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800613c:	2b00      	cmp	r3, #0
 800613e:	d00b      	beq.n	8006158 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006140:	6a3b      	ldr	r3, [r7, #32]
 8006142:	f043 0302 	orr.w	r3, r3, #2
 8006146:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006150:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006152:	2301      	movs	r3, #1
 8006154:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8006158:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800615c:	2b00      	cmp	r3, #0
 800615e:	d01c      	beq.n	800619a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006160:	68f8      	ldr	r0, [r7, #12]
 8006162:	f7ff fe45 	bl	8005df0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	6859      	ldr	r1, [r3, #4]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	4b0d      	ldr	r3, [pc, #52]	; (80061a8 <I2C_IsErrorOccurred+0x1bc>)
 8006172:	400b      	ands	r3, r1
 8006174:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800617a:	6a3b      	ldr	r3, [r7, #32]
 800617c:	431a      	orrs	r2, r3
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2220      	movs	r2, #32
 8006186:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2200      	movs	r2, #0
 800618e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2200      	movs	r2, #0
 8006196:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800619a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800619e:	4618      	mov	r0, r3
 80061a0:	3728      	adds	r7, #40	; 0x28
 80061a2:	46bd      	mov	sp, r7
 80061a4:	bd80      	pop	{r7, pc}
 80061a6:	bf00      	nop
 80061a8:	fe00e800 	.word	0xfe00e800

080061ac <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b087      	sub	sp, #28
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	60f8      	str	r0, [r7, #12]
 80061b4:	607b      	str	r3, [r7, #4]
 80061b6:	460b      	mov	r3, r1
 80061b8:	817b      	strh	r3, [r7, #10]
 80061ba:	4613      	mov	r3, r2
 80061bc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80061be:	897b      	ldrh	r3, [r7, #10]
 80061c0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80061c4:	7a7b      	ldrb	r3, [r7, #9]
 80061c6:	041b      	lsls	r3, r3, #16
 80061c8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80061cc:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80061d2:	6a3b      	ldr	r3, [r7, #32]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80061da:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	685a      	ldr	r2, [r3, #4]
 80061e2:	6a3b      	ldr	r3, [r7, #32]
 80061e4:	0d5b      	lsrs	r3, r3, #21
 80061e6:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80061ea:	4b08      	ldr	r3, [pc, #32]	; (800620c <I2C_TransferConfig+0x60>)
 80061ec:	430b      	orrs	r3, r1
 80061ee:	43db      	mvns	r3, r3
 80061f0:	ea02 0103 	and.w	r1, r2, r3
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	697a      	ldr	r2, [r7, #20]
 80061fa:	430a      	orrs	r2, r1
 80061fc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80061fe:	bf00      	nop
 8006200:	371c      	adds	r7, #28
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr
 800620a:	bf00      	nop
 800620c:	03ff63ff 	.word	0x03ff63ff

08006210 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006210:	b480      	push	{r7}
 8006212:	b083      	sub	sp, #12
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006220:	b2db      	uxtb	r3, r3
 8006222:	2b20      	cmp	r3, #32
 8006224:	d138      	bne.n	8006298 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800622c:	2b01      	cmp	r3, #1
 800622e:	d101      	bne.n	8006234 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006230:	2302      	movs	r3, #2
 8006232:	e032      	b.n	800629a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2224      	movs	r2, #36	; 0x24
 8006240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	681a      	ldr	r2, [r3, #0]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f022 0201 	bic.w	r2, r2, #1
 8006252:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006262:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	6819      	ldr	r1, [r3, #0]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	683a      	ldr	r2, [r7, #0]
 8006270:	430a      	orrs	r2, r1
 8006272:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	681a      	ldr	r2, [r3, #0]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	f042 0201 	orr.w	r2, r2, #1
 8006282:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2220      	movs	r2, #32
 8006288:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006294:	2300      	movs	r3, #0
 8006296:	e000      	b.n	800629a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006298:	2302      	movs	r3, #2
  }
}
 800629a:	4618      	mov	r0, r3
 800629c:	370c      	adds	r7, #12
 800629e:	46bd      	mov	sp, r7
 80062a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a4:	4770      	bx	lr

080062a6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80062a6:	b480      	push	{r7}
 80062a8:	b085      	sub	sp, #20
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
 80062ae:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	2b20      	cmp	r3, #32
 80062ba:	d139      	bne.n	8006330 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80062c2:	2b01      	cmp	r3, #1
 80062c4:	d101      	bne.n	80062ca <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80062c6:	2302      	movs	r3, #2
 80062c8:	e033      	b.n	8006332 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	2201      	movs	r2, #1
 80062ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2224      	movs	r2, #36	; 0x24
 80062d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	681a      	ldr	r2, [r3, #0]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	f022 0201 	bic.w	r2, r2, #1
 80062e8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80062f8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80062fa:	683b      	ldr	r3, [r7, #0]
 80062fc:	021b      	lsls	r3, r3, #8
 80062fe:	68fa      	ldr	r2, [r7, #12]
 8006300:	4313      	orrs	r3, r2
 8006302:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	68fa      	ldr	r2, [r7, #12]
 800630a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	681a      	ldr	r2, [r3, #0]
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f042 0201 	orr.w	r2, r2, #1
 800631a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2220      	movs	r2, #32
 8006320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	2200      	movs	r2, #0
 8006328:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800632c:	2300      	movs	r3, #0
 800632e:	e000      	b.n	8006332 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006330:	2302      	movs	r3, #2
  }
}
 8006332:	4618      	mov	r0, r3
 8006334:	3714      	adds	r7, #20
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr

0800633e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800633e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006340:	b08f      	sub	sp, #60	; 0x3c
 8006342:	af0a      	add	r7, sp, #40	; 0x28
 8006344:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d101      	bne.n	8006350 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800634c:	2301      	movs	r3, #1
 800634e:	e116      	b.n	800657e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800635c:	b2db      	uxtb	r3, r3
 800635e:	2b00      	cmp	r3, #0
 8006360:	d106      	bne.n	8006370 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f008 fd58 	bl	800ee20 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2203      	movs	r2, #3
 8006374:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800637c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006380:	2b00      	cmp	r3, #0
 8006382:	d102      	bne.n	800638a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2200      	movs	r2, #0
 8006388:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4618      	mov	r0, r3
 8006390:	f004 fdaf 	bl	800aef2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	603b      	str	r3, [r7, #0]
 800639a:	687e      	ldr	r6, [r7, #4]
 800639c:	466d      	mov	r5, sp
 800639e:	f106 0410 	add.w	r4, r6, #16
 80063a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80063a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80063a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80063a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80063aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80063ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80063b2:	1d33      	adds	r3, r6, #4
 80063b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80063b6:	6838      	ldr	r0, [r7, #0]
 80063b8:	f004 fc7a 	bl	800acb0 <USB_CoreInit>
 80063bc:	4603      	mov	r3, r0
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d005      	beq.n	80063ce <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2202      	movs	r2, #2
 80063c6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80063ca:	2301      	movs	r3, #1
 80063cc:	e0d7      	b.n	800657e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	2100      	movs	r1, #0
 80063d4:	4618      	mov	r0, r3
 80063d6:	f004 fd9d 	bl	800af14 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80063da:	2300      	movs	r3, #0
 80063dc:	73fb      	strb	r3, [r7, #15]
 80063de:	e04a      	b.n	8006476 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80063e0:	7bfa      	ldrb	r2, [r7, #15]
 80063e2:	6879      	ldr	r1, [r7, #4]
 80063e4:	4613      	mov	r3, r2
 80063e6:	00db      	lsls	r3, r3, #3
 80063e8:	4413      	add	r3, r2
 80063ea:	009b      	lsls	r3, r3, #2
 80063ec:	440b      	add	r3, r1
 80063ee:	333d      	adds	r3, #61	; 0x3d
 80063f0:	2201      	movs	r2, #1
 80063f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80063f4:	7bfa      	ldrb	r2, [r7, #15]
 80063f6:	6879      	ldr	r1, [r7, #4]
 80063f8:	4613      	mov	r3, r2
 80063fa:	00db      	lsls	r3, r3, #3
 80063fc:	4413      	add	r3, r2
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	440b      	add	r3, r1
 8006402:	333c      	adds	r3, #60	; 0x3c
 8006404:	7bfa      	ldrb	r2, [r7, #15]
 8006406:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8006408:	7bfa      	ldrb	r2, [r7, #15]
 800640a:	7bfb      	ldrb	r3, [r7, #15]
 800640c:	b298      	uxth	r0, r3
 800640e:	6879      	ldr	r1, [r7, #4]
 8006410:	4613      	mov	r3, r2
 8006412:	00db      	lsls	r3, r3, #3
 8006414:	4413      	add	r3, r2
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	440b      	add	r3, r1
 800641a:	3356      	adds	r3, #86	; 0x56
 800641c:	4602      	mov	r2, r0
 800641e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8006420:	7bfa      	ldrb	r2, [r7, #15]
 8006422:	6879      	ldr	r1, [r7, #4]
 8006424:	4613      	mov	r3, r2
 8006426:	00db      	lsls	r3, r3, #3
 8006428:	4413      	add	r3, r2
 800642a:	009b      	lsls	r3, r3, #2
 800642c:	440b      	add	r3, r1
 800642e:	3340      	adds	r3, #64	; 0x40
 8006430:	2200      	movs	r2, #0
 8006432:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8006434:	7bfa      	ldrb	r2, [r7, #15]
 8006436:	6879      	ldr	r1, [r7, #4]
 8006438:	4613      	mov	r3, r2
 800643a:	00db      	lsls	r3, r3, #3
 800643c:	4413      	add	r3, r2
 800643e:	009b      	lsls	r3, r3, #2
 8006440:	440b      	add	r3, r1
 8006442:	3344      	adds	r3, #68	; 0x44
 8006444:	2200      	movs	r2, #0
 8006446:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8006448:	7bfa      	ldrb	r2, [r7, #15]
 800644a:	6879      	ldr	r1, [r7, #4]
 800644c:	4613      	mov	r3, r2
 800644e:	00db      	lsls	r3, r3, #3
 8006450:	4413      	add	r3, r2
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	440b      	add	r3, r1
 8006456:	3348      	adds	r3, #72	; 0x48
 8006458:	2200      	movs	r2, #0
 800645a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800645c:	7bfa      	ldrb	r2, [r7, #15]
 800645e:	6879      	ldr	r1, [r7, #4]
 8006460:	4613      	mov	r3, r2
 8006462:	00db      	lsls	r3, r3, #3
 8006464:	4413      	add	r3, r2
 8006466:	009b      	lsls	r3, r3, #2
 8006468:	440b      	add	r3, r1
 800646a:	334c      	adds	r3, #76	; 0x4c
 800646c:	2200      	movs	r2, #0
 800646e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006470:	7bfb      	ldrb	r3, [r7, #15]
 8006472:	3301      	adds	r3, #1
 8006474:	73fb      	strb	r3, [r7, #15]
 8006476:	7bfa      	ldrb	r2, [r7, #15]
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	429a      	cmp	r2, r3
 800647e:	d3af      	bcc.n	80063e0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006480:	2300      	movs	r3, #0
 8006482:	73fb      	strb	r3, [r7, #15]
 8006484:	e044      	b.n	8006510 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8006486:	7bfa      	ldrb	r2, [r7, #15]
 8006488:	6879      	ldr	r1, [r7, #4]
 800648a:	4613      	mov	r3, r2
 800648c:	00db      	lsls	r3, r3, #3
 800648e:	4413      	add	r3, r2
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	440b      	add	r3, r1
 8006494:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8006498:	2200      	movs	r2, #0
 800649a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800649c:	7bfa      	ldrb	r2, [r7, #15]
 800649e:	6879      	ldr	r1, [r7, #4]
 80064a0:	4613      	mov	r3, r2
 80064a2:	00db      	lsls	r3, r3, #3
 80064a4:	4413      	add	r3, r2
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	440b      	add	r3, r1
 80064aa:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80064ae:	7bfa      	ldrb	r2, [r7, #15]
 80064b0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80064b2:	7bfa      	ldrb	r2, [r7, #15]
 80064b4:	6879      	ldr	r1, [r7, #4]
 80064b6:	4613      	mov	r3, r2
 80064b8:	00db      	lsls	r3, r3, #3
 80064ba:	4413      	add	r3, r2
 80064bc:	009b      	lsls	r3, r3, #2
 80064be:	440b      	add	r3, r1
 80064c0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80064c4:	2200      	movs	r2, #0
 80064c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80064c8:	7bfa      	ldrb	r2, [r7, #15]
 80064ca:	6879      	ldr	r1, [r7, #4]
 80064cc:	4613      	mov	r3, r2
 80064ce:	00db      	lsls	r3, r3, #3
 80064d0:	4413      	add	r3, r2
 80064d2:	009b      	lsls	r3, r3, #2
 80064d4:	440b      	add	r3, r1
 80064d6:	f503 7321 	add.w	r3, r3, #644	; 0x284
 80064da:	2200      	movs	r2, #0
 80064dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80064de:	7bfa      	ldrb	r2, [r7, #15]
 80064e0:	6879      	ldr	r1, [r7, #4]
 80064e2:	4613      	mov	r3, r2
 80064e4:	00db      	lsls	r3, r3, #3
 80064e6:	4413      	add	r3, r2
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	440b      	add	r3, r1
 80064ec:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80064f0:	2200      	movs	r2, #0
 80064f2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80064f4:	7bfa      	ldrb	r2, [r7, #15]
 80064f6:	6879      	ldr	r1, [r7, #4]
 80064f8:	4613      	mov	r3, r2
 80064fa:	00db      	lsls	r3, r3, #3
 80064fc:	4413      	add	r3, r2
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	440b      	add	r3, r1
 8006502:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006506:	2200      	movs	r2, #0
 8006508:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800650a:	7bfb      	ldrb	r3, [r7, #15]
 800650c:	3301      	adds	r3, #1
 800650e:	73fb      	strb	r3, [r7, #15]
 8006510:	7bfa      	ldrb	r2, [r7, #15]
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	429a      	cmp	r2, r3
 8006518:	d3b5      	bcc.n	8006486 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	603b      	str	r3, [r7, #0]
 8006520:	687e      	ldr	r6, [r7, #4]
 8006522:	466d      	mov	r5, sp
 8006524:	f106 0410 	add.w	r4, r6, #16
 8006528:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800652a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800652c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800652e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006530:	e894 0003 	ldmia.w	r4, {r0, r1}
 8006534:	e885 0003 	stmia.w	r5, {r0, r1}
 8006538:	1d33      	adds	r3, r6, #4
 800653a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800653c:	6838      	ldr	r0, [r7, #0]
 800653e:	f004 fd35 	bl	800afac <USB_DevInit>
 8006542:	4603      	mov	r3, r0
 8006544:	2b00      	cmp	r3, #0
 8006546:	d005      	beq.n	8006554 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2202      	movs	r2, #2
 800654c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	e014      	b.n	800657e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2200      	movs	r2, #0
 8006558:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006568:	2b01      	cmp	r3, #1
 800656a:	d102      	bne.n	8006572 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f001 f96f 	bl	8007850 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	4618      	mov	r0, r3
 8006578:	f005 fd77 	bl	800c06a <USB_DevDisconnect>

  return HAL_OK;
 800657c:	2300      	movs	r3, #0
}
 800657e:	4618      	mov	r0, r3
 8006580:	3714      	adds	r7, #20
 8006582:	46bd      	mov	sp, r7
 8006584:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006586 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8006586:	b580      	push	{r7, lr}
 8006588:	b084      	sub	sp, #16
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800659a:	2b01      	cmp	r3, #1
 800659c:	d101      	bne.n	80065a2 <HAL_PCD_Start+0x1c>
 800659e:	2302      	movs	r3, #2
 80065a0:	e022      	b.n	80065e8 <HAL_PCD_Start+0x62>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2201      	movs	r2, #1
 80065a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d109      	bne.n	80065ca <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 80065ba:	2b01      	cmp	r3, #1
 80065bc:	d105      	bne.n	80065ca <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065c2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	4618      	mov	r0, r3
 80065d0:	f004 fc7e 	bl	800aed0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	4618      	mov	r0, r3
 80065da:	f005 fd25 	bl	800c028 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80065e6:	2300      	movs	r3, #0
}
 80065e8:	4618      	mov	r0, r3
 80065ea:	3710      	adds	r7, #16
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80065f0:	b590      	push	{r4, r7, lr}
 80065f2:	b08d      	sub	sp, #52	; 0x34
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065fe:	6a3b      	ldr	r3, [r7, #32]
 8006600:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	4618      	mov	r0, r3
 8006608:	f005 fde3 	bl	800c1d2 <USB_GetMode>
 800660c:	4603      	mov	r3, r0
 800660e:	2b00      	cmp	r3, #0
 8006610:	f040 84b7 	bne.w	8006f82 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	4618      	mov	r0, r3
 800661a:	f005 fd47 	bl	800c0ac <USB_ReadInterrupts>
 800661e:	4603      	mov	r3, r0
 8006620:	2b00      	cmp	r3, #0
 8006622:	f000 84ad 	beq.w	8006f80 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800662c:	689b      	ldr	r3, [r3, #8]
 800662e:	0a1b      	lsrs	r3, r3, #8
 8006630:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	4618      	mov	r0, r3
 8006640:	f005 fd34 	bl	800c0ac <USB_ReadInterrupts>
 8006644:	4603      	mov	r3, r0
 8006646:	f003 0302 	and.w	r3, r3, #2
 800664a:	2b02      	cmp	r3, #2
 800664c:	d107      	bne.n	800665e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	695a      	ldr	r2, [r3, #20]
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f002 0202 	and.w	r2, r2, #2
 800665c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4618      	mov	r0, r3
 8006664:	f005 fd22 	bl	800c0ac <USB_ReadInterrupts>
 8006668:	4603      	mov	r3, r0
 800666a:	f003 0310 	and.w	r3, r3, #16
 800666e:	2b10      	cmp	r3, #16
 8006670:	d161      	bne.n	8006736 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	699a      	ldr	r2, [r3, #24]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f022 0210 	bic.w	r2, r2, #16
 8006680:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8006682:	6a3b      	ldr	r3, [r7, #32]
 8006684:	6a1b      	ldr	r3, [r3, #32]
 8006686:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8006688:	69bb      	ldr	r3, [r7, #24]
 800668a:	f003 020f 	and.w	r2, r3, #15
 800668e:	4613      	mov	r3, r2
 8006690:	00db      	lsls	r3, r3, #3
 8006692:	4413      	add	r3, r2
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800669a:	687a      	ldr	r2, [r7, #4]
 800669c:	4413      	add	r3, r2
 800669e:	3304      	adds	r3, #4
 80066a0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	0c5b      	lsrs	r3, r3, #17
 80066a6:	f003 030f 	and.w	r3, r3, #15
 80066aa:	2b02      	cmp	r3, #2
 80066ac:	d124      	bne.n	80066f8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80066ae:	69ba      	ldr	r2, [r7, #24]
 80066b0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80066b4:	4013      	ands	r3, r2
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d035      	beq.n	8006726 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	091b      	lsrs	r3, r3, #4
 80066c2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80066c4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	461a      	mov	r2, r3
 80066cc:	6a38      	ldr	r0, [r7, #32]
 80066ce:	f005 fb59 	bl	800bd84 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	68da      	ldr	r2, [r3, #12]
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	091b      	lsrs	r3, r3, #4
 80066da:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80066de:	441a      	add	r2, r3
 80066e0:	697b      	ldr	r3, [r7, #20]
 80066e2:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80066e4:	697b      	ldr	r3, [r7, #20]
 80066e6:	695a      	ldr	r2, [r3, #20]
 80066e8:	69bb      	ldr	r3, [r7, #24]
 80066ea:	091b      	lsrs	r3, r3, #4
 80066ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80066f0:	441a      	add	r2, r3
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	615a      	str	r2, [r3, #20]
 80066f6:	e016      	b.n	8006726 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80066f8:	69bb      	ldr	r3, [r7, #24]
 80066fa:	0c5b      	lsrs	r3, r3, #17
 80066fc:	f003 030f 	and.w	r3, r3, #15
 8006700:	2b06      	cmp	r3, #6
 8006702:	d110      	bne.n	8006726 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800670a:	2208      	movs	r2, #8
 800670c:	4619      	mov	r1, r3
 800670e:	6a38      	ldr	r0, [r7, #32]
 8006710:	f005 fb38 	bl	800bd84 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	695a      	ldr	r2, [r3, #20]
 8006718:	69bb      	ldr	r3, [r7, #24]
 800671a:	091b      	lsrs	r3, r3, #4
 800671c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006720:	441a      	add	r2, r3
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	699a      	ldr	r2, [r3, #24]
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f042 0210 	orr.w	r2, r2, #16
 8006734:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4618      	mov	r0, r3
 800673c:	f005 fcb6 	bl	800c0ac <USB_ReadInterrupts>
 8006740:	4603      	mov	r3, r0
 8006742:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006746:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800674a:	f040 80a7 	bne.w	800689c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800674e:	2300      	movs	r3, #0
 8006750:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4618      	mov	r0, r3
 8006758:	f005 fcbb 	bl	800c0d2 <USB_ReadDevAllOutEpInterrupt>
 800675c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800675e:	e099      	b.n	8006894 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8006760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006762:	f003 0301 	and.w	r3, r3, #1
 8006766:	2b00      	cmp	r3, #0
 8006768:	f000 808e 	beq.w	8006888 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006772:	b2d2      	uxtb	r2, r2
 8006774:	4611      	mov	r1, r2
 8006776:	4618      	mov	r0, r3
 8006778:	f005 fcdf 	bl	800c13a <USB_ReadDevOutEPInterrupt>
 800677c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	f003 0301 	and.w	r3, r3, #1
 8006784:	2b00      	cmp	r3, #0
 8006786:	d00c      	beq.n	80067a2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8006788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800678a:	015a      	lsls	r2, r3, #5
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	4413      	add	r3, r2
 8006790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006794:	461a      	mov	r2, r3
 8006796:	2301      	movs	r3, #1
 8006798:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800679a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800679c:	6878      	ldr	r0, [r7, #4]
 800679e:	f000 fed1 	bl	8007544 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80067a2:	693b      	ldr	r3, [r7, #16]
 80067a4:	f003 0308 	and.w	r3, r3, #8
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d00c      	beq.n	80067c6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80067ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ae:	015a      	lsls	r2, r3, #5
 80067b0:	69fb      	ldr	r3, [r7, #28]
 80067b2:	4413      	add	r3, r2
 80067b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067b8:	461a      	mov	r2, r3
 80067ba:	2308      	movs	r3, #8
 80067bc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80067be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f000 ffa7 	bl	8007714 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80067c6:	693b      	ldr	r3, [r7, #16]
 80067c8:	f003 0310 	and.w	r3, r3, #16
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d008      	beq.n	80067e2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80067d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067d2:	015a      	lsls	r2, r3, #5
 80067d4:	69fb      	ldr	r3, [r7, #28]
 80067d6:	4413      	add	r3, r2
 80067d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067dc:	461a      	mov	r2, r3
 80067de:	2310      	movs	r3, #16
 80067e0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	f003 0302 	and.w	r3, r3, #2
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d030      	beq.n	800684e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80067ec:	6a3b      	ldr	r3, [r7, #32]
 80067ee:	695b      	ldr	r3, [r3, #20]
 80067f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067f4:	2b80      	cmp	r3, #128	; 0x80
 80067f6:	d109      	bne.n	800680c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80067f8:	69fb      	ldr	r3, [r7, #28]
 80067fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	69fa      	ldr	r2, [r7, #28]
 8006802:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006806:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800680a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800680c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800680e:	4613      	mov	r3, r2
 8006810:	00db      	lsls	r3, r3, #3
 8006812:	4413      	add	r3, r2
 8006814:	009b      	lsls	r3, r3, #2
 8006816:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800681a:	687a      	ldr	r2, [r7, #4]
 800681c:	4413      	add	r3, r2
 800681e:	3304      	adds	r3, #4
 8006820:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	78db      	ldrb	r3, [r3, #3]
 8006826:	2b01      	cmp	r3, #1
 8006828:	d108      	bne.n	800683c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	2200      	movs	r2, #0
 800682e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8006830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006832:	b2db      	uxtb	r3, r3
 8006834:	4619      	mov	r1, r3
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f008 fc18 	bl	800f06c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800683c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683e:	015a      	lsls	r2, r3, #5
 8006840:	69fb      	ldr	r3, [r7, #28]
 8006842:	4413      	add	r3, r2
 8006844:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006848:	461a      	mov	r2, r3
 800684a:	2302      	movs	r3, #2
 800684c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	f003 0320 	and.w	r3, r3, #32
 8006854:	2b00      	cmp	r3, #0
 8006856:	d008      	beq.n	800686a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685a:	015a      	lsls	r2, r3, #5
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	4413      	add	r3, r2
 8006860:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006864:	461a      	mov	r2, r3
 8006866:	2320      	movs	r3, #32
 8006868:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006870:	2b00      	cmp	r3, #0
 8006872:	d009      	beq.n	8006888 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8006874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006876:	015a      	lsls	r2, r3, #5
 8006878:	69fb      	ldr	r3, [r7, #28]
 800687a:	4413      	add	r3, r2
 800687c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006880:	461a      	mov	r2, r3
 8006882:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006886:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8006888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688a:	3301      	adds	r3, #1
 800688c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800688e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006890:	085b      	lsrs	r3, r3, #1
 8006892:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006896:	2b00      	cmp	r3, #0
 8006898:	f47f af62 	bne.w	8006760 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4618      	mov	r0, r3
 80068a2:	f005 fc03 	bl	800c0ac <USB_ReadInterrupts>
 80068a6:	4603      	mov	r3, r0
 80068a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80068ac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80068b0:	f040 80db 	bne.w	8006a6a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4618      	mov	r0, r3
 80068ba:	f005 fc24 	bl	800c106 <USB_ReadDevAllInEpInterrupt>
 80068be:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 80068c0:	2300      	movs	r3, #0
 80068c2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 80068c4:	e0cd      	b.n	8006a62 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80068c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c8:	f003 0301 	and.w	r3, r3, #1
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	f000 80c2 	beq.w	8006a56 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068d8:	b2d2      	uxtb	r2, r2
 80068da:	4611      	mov	r1, r2
 80068dc:	4618      	mov	r0, r3
 80068de:	f005 fc4a 	bl	800c176 <USB_ReadDevInEPInterrupt>
 80068e2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	f003 0301 	and.w	r3, r3, #1
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d057      	beq.n	800699e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80068ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f0:	f003 030f 	and.w	r3, r3, #15
 80068f4:	2201      	movs	r2, #1
 80068f6:	fa02 f303 	lsl.w	r3, r2, r3
 80068fa:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80068fc:	69fb      	ldr	r3, [r7, #28]
 80068fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006902:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	43db      	mvns	r3, r3
 8006908:	69f9      	ldr	r1, [r7, #28]
 800690a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800690e:	4013      	ands	r3, r2
 8006910:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8006912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006914:	015a      	lsls	r2, r3, #5
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	4413      	add	r3, r2
 800691a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800691e:	461a      	mov	r2, r3
 8006920:	2301      	movs	r3, #1
 8006922:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	68db      	ldr	r3, [r3, #12]
 8006928:	2b01      	cmp	r3, #1
 800692a:	d132      	bne.n	8006992 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800692c:	6879      	ldr	r1, [r7, #4]
 800692e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006930:	4613      	mov	r3, r2
 8006932:	00db      	lsls	r3, r3, #3
 8006934:	4413      	add	r3, r2
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	440b      	add	r3, r1
 800693a:	3348      	adds	r3, #72	; 0x48
 800693c:	6819      	ldr	r1, [r3, #0]
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006942:	4613      	mov	r3, r2
 8006944:	00db      	lsls	r3, r3, #3
 8006946:	4413      	add	r3, r2
 8006948:	009b      	lsls	r3, r3, #2
 800694a:	4403      	add	r3, r0
 800694c:	3344      	adds	r3, #68	; 0x44
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	4419      	add	r1, r3
 8006952:	6878      	ldr	r0, [r7, #4]
 8006954:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006956:	4613      	mov	r3, r2
 8006958:	00db      	lsls	r3, r3, #3
 800695a:	4413      	add	r3, r2
 800695c:	009b      	lsls	r3, r3, #2
 800695e:	4403      	add	r3, r0
 8006960:	3348      	adds	r3, #72	; 0x48
 8006962:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8006964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006966:	2b00      	cmp	r3, #0
 8006968:	d113      	bne.n	8006992 <HAL_PCD_IRQHandler+0x3a2>
 800696a:	6879      	ldr	r1, [r7, #4]
 800696c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800696e:	4613      	mov	r3, r2
 8006970:	00db      	lsls	r3, r3, #3
 8006972:	4413      	add	r3, r2
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	440b      	add	r3, r1
 8006978:	334c      	adds	r3, #76	; 0x4c
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d108      	bne.n	8006992 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6818      	ldr	r0, [r3, #0]
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800698a:	461a      	mov	r2, r3
 800698c:	2101      	movs	r1, #1
 800698e:	f005 fc53 	bl	800c238 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8006992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006994:	b2db      	uxtb	r3, r3
 8006996:	4619      	mov	r1, r3
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f008 fae2 	bl	800ef62 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	f003 0308 	and.w	r3, r3, #8
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d008      	beq.n	80069ba <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80069a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069aa:	015a      	lsls	r2, r3, #5
 80069ac:	69fb      	ldr	r3, [r7, #28]
 80069ae:	4413      	add	r3, r2
 80069b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069b4:	461a      	mov	r2, r3
 80069b6:	2308      	movs	r3, #8
 80069b8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	f003 0310 	and.w	r3, r3, #16
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d008      	beq.n	80069d6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80069c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c6:	015a      	lsls	r2, r3, #5
 80069c8:	69fb      	ldr	r3, [r7, #28]
 80069ca:	4413      	add	r3, r2
 80069cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069d0:	461a      	mov	r2, r3
 80069d2:	2310      	movs	r3, #16
 80069d4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d008      	beq.n	80069f2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80069e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e2:	015a      	lsls	r2, r3, #5
 80069e4:	69fb      	ldr	r3, [r7, #28]
 80069e6:	4413      	add	r3, r2
 80069e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80069ec:	461a      	mov	r2, r3
 80069ee:	2340      	movs	r3, #64	; 0x40
 80069f0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	f003 0302 	and.w	r3, r3, #2
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d023      	beq.n	8006a44 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80069fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80069fe:	6a38      	ldr	r0, [r7, #32]
 8006a00:	f004 fc32 	bl	800b268 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8006a04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006a06:	4613      	mov	r3, r2
 8006a08:	00db      	lsls	r3, r3, #3
 8006a0a:	4413      	add	r3, r2
 8006a0c:	009b      	lsls	r3, r3, #2
 8006a0e:	3338      	adds	r3, #56	; 0x38
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	4413      	add	r3, r2
 8006a14:	3304      	adds	r3, #4
 8006a16:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	78db      	ldrb	r3, [r3, #3]
 8006a1c:	2b01      	cmp	r3, #1
 8006a1e:	d108      	bne.n	8006a32 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	2200      	movs	r2, #0
 8006a24:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8006a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f008 fb2f 	bl	800f090 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8006a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a34:	015a      	lsls	r2, r3, #5
 8006a36:	69fb      	ldr	r3, [r7, #28]
 8006a38:	4413      	add	r3, r2
 8006a3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006a3e:	461a      	mov	r2, r3
 8006a40:	2302      	movs	r3, #2
 8006a42:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d003      	beq.n	8006a56 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8006a4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 fcea 	bl	800742a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8006a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a58:	3301      	adds	r3, #1
 8006a5a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8006a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a5e:	085b      	lsrs	r3, r3, #1
 8006a60:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8006a62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	f47f af2e 	bne.w	80068c6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4618      	mov	r0, r3
 8006a70:	f005 fb1c 	bl	800c0ac <USB_ReadInterrupts>
 8006a74:	4603      	mov	r3, r0
 8006a76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006a7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006a7e:	d122      	bne.n	8006ac6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a86:	685b      	ldr	r3, [r3, #4]
 8006a88:	69fa      	ldr	r2, [r7, #28]
 8006a8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a8e:	f023 0301 	bic.w	r3, r3, #1
 8006a92:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8006a9a:	2b01      	cmp	r3, #1
 8006a9c:	d108      	bne.n	8006ab0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8006aa6:	2100      	movs	r1, #0
 8006aa8:	6878      	ldr	r0, [r7, #4]
 8006aaa:	f000 fef5 	bl	8007898 <HAL_PCDEx_LPM_Callback>
 8006aae:	e002      	b.n	8006ab6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f008 facd 	bl	800f050 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	695a      	ldr	r2, [r3, #20]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8006ac4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4618      	mov	r0, r3
 8006acc:	f005 faee 	bl	800c0ac <USB_ReadInterrupts>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006ad6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006ada:	d112      	bne.n	8006b02 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8006adc:	69fb      	ldr	r3, [r7, #28]
 8006ade:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ae2:	689b      	ldr	r3, [r3, #8]
 8006ae4:	f003 0301 	and.w	r3, r3, #1
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d102      	bne.n	8006af2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f008 fa89 	bl	800f004 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	695a      	ldr	r2, [r3, #20]
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8006b00:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4618      	mov	r0, r3
 8006b08:	f005 fad0 	bl	800c0ac <USB_ReadInterrupts>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006b12:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006b16:	d121      	bne.n	8006b5c <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	695a      	ldr	r2, [r3, #20]
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8006b26:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d111      	bne.n	8006b56 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	2201      	movs	r2, #1
 8006b36:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006b40:	089b      	lsrs	r3, r3, #2
 8006b42:	f003 020f 	and.w	r2, r3, #15
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8006b4c:	2101      	movs	r1, #1
 8006b4e:	6878      	ldr	r0, [r7, #4]
 8006b50:	f000 fea2 	bl	8007898 <HAL_PCDEx_LPM_Callback>
 8006b54:	e002      	b.n	8006b5c <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f008 fa54 	bl	800f004 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	4618      	mov	r0, r3
 8006b62:	f005 faa3 	bl	800c0ac <USB_ReadInterrupts>
 8006b66:	4603      	mov	r3, r0
 8006b68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b70:	f040 80b7 	bne.w	8006ce2 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	69fa      	ldr	r2, [r7, #28]
 8006b7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006b82:	f023 0301 	bic.w	r3, r3, #1
 8006b86:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	2110      	movs	r1, #16
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f004 fb6a 	bl	800b268 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006b94:	2300      	movs	r3, #0
 8006b96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b98:	e046      	b.n	8006c28 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8006b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b9c:	015a      	lsls	r2, r3, #5
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	4413      	add	r3, r2
 8006ba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006bac:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006bae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb0:	015a      	lsls	r2, r3, #5
 8006bb2:	69fb      	ldr	r3, [r7, #28]
 8006bb4:	4413      	add	r3, r2
 8006bb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bbe:	0151      	lsls	r1, r2, #5
 8006bc0:	69fa      	ldr	r2, [r7, #28]
 8006bc2:	440a      	add	r2, r1
 8006bc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006bc8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006bcc:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8006bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd0:	015a      	lsls	r2, r3, #5
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	4413      	add	r3, r2
 8006bd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bda:	461a      	mov	r2, r3
 8006bdc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006be0:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be4:	015a      	lsls	r2, r3, #5
 8006be6:	69fb      	ldr	r3, [r7, #28]
 8006be8:	4413      	add	r3, r2
 8006bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bf2:	0151      	lsls	r1, r2, #5
 8006bf4:	69fa      	ldr	r2, [r7, #28]
 8006bf6:	440a      	add	r2, r1
 8006bf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bfc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006c00:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c04:	015a      	lsls	r2, r3, #5
 8006c06:	69fb      	ldr	r3, [r7, #28]
 8006c08:	4413      	add	r3, r2
 8006c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c12:	0151      	lsls	r1, r2, #5
 8006c14:	69fa      	ldr	r2, [r7, #28]
 8006c16:	440a      	add	r2, r1
 8006c18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c1c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006c20:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8006c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c24:	3301      	adds	r3, #1
 8006c26:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d3b3      	bcc.n	8006b9a <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8006c32:	69fb      	ldr	r3, [r7, #28]
 8006c34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c38:	69db      	ldr	r3, [r3, #28]
 8006c3a:	69fa      	ldr	r2, [r7, #28]
 8006c3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c40:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8006c44:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d016      	beq.n	8006c7c <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8006c4e:	69fb      	ldr	r3, [r7, #28]
 8006c50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006c58:	69fa      	ldr	r2, [r7, #28]
 8006c5a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c5e:	f043 030b 	orr.w	r3, r3, #11
 8006c62:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8006c66:	69fb      	ldr	r3, [r7, #28]
 8006c68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c6e:	69fa      	ldr	r2, [r7, #28]
 8006c70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c74:	f043 030b 	orr.w	r3, r3, #11
 8006c78:	6453      	str	r3, [r2, #68]	; 0x44
 8006c7a:	e015      	b.n	8006ca8 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8006c7c:	69fb      	ldr	r3, [r7, #28]
 8006c7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c82:	695a      	ldr	r2, [r3, #20]
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c8a:	4619      	mov	r1, r3
 8006c8c:	f242 032b 	movw	r3, #8235	; 0x202b
 8006c90:	4313      	orrs	r3, r2
 8006c92:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8006c94:	69fb      	ldr	r3, [r7, #28]
 8006c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c9a:	691b      	ldr	r3, [r3, #16]
 8006c9c:	69fa      	ldr	r2, [r7, #28]
 8006c9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006ca2:	f043 030b 	orr.w	r3, r3, #11
 8006ca6:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8006ca8:	69fb      	ldr	r3, [r7, #28]
 8006caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	69fa      	ldr	r2, [r7, #28]
 8006cb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006cb6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006cba:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	6818      	ldr	r0, [r3, #0]
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	68db      	ldr	r3, [r3, #12]
 8006cc4:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8006ccc:	461a      	mov	r2, r3
 8006cce:	f005 fab3 	bl	800c238 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	695a      	ldr	r2, [r3, #20]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8006ce0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f005 f9e0 	bl	800c0ac <USB_ReadInterrupts>
 8006cec:	4603      	mov	r3, r0
 8006cee:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006cf2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cf6:	d124      	bne.n	8006d42 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	f005 fa77 	bl	800c1f0 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4618      	mov	r0, r3
 8006d08:	f004 fb2b 	bl	800b362 <USB_GetDevSpeed>
 8006d0c:	4603      	mov	r3, r0
 8006d0e:	461a      	mov	r2, r3
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681c      	ldr	r4, [r3, #0]
 8006d18:	f001 fe08 	bl	800892c <HAL_RCC_GetHCLKFreq>
 8006d1c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8006d22:	b2db      	uxtb	r3, r3
 8006d24:	461a      	mov	r2, r3
 8006d26:	4620      	mov	r0, r4
 8006d28:	f004 f830 	bl	800ad8c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f008 f940 	bl	800efb2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	695a      	ldr	r2, [r3, #20]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8006d40:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4618      	mov	r0, r3
 8006d48:	f005 f9b0 	bl	800c0ac <USB_ReadInterrupts>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	f003 0308 	and.w	r3, r3, #8
 8006d52:	2b08      	cmp	r3, #8
 8006d54:	d10a      	bne.n	8006d6c <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f008 f91d 	bl	800ef96 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	695a      	ldr	r2, [r3, #20]
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	f002 0208 	and.w	r2, r2, #8
 8006d6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	4618      	mov	r0, r3
 8006d72:	f005 f99b 	bl	800c0ac <USB_ReadInterrupts>
 8006d76:	4603      	mov	r3, r0
 8006d78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d7c:	2b80      	cmp	r3, #128	; 0x80
 8006d7e:	d122      	bne.n	8006dc6 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8006d80:	6a3b      	ldr	r3, [r7, #32]
 8006d82:	699b      	ldr	r3, [r3, #24]
 8006d84:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006d88:	6a3b      	ldr	r3, [r7, #32]
 8006d8a:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006d8c:	2301      	movs	r3, #1
 8006d8e:	627b      	str	r3, [r7, #36]	; 0x24
 8006d90:	e014      	b.n	8006dbc <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8006d92:	6879      	ldr	r1, [r7, #4]
 8006d94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d96:	4613      	mov	r3, r2
 8006d98:	00db      	lsls	r3, r3, #3
 8006d9a:	4413      	add	r3, r2
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	440b      	add	r3, r1
 8006da0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d105      	bne.n	8006db6 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8006daa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dac:	b2db      	uxtb	r3, r3
 8006dae:	4619      	mov	r1, r3
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f000 fb09 	bl	80073c8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006db8:	3301      	adds	r3, #1
 8006dba:	627b      	str	r3, [r7, #36]	; 0x24
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	685b      	ldr	r3, [r3, #4]
 8006dc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d3e5      	bcc.n	8006d92 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f005 f96e 	bl	800c0ac <USB_ReadInterrupts>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006dd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006dda:	d13b      	bne.n	8006e54 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006ddc:	2301      	movs	r3, #1
 8006dde:	627b      	str	r3, [r7, #36]	; 0x24
 8006de0:	e02b      	b.n	8006e3a <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8006de2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de4:	015a      	lsls	r2, r3, #5
 8006de6:	69fb      	ldr	r3, [r7, #28]
 8006de8:	4413      	add	r3, r2
 8006dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006df2:	6879      	ldr	r1, [r7, #4]
 8006df4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006df6:	4613      	mov	r3, r2
 8006df8:	00db      	lsls	r3, r3, #3
 8006dfa:	4413      	add	r3, r2
 8006dfc:	009b      	lsls	r3, r3, #2
 8006dfe:	440b      	add	r3, r1
 8006e00:	3340      	adds	r3, #64	; 0x40
 8006e02:	781b      	ldrb	r3, [r3, #0]
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d115      	bne.n	8006e34 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8006e08:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	da12      	bge.n	8006e34 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8006e0e:	6879      	ldr	r1, [r7, #4]
 8006e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e12:	4613      	mov	r3, r2
 8006e14:	00db      	lsls	r3, r3, #3
 8006e16:	4413      	add	r3, r2
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	440b      	add	r3, r1
 8006e1c:	333f      	adds	r3, #63	; 0x3f
 8006e1e:	2201      	movs	r2, #1
 8006e20:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8006e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e24:	b2db      	uxtb	r3, r3
 8006e26:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006e2a:	b2db      	uxtb	r3, r3
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 faca 	bl	80073c8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e36:	3301      	adds	r3, #1
 8006e38:	627b      	str	r3, [r7, #36]	; 0x24
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d3ce      	bcc.n	8006de2 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	695a      	ldr	r2, [r3, #20]
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8006e52:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f005 f927 	bl	800c0ac <USB_ReadInterrupts>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006e68:	d155      	bne.n	8006f16 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006e6a:	2301      	movs	r3, #1
 8006e6c:	627b      	str	r3, [r7, #36]	; 0x24
 8006e6e:	e045      	b.n	8006efc <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8006e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e72:	015a      	lsls	r2, r3, #5
 8006e74:	69fb      	ldr	r3, [r7, #28]
 8006e76:	4413      	add	r3, r2
 8006e78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006e80:	6879      	ldr	r1, [r7, #4]
 8006e82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e84:	4613      	mov	r3, r2
 8006e86:	00db      	lsls	r3, r3, #3
 8006e88:	4413      	add	r3, r2
 8006e8a:	009b      	lsls	r3, r3, #2
 8006e8c:	440b      	add	r3, r1
 8006e8e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8006e92:	781b      	ldrb	r3, [r3, #0]
 8006e94:	2b01      	cmp	r3, #1
 8006e96:	d12e      	bne.n	8006ef6 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006e98:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	da2b      	bge.n	8006ef6 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8006eaa:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8006eae:	429a      	cmp	r2, r3
 8006eb0:	d121      	bne.n	8006ef6 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8006eb2:	6879      	ldr	r1, [r7, #4]
 8006eb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006eb6:	4613      	mov	r3, r2
 8006eb8:	00db      	lsls	r3, r3, #3
 8006eba:	4413      	add	r3, r2
 8006ebc:	009b      	lsls	r3, r3, #2
 8006ebe:	440b      	add	r3, r1
 8006ec0:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8006ec4:	2201      	movs	r2, #1
 8006ec6:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8006ec8:	6a3b      	ldr	r3, [r7, #32]
 8006eca:	699b      	ldr	r3, [r3, #24]
 8006ecc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006ed0:	6a3b      	ldr	r3, [r7, #32]
 8006ed2:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8006ed4:	6a3b      	ldr	r3, [r7, #32]
 8006ed6:	695b      	ldr	r3, [r3, #20]
 8006ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d10a      	bne.n	8006ef6 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8006ee0:	69fb      	ldr	r3, [r7, #28]
 8006ee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	69fa      	ldr	r2, [r7, #28]
 8006eea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006eee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006ef2:	6053      	str	r3, [r2, #4]
            break;
 8006ef4:	e007      	b.n	8006f06 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8006ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef8:	3301      	adds	r3, #1
 8006efa:	627b      	str	r3, [r7, #36]	; 0x24
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d3b4      	bcc.n	8006e70 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	695a      	ldr	r2, [r3, #20]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8006f14:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	4618      	mov	r0, r3
 8006f1c:	f005 f8c6 	bl	800c0ac <USB_ReadInterrupts>
 8006f20:	4603      	mov	r3, r0
 8006f22:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8006f26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f2a:	d10a      	bne.n	8006f42 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8006f2c:	6878      	ldr	r0, [r7, #4]
 8006f2e:	f008 f8c1 	bl	800f0b4 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	695a      	ldr	r2, [r3, #20]
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8006f40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4618      	mov	r0, r3
 8006f48:	f005 f8b0 	bl	800c0ac <USB_ReadInterrupts>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	f003 0304 	and.w	r3, r3, #4
 8006f52:	2b04      	cmp	r3, #4
 8006f54:	d115      	bne.n	8006f82 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8006f5e:	69bb      	ldr	r3, [r7, #24]
 8006f60:	f003 0304 	and.w	r3, r3, #4
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d002      	beq.n	8006f6e <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f008 f8b1 	bl	800f0d0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	6859      	ldr	r1, [r3, #4]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	69ba      	ldr	r2, [r7, #24]
 8006f7a:	430a      	orrs	r2, r1
 8006f7c:	605a      	str	r2, [r3, #4]
 8006f7e:	e000      	b.n	8006f82 <HAL_PCD_IRQHandler+0x992>
      return;
 8006f80:	bf00      	nop
    }
  }
}
 8006f82:	3734      	adds	r7, #52	; 0x34
 8006f84:	46bd      	mov	sp, r7
 8006f86:	bd90      	pop	{r4, r7, pc}

08006f88 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	b082      	sub	sp, #8
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
 8006f90:	460b      	mov	r3, r1
 8006f92:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006f9a:	2b01      	cmp	r3, #1
 8006f9c:	d101      	bne.n	8006fa2 <HAL_PCD_SetAddress+0x1a>
 8006f9e:	2302      	movs	r3, #2
 8006fa0:	e013      	b.n	8006fca <HAL_PCD_SetAddress+0x42>
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2201      	movs	r2, #1
 8006fa6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	78fa      	ldrb	r2, [r7, #3]
 8006fae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	78fa      	ldrb	r2, [r7, #3]
 8006fb8:	4611      	mov	r1, r2
 8006fba:	4618      	mov	r0, r3
 8006fbc:	f005 f80e 	bl	800bfdc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006fc8:	2300      	movs	r3, #0
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3708      	adds	r7, #8
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}

08006fd2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006fd2:	b580      	push	{r7, lr}
 8006fd4:	b084      	sub	sp, #16
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	6078      	str	r0, [r7, #4]
 8006fda:	4608      	mov	r0, r1
 8006fdc:	4611      	mov	r1, r2
 8006fde:	461a      	mov	r2, r3
 8006fe0:	4603      	mov	r3, r0
 8006fe2:	70fb      	strb	r3, [r7, #3]
 8006fe4:	460b      	mov	r3, r1
 8006fe6:	803b      	strh	r3, [r7, #0]
 8006fe8:	4613      	mov	r3, r2
 8006fea:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006fec:	2300      	movs	r3, #0
 8006fee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006ff0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	da0f      	bge.n	8007018 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006ff8:	78fb      	ldrb	r3, [r7, #3]
 8006ffa:	f003 020f 	and.w	r2, r3, #15
 8006ffe:	4613      	mov	r3, r2
 8007000:	00db      	lsls	r3, r3, #3
 8007002:	4413      	add	r3, r2
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	3338      	adds	r3, #56	; 0x38
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	4413      	add	r3, r2
 800700c:	3304      	adds	r3, #4
 800700e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	2201      	movs	r2, #1
 8007014:	705a      	strb	r2, [r3, #1]
 8007016:	e00f      	b.n	8007038 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007018:	78fb      	ldrb	r3, [r7, #3]
 800701a:	f003 020f 	and.w	r2, r3, #15
 800701e:	4613      	mov	r3, r2
 8007020:	00db      	lsls	r3, r3, #3
 8007022:	4413      	add	r3, r2
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800702a:	687a      	ldr	r2, [r7, #4]
 800702c:	4413      	add	r3, r2
 800702e:	3304      	adds	r3, #4
 8007030:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	2200      	movs	r2, #0
 8007036:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8007038:	78fb      	ldrb	r3, [r7, #3]
 800703a:	f003 030f 	and.w	r3, r3, #15
 800703e:	b2da      	uxtb	r2, r3
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8007044:	883a      	ldrh	r2, [r7, #0]
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	78ba      	ldrb	r2, [r7, #2]
 800704e:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	785b      	ldrb	r3, [r3, #1]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d004      	beq.n	8007062 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	b29a      	uxth	r2, r3
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8007062:	78bb      	ldrb	r3, [r7, #2]
 8007064:	2b02      	cmp	r3, #2
 8007066:	d102      	bne.n	800706e <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2200      	movs	r2, #0
 800706c:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007074:	2b01      	cmp	r3, #1
 8007076:	d101      	bne.n	800707c <HAL_PCD_EP_Open+0xaa>
 8007078:	2302      	movs	r3, #2
 800707a:	e00e      	b.n	800709a <HAL_PCD_EP_Open+0xc8>
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2201      	movs	r2, #1
 8007080:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	68f9      	ldr	r1, [r7, #12]
 800708a:	4618      	mov	r0, r3
 800708c:	f004 f98e 	bl	800b3ac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8007098:	7afb      	ldrb	r3, [r7, #11]
}
 800709a:	4618      	mov	r0, r3
 800709c:	3710      	adds	r7, #16
 800709e:	46bd      	mov	sp, r7
 80070a0:	bd80      	pop	{r7, pc}

080070a2 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80070a2:	b580      	push	{r7, lr}
 80070a4:	b084      	sub	sp, #16
 80070a6:	af00      	add	r7, sp, #0
 80070a8:	6078      	str	r0, [r7, #4]
 80070aa:	460b      	mov	r3, r1
 80070ac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80070ae:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	da0f      	bge.n	80070d6 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80070b6:	78fb      	ldrb	r3, [r7, #3]
 80070b8:	f003 020f 	and.w	r2, r3, #15
 80070bc:	4613      	mov	r3, r2
 80070be:	00db      	lsls	r3, r3, #3
 80070c0:	4413      	add	r3, r2
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	3338      	adds	r3, #56	; 0x38
 80070c6:	687a      	ldr	r2, [r7, #4]
 80070c8:	4413      	add	r3, r2
 80070ca:	3304      	adds	r3, #4
 80070cc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2201      	movs	r2, #1
 80070d2:	705a      	strb	r2, [r3, #1]
 80070d4:	e00f      	b.n	80070f6 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80070d6:	78fb      	ldrb	r3, [r7, #3]
 80070d8:	f003 020f 	and.w	r2, r3, #15
 80070dc:	4613      	mov	r3, r2
 80070de:	00db      	lsls	r3, r3, #3
 80070e0:	4413      	add	r3, r2
 80070e2:	009b      	lsls	r3, r3, #2
 80070e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80070e8:	687a      	ldr	r2, [r7, #4]
 80070ea:	4413      	add	r3, r2
 80070ec:	3304      	adds	r3, #4
 80070ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	2200      	movs	r2, #0
 80070f4:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 80070f6:	78fb      	ldrb	r3, [r7, #3]
 80070f8:	f003 030f 	and.w	r3, r3, #15
 80070fc:	b2da      	uxtb	r2, r3
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8007108:	2b01      	cmp	r3, #1
 800710a:	d101      	bne.n	8007110 <HAL_PCD_EP_Close+0x6e>
 800710c:	2302      	movs	r3, #2
 800710e:	e00e      	b.n	800712e <HAL_PCD_EP_Close+0x8c>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2201      	movs	r2, #1
 8007114:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	68f9      	ldr	r1, [r7, #12]
 800711e:	4618      	mov	r0, r3
 8007120:	f004 f9cc 	bl	800b4bc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800712c:	2300      	movs	r3, #0
}
 800712e:	4618      	mov	r0, r3
 8007130:	3710      	adds	r7, #16
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}

08007136 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8007136:	b580      	push	{r7, lr}
 8007138:	b086      	sub	sp, #24
 800713a:	af00      	add	r7, sp, #0
 800713c:	60f8      	str	r0, [r7, #12]
 800713e:	607a      	str	r2, [r7, #4]
 8007140:	603b      	str	r3, [r7, #0]
 8007142:	460b      	mov	r3, r1
 8007144:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007146:	7afb      	ldrb	r3, [r7, #11]
 8007148:	f003 020f 	and.w	r2, r3, #15
 800714c:	4613      	mov	r3, r2
 800714e:	00db      	lsls	r3, r3, #3
 8007150:	4413      	add	r3, r2
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007158:	68fa      	ldr	r2, [r7, #12]
 800715a:	4413      	add	r3, r2
 800715c:	3304      	adds	r3, #4
 800715e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	687a      	ldr	r2, [r7, #4]
 8007164:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	683a      	ldr	r2, [r7, #0]
 800716a:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	2200      	movs	r2, #0
 8007170:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	2200      	movs	r2, #0
 8007176:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007178:	7afb      	ldrb	r3, [r7, #11]
 800717a:	f003 030f 	and.w	r3, r3, #15
 800717e:	b2da      	uxtb	r2, r3
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	2b01      	cmp	r3, #1
 800718a:	d102      	bne.n	8007192 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	697b      	ldr	r3, [r7, #20]
 8007190:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6818      	ldr	r0, [r3, #0]
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	68db      	ldr	r3, [r3, #12]
 800719a:	b2db      	uxtb	r3, r3
 800719c:	461a      	mov	r2, r3
 800719e:	6979      	ldr	r1, [r7, #20]
 80071a0:	f004 fa68 	bl	800b674 <USB_EPStartXfer>

  return HAL_OK;
 80071a4:	2300      	movs	r3, #0
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3718      	adds	r7, #24
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}

080071ae <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80071ae:	b480      	push	{r7}
 80071b0:	b083      	sub	sp, #12
 80071b2:	af00      	add	r7, sp, #0
 80071b4:	6078      	str	r0, [r7, #4]
 80071b6:	460b      	mov	r3, r1
 80071b8:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80071ba:	78fb      	ldrb	r3, [r7, #3]
 80071bc:	f003 020f 	and.w	r2, r3, #15
 80071c0:	6879      	ldr	r1, [r7, #4]
 80071c2:	4613      	mov	r3, r2
 80071c4:	00db      	lsls	r3, r3, #3
 80071c6:	4413      	add	r3, r2
 80071c8:	009b      	lsls	r3, r3, #2
 80071ca:	440b      	add	r3, r1
 80071cc:	f503 7324 	add.w	r3, r3, #656	; 0x290
 80071d0:	681b      	ldr	r3, [r3, #0]
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	370c      	adds	r7, #12
 80071d6:	46bd      	mov	sp, r7
 80071d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071dc:	4770      	bx	lr

080071de <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80071de:	b580      	push	{r7, lr}
 80071e0:	b086      	sub	sp, #24
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	60f8      	str	r0, [r7, #12]
 80071e6:	607a      	str	r2, [r7, #4]
 80071e8:	603b      	str	r3, [r7, #0]
 80071ea:	460b      	mov	r3, r1
 80071ec:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80071ee:	7afb      	ldrb	r3, [r7, #11]
 80071f0:	f003 020f 	and.w	r2, r3, #15
 80071f4:	4613      	mov	r3, r2
 80071f6:	00db      	lsls	r3, r3, #3
 80071f8:	4413      	add	r3, r2
 80071fa:	009b      	lsls	r3, r3, #2
 80071fc:	3338      	adds	r3, #56	; 0x38
 80071fe:	68fa      	ldr	r2, [r7, #12]
 8007200:	4413      	add	r3, r2
 8007202:	3304      	adds	r3, #4
 8007204:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	683a      	ldr	r2, [r7, #0]
 8007210:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	2200      	movs	r2, #0
 8007216:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	2201      	movs	r2, #1
 800721c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800721e:	7afb      	ldrb	r3, [r7, #11]
 8007220:	f003 030f 	and.w	r3, r3, #15
 8007224:	b2da      	uxtb	r2, r3
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	68db      	ldr	r3, [r3, #12]
 800722e:	2b01      	cmp	r3, #1
 8007230:	d102      	bne.n	8007238 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	6818      	ldr	r0, [r3, #0]
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	68db      	ldr	r3, [r3, #12]
 8007240:	b2db      	uxtb	r3, r3
 8007242:	461a      	mov	r2, r3
 8007244:	6979      	ldr	r1, [r7, #20]
 8007246:	f004 fa15 	bl	800b674 <USB_EPStartXfer>

  return HAL_OK;
 800724a:	2300      	movs	r3, #0
}
 800724c:	4618      	mov	r0, r3
 800724e:	3718      	adds	r7, #24
 8007250:	46bd      	mov	sp, r7
 8007252:	bd80      	pop	{r7, pc}

08007254 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b084      	sub	sp, #16
 8007258:	af00      	add	r7, sp, #0
 800725a:	6078      	str	r0, [r7, #4]
 800725c:	460b      	mov	r3, r1
 800725e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8007260:	78fb      	ldrb	r3, [r7, #3]
 8007262:	f003 020f 	and.w	r2, r3, #15
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	685b      	ldr	r3, [r3, #4]
 800726a:	429a      	cmp	r2, r3
 800726c:	d901      	bls.n	8007272 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800726e:	2301      	movs	r3, #1
 8007270:	e050      	b.n	8007314 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8007272:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007276:	2b00      	cmp	r3, #0
 8007278:	da0f      	bge.n	800729a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800727a:	78fb      	ldrb	r3, [r7, #3]
 800727c:	f003 020f 	and.w	r2, r3, #15
 8007280:	4613      	mov	r3, r2
 8007282:	00db      	lsls	r3, r3, #3
 8007284:	4413      	add	r3, r2
 8007286:	009b      	lsls	r3, r3, #2
 8007288:	3338      	adds	r3, #56	; 0x38
 800728a:	687a      	ldr	r2, [r7, #4]
 800728c:	4413      	add	r3, r2
 800728e:	3304      	adds	r3, #4
 8007290:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	2201      	movs	r2, #1
 8007296:	705a      	strb	r2, [r3, #1]
 8007298:	e00d      	b.n	80072b6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800729a:	78fa      	ldrb	r2, [r7, #3]
 800729c:	4613      	mov	r3, r2
 800729e:	00db      	lsls	r3, r3, #3
 80072a0:	4413      	add	r3, r2
 80072a2:	009b      	lsls	r3, r3, #2
 80072a4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80072a8:	687a      	ldr	r2, [r7, #4]
 80072aa:	4413      	add	r3, r2
 80072ac:	3304      	adds	r3, #4
 80072ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2200      	movs	r2, #0
 80072b4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2201      	movs	r2, #1
 80072ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80072bc:	78fb      	ldrb	r3, [r7, #3]
 80072be:	f003 030f 	and.w	r3, r3, #15
 80072c2:	b2da      	uxtb	r2, r3
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d101      	bne.n	80072d6 <HAL_PCD_EP_SetStall+0x82>
 80072d2:	2302      	movs	r3, #2
 80072d4:	e01e      	b.n	8007314 <HAL_PCD_EP_SetStall+0xc0>
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2201      	movs	r2, #1
 80072da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	68f9      	ldr	r1, [r7, #12]
 80072e4:	4618      	mov	r0, r3
 80072e6:	f004 fda5 	bl	800be34 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80072ea:	78fb      	ldrb	r3, [r7, #3]
 80072ec:	f003 030f 	and.w	r3, r3, #15
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d10a      	bne.n	800730a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	6818      	ldr	r0, [r3, #0]
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	68db      	ldr	r3, [r3, #12]
 80072fc:	b2d9      	uxtb	r1, r3
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007304:	461a      	mov	r2, r3
 8007306:	f004 ff97 	bl	800c238 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	2200      	movs	r2, #0
 800730e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8007312:	2300      	movs	r3, #0
}
 8007314:	4618      	mov	r0, r3
 8007316:	3710      	adds	r7, #16
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}

0800731c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b084      	sub	sp, #16
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
 8007324:	460b      	mov	r3, r1
 8007326:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8007328:	78fb      	ldrb	r3, [r7, #3]
 800732a:	f003 020f 	and.w	r2, r3, #15
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	685b      	ldr	r3, [r3, #4]
 8007332:	429a      	cmp	r2, r3
 8007334:	d901      	bls.n	800733a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8007336:	2301      	movs	r3, #1
 8007338:	e042      	b.n	80073c0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800733a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800733e:	2b00      	cmp	r3, #0
 8007340:	da0f      	bge.n	8007362 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8007342:	78fb      	ldrb	r3, [r7, #3]
 8007344:	f003 020f 	and.w	r2, r3, #15
 8007348:	4613      	mov	r3, r2
 800734a:	00db      	lsls	r3, r3, #3
 800734c:	4413      	add	r3, r2
 800734e:	009b      	lsls	r3, r3, #2
 8007350:	3338      	adds	r3, #56	; 0x38
 8007352:	687a      	ldr	r2, [r7, #4]
 8007354:	4413      	add	r3, r2
 8007356:	3304      	adds	r3, #4
 8007358:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2201      	movs	r2, #1
 800735e:	705a      	strb	r2, [r3, #1]
 8007360:	e00f      	b.n	8007382 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8007362:	78fb      	ldrb	r3, [r7, #3]
 8007364:	f003 020f 	and.w	r2, r3, #15
 8007368:	4613      	mov	r3, r2
 800736a:	00db      	lsls	r3, r3, #3
 800736c:	4413      	add	r3, r2
 800736e:	009b      	lsls	r3, r3, #2
 8007370:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007374:	687a      	ldr	r2, [r7, #4]
 8007376:	4413      	add	r3, r2
 8007378:	3304      	adds	r3, #4
 800737a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2200      	movs	r2, #0
 8007380:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	2200      	movs	r2, #0
 8007386:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8007388:	78fb      	ldrb	r3, [r7, #3]
 800738a:	f003 030f 	and.w	r3, r3, #15
 800738e:	b2da      	uxtb	r2, r3
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800739a:	2b01      	cmp	r3, #1
 800739c:	d101      	bne.n	80073a2 <HAL_PCD_EP_ClrStall+0x86>
 800739e:	2302      	movs	r3, #2
 80073a0:	e00e      	b.n	80073c0 <HAL_PCD_EP_ClrStall+0xa4>
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	2201      	movs	r2, #1
 80073a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	68f9      	ldr	r1, [r7, #12]
 80073b0:	4618      	mov	r0, r3
 80073b2:	f004 fdad 	bl	800bf10 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	2200      	movs	r2, #0
 80073ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80073be:	2300      	movs	r3, #0
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3710      	adds	r7, #16
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b084      	sub	sp, #16
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
 80073d0:	460b      	mov	r3, r1
 80073d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80073d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	da0c      	bge.n	80073f6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80073dc:	78fb      	ldrb	r3, [r7, #3]
 80073de:	f003 020f 	and.w	r2, r3, #15
 80073e2:	4613      	mov	r3, r2
 80073e4:	00db      	lsls	r3, r3, #3
 80073e6:	4413      	add	r3, r2
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	3338      	adds	r3, #56	; 0x38
 80073ec:	687a      	ldr	r2, [r7, #4]
 80073ee:	4413      	add	r3, r2
 80073f0:	3304      	adds	r3, #4
 80073f2:	60fb      	str	r3, [r7, #12]
 80073f4:	e00c      	b.n	8007410 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80073f6:	78fb      	ldrb	r3, [r7, #3]
 80073f8:	f003 020f 	and.w	r2, r3, #15
 80073fc:	4613      	mov	r3, r2
 80073fe:	00db      	lsls	r3, r3, #3
 8007400:	4413      	add	r3, r2
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007408:	687a      	ldr	r2, [r7, #4]
 800740a:	4413      	add	r3, r2
 800740c:	3304      	adds	r3, #4
 800740e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	68f9      	ldr	r1, [r7, #12]
 8007416:	4618      	mov	r0, r3
 8007418:	f004 fbcc 	bl	800bbb4 <USB_EPStopXfer>
 800741c:	4603      	mov	r3, r0
 800741e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8007420:	7afb      	ldrb	r3, [r7, #11]
}
 8007422:	4618      	mov	r0, r3
 8007424:	3710      	adds	r7, #16
 8007426:	46bd      	mov	sp, r7
 8007428:	bd80      	pop	{r7, pc}

0800742a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800742a:	b580      	push	{r7, lr}
 800742c:	b08a      	sub	sp, #40	; 0x28
 800742e:	af02      	add	r7, sp, #8
 8007430:	6078      	str	r0, [r7, #4]
 8007432:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800743e:	683a      	ldr	r2, [r7, #0]
 8007440:	4613      	mov	r3, r2
 8007442:	00db      	lsls	r3, r3, #3
 8007444:	4413      	add	r3, r2
 8007446:	009b      	lsls	r3, r3, #2
 8007448:	3338      	adds	r3, #56	; 0x38
 800744a:	687a      	ldr	r2, [r7, #4]
 800744c:	4413      	add	r3, r2
 800744e:	3304      	adds	r3, #4
 8007450:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	695a      	ldr	r2, [r3, #20]
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	691b      	ldr	r3, [r3, #16]
 800745a:	429a      	cmp	r2, r3
 800745c:	d901      	bls.n	8007462 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	e06c      	b.n	800753c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	691a      	ldr	r2, [r3, #16]
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	695b      	ldr	r3, [r3, #20]
 800746a:	1ad3      	subs	r3, r2, r3
 800746c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	689b      	ldr	r3, [r3, #8]
 8007472:	69fa      	ldr	r2, [r7, #28]
 8007474:	429a      	cmp	r2, r3
 8007476:	d902      	bls.n	800747e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8007478:	68fb      	ldr	r3, [r7, #12]
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800747e:	69fb      	ldr	r3, [r7, #28]
 8007480:	3303      	adds	r3, #3
 8007482:	089b      	lsrs	r3, r3, #2
 8007484:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8007486:	e02b      	b.n	80074e0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	691a      	ldr	r2, [r3, #16]
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	695b      	ldr	r3, [r3, #20]
 8007490:	1ad3      	subs	r3, r2, r3
 8007492:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	689b      	ldr	r3, [r3, #8]
 8007498:	69fa      	ldr	r2, [r7, #28]
 800749a:	429a      	cmp	r2, r3
 800749c:	d902      	bls.n	80074a4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	689b      	ldr	r3, [r3, #8]
 80074a2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80074a4:	69fb      	ldr	r3, [r7, #28]
 80074a6:	3303      	adds	r3, #3
 80074a8:	089b      	lsrs	r3, r3, #2
 80074aa:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	68d9      	ldr	r1, [r3, #12]
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	b2da      	uxtb	r2, r3
 80074b4:	69fb      	ldr	r3, [r7, #28]
 80074b6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80074bc:	b2db      	uxtb	r3, r3
 80074be:	9300      	str	r3, [sp, #0]
 80074c0:	4603      	mov	r3, r0
 80074c2:	6978      	ldr	r0, [r7, #20]
 80074c4:	f004 fc20 	bl	800bd08 <USB_WritePacket>

    ep->xfer_buff  += len;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	68da      	ldr	r2, [r3, #12]
 80074cc:	69fb      	ldr	r3, [r7, #28]
 80074ce:	441a      	add	r2, r3
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	695a      	ldr	r2, [r3, #20]
 80074d8:	69fb      	ldr	r3, [r7, #28]
 80074da:	441a      	add	r2, r3
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	015a      	lsls	r2, r3, #5
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	4413      	add	r3, r2
 80074e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074ec:	699b      	ldr	r3, [r3, #24]
 80074ee:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80074f0:	69ba      	ldr	r2, [r7, #24]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d809      	bhi.n	800750a <PCD_WriteEmptyTxFifo+0xe0>
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	695a      	ldr	r2, [r3, #20]
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80074fe:	429a      	cmp	r2, r3
 8007500:	d203      	bcs.n	800750a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	691b      	ldr	r3, [r3, #16]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d1be      	bne.n	8007488 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	691a      	ldr	r2, [r3, #16]
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	695b      	ldr	r3, [r3, #20]
 8007512:	429a      	cmp	r2, r3
 8007514:	d811      	bhi.n	800753a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8007516:	683b      	ldr	r3, [r7, #0]
 8007518:	f003 030f 	and.w	r3, r3, #15
 800751c:	2201      	movs	r2, #1
 800751e:	fa02 f303 	lsl.w	r3, r2, r3
 8007522:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800752a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	43db      	mvns	r3, r3
 8007530:	6939      	ldr	r1, [r7, #16]
 8007532:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007536:	4013      	ands	r3, r2
 8007538:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800753a:	2300      	movs	r3, #0
}
 800753c:	4618      	mov	r0, r3
 800753e:	3720      	adds	r7, #32
 8007540:	46bd      	mov	sp, r7
 8007542:	bd80      	pop	{r7, pc}

08007544 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b088      	sub	sp, #32
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
 800754c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007554:	69fb      	ldr	r3, [r7, #28]
 8007556:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007558:	69fb      	ldr	r3, [r7, #28]
 800755a:	333c      	adds	r3, #60	; 0x3c
 800755c:	3304      	adds	r3, #4
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	015a      	lsls	r2, r3, #5
 8007566:	69bb      	ldr	r3, [r7, #24]
 8007568:	4413      	add	r3, r2
 800756a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800756e:	689b      	ldr	r3, [r3, #8]
 8007570:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	68db      	ldr	r3, [r3, #12]
 8007576:	2b01      	cmp	r3, #1
 8007578:	d17b      	bne.n	8007672 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800757a:	693b      	ldr	r3, [r7, #16]
 800757c:	f003 0308 	and.w	r3, r3, #8
 8007580:	2b00      	cmp	r3, #0
 8007582:	d015      	beq.n	80075b0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	4a61      	ldr	r2, [pc, #388]	; (800770c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8007588:	4293      	cmp	r3, r2
 800758a:	f240 80b9 	bls.w	8007700 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007594:	2b00      	cmp	r3, #0
 8007596:	f000 80b3 	beq.w	8007700 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800759a:	683b      	ldr	r3, [r7, #0]
 800759c:	015a      	lsls	r2, r3, #5
 800759e:	69bb      	ldr	r3, [r7, #24]
 80075a0:	4413      	add	r3, r2
 80075a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075a6:	461a      	mov	r2, r3
 80075a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075ac:	6093      	str	r3, [r2, #8]
 80075ae:	e0a7      	b.n	8007700 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	f003 0320 	and.w	r3, r3, #32
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d009      	beq.n	80075ce <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	015a      	lsls	r2, r3, #5
 80075be:	69bb      	ldr	r3, [r7, #24]
 80075c0:	4413      	add	r3, r2
 80075c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075c6:	461a      	mov	r2, r3
 80075c8:	2320      	movs	r3, #32
 80075ca:	6093      	str	r3, [r2, #8]
 80075cc:	e098      	b.n	8007700 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	f040 8093 	bne.w	8007700 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	4a4b      	ldr	r2, [pc, #300]	; (800770c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80075de:	4293      	cmp	r3, r2
 80075e0:	d90f      	bls.n	8007602 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80075e2:	693b      	ldr	r3, [r7, #16]
 80075e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d00a      	beq.n	8007602 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80075ec:	683b      	ldr	r3, [r7, #0]
 80075ee:	015a      	lsls	r2, r3, #5
 80075f0:	69bb      	ldr	r3, [r7, #24]
 80075f2:	4413      	add	r3, r2
 80075f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80075f8:	461a      	mov	r2, r3
 80075fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80075fe:	6093      	str	r3, [r2, #8]
 8007600:	e07e      	b.n	8007700 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8007602:	683a      	ldr	r2, [r7, #0]
 8007604:	4613      	mov	r3, r2
 8007606:	00db      	lsls	r3, r3, #3
 8007608:	4413      	add	r3, r2
 800760a:	009b      	lsls	r3, r3, #2
 800760c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	4413      	add	r3, r2
 8007614:	3304      	adds	r3, #4
 8007616:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	6a1a      	ldr	r2, [r3, #32]
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	0159      	lsls	r1, r3, #5
 8007620:	69bb      	ldr	r3, [r7, #24]
 8007622:	440b      	add	r3, r1
 8007624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007628:	691b      	ldr	r3, [r3, #16]
 800762a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800762e:	1ad2      	subs	r2, r2, r3
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d114      	bne.n	8007664 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	691b      	ldr	r3, [r3, #16]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d109      	bne.n	8007656 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6818      	ldr	r0, [r3, #0]
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800764c:	461a      	mov	r2, r3
 800764e:	2101      	movs	r1, #1
 8007650:	f004 fdf2 	bl	800c238 <USB_EP0_OutStart>
 8007654:	e006      	b.n	8007664 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8007656:	68fb      	ldr	r3, [r7, #12]
 8007658:	68da      	ldr	r2, [r3, #12]
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	695b      	ldr	r3, [r3, #20]
 800765e:	441a      	add	r2, r3
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	b2db      	uxtb	r3, r3
 8007668:	4619      	mov	r1, r3
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f007 fc5e 	bl	800ef2c <HAL_PCD_DataOutStageCallback>
 8007670:	e046      	b.n	8007700 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	4a26      	ldr	r2, [pc, #152]	; (8007710 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8007676:	4293      	cmp	r3, r2
 8007678:	d124      	bne.n	80076c4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007680:	2b00      	cmp	r3, #0
 8007682:	d00a      	beq.n	800769a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007684:	683b      	ldr	r3, [r7, #0]
 8007686:	015a      	lsls	r2, r3, #5
 8007688:	69bb      	ldr	r3, [r7, #24]
 800768a:	4413      	add	r3, r2
 800768c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007690:	461a      	mov	r2, r3
 8007692:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007696:	6093      	str	r3, [r2, #8]
 8007698:	e032      	b.n	8007700 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800769a:	693b      	ldr	r3, [r7, #16]
 800769c:	f003 0320 	and.w	r3, r3, #32
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d008      	beq.n	80076b6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	015a      	lsls	r2, r3, #5
 80076a8:	69bb      	ldr	r3, [r7, #24]
 80076aa:	4413      	add	r3, r2
 80076ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076b0:	461a      	mov	r2, r3
 80076b2:	2320      	movs	r3, #32
 80076b4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80076b6:	683b      	ldr	r3, [r7, #0]
 80076b8:	b2db      	uxtb	r3, r3
 80076ba:	4619      	mov	r1, r3
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f007 fc35 	bl	800ef2c <HAL_PCD_DataOutStageCallback>
 80076c2:	e01d      	b.n	8007700 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d114      	bne.n	80076f4 <PCD_EP_OutXfrComplete_int+0x1b0>
 80076ca:	6879      	ldr	r1, [r7, #4]
 80076cc:	683a      	ldr	r2, [r7, #0]
 80076ce:	4613      	mov	r3, r2
 80076d0:	00db      	lsls	r3, r3, #3
 80076d2:	4413      	add	r3, r2
 80076d4:	009b      	lsls	r3, r3, #2
 80076d6:	440b      	add	r3, r1
 80076d8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d108      	bne.n	80076f4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	6818      	ldr	r0, [r3, #0]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80076ec:	461a      	mov	r2, r3
 80076ee:	2100      	movs	r1, #0
 80076f0:	f004 fda2 	bl	800c238 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80076f4:	683b      	ldr	r3, [r7, #0]
 80076f6:	b2db      	uxtb	r3, r3
 80076f8:	4619      	mov	r1, r3
 80076fa:	6878      	ldr	r0, [r7, #4]
 80076fc:	f007 fc16 	bl	800ef2c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8007700:	2300      	movs	r3, #0
}
 8007702:	4618      	mov	r0, r3
 8007704:	3720      	adds	r7, #32
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}
 800770a:	bf00      	nop
 800770c:	4f54300a 	.word	0x4f54300a
 8007710:	4f54310a 	.word	0x4f54310a

08007714 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8007714:	b580      	push	{r7, lr}
 8007716:	b086      	sub	sp, #24
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
 800771c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007724:	697b      	ldr	r3, [r7, #20]
 8007726:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8007728:	697b      	ldr	r3, [r7, #20]
 800772a:	333c      	adds	r3, #60	; 0x3c
 800772c:	3304      	adds	r3, #4
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	015a      	lsls	r2, r3, #5
 8007736:	693b      	ldr	r3, [r7, #16]
 8007738:	4413      	add	r3, r2
 800773a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800773e:	689b      	ldr	r3, [r3, #8]
 8007740:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	4a15      	ldr	r2, [pc, #84]	; (800779c <PCD_EP_OutSetupPacket_int+0x88>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d90e      	bls.n	8007768 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8007750:	2b00      	cmp	r3, #0
 8007752:	d009      	beq.n	8007768 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	015a      	lsls	r2, r3, #5
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	4413      	add	r3, r2
 800775c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007760:	461a      	mov	r2, r3
 8007762:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007766:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8007768:	6878      	ldr	r0, [r7, #4]
 800776a:	f007 fbcd 	bl	800ef08 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	4a0a      	ldr	r2, [pc, #40]	; (800779c <PCD_EP_OutSetupPacket_int+0x88>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d90c      	bls.n	8007790 <PCD_EP_OutSetupPacket_int+0x7c>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	68db      	ldr	r3, [r3, #12]
 800777a:	2b01      	cmp	r3, #1
 800777c:	d108      	bne.n	8007790 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	6818      	ldr	r0, [r3, #0]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007788:	461a      	mov	r2, r3
 800778a:	2101      	movs	r1, #1
 800778c:	f004 fd54 	bl	800c238 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8007790:	2300      	movs	r3, #0
}
 8007792:	4618      	mov	r0, r3
 8007794:	3718      	adds	r7, #24
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
 800779a:	bf00      	nop
 800779c:	4f54300a 	.word	0x4f54300a

080077a0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b085      	sub	sp, #20
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
 80077a8:	460b      	mov	r3, r1
 80077aa:	70fb      	strb	r3, [r7, #3]
 80077ac:	4613      	mov	r3, r2
 80077ae:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80077b8:	78fb      	ldrb	r3, [r7, #3]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d107      	bne.n	80077ce <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80077be:	883b      	ldrh	r3, [r7, #0]
 80077c0:	0419      	lsls	r1, r3, #16
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	68ba      	ldr	r2, [r7, #8]
 80077c8:	430a      	orrs	r2, r1
 80077ca:	629a      	str	r2, [r3, #40]	; 0x28
 80077cc:	e028      	b.n	8007820 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077d4:	0c1b      	lsrs	r3, r3, #16
 80077d6:	68ba      	ldr	r2, [r7, #8]
 80077d8:	4413      	add	r3, r2
 80077da:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80077dc:	2300      	movs	r3, #0
 80077de:	73fb      	strb	r3, [r7, #15]
 80077e0:	e00d      	b.n	80077fe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681a      	ldr	r2, [r3, #0]
 80077e6:	7bfb      	ldrb	r3, [r7, #15]
 80077e8:	3340      	adds	r3, #64	; 0x40
 80077ea:	009b      	lsls	r3, r3, #2
 80077ec:	4413      	add	r3, r2
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	0c1b      	lsrs	r3, r3, #16
 80077f2:	68ba      	ldr	r2, [r7, #8]
 80077f4:	4413      	add	r3, r2
 80077f6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80077f8:	7bfb      	ldrb	r3, [r7, #15]
 80077fa:	3301      	adds	r3, #1
 80077fc:	73fb      	strb	r3, [r7, #15]
 80077fe:	7bfa      	ldrb	r2, [r7, #15]
 8007800:	78fb      	ldrb	r3, [r7, #3]
 8007802:	3b01      	subs	r3, #1
 8007804:	429a      	cmp	r2, r3
 8007806:	d3ec      	bcc.n	80077e2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8007808:	883b      	ldrh	r3, [r7, #0]
 800780a:	0418      	lsls	r0, r3, #16
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6819      	ldr	r1, [r3, #0]
 8007810:	78fb      	ldrb	r3, [r7, #3]
 8007812:	3b01      	subs	r3, #1
 8007814:	68ba      	ldr	r2, [r7, #8]
 8007816:	4302      	orrs	r2, r0
 8007818:	3340      	adds	r3, #64	; 0x40
 800781a:	009b      	lsls	r3, r3, #2
 800781c:	440b      	add	r3, r1
 800781e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8007820:	2300      	movs	r3, #0
}
 8007822:	4618      	mov	r0, r3
 8007824:	3714      	adds	r7, #20
 8007826:	46bd      	mov	sp, r7
 8007828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782c:	4770      	bx	lr

0800782e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800782e:	b480      	push	{r7}
 8007830:	b083      	sub	sp, #12
 8007832:	af00      	add	r7, sp, #0
 8007834:	6078      	str	r0, [r7, #4]
 8007836:	460b      	mov	r3, r1
 8007838:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	887a      	ldrh	r2, [r7, #2]
 8007840:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8007842:	2300      	movs	r3, #0
}
 8007844:	4618      	mov	r0, r3
 8007846:	370c      	adds	r7, #12
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr

08007850 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8007850:	b480      	push	{r7}
 8007852:	b085      	sub	sp, #20
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2201      	movs	r2, #1
 8007862:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2200      	movs	r2, #0
 800786a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	699b      	ldr	r3, [r3, #24]
 8007872:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800787e:	4b05      	ldr	r3, [pc, #20]	; (8007894 <HAL_PCDEx_ActivateLPM+0x44>)
 8007880:	4313      	orrs	r3, r2
 8007882:	68fa      	ldr	r2, [r7, #12]
 8007884:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8007886:	2300      	movs	r3, #0
}
 8007888:	4618      	mov	r0, r3
 800788a:	3714      	adds	r7, #20
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr
 8007894:	10000003 	.word	0x10000003

08007898 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8007898:	b480      	push	{r7}
 800789a:	b083      	sub	sp, #12
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	460b      	mov	r3, r1
 80078a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80078a4:	bf00      	nop
 80078a6:	370c      	adds	r7, #12
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr

080078b0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b084      	sub	sp, #16
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80078b8:	4b19      	ldr	r3, [pc, #100]	; (8007920 <HAL_PWREx_ConfigSupply+0x70>)
 80078ba:	68db      	ldr	r3, [r3, #12]
 80078bc:	f003 0304 	and.w	r3, r3, #4
 80078c0:	2b04      	cmp	r3, #4
 80078c2:	d00a      	beq.n	80078da <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80078c4:	4b16      	ldr	r3, [pc, #88]	; (8007920 <HAL_PWREx_ConfigSupply+0x70>)
 80078c6:	68db      	ldr	r3, [r3, #12]
 80078c8:	f003 0307 	and.w	r3, r3, #7
 80078cc:	687a      	ldr	r2, [r7, #4]
 80078ce:	429a      	cmp	r2, r3
 80078d0:	d001      	beq.n	80078d6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	e01f      	b.n	8007916 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80078d6:	2300      	movs	r3, #0
 80078d8:	e01d      	b.n	8007916 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80078da:	4b11      	ldr	r3, [pc, #68]	; (8007920 <HAL_PWREx_ConfigSupply+0x70>)
 80078dc:	68db      	ldr	r3, [r3, #12]
 80078de:	f023 0207 	bic.w	r2, r3, #7
 80078e2:	490f      	ldr	r1, [pc, #60]	; (8007920 <HAL_PWREx_ConfigSupply+0x70>)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	4313      	orrs	r3, r2
 80078e8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80078ea:	f7f9 fce3 	bl	80012b4 <HAL_GetTick>
 80078ee:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80078f0:	e009      	b.n	8007906 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80078f2:	f7f9 fcdf 	bl	80012b4 <HAL_GetTick>
 80078f6:	4602      	mov	r2, r0
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	1ad3      	subs	r3, r2, r3
 80078fc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007900:	d901      	bls.n	8007906 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8007902:	2301      	movs	r3, #1
 8007904:	e007      	b.n	8007916 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8007906:	4b06      	ldr	r3, [pc, #24]	; (8007920 <HAL_PWREx_ConfigSupply+0x70>)
 8007908:	685b      	ldr	r3, [r3, #4]
 800790a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800790e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007912:	d1ee      	bne.n	80078f2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8007914:	2300      	movs	r3, #0
}
 8007916:	4618      	mov	r0, r3
 8007918:	3710      	adds	r7, #16
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}
 800791e:	bf00      	nop
 8007920:	58024800 	.word	0x58024800

08007924 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8007924:	b480      	push	{r7}
 8007926:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8007928:	4b05      	ldr	r3, [pc, #20]	; (8007940 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800792a:	68db      	ldr	r3, [r3, #12]
 800792c:	4a04      	ldr	r2, [pc, #16]	; (8007940 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800792e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007932:	60d3      	str	r3, [r2, #12]
}
 8007934:	bf00      	nop
 8007936:	46bd      	mov	sp, r7
 8007938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793c:	4770      	bx	lr
 800793e:	bf00      	nop
 8007940:	58024800 	.word	0x58024800

08007944 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007944:	b580      	push	{r7, lr}
 8007946:	b08c      	sub	sp, #48	; 0x30
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d102      	bne.n	8007958 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	f000 bc48 	b.w	80081e8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	f003 0301 	and.w	r3, r3, #1
 8007960:	2b00      	cmp	r3, #0
 8007962:	f000 8088 	beq.w	8007a76 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007966:	4b99      	ldr	r3, [pc, #612]	; (8007bcc <HAL_RCC_OscConfig+0x288>)
 8007968:	691b      	ldr	r3, [r3, #16]
 800796a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800796e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007970:	4b96      	ldr	r3, [pc, #600]	; (8007bcc <HAL_RCC_OscConfig+0x288>)
 8007972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007974:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8007976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007978:	2b10      	cmp	r3, #16
 800797a:	d007      	beq.n	800798c <HAL_RCC_OscConfig+0x48>
 800797c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800797e:	2b18      	cmp	r3, #24
 8007980:	d111      	bne.n	80079a6 <HAL_RCC_OscConfig+0x62>
 8007982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007984:	f003 0303 	and.w	r3, r3, #3
 8007988:	2b02      	cmp	r3, #2
 800798a:	d10c      	bne.n	80079a6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800798c:	4b8f      	ldr	r3, [pc, #572]	; (8007bcc <HAL_RCC_OscConfig+0x288>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007994:	2b00      	cmp	r3, #0
 8007996:	d06d      	beq.n	8007a74 <HAL_RCC_OscConfig+0x130>
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	685b      	ldr	r3, [r3, #4]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d169      	bne.n	8007a74 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80079a0:	2301      	movs	r3, #1
 80079a2:	f000 bc21 	b.w	80081e8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079ae:	d106      	bne.n	80079be <HAL_RCC_OscConfig+0x7a>
 80079b0:	4b86      	ldr	r3, [pc, #536]	; (8007bcc <HAL_RCC_OscConfig+0x288>)
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	4a85      	ldr	r2, [pc, #532]	; (8007bcc <HAL_RCC_OscConfig+0x288>)
 80079b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079ba:	6013      	str	r3, [r2, #0]
 80079bc:	e02e      	b.n	8007a1c <HAL_RCC_OscConfig+0xd8>
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d10c      	bne.n	80079e0 <HAL_RCC_OscConfig+0x9c>
 80079c6:	4b81      	ldr	r3, [pc, #516]	; (8007bcc <HAL_RCC_OscConfig+0x288>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a80      	ldr	r2, [pc, #512]	; (8007bcc <HAL_RCC_OscConfig+0x288>)
 80079cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80079d0:	6013      	str	r3, [r2, #0]
 80079d2:	4b7e      	ldr	r3, [pc, #504]	; (8007bcc <HAL_RCC_OscConfig+0x288>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	4a7d      	ldr	r2, [pc, #500]	; (8007bcc <HAL_RCC_OscConfig+0x288>)
 80079d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80079dc:	6013      	str	r3, [r2, #0]
 80079de:	e01d      	b.n	8007a1c <HAL_RCC_OscConfig+0xd8>
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80079e8:	d10c      	bne.n	8007a04 <HAL_RCC_OscConfig+0xc0>
 80079ea:	4b78      	ldr	r3, [pc, #480]	; (8007bcc <HAL_RCC_OscConfig+0x288>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a77      	ldr	r2, [pc, #476]	; (8007bcc <HAL_RCC_OscConfig+0x288>)
 80079f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80079f4:	6013      	str	r3, [r2, #0]
 80079f6:	4b75      	ldr	r3, [pc, #468]	; (8007bcc <HAL_RCC_OscConfig+0x288>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4a74      	ldr	r2, [pc, #464]	; (8007bcc <HAL_RCC_OscConfig+0x288>)
 80079fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a00:	6013      	str	r3, [r2, #0]
 8007a02:	e00b      	b.n	8007a1c <HAL_RCC_OscConfig+0xd8>
 8007a04:	4b71      	ldr	r3, [pc, #452]	; (8007bcc <HAL_RCC_OscConfig+0x288>)
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	4a70      	ldr	r2, [pc, #448]	; (8007bcc <HAL_RCC_OscConfig+0x288>)
 8007a0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a0e:	6013      	str	r3, [r2, #0]
 8007a10:	4b6e      	ldr	r3, [pc, #440]	; (8007bcc <HAL_RCC_OscConfig+0x288>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	4a6d      	ldr	r2, [pc, #436]	; (8007bcc <HAL_RCC_OscConfig+0x288>)
 8007a16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	685b      	ldr	r3, [r3, #4]
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d013      	beq.n	8007a4c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a24:	f7f9 fc46 	bl	80012b4 <HAL_GetTick>
 8007a28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007a2a:	e008      	b.n	8007a3e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a2c:	f7f9 fc42 	bl	80012b4 <HAL_GetTick>
 8007a30:	4602      	mov	r2, r0
 8007a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a34:	1ad3      	subs	r3, r2, r3
 8007a36:	2b64      	cmp	r3, #100	; 0x64
 8007a38:	d901      	bls.n	8007a3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007a3a:	2303      	movs	r3, #3
 8007a3c:	e3d4      	b.n	80081e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007a3e:	4b63      	ldr	r3, [pc, #396]	; (8007bcc <HAL_RCC_OscConfig+0x288>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d0f0      	beq.n	8007a2c <HAL_RCC_OscConfig+0xe8>
 8007a4a:	e014      	b.n	8007a76 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a4c:	f7f9 fc32 	bl	80012b4 <HAL_GetTick>
 8007a50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007a52:	e008      	b.n	8007a66 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a54:	f7f9 fc2e 	bl	80012b4 <HAL_GetTick>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a5c:	1ad3      	subs	r3, r2, r3
 8007a5e:	2b64      	cmp	r3, #100	; 0x64
 8007a60:	d901      	bls.n	8007a66 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007a62:	2303      	movs	r3, #3
 8007a64:	e3c0      	b.n	80081e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007a66:	4b59      	ldr	r3, [pc, #356]	; (8007bcc <HAL_RCC_OscConfig+0x288>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d1f0      	bne.n	8007a54 <HAL_RCC_OscConfig+0x110>
 8007a72:	e000      	b.n	8007a76 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f003 0302 	and.w	r3, r3, #2
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	f000 80ca 	beq.w	8007c18 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007a84:	4b51      	ldr	r3, [pc, #324]	; (8007bcc <HAL_RCC_OscConfig+0x288>)
 8007a86:	691b      	ldr	r3, [r3, #16]
 8007a88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007a8c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007a8e:	4b4f      	ldr	r3, [pc, #316]	; (8007bcc <HAL_RCC_OscConfig+0x288>)
 8007a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a92:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8007a94:	6a3b      	ldr	r3, [r7, #32]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d007      	beq.n	8007aaa <HAL_RCC_OscConfig+0x166>
 8007a9a:	6a3b      	ldr	r3, [r7, #32]
 8007a9c:	2b18      	cmp	r3, #24
 8007a9e:	d156      	bne.n	8007b4e <HAL_RCC_OscConfig+0x20a>
 8007aa0:	69fb      	ldr	r3, [r7, #28]
 8007aa2:	f003 0303 	and.w	r3, r3, #3
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d151      	bne.n	8007b4e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007aaa:	4b48      	ldr	r3, [pc, #288]	; (8007bcc <HAL_RCC_OscConfig+0x288>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f003 0304 	and.w	r3, r3, #4
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d005      	beq.n	8007ac2 <HAL_RCC_OscConfig+0x17e>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	68db      	ldr	r3, [r3, #12]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d101      	bne.n	8007ac2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8007abe:	2301      	movs	r3, #1
 8007ac0:	e392      	b.n	80081e8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007ac2:	4b42      	ldr	r3, [pc, #264]	; (8007bcc <HAL_RCC_OscConfig+0x288>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f023 0219 	bic.w	r2, r3, #25
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	68db      	ldr	r3, [r3, #12]
 8007ace:	493f      	ldr	r1, [pc, #252]	; (8007bcc <HAL_RCC_OscConfig+0x288>)
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ad4:	f7f9 fbee 	bl	80012b4 <HAL_GetTick>
 8007ad8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007ada:	e008      	b.n	8007aee <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007adc:	f7f9 fbea 	bl	80012b4 <HAL_GetTick>
 8007ae0:	4602      	mov	r2, r0
 8007ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ae4:	1ad3      	subs	r3, r2, r3
 8007ae6:	2b02      	cmp	r3, #2
 8007ae8:	d901      	bls.n	8007aee <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8007aea:	2303      	movs	r3, #3
 8007aec:	e37c      	b.n	80081e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007aee:	4b37      	ldr	r3, [pc, #220]	; (8007bcc <HAL_RCC_OscConfig+0x288>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	f003 0304 	and.w	r3, r3, #4
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d0f0      	beq.n	8007adc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007afa:	f7f9 fc0b 	bl	8001314 <HAL_GetREVID>
 8007afe:	4603      	mov	r3, r0
 8007b00:	f241 0203 	movw	r2, #4099	; 0x1003
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d817      	bhi.n	8007b38 <HAL_RCC_OscConfig+0x1f4>
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	691b      	ldr	r3, [r3, #16]
 8007b0c:	2b40      	cmp	r3, #64	; 0x40
 8007b0e:	d108      	bne.n	8007b22 <HAL_RCC_OscConfig+0x1de>
 8007b10:	4b2e      	ldr	r3, [pc, #184]	; (8007bcc <HAL_RCC_OscConfig+0x288>)
 8007b12:	685b      	ldr	r3, [r3, #4]
 8007b14:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007b18:	4a2c      	ldr	r2, [pc, #176]	; (8007bcc <HAL_RCC_OscConfig+0x288>)
 8007b1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007b1e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007b20:	e07a      	b.n	8007c18 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b22:	4b2a      	ldr	r3, [pc, #168]	; (8007bcc <HAL_RCC_OscConfig+0x288>)
 8007b24:	685b      	ldr	r3, [r3, #4]
 8007b26:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	691b      	ldr	r3, [r3, #16]
 8007b2e:	031b      	lsls	r3, r3, #12
 8007b30:	4926      	ldr	r1, [pc, #152]	; (8007bcc <HAL_RCC_OscConfig+0x288>)
 8007b32:	4313      	orrs	r3, r2
 8007b34:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007b36:	e06f      	b.n	8007c18 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b38:	4b24      	ldr	r3, [pc, #144]	; (8007bcc <HAL_RCC_OscConfig+0x288>)
 8007b3a:	685b      	ldr	r3, [r3, #4]
 8007b3c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	691b      	ldr	r3, [r3, #16]
 8007b44:	061b      	lsls	r3, r3, #24
 8007b46:	4921      	ldr	r1, [pc, #132]	; (8007bcc <HAL_RCC_OscConfig+0x288>)
 8007b48:	4313      	orrs	r3, r2
 8007b4a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007b4c:	e064      	b.n	8007c18 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	68db      	ldr	r3, [r3, #12]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d047      	beq.n	8007be6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007b56:	4b1d      	ldr	r3, [pc, #116]	; (8007bcc <HAL_RCC_OscConfig+0x288>)
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	f023 0219 	bic.w	r2, r3, #25
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	68db      	ldr	r3, [r3, #12]
 8007b62:	491a      	ldr	r1, [pc, #104]	; (8007bcc <HAL_RCC_OscConfig+0x288>)
 8007b64:	4313      	orrs	r3, r2
 8007b66:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b68:	f7f9 fba4 	bl	80012b4 <HAL_GetTick>
 8007b6c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007b6e:	e008      	b.n	8007b82 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b70:	f7f9 fba0 	bl	80012b4 <HAL_GetTick>
 8007b74:	4602      	mov	r2, r0
 8007b76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b78:	1ad3      	subs	r3, r2, r3
 8007b7a:	2b02      	cmp	r3, #2
 8007b7c:	d901      	bls.n	8007b82 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8007b7e:	2303      	movs	r3, #3
 8007b80:	e332      	b.n	80081e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007b82:	4b12      	ldr	r3, [pc, #72]	; (8007bcc <HAL_RCC_OscConfig+0x288>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f003 0304 	and.w	r3, r3, #4
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d0f0      	beq.n	8007b70 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b8e:	f7f9 fbc1 	bl	8001314 <HAL_GetREVID>
 8007b92:	4603      	mov	r3, r0
 8007b94:	f241 0203 	movw	r2, #4099	; 0x1003
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d819      	bhi.n	8007bd0 <HAL_RCC_OscConfig+0x28c>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	691b      	ldr	r3, [r3, #16]
 8007ba0:	2b40      	cmp	r3, #64	; 0x40
 8007ba2:	d108      	bne.n	8007bb6 <HAL_RCC_OscConfig+0x272>
 8007ba4:	4b09      	ldr	r3, [pc, #36]	; (8007bcc <HAL_RCC_OscConfig+0x288>)
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8007bac:	4a07      	ldr	r2, [pc, #28]	; (8007bcc <HAL_RCC_OscConfig+0x288>)
 8007bae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007bb2:	6053      	str	r3, [r2, #4]
 8007bb4:	e030      	b.n	8007c18 <HAL_RCC_OscConfig+0x2d4>
 8007bb6:	4b05      	ldr	r3, [pc, #20]	; (8007bcc <HAL_RCC_OscConfig+0x288>)
 8007bb8:	685b      	ldr	r3, [r3, #4]
 8007bba:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	691b      	ldr	r3, [r3, #16]
 8007bc2:	031b      	lsls	r3, r3, #12
 8007bc4:	4901      	ldr	r1, [pc, #4]	; (8007bcc <HAL_RCC_OscConfig+0x288>)
 8007bc6:	4313      	orrs	r3, r2
 8007bc8:	604b      	str	r3, [r1, #4]
 8007bca:	e025      	b.n	8007c18 <HAL_RCC_OscConfig+0x2d4>
 8007bcc:	58024400 	.word	0x58024400
 8007bd0:	4b9a      	ldr	r3, [pc, #616]	; (8007e3c <HAL_RCC_OscConfig+0x4f8>)
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	691b      	ldr	r3, [r3, #16]
 8007bdc:	061b      	lsls	r3, r3, #24
 8007bde:	4997      	ldr	r1, [pc, #604]	; (8007e3c <HAL_RCC_OscConfig+0x4f8>)
 8007be0:	4313      	orrs	r3, r2
 8007be2:	604b      	str	r3, [r1, #4]
 8007be4:	e018      	b.n	8007c18 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007be6:	4b95      	ldr	r3, [pc, #596]	; (8007e3c <HAL_RCC_OscConfig+0x4f8>)
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	4a94      	ldr	r2, [pc, #592]	; (8007e3c <HAL_RCC_OscConfig+0x4f8>)
 8007bec:	f023 0301 	bic.w	r3, r3, #1
 8007bf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bf2:	f7f9 fb5f 	bl	80012b4 <HAL_GetTick>
 8007bf6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007bf8:	e008      	b.n	8007c0c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007bfa:	f7f9 fb5b 	bl	80012b4 <HAL_GetTick>
 8007bfe:	4602      	mov	r2, r0
 8007c00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c02:	1ad3      	subs	r3, r2, r3
 8007c04:	2b02      	cmp	r3, #2
 8007c06:	d901      	bls.n	8007c0c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007c08:	2303      	movs	r3, #3
 8007c0a:	e2ed      	b.n	80081e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007c0c:	4b8b      	ldr	r3, [pc, #556]	; (8007e3c <HAL_RCC_OscConfig+0x4f8>)
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f003 0304 	and.w	r3, r3, #4
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d1f0      	bne.n	8007bfa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f003 0310 	and.w	r3, r3, #16
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	f000 80a9 	beq.w	8007d78 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007c26:	4b85      	ldr	r3, [pc, #532]	; (8007e3c <HAL_RCC_OscConfig+0x4f8>)
 8007c28:	691b      	ldr	r3, [r3, #16]
 8007c2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007c2e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007c30:	4b82      	ldr	r3, [pc, #520]	; (8007e3c <HAL_RCC_OscConfig+0x4f8>)
 8007c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c34:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007c36:	69bb      	ldr	r3, [r7, #24]
 8007c38:	2b08      	cmp	r3, #8
 8007c3a:	d007      	beq.n	8007c4c <HAL_RCC_OscConfig+0x308>
 8007c3c:	69bb      	ldr	r3, [r7, #24]
 8007c3e:	2b18      	cmp	r3, #24
 8007c40:	d13a      	bne.n	8007cb8 <HAL_RCC_OscConfig+0x374>
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	f003 0303 	and.w	r3, r3, #3
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d135      	bne.n	8007cb8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007c4c:	4b7b      	ldr	r3, [pc, #492]	; (8007e3c <HAL_RCC_OscConfig+0x4f8>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d005      	beq.n	8007c64 <HAL_RCC_OscConfig+0x320>
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	69db      	ldr	r3, [r3, #28]
 8007c5c:	2b80      	cmp	r3, #128	; 0x80
 8007c5e:	d001      	beq.n	8007c64 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007c60:	2301      	movs	r3, #1
 8007c62:	e2c1      	b.n	80081e8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007c64:	f7f9 fb56 	bl	8001314 <HAL_GetREVID>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	f241 0203 	movw	r2, #4099	; 0x1003
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d817      	bhi.n	8007ca2 <HAL_RCC_OscConfig+0x35e>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6a1b      	ldr	r3, [r3, #32]
 8007c76:	2b20      	cmp	r3, #32
 8007c78:	d108      	bne.n	8007c8c <HAL_RCC_OscConfig+0x348>
 8007c7a:	4b70      	ldr	r3, [pc, #448]	; (8007e3c <HAL_RCC_OscConfig+0x4f8>)
 8007c7c:	685b      	ldr	r3, [r3, #4]
 8007c7e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007c82:	4a6e      	ldr	r2, [pc, #440]	; (8007e3c <HAL_RCC_OscConfig+0x4f8>)
 8007c84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007c88:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007c8a:	e075      	b.n	8007d78 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007c8c:	4b6b      	ldr	r3, [pc, #428]	; (8007e3c <HAL_RCC_OscConfig+0x4f8>)
 8007c8e:	685b      	ldr	r3, [r3, #4]
 8007c90:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	6a1b      	ldr	r3, [r3, #32]
 8007c98:	069b      	lsls	r3, r3, #26
 8007c9a:	4968      	ldr	r1, [pc, #416]	; (8007e3c <HAL_RCC_OscConfig+0x4f8>)
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007ca0:	e06a      	b.n	8007d78 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007ca2:	4b66      	ldr	r3, [pc, #408]	; (8007e3c <HAL_RCC_OscConfig+0x4f8>)
 8007ca4:	68db      	ldr	r3, [r3, #12]
 8007ca6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6a1b      	ldr	r3, [r3, #32]
 8007cae:	061b      	lsls	r3, r3, #24
 8007cb0:	4962      	ldr	r1, [pc, #392]	; (8007e3c <HAL_RCC_OscConfig+0x4f8>)
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007cb6:	e05f      	b.n	8007d78 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	69db      	ldr	r3, [r3, #28]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d042      	beq.n	8007d46 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007cc0:	4b5e      	ldr	r3, [pc, #376]	; (8007e3c <HAL_RCC_OscConfig+0x4f8>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	4a5d      	ldr	r2, [pc, #372]	; (8007e3c <HAL_RCC_OscConfig+0x4f8>)
 8007cc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ccc:	f7f9 faf2 	bl	80012b4 <HAL_GetTick>
 8007cd0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007cd2:	e008      	b.n	8007ce6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007cd4:	f7f9 faee 	bl	80012b4 <HAL_GetTick>
 8007cd8:	4602      	mov	r2, r0
 8007cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cdc:	1ad3      	subs	r3, r2, r3
 8007cde:	2b02      	cmp	r3, #2
 8007ce0:	d901      	bls.n	8007ce6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007ce2:	2303      	movs	r3, #3
 8007ce4:	e280      	b.n	80081e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007ce6:	4b55      	ldr	r3, [pc, #340]	; (8007e3c <HAL_RCC_OscConfig+0x4f8>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d0f0      	beq.n	8007cd4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007cf2:	f7f9 fb0f 	bl	8001314 <HAL_GetREVID>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	f241 0203 	movw	r2, #4099	; 0x1003
 8007cfc:	4293      	cmp	r3, r2
 8007cfe:	d817      	bhi.n	8007d30 <HAL_RCC_OscConfig+0x3ec>
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	6a1b      	ldr	r3, [r3, #32]
 8007d04:	2b20      	cmp	r3, #32
 8007d06:	d108      	bne.n	8007d1a <HAL_RCC_OscConfig+0x3d6>
 8007d08:	4b4c      	ldr	r3, [pc, #304]	; (8007e3c <HAL_RCC_OscConfig+0x4f8>)
 8007d0a:	685b      	ldr	r3, [r3, #4]
 8007d0c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8007d10:	4a4a      	ldr	r2, [pc, #296]	; (8007e3c <HAL_RCC_OscConfig+0x4f8>)
 8007d12:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007d16:	6053      	str	r3, [r2, #4]
 8007d18:	e02e      	b.n	8007d78 <HAL_RCC_OscConfig+0x434>
 8007d1a:	4b48      	ldr	r3, [pc, #288]	; (8007e3c <HAL_RCC_OscConfig+0x4f8>)
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	6a1b      	ldr	r3, [r3, #32]
 8007d26:	069b      	lsls	r3, r3, #26
 8007d28:	4944      	ldr	r1, [pc, #272]	; (8007e3c <HAL_RCC_OscConfig+0x4f8>)
 8007d2a:	4313      	orrs	r3, r2
 8007d2c:	604b      	str	r3, [r1, #4]
 8007d2e:	e023      	b.n	8007d78 <HAL_RCC_OscConfig+0x434>
 8007d30:	4b42      	ldr	r3, [pc, #264]	; (8007e3c <HAL_RCC_OscConfig+0x4f8>)
 8007d32:	68db      	ldr	r3, [r3, #12]
 8007d34:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	6a1b      	ldr	r3, [r3, #32]
 8007d3c:	061b      	lsls	r3, r3, #24
 8007d3e:	493f      	ldr	r1, [pc, #252]	; (8007e3c <HAL_RCC_OscConfig+0x4f8>)
 8007d40:	4313      	orrs	r3, r2
 8007d42:	60cb      	str	r3, [r1, #12]
 8007d44:	e018      	b.n	8007d78 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007d46:	4b3d      	ldr	r3, [pc, #244]	; (8007e3c <HAL_RCC_OscConfig+0x4f8>)
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	4a3c      	ldr	r2, [pc, #240]	; (8007e3c <HAL_RCC_OscConfig+0x4f8>)
 8007d4c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007d50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d52:	f7f9 faaf 	bl	80012b4 <HAL_GetTick>
 8007d56:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007d58:	e008      	b.n	8007d6c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007d5a:	f7f9 faab 	bl	80012b4 <HAL_GetTick>
 8007d5e:	4602      	mov	r2, r0
 8007d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d62:	1ad3      	subs	r3, r2, r3
 8007d64:	2b02      	cmp	r3, #2
 8007d66:	d901      	bls.n	8007d6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007d68:	2303      	movs	r3, #3
 8007d6a:	e23d      	b.n	80081e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007d6c:	4b33      	ldr	r3, [pc, #204]	; (8007e3c <HAL_RCC_OscConfig+0x4f8>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d1f0      	bne.n	8007d5a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f003 0308 	and.w	r3, r3, #8
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d036      	beq.n	8007df2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	695b      	ldr	r3, [r3, #20]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d019      	beq.n	8007dc0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007d8c:	4b2b      	ldr	r3, [pc, #172]	; (8007e3c <HAL_RCC_OscConfig+0x4f8>)
 8007d8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007d90:	4a2a      	ldr	r2, [pc, #168]	; (8007e3c <HAL_RCC_OscConfig+0x4f8>)
 8007d92:	f043 0301 	orr.w	r3, r3, #1
 8007d96:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d98:	f7f9 fa8c 	bl	80012b4 <HAL_GetTick>
 8007d9c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007d9e:	e008      	b.n	8007db2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007da0:	f7f9 fa88 	bl	80012b4 <HAL_GetTick>
 8007da4:	4602      	mov	r2, r0
 8007da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007da8:	1ad3      	subs	r3, r2, r3
 8007daa:	2b02      	cmp	r3, #2
 8007dac:	d901      	bls.n	8007db2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007dae:	2303      	movs	r3, #3
 8007db0:	e21a      	b.n	80081e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007db2:	4b22      	ldr	r3, [pc, #136]	; (8007e3c <HAL_RCC_OscConfig+0x4f8>)
 8007db4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007db6:	f003 0302 	and.w	r3, r3, #2
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d0f0      	beq.n	8007da0 <HAL_RCC_OscConfig+0x45c>
 8007dbe:	e018      	b.n	8007df2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007dc0:	4b1e      	ldr	r3, [pc, #120]	; (8007e3c <HAL_RCC_OscConfig+0x4f8>)
 8007dc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007dc4:	4a1d      	ldr	r2, [pc, #116]	; (8007e3c <HAL_RCC_OscConfig+0x4f8>)
 8007dc6:	f023 0301 	bic.w	r3, r3, #1
 8007dca:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dcc:	f7f9 fa72 	bl	80012b4 <HAL_GetTick>
 8007dd0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007dd2:	e008      	b.n	8007de6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007dd4:	f7f9 fa6e 	bl	80012b4 <HAL_GetTick>
 8007dd8:	4602      	mov	r2, r0
 8007dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ddc:	1ad3      	subs	r3, r2, r3
 8007dde:	2b02      	cmp	r3, #2
 8007de0:	d901      	bls.n	8007de6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007de2:	2303      	movs	r3, #3
 8007de4:	e200      	b.n	80081e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007de6:	4b15      	ldr	r3, [pc, #84]	; (8007e3c <HAL_RCC_OscConfig+0x4f8>)
 8007de8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007dea:	f003 0302 	and.w	r3, r3, #2
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d1f0      	bne.n	8007dd4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	f003 0320 	and.w	r3, r3, #32
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d039      	beq.n	8007e72 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	699b      	ldr	r3, [r3, #24]
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d01c      	beq.n	8007e40 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007e06:	4b0d      	ldr	r3, [pc, #52]	; (8007e3c <HAL_RCC_OscConfig+0x4f8>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	4a0c      	ldr	r2, [pc, #48]	; (8007e3c <HAL_RCC_OscConfig+0x4f8>)
 8007e0c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007e10:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007e12:	f7f9 fa4f 	bl	80012b4 <HAL_GetTick>
 8007e16:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007e18:	e008      	b.n	8007e2c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007e1a:	f7f9 fa4b 	bl	80012b4 <HAL_GetTick>
 8007e1e:	4602      	mov	r2, r0
 8007e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e22:	1ad3      	subs	r3, r2, r3
 8007e24:	2b02      	cmp	r3, #2
 8007e26:	d901      	bls.n	8007e2c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007e28:	2303      	movs	r3, #3
 8007e2a:	e1dd      	b.n	80081e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007e2c:	4b03      	ldr	r3, [pc, #12]	; (8007e3c <HAL_RCC_OscConfig+0x4f8>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d0f0      	beq.n	8007e1a <HAL_RCC_OscConfig+0x4d6>
 8007e38:	e01b      	b.n	8007e72 <HAL_RCC_OscConfig+0x52e>
 8007e3a:	bf00      	nop
 8007e3c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007e40:	4b9b      	ldr	r3, [pc, #620]	; (80080b0 <HAL_RCC_OscConfig+0x76c>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4a9a      	ldr	r2, [pc, #616]	; (80080b0 <HAL_RCC_OscConfig+0x76c>)
 8007e46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007e4a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007e4c:	f7f9 fa32 	bl	80012b4 <HAL_GetTick>
 8007e50:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007e52:	e008      	b.n	8007e66 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007e54:	f7f9 fa2e 	bl	80012b4 <HAL_GetTick>
 8007e58:	4602      	mov	r2, r0
 8007e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e5c:	1ad3      	subs	r3, r2, r3
 8007e5e:	2b02      	cmp	r3, #2
 8007e60:	d901      	bls.n	8007e66 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007e62:	2303      	movs	r3, #3
 8007e64:	e1c0      	b.n	80081e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007e66:	4b92      	ldr	r3, [pc, #584]	; (80080b0 <HAL_RCC_OscConfig+0x76c>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d1f0      	bne.n	8007e54 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f003 0304 	and.w	r3, r3, #4
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	f000 8081 	beq.w	8007f82 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007e80:	4b8c      	ldr	r3, [pc, #560]	; (80080b4 <HAL_RCC_OscConfig+0x770>)
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	4a8b      	ldr	r2, [pc, #556]	; (80080b4 <HAL_RCC_OscConfig+0x770>)
 8007e86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e8a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007e8c:	f7f9 fa12 	bl	80012b4 <HAL_GetTick>
 8007e90:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007e92:	e008      	b.n	8007ea6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007e94:	f7f9 fa0e 	bl	80012b4 <HAL_GetTick>
 8007e98:	4602      	mov	r2, r0
 8007e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e9c:	1ad3      	subs	r3, r2, r3
 8007e9e:	2b64      	cmp	r3, #100	; 0x64
 8007ea0:	d901      	bls.n	8007ea6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007ea2:	2303      	movs	r3, #3
 8007ea4:	e1a0      	b.n	80081e8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007ea6:	4b83      	ldr	r3, [pc, #524]	; (80080b4 <HAL_RCC_OscConfig+0x770>)
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d0f0      	beq.n	8007e94 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	689b      	ldr	r3, [r3, #8]
 8007eb6:	2b01      	cmp	r3, #1
 8007eb8:	d106      	bne.n	8007ec8 <HAL_RCC_OscConfig+0x584>
 8007eba:	4b7d      	ldr	r3, [pc, #500]	; (80080b0 <HAL_RCC_OscConfig+0x76c>)
 8007ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ebe:	4a7c      	ldr	r2, [pc, #496]	; (80080b0 <HAL_RCC_OscConfig+0x76c>)
 8007ec0:	f043 0301 	orr.w	r3, r3, #1
 8007ec4:	6713      	str	r3, [r2, #112]	; 0x70
 8007ec6:	e02d      	b.n	8007f24 <HAL_RCC_OscConfig+0x5e0>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	689b      	ldr	r3, [r3, #8]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d10c      	bne.n	8007eea <HAL_RCC_OscConfig+0x5a6>
 8007ed0:	4b77      	ldr	r3, [pc, #476]	; (80080b0 <HAL_RCC_OscConfig+0x76c>)
 8007ed2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ed4:	4a76      	ldr	r2, [pc, #472]	; (80080b0 <HAL_RCC_OscConfig+0x76c>)
 8007ed6:	f023 0301 	bic.w	r3, r3, #1
 8007eda:	6713      	str	r3, [r2, #112]	; 0x70
 8007edc:	4b74      	ldr	r3, [pc, #464]	; (80080b0 <HAL_RCC_OscConfig+0x76c>)
 8007ede:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ee0:	4a73      	ldr	r2, [pc, #460]	; (80080b0 <HAL_RCC_OscConfig+0x76c>)
 8007ee2:	f023 0304 	bic.w	r3, r3, #4
 8007ee6:	6713      	str	r3, [r2, #112]	; 0x70
 8007ee8:	e01c      	b.n	8007f24 <HAL_RCC_OscConfig+0x5e0>
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	689b      	ldr	r3, [r3, #8]
 8007eee:	2b05      	cmp	r3, #5
 8007ef0:	d10c      	bne.n	8007f0c <HAL_RCC_OscConfig+0x5c8>
 8007ef2:	4b6f      	ldr	r3, [pc, #444]	; (80080b0 <HAL_RCC_OscConfig+0x76c>)
 8007ef4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ef6:	4a6e      	ldr	r2, [pc, #440]	; (80080b0 <HAL_RCC_OscConfig+0x76c>)
 8007ef8:	f043 0304 	orr.w	r3, r3, #4
 8007efc:	6713      	str	r3, [r2, #112]	; 0x70
 8007efe:	4b6c      	ldr	r3, [pc, #432]	; (80080b0 <HAL_RCC_OscConfig+0x76c>)
 8007f00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f02:	4a6b      	ldr	r2, [pc, #428]	; (80080b0 <HAL_RCC_OscConfig+0x76c>)
 8007f04:	f043 0301 	orr.w	r3, r3, #1
 8007f08:	6713      	str	r3, [r2, #112]	; 0x70
 8007f0a:	e00b      	b.n	8007f24 <HAL_RCC_OscConfig+0x5e0>
 8007f0c:	4b68      	ldr	r3, [pc, #416]	; (80080b0 <HAL_RCC_OscConfig+0x76c>)
 8007f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f10:	4a67      	ldr	r2, [pc, #412]	; (80080b0 <HAL_RCC_OscConfig+0x76c>)
 8007f12:	f023 0301 	bic.w	r3, r3, #1
 8007f16:	6713      	str	r3, [r2, #112]	; 0x70
 8007f18:	4b65      	ldr	r3, [pc, #404]	; (80080b0 <HAL_RCC_OscConfig+0x76c>)
 8007f1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f1c:	4a64      	ldr	r2, [pc, #400]	; (80080b0 <HAL_RCC_OscConfig+0x76c>)
 8007f1e:	f023 0304 	bic.w	r3, r3, #4
 8007f22:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	689b      	ldr	r3, [r3, #8]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	d015      	beq.n	8007f58 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f2c:	f7f9 f9c2 	bl	80012b4 <HAL_GetTick>
 8007f30:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007f32:	e00a      	b.n	8007f4a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f34:	f7f9 f9be 	bl	80012b4 <HAL_GetTick>
 8007f38:	4602      	mov	r2, r0
 8007f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3c:	1ad3      	subs	r3, r2, r3
 8007f3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d901      	bls.n	8007f4a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8007f46:	2303      	movs	r3, #3
 8007f48:	e14e      	b.n	80081e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007f4a:	4b59      	ldr	r3, [pc, #356]	; (80080b0 <HAL_RCC_OscConfig+0x76c>)
 8007f4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f4e:	f003 0302 	and.w	r3, r3, #2
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d0ee      	beq.n	8007f34 <HAL_RCC_OscConfig+0x5f0>
 8007f56:	e014      	b.n	8007f82 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f58:	f7f9 f9ac 	bl	80012b4 <HAL_GetTick>
 8007f5c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007f5e:	e00a      	b.n	8007f76 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007f60:	f7f9 f9a8 	bl	80012b4 <HAL_GetTick>
 8007f64:	4602      	mov	r2, r0
 8007f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f68:	1ad3      	subs	r3, r2, r3
 8007f6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d901      	bls.n	8007f76 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007f72:	2303      	movs	r3, #3
 8007f74:	e138      	b.n	80081e8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007f76:	4b4e      	ldr	r3, [pc, #312]	; (80080b0 <HAL_RCC_OscConfig+0x76c>)
 8007f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f7a:	f003 0302 	and.w	r3, r3, #2
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d1ee      	bne.n	8007f60 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	f000 812d 	beq.w	80081e6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007f8c:	4b48      	ldr	r3, [pc, #288]	; (80080b0 <HAL_RCC_OscConfig+0x76c>)
 8007f8e:	691b      	ldr	r3, [r3, #16]
 8007f90:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007f94:	2b18      	cmp	r3, #24
 8007f96:	f000 80bd 	beq.w	8008114 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f9e:	2b02      	cmp	r3, #2
 8007fa0:	f040 809e 	bne.w	80080e0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007fa4:	4b42      	ldr	r3, [pc, #264]	; (80080b0 <HAL_RCC_OscConfig+0x76c>)
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a41      	ldr	r2, [pc, #260]	; (80080b0 <HAL_RCC_OscConfig+0x76c>)
 8007faa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007fae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fb0:	f7f9 f980 	bl	80012b4 <HAL_GetTick>
 8007fb4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007fb6:	e008      	b.n	8007fca <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007fb8:	f7f9 f97c 	bl	80012b4 <HAL_GetTick>
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fc0:	1ad3      	subs	r3, r2, r3
 8007fc2:	2b02      	cmp	r3, #2
 8007fc4:	d901      	bls.n	8007fca <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007fc6:	2303      	movs	r3, #3
 8007fc8:	e10e      	b.n	80081e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007fca:	4b39      	ldr	r3, [pc, #228]	; (80080b0 <HAL_RCC_OscConfig+0x76c>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d1f0      	bne.n	8007fb8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007fd6:	4b36      	ldr	r3, [pc, #216]	; (80080b0 <HAL_RCC_OscConfig+0x76c>)
 8007fd8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007fda:	4b37      	ldr	r3, [pc, #220]	; (80080b8 <HAL_RCC_OscConfig+0x774>)
 8007fdc:	4013      	ands	r3, r2
 8007fde:	687a      	ldr	r2, [r7, #4]
 8007fe0:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8007fe6:	0112      	lsls	r2, r2, #4
 8007fe8:	430a      	orrs	r2, r1
 8007fea:	4931      	ldr	r1, [pc, #196]	; (80080b0 <HAL_RCC_OscConfig+0x76c>)
 8007fec:	4313      	orrs	r3, r2
 8007fee:	628b      	str	r3, [r1, #40]	; 0x28
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ff4:	3b01      	subs	r3, #1
 8007ff6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ffe:	3b01      	subs	r3, #1
 8008000:	025b      	lsls	r3, r3, #9
 8008002:	b29b      	uxth	r3, r3
 8008004:	431a      	orrs	r2, r3
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800800a:	3b01      	subs	r3, #1
 800800c:	041b      	lsls	r3, r3, #16
 800800e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008012:	431a      	orrs	r2, r3
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008018:	3b01      	subs	r3, #1
 800801a:	061b      	lsls	r3, r3, #24
 800801c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008020:	4923      	ldr	r1, [pc, #140]	; (80080b0 <HAL_RCC_OscConfig+0x76c>)
 8008022:	4313      	orrs	r3, r2
 8008024:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008026:	4b22      	ldr	r3, [pc, #136]	; (80080b0 <HAL_RCC_OscConfig+0x76c>)
 8008028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800802a:	4a21      	ldr	r2, [pc, #132]	; (80080b0 <HAL_RCC_OscConfig+0x76c>)
 800802c:	f023 0301 	bic.w	r3, r3, #1
 8008030:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008032:	4b1f      	ldr	r3, [pc, #124]	; (80080b0 <HAL_RCC_OscConfig+0x76c>)
 8008034:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008036:	4b21      	ldr	r3, [pc, #132]	; (80080bc <HAL_RCC_OscConfig+0x778>)
 8008038:	4013      	ands	r3, r2
 800803a:	687a      	ldr	r2, [r7, #4]
 800803c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800803e:	00d2      	lsls	r2, r2, #3
 8008040:	491b      	ldr	r1, [pc, #108]	; (80080b0 <HAL_RCC_OscConfig+0x76c>)
 8008042:	4313      	orrs	r3, r2
 8008044:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008046:	4b1a      	ldr	r3, [pc, #104]	; (80080b0 <HAL_RCC_OscConfig+0x76c>)
 8008048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800804a:	f023 020c 	bic.w	r2, r3, #12
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008052:	4917      	ldr	r1, [pc, #92]	; (80080b0 <HAL_RCC_OscConfig+0x76c>)
 8008054:	4313      	orrs	r3, r2
 8008056:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008058:	4b15      	ldr	r3, [pc, #84]	; (80080b0 <HAL_RCC_OscConfig+0x76c>)
 800805a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800805c:	f023 0202 	bic.w	r2, r3, #2
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008064:	4912      	ldr	r1, [pc, #72]	; (80080b0 <HAL_RCC_OscConfig+0x76c>)
 8008066:	4313      	orrs	r3, r2
 8008068:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800806a:	4b11      	ldr	r3, [pc, #68]	; (80080b0 <HAL_RCC_OscConfig+0x76c>)
 800806c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800806e:	4a10      	ldr	r2, [pc, #64]	; (80080b0 <HAL_RCC_OscConfig+0x76c>)
 8008070:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008074:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008076:	4b0e      	ldr	r3, [pc, #56]	; (80080b0 <HAL_RCC_OscConfig+0x76c>)
 8008078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800807a:	4a0d      	ldr	r2, [pc, #52]	; (80080b0 <HAL_RCC_OscConfig+0x76c>)
 800807c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008080:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008082:	4b0b      	ldr	r3, [pc, #44]	; (80080b0 <HAL_RCC_OscConfig+0x76c>)
 8008084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008086:	4a0a      	ldr	r2, [pc, #40]	; (80080b0 <HAL_RCC_OscConfig+0x76c>)
 8008088:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800808c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800808e:	4b08      	ldr	r3, [pc, #32]	; (80080b0 <HAL_RCC_OscConfig+0x76c>)
 8008090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008092:	4a07      	ldr	r2, [pc, #28]	; (80080b0 <HAL_RCC_OscConfig+0x76c>)
 8008094:	f043 0301 	orr.w	r3, r3, #1
 8008098:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800809a:	4b05      	ldr	r3, [pc, #20]	; (80080b0 <HAL_RCC_OscConfig+0x76c>)
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	4a04      	ldr	r2, [pc, #16]	; (80080b0 <HAL_RCC_OscConfig+0x76c>)
 80080a0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80080a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080a6:	f7f9 f905 	bl	80012b4 <HAL_GetTick>
 80080aa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80080ac:	e011      	b.n	80080d2 <HAL_RCC_OscConfig+0x78e>
 80080ae:	bf00      	nop
 80080b0:	58024400 	.word	0x58024400
 80080b4:	58024800 	.word	0x58024800
 80080b8:	fffffc0c 	.word	0xfffffc0c
 80080bc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80080c0:	f7f9 f8f8 	bl	80012b4 <HAL_GetTick>
 80080c4:	4602      	mov	r2, r0
 80080c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c8:	1ad3      	subs	r3, r2, r3
 80080ca:	2b02      	cmp	r3, #2
 80080cc:	d901      	bls.n	80080d2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80080ce:	2303      	movs	r3, #3
 80080d0:	e08a      	b.n	80081e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80080d2:	4b47      	ldr	r3, [pc, #284]	; (80081f0 <HAL_RCC_OscConfig+0x8ac>)
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d0f0      	beq.n	80080c0 <HAL_RCC_OscConfig+0x77c>
 80080de:	e082      	b.n	80081e6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80080e0:	4b43      	ldr	r3, [pc, #268]	; (80081f0 <HAL_RCC_OscConfig+0x8ac>)
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	4a42      	ldr	r2, [pc, #264]	; (80081f0 <HAL_RCC_OscConfig+0x8ac>)
 80080e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80080ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80080ec:	f7f9 f8e2 	bl	80012b4 <HAL_GetTick>
 80080f0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80080f2:	e008      	b.n	8008106 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80080f4:	f7f9 f8de 	bl	80012b4 <HAL_GetTick>
 80080f8:	4602      	mov	r2, r0
 80080fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080fc:	1ad3      	subs	r3, r2, r3
 80080fe:	2b02      	cmp	r3, #2
 8008100:	d901      	bls.n	8008106 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008102:	2303      	movs	r3, #3
 8008104:	e070      	b.n	80081e8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008106:	4b3a      	ldr	r3, [pc, #232]	; (80081f0 <HAL_RCC_OscConfig+0x8ac>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800810e:	2b00      	cmp	r3, #0
 8008110:	d1f0      	bne.n	80080f4 <HAL_RCC_OscConfig+0x7b0>
 8008112:	e068      	b.n	80081e6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008114:	4b36      	ldr	r3, [pc, #216]	; (80081f0 <HAL_RCC_OscConfig+0x8ac>)
 8008116:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008118:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800811a:	4b35      	ldr	r3, [pc, #212]	; (80081f0 <HAL_RCC_OscConfig+0x8ac>)
 800811c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800811e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008124:	2b01      	cmp	r3, #1
 8008126:	d031      	beq.n	800818c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008128:	693b      	ldr	r3, [r7, #16]
 800812a:	f003 0203 	and.w	r2, r3, #3
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008132:	429a      	cmp	r2, r3
 8008134:	d12a      	bne.n	800818c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008136:	693b      	ldr	r3, [r7, #16]
 8008138:	091b      	lsrs	r3, r3, #4
 800813a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008142:	429a      	cmp	r2, r3
 8008144:	d122      	bne.n	800818c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008150:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008152:	429a      	cmp	r2, r3
 8008154:	d11a      	bne.n	800818c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	0a5b      	lsrs	r3, r3, #9
 800815a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008162:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8008164:	429a      	cmp	r2, r3
 8008166:	d111      	bne.n	800818c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	0c1b      	lsrs	r3, r3, #16
 800816c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008174:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8008176:	429a      	cmp	r2, r3
 8008178:	d108      	bne.n	800818c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	0e1b      	lsrs	r3, r3, #24
 800817e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008186:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008188:	429a      	cmp	r2, r3
 800818a:	d001      	beq.n	8008190 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800818c:	2301      	movs	r3, #1
 800818e:	e02b      	b.n	80081e8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008190:	4b17      	ldr	r3, [pc, #92]	; (80081f0 <HAL_RCC_OscConfig+0x8ac>)
 8008192:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008194:	08db      	lsrs	r3, r3, #3
 8008196:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800819a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80081a0:	693a      	ldr	r2, [r7, #16]
 80081a2:	429a      	cmp	r2, r3
 80081a4:	d01f      	beq.n	80081e6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80081a6:	4b12      	ldr	r3, [pc, #72]	; (80081f0 <HAL_RCC_OscConfig+0x8ac>)
 80081a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081aa:	4a11      	ldr	r2, [pc, #68]	; (80081f0 <HAL_RCC_OscConfig+0x8ac>)
 80081ac:	f023 0301 	bic.w	r3, r3, #1
 80081b0:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80081b2:	f7f9 f87f 	bl	80012b4 <HAL_GetTick>
 80081b6:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80081b8:	bf00      	nop
 80081ba:	f7f9 f87b 	bl	80012b4 <HAL_GetTick>
 80081be:	4602      	mov	r2, r0
 80081c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d0f9      	beq.n	80081ba <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80081c6:	4b0a      	ldr	r3, [pc, #40]	; (80081f0 <HAL_RCC_OscConfig+0x8ac>)
 80081c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081ca:	4b0a      	ldr	r3, [pc, #40]	; (80081f4 <HAL_RCC_OscConfig+0x8b0>)
 80081cc:	4013      	ands	r3, r2
 80081ce:	687a      	ldr	r2, [r7, #4]
 80081d0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80081d2:	00d2      	lsls	r2, r2, #3
 80081d4:	4906      	ldr	r1, [pc, #24]	; (80081f0 <HAL_RCC_OscConfig+0x8ac>)
 80081d6:	4313      	orrs	r3, r2
 80081d8:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80081da:	4b05      	ldr	r3, [pc, #20]	; (80081f0 <HAL_RCC_OscConfig+0x8ac>)
 80081dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081de:	4a04      	ldr	r2, [pc, #16]	; (80081f0 <HAL_RCC_OscConfig+0x8ac>)
 80081e0:	f043 0301 	orr.w	r3, r3, #1
 80081e4:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80081e6:	2300      	movs	r3, #0
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3730      	adds	r7, #48	; 0x30
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}
 80081f0:	58024400 	.word	0x58024400
 80081f4:	ffff0007 	.word	0xffff0007

080081f8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b086      	sub	sp, #24
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
 8008200:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d101      	bne.n	800820c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008208:	2301      	movs	r3, #1
 800820a:	e19c      	b.n	8008546 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800820c:	4b8a      	ldr	r3, [pc, #552]	; (8008438 <HAL_RCC_ClockConfig+0x240>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	f003 030f 	and.w	r3, r3, #15
 8008214:	683a      	ldr	r2, [r7, #0]
 8008216:	429a      	cmp	r2, r3
 8008218:	d910      	bls.n	800823c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800821a:	4b87      	ldr	r3, [pc, #540]	; (8008438 <HAL_RCC_ClockConfig+0x240>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f023 020f 	bic.w	r2, r3, #15
 8008222:	4985      	ldr	r1, [pc, #532]	; (8008438 <HAL_RCC_ClockConfig+0x240>)
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	4313      	orrs	r3, r2
 8008228:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800822a:	4b83      	ldr	r3, [pc, #524]	; (8008438 <HAL_RCC_ClockConfig+0x240>)
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f003 030f 	and.w	r3, r3, #15
 8008232:	683a      	ldr	r2, [r7, #0]
 8008234:	429a      	cmp	r2, r3
 8008236:	d001      	beq.n	800823c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008238:	2301      	movs	r3, #1
 800823a:	e184      	b.n	8008546 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	f003 0304 	and.w	r3, r3, #4
 8008244:	2b00      	cmp	r3, #0
 8008246:	d010      	beq.n	800826a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	691a      	ldr	r2, [r3, #16]
 800824c:	4b7b      	ldr	r3, [pc, #492]	; (800843c <HAL_RCC_ClockConfig+0x244>)
 800824e:	699b      	ldr	r3, [r3, #24]
 8008250:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008254:	429a      	cmp	r2, r3
 8008256:	d908      	bls.n	800826a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008258:	4b78      	ldr	r3, [pc, #480]	; (800843c <HAL_RCC_ClockConfig+0x244>)
 800825a:	699b      	ldr	r3, [r3, #24]
 800825c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	691b      	ldr	r3, [r3, #16]
 8008264:	4975      	ldr	r1, [pc, #468]	; (800843c <HAL_RCC_ClockConfig+0x244>)
 8008266:	4313      	orrs	r3, r2
 8008268:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f003 0308 	and.w	r3, r3, #8
 8008272:	2b00      	cmp	r3, #0
 8008274:	d010      	beq.n	8008298 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	695a      	ldr	r2, [r3, #20]
 800827a:	4b70      	ldr	r3, [pc, #448]	; (800843c <HAL_RCC_ClockConfig+0x244>)
 800827c:	69db      	ldr	r3, [r3, #28]
 800827e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008282:	429a      	cmp	r2, r3
 8008284:	d908      	bls.n	8008298 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008286:	4b6d      	ldr	r3, [pc, #436]	; (800843c <HAL_RCC_ClockConfig+0x244>)
 8008288:	69db      	ldr	r3, [r3, #28]
 800828a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	695b      	ldr	r3, [r3, #20]
 8008292:	496a      	ldr	r1, [pc, #424]	; (800843c <HAL_RCC_ClockConfig+0x244>)
 8008294:	4313      	orrs	r3, r2
 8008296:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f003 0310 	and.w	r3, r3, #16
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d010      	beq.n	80082c6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	699a      	ldr	r2, [r3, #24]
 80082a8:	4b64      	ldr	r3, [pc, #400]	; (800843c <HAL_RCC_ClockConfig+0x244>)
 80082aa:	69db      	ldr	r3, [r3, #28]
 80082ac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80082b0:	429a      	cmp	r2, r3
 80082b2:	d908      	bls.n	80082c6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80082b4:	4b61      	ldr	r3, [pc, #388]	; (800843c <HAL_RCC_ClockConfig+0x244>)
 80082b6:	69db      	ldr	r3, [r3, #28]
 80082b8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	699b      	ldr	r3, [r3, #24]
 80082c0:	495e      	ldr	r1, [pc, #376]	; (800843c <HAL_RCC_ClockConfig+0x244>)
 80082c2:	4313      	orrs	r3, r2
 80082c4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f003 0320 	and.w	r3, r3, #32
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d010      	beq.n	80082f4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	69da      	ldr	r2, [r3, #28]
 80082d6:	4b59      	ldr	r3, [pc, #356]	; (800843c <HAL_RCC_ClockConfig+0x244>)
 80082d8:	6a1b      	ldr	r3, [r3, #32]
 80082da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80082de:	429a      	cmp	r2, r3
 80082e0:	d908      	bls.n	80082f4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80082e2:	4b56      	ldr	r3, [pc, #344]	; (800843c <HAL_RCC_ClockConfig+0x244>)
 80082e4:	6a1b      	ldr	r3, [r3, #32]
 80082e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	69db      	ldr	r3, [r3, #28]
 80082ee:	4953      	ldr	r1, [pc, #332]	; (800843c <HAL_RCC_ClockConfig+0x244>)
 80082f0:	4313      	orrs	r3, r2
 80082f2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f003 0302 	and.w	r3, r3, #2
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d010      	beq.n	8008322 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	68da      	ldr	r2, [r3, #12]
 8008304:	4b4d      	ldr	r3, [pc, #308]	; (800843c <HAL_RCC_ClockConfig+0x244>)
 8008306:	699b      	ldr	r3, [r3, #24]
 8008308:	f003 030f 	and.w	r3, r3, #15
 800830c:	429a      	cmp	r2, r3
 800830e:	d908      	bls.n	8008322 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008310:	4b4a      	ldr	r3, [pc, #296]	; (800843c <HAL_RCC_ClockConfig+0x244>)
 8008312:	699b      	ldr	r3, [r3, #24]
 8008314:	f023 020f 	bic.w	r2, r3, #15
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	68db      	ldr	r3, [r3, #12]
 800831c:	4947      	ldr	r1, [pc, #284]	; (800843c <HAL_RCC_ClockConfig+0x244>)
 800831e:	4313      	orrs	r3, r2
 8008320:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	f003 0301 	and.w	r3, r3, #1
 800832a:	2b00      	cmp	r3, #0
 800832c:	d055      	beq.n	80083da <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800832e:	4b43      	ldr	r3, [pc, #268]	; (800843c <HAL_RCC_ClockConfig+0x244>)
 8008330:	699b      	ldr	r3, [r3, #24]
 8008332:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	4940      	ldr	r1, [pc, #256]	; (800843c <HAL_RCC_ClockConfig+0x244>)
 800833c:	4313      	orrs	r3, r2
 800833e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	2b02      	cmp	r3, #2
 8008346:	d107      	bne.n	8008358 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008348:	4b3c      	ldr	r3, [pc, #240]	; (800843c <HAL_RCC_ClockConfig+0x244>)
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008350:	2b00      	cmp	r3, #0
 8008352:	d121      	bne.n	8008398 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008354:	2301      	movs	r3, #1
 8008356:	e0f6      	b.n	8008546 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	2b03      	cmp	r3, #3
 800835e:	d107      	bne.n	8008370 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008360:	4b36      	ldr	r3, [pc, #216]	; (800843c <HAL_RCC_ClockConfig+0x244>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008368:	2b00      	cmp	r3, #0
 800836a:	d115      	bne.n	8008398 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800836c:	2301      	movs	r3, #1
 800836e:	e0ea      	b.n	8008546 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	685b      	ldr	r3, [r3, #4]
 8008374:	2b01      	cmp	r3, #1
 8008376:	d107      	bne.n	8008388 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008378:	4b30      	ldr	r3, [pc, #192]	; (800843c <HAL_RCC_ClockConfig+0x244>)
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008380:	2b00      	cmp	r3, #0
 8008382:	d109      	bne.n	8008398 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008384:	2301      	movs	r3, #1
 8008386:	e0de      	b.n	8008546 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008388:	4b2c      	ldr	r3, [pc, #176]	; (800843c <HAL_RCC_ClockConfig+0x244>)
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f003 0304 	and.w	r3, r3, #4
 8008390:	2b00      	cmp	r3, #0
 8008392:	d101      	bne.n	8008398 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008394:	2301      	movs	r3, #1
 8008396:	e0d6      	b.n	8008546 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008398:	4b28      	ldr	r3, [pc, #160]	; (800843c <HAL_RCC_ClockConfig+0x244>)
 800839a:	691b      	ldr	r3, [r3, #16]
 800839c:	f023 0207 	bic.w	r2, r3, #7
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	685b      	ldr	r3, [r3, #4]
 80083a4:	4925      	ldr	r1, [pc, #148]	; (800843c <HAL_RCC_ClockConfig+0x244>)
 80083a6:	4313      	orrs	r3, r2
 80083a8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083aa:	f7f8 ff83 	bl	80012b4 <HAL_GetTick>
 80083ae:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083b0:	e00a      	b.n	80083c8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80083b2:	f7f8 ff7f 	bl	80012b4 <HAL_GetTick>
 80083b6:	4602      	mov	r2, r0
 80083b8:	697b      	ldr	r3, [r7, #20]
 80083ba:	1ad3      	subs	r3, r2, r3
 80083bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80083c0:	4293      	cmp	r3, r2
 80083c2:	d901      	bls.n	80083c8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80083c4:	2303      	movs	r3, #3
 80083c6:	e0be      	b.n	8008546 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80083c8:	4b1c      	ldr	r3, [pc, #112]	; (800843c <HAL_RCC_ClockConfig+0x244>)
 80083ca:	691b      	ldr	r3, [r3, #16]
 80083cc:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	685b      	ldr	r3, [r3, #4]
 80083d4:	00db      	lsls	r3, r3, #3
 80083d6:	429a      	cmp	r2, r3
 80083d8:	d1eb      	bne.n	80083b2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	f003 0302 	and.w	r3, r3, #2
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d010      	beq.n	8008408 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	68da      	ldr	r2, [r3, #12]
 80083ea:	4b14      	ldr	r3, [pc, #80]	; (800843c <HAL_RCC_ClockConfig+0x244>)
 80083ec:	699b      	ldr	r3, [r3, #24]
 80083ee:	f003 030f 	and.w	r3, r3, #15
 80083f2:	429a      	cmp	r2, r3
 80083f4:	d208      	bcs.n	8008408 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80083f6:	4b11      	ldr	r3, [pc, #68]	; (800843c <HAL_RCC_ClockConfig+0x244>)
 80083f8:	699b      	ldr	r3, [r3, #24]
 80083fa:	f023 020f 	bic.w	r2, r3, #15
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	68db      	ldr	r3, [r3, #12]
 8008402:	490e      	ldr	r1, [pc, #56]	; (800843c <HAL_RCC_ClockConfig+0x244>)
 8008404:	4313      	orrs	r3, r2
 8008406:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008408:	4b0b      	ldr	r3, [pc, #44]	; (8008438 <HAL_RCC_ClockConfig+0x240>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	f003 030f 	and.w	r3, r3, #15
 8008410:	683a      	ldr	r2, [r7, #0]
 8008412:	429a      	cmp	r2, r3
 8008414:	d214      	bcs.n	8008440 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008416:	4b08      	ldr	r3, [pc, #32]	; (8008438 <HAL_RCC_ClockConfig+0x240>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f023 020f 	bic.w	r2, r3, #15
 800841e:	4906      	ldr	r1, [pc, #24]	; (8008438 <HAL_RCC_ClockConfig+0x240>)
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	4313      	orrs	r3, r2
 8008424:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008426:	4b04      	ldr	r3, [pc, #16]	; (8008438 <HAL_RCC_ClockConfig+0x240>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	f003 030f 	and.w	r3, r3, #15
 800842e:	683a      	ldr	r2, [r7, #0]
 8008430:	429a      	cmp	r2, r3
 8008432:	d005      	beq.n	8008440 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8008434:	2301      	movs	r3, #1
 8008436:	e086      	b.n	8008546 <HAL_RCC_ClockConfig+0x34e>
 8008438:	52002000 	.word	0x52002000
 800843c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f003 0304 	and.w	r3, r3, #4
 8008448:	2b00      	cmp	r3, #0
 800844a:	d010      	beq.n	800846e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	691a      	ldr	r2, [r3, #16]
 8008450:	4b3f      	ldr	r3, [pc, #252]	; (8008550 <HAL_RCC_ClockConfig+0x358>)
 8008452:	699b      	ldr	r3, [r3, #24]
 8008454:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008458:	429a      	cmp	r2, r3
 800845a:	d208      	bcs.n	800846e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800845c:	4b3c      	ldr	r3, [pc, #240]	; (8008550 <HAL_RCC_ClockConfig+0x358>)
 800845e:	699b      	ldr	r3, [r3, #24]
 8008460:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	691b      	ldr	r3, [r3, #16]
 8008468:	4939      	ldr	r1, [pc, #228]	; (8008550 <HAL_RCC_ClockConfig+0x358>)
 800846a:	4313      	orrs	r3, r2
 800846c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	f003 0308 	and.w	r3, r3, #8
 8008476:	2b00      	cmp	r3, #0
 8008478:	d010      	beq.n	800849c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	695a      	ldr	r2, [r3, #20]
 800847e:	4b34      	ldr	r3, [pc, #208]	; (8008550 <HAL_RCC_ClockConfig+0x358>)
 8008480:	69db      	ldr	r3, [r3, #28]
 8008482:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8008486:	429a      	cmp	r2, r3
 8008488:	d208      	bcs.n	800849c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800848a:	4b31      	ldr	r3, [pc, #196]	; (8008550 <HAL_RCC_ClockConfig+0x358>)
 800848c:	69db      	ldr	r3, [r3, #28]
 800848e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	695b      	ldr	r3, [r3, #20]
 8008496:	492e      	ldr	r1, [pc, #184]	; (8008550 <HAL_RCC_ClockConfig+0x358>)
 8008498:	4313      	orrs	r3, r2
 800849a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f003 0310 	and.w	r3, r3, #16
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d010      	beq.n	80084ca <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	699a      	ldr	r2, [r3, #24]
 80084ac:	4b28      	ldr	r3, [pc, #160]	; (8008550 <HAL_RCC_ClockConfig+0x358>)
 80084ae:	69db      	ldr	r3, [r3, #28]
 80084b0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80084b4:	429a      	cmp	r2, r3
 80084b6:	d208      	bcs.n	80084ca <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80084b8:	4b25      	ldr	r3, [pc, #148]	; (8008550 <HAL_RCC_ClockConfig+0x358>)
 80084ba:	69db      	ldr	r3, [r3, #28]
 80084bc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	699b      	ldr	r3, [r3, #24]
 80084c4:	4922      	ldr	r1, [pc, #136]	; (8008550 <HAL_RCC_ClockConfig+0x358>)
 80084c6:	4313      	orrs	r3, r2
 80084c8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	f003 0320 	and.w	r3, r3, #32
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d010      	beq.n	80084f8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	69da      	ldr	r2, [r3, #28]
 80084da:	4b1d      	ldr	r3, [pc, #116]	; (8008550 <HAL_RCC_ClockConfig+0x358>)
 80084dc:	6a1b      	ldr	r3, [r3, #32]
 80084de:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80084e2:	429a      	cmp	r2, r3
 80084e4:	d208      	bcs.n	80084f8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80084e6:	4b1a      	ldr	r3, [pc, #104]	; (8008550 <HAL_RCC_ClockConfig+0x358>)
 80084e8:	6a1b      	ldr	r3, [r3, #32]
 80084ea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	69db      	ldr	r3, [r3, #28]
 80084f2:	4917      	ldr	r1, [pc, #92]	; (8008550 <HAL_RCC_ClockConfig+0x358>)
 80084f4:	4313      	orrs	r3, r2
 80084f6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80084f8:	f000 f89e 	bl	8008638 <HAL_RCC_GetSysClockFreq>
 80084fc:	4602      	mov	r2, r0
 80084fe:	4b14      	ldr	r3, [pc, #80]	; (8008550 <HAL_RCC_ClockConfig+0x358>)
 8008500:	699b      	ldr	r3, [r3, #24]
 8008502:	0a1b      	lsrs	r3, r3, #8
 8008504:	f003 030f 	and.w	r3, r3, #15
 8008508:	4912      	ldr	r1, [pc, #72]	; (8008554 <HAL_RCC_ClockConfig+0x35c>)
 800850a:	5ccb      	ldrb	r3, [r1, r3]
 800850c:	f003 031f 	and.w	r3, r3, #31
 8008510:	fa22 f303 	lsr.w	r3, r2, r3
 8008514:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008516:	4b0e      	ldr	r3, [pc, #56]	; (8008550 <HAL_RCC_ClockConfig+0x358>)
 8008518:	699b      	ldr	r3, [r3, #24]
 800851a:	f003 030f 	and.w	r3, r3, #15
 800851e:	4a0d      	ldr	r2, [pc, #52]	; (8008554 <HAL_RCC_ClockConfig+0x35c>)
 8008520:	5cd3      	ldrb	r3, [r2, r3]
 8008522:	f003 031f 	and.w	r3, r3, #31
 8008526:	693a      	ldr	r2, [r7, #16]
 8008528:	fa22 f303 	lsr.w	r3, r2, r3
 800852c:	4a0a      	ldr	r2, [pc, #40]	; (8008558 <HAL_RCC_ClockConfig+0x360>)
 800852e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008530:	4a0a      	ldr	r2, [pc, #40]	; (800855c <HAL_RCC_ClockConfig+0x364>)
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8008536:	4b0a      	ldr	r3, [pc, #40]	; (8008560 <HAL_RCC_ClockConfig+0x368>)
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	4618      	mov	r0, r3
 800853c:	f7f8 fe70 	bl	8001220 <HAL_InitTick>
 8008540:	4603      	mov	r3, r0
 8008542:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8008544:	7bfb      	ldrb	r3, [r7, #15]
}
 8008546:	4618      	mov	r0, r3
 8008548:	3718      	adds	r7, #24
 800854a:	46bd      	mov	sp, r7
 800854c:	bd80      	pop	{r7, pc}
 800854e:	bf00      	nop
 8008550:	58024400 	.word	0x58024400
 8008554:	08011dd4 	.word	0x08011dd4
 8008558:	24000004 	.word	0x24000004
 800855c:	24000000 	.word	0x24000000
 8008560:	24000008 	.word	0x24000008

08008564 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b08c      	sub	sp, #48	; 0x30
 8008568:	af00      	add	r7, sp, #0
 800856a:	60f8      	str	r0, [r7, #12]
 800856c:	60b9      	str	r1, [r7, #8]
 800856e:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if (RCC_MCOx == RCC_MCO1)
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d12a      	bne.n	80085cc <HAL_RCC_MCOConfig+0x68>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8008576:	4b2d      	ldr	r3, [pc, #180]	; (800862c <HAL_RCC_MCOConfig+0xc8>)
 8008578:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800857c:	4a2b      	ldr	r2, [pc, #172]	; (800862c <HAL_RCC_MCOConfig+0xc8>)
 800857e:	f043 0301 	orr.w	r3, r3, #1
 8008582:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008586:	4b29      	ldr	r3, [pc, #164]	; (800862c <HAL_RCC_MCOConfig+0xc8>)
 8008588:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800858c:	f003 0301 	and.w	r3, r3, #1
 8008590:	61bb      	str	r3, [r7, #24]
 8008592:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8008594:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008598:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800859a:	2302      	movs	r3, #2
 800859c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800859e:	2303      	movs	r3, #3
 80085a0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085a2:	2300      	movs	r3, #0
 80085a4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80085a6:	2300      	movs	r3, #0
 80085a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 80085aa:	f107 031c 	add.w	r3, r7, #28
 80085ae:	4619      	mov	r1, r3
 80085b0:	481f      	ldr	r0, [pc, #124]	; (8008630 <HAL_RCC_MCOConfig+0xcc>)
 80085b2:	f7fc feed 	bl	8005390 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 80085b6:	4b1d      	ldr	r3, [pc, #116]	; (800862c <HAL_RCC_MCOConfig+0xc8>)
 80085b8:	691b      	ldr	r3, [r3, #16]
 80085ba:	f023 72fe 	bic.w	r2, r3, #33292288	; 0x1fc0000
 80085be:	68b9      	ldr	r1, [r7, #8]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	430b      	orrs	r3, r1
 80085c4:	4919      	ldr	r1, [pc, #100]	; (800862c <HAL_RCC_MCOConfig+0xc8>)
 80085c6:	4313      	orrs	r3, r2
 80085c8:	610b      	str	r3, [r1, #16]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
  }
}
 80085ca:	e02a      	b.n	8008622 <HAL_RCC_MCOConfig+0xbe>
    MCO2_CLK_ENABLE();
 80085cc:	4b17      	ldr	r3, [pc, #92]	; (800862c <HAL_RCC_MCOConfig+0xc8>)
 80085ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80085d2:	4a16      	ldr	r2, [pc, #88]	; (800862c <HAL_RCC_MCOConfig+0xc8>)
 80085d4:	f043 0304 	orr.w	r3, r3, #4
 80085d8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80085dc:	4b13      	ldr	r3, [pc, #76]	; (800862c <HAL_RCC_MCOConfig+0xc8>)
 80085de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80085e2:	f003 0304 	and.w	r3, r3, #4
 80085e6:	617b      	str	r3, [r7, #20]
 80085e8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 80085ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80085ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80085f0:	2302      	movs	r3, #2
 80085f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80085f4:	2303      	movs	r3, #3
 80085f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80085f8:	2300      	movs	r3, #0
 80085fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80085fc:	2300      	movs	r3, #0
 80085fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8008600:	f107 031c 	add.w	r3, r7, #28
 8008604:	4619      	mov	r1, r3
 8008606:	480b      	ldr	r0, [pc, #44]	; (8008634 <HAL_RCC_MCOConfig+0xd0>)
 8008608:	f7fc fec2 	bl	8005390 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800860c:	4b07      	ldr	r3, [pc, #28]	; (800862c <HAL_RCC_MCOConfig+0xc8>)
 800860e:	691b      	ldr	r3, [r3, #16]
 8008610:	f023 427e 	bic.w	r2, r3, #4261412864	; 0xfe000000
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	01d9      	lsls	r1, r3, #7
 8008618:	68bb      	ldr	r3, [r7, #8]
 800861a:	430b      	orrs	r3, r1
 800861c:	4903      	ldr	r1, [pc, #12]	; (800862c <HAL_RCC_MCOConfig+0xc8>)
 800861e:	4313      	orrs	r3, r2
 8008620:	610b      	str	r3, [r1, #16]
}
 8008622:	bf00      	nop
 8008624:	3730      	adds	r7, #48	; 0x30
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}
 800862a:	bf00      	nop
 800862c:	58024400 	.word	0x58024400
 8008630:	58020000 	.word	0x58020000
 8008634:	58020800 	.word	0x58020800

08008638 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008638:	b480      	push	{r7}
 800863a:	b089      	sub	sp, #36	; 0x24
 800863c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800863e:	4bb3      	ldr	r3, [pc, #716]	; (800890c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008640:	691b      	ldr	r3, [r3, #16]
 8008642:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008646:	2b18      	cmp	r3, #24
 8008648:	f200 8155 	bhi.w	80088f6 <HAL_RCC_GetSysClockFreq+0x2be>
 800864c:	a201      	add	r2, pc, #4	; (adr r2, 8008654 <HAL_RCC_GetSysClockFreq+0x1c>)
 800864e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008652:	bf00      	nop
 8008654:	080086b9 	.word	0x080086b9
 8008658:	080088f7 	.word	0x080088f7
 800865c:	080088f7 	.word	0x080088f7
 8008660:	080088f7 	.word	0x080088f7
 8008664:	080088f7 	.word	0x080088f7
 8008668:	080088f7 	.word	0x080088f7
 800866c:	080088f7 	.word	0x080088f7
 8008670:	080088f7 	.word	0x080088f7
 8008674:	080086df 	.word	0x080086df
 8008678:	080088f7 	.word	0x080088f7
 800867c:	080088f7 	.word	0x080088f7
 8008680:	080088f7 	.word	0x080088f7
 8008684:	080088f7 	.word	0x080088f7
 8008688:	080088f7 	.word	0x080088f7
 800868c:	080088f7 	.word	0x080088f7
 8008690:	080088f7 	.word	0x080088f7
 8008694:	080086e5 	.word	0x080086e5
 8008698:	080088f7 	.word	0x080088f7
 800869c:	080088f7 	.word	0x080088f7
 80086a0:	080088f7 	.word	0x080088f7
 80086a4:	080088f7 	.word	0x080088f7
 80086a8:	080088f7 	.word	0x080088f7
 80086ac:	080088f7 	.word	0x080088f7
 80086b0:	080088f7 	.word	0x080088f7
 80086b4:	080086eb 	.word	0x080086eb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80086b8:	4b94      	ldr	r3, [pc, #592]	; (800890c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f003 0320 	and.w	r3, r3, #32
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d009      	beq.n	80086d8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80086c4:	4b91      	ldr	r3, [pc, #580]	; (800890c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	08db      	lsrs	r3, r3, #3
 80086ca:	f003 0303 	and.w	r3, r3, #3
 80086ce:	4a90      	ldr	r2, [pc, #576]	; (8008910 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80086d0:	fa22 f303 	lsr.w	r3, r2, r3
 80086d4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80086d6:	e111      	b.n	80088fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80086d8:	4b8d      	ldr	r3, [pc, #564]	; (8008910 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80086da:	61bb      	str	r3, [r7, #24]
      break;
 80086dc:	e10e      	b.n	80088fc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80086de:	4b8d      	ldr	r3, [pc, #564]	; (8008914 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80086e0:	61bb      	str	r3, [r7, #24]
      break;
 80086e2:	e10b      	b.n	80088fc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80086e4:	4b8c      	ldr	r3, [pc, #560]	; (8008918 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80086e6:	61bb      	str	r3, [r7, #24]
      break;
 80086e8:	e108      	b.n	80088fc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80086ea:	4b88      	ldr	r3, [pc, #544]	; (800890c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ee:	f003 0303 	and.w	r3, r3, #3
 80086f2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80086f4:	4b85      	ldr	r3, [pc, #532]	; (800890c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086f8:	091b      	lsrs	r3, r3, #4
 80086fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80086fe:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008700:	4b82      	ldr	r3, [pc, #520]	; (800890c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008704:	f003 0301 	and.w	r3, r3, #1
 8008708:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800870a:	4b80      	ldr	r3, [pc, #512]	; (800890c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800870c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800870e:	08db      	lsrs	r3, r3, #3
 8008710:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008714:	68fa      	ldr	r2, [r7, #12]
 8008716:	fb02 f303 	mul.w	r3, r2, r3
 800871a:	ee07 3a90 	vmov	s15, r3
 800871e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008722:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	2b00      	cmp	r3, #0
 800872a:	f000 80e1 	beq.w	80088f0 <HAL_RCC_GetSysClockFreq+0x2b8>
 800872e:	697b      	ldr	r3, [r7, #20]
 8008730:	2b02      	cmp	r3, #2
 8008732:	f000 8083 	beq.w	800883c <HAL_RCC_GetSysClockFreq+0x204>
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	2b02      	cmp	r3, #2
 800873a:	f200 80a1 	bhi.w	8008880 <HAL_RCC_GetSysClockFreq+0x248>
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	2b00      	cmp	r3, #0
 8008742:	d003      	beq.n	800874c <HAL_RCC_GetSysClockFreq+0x114>
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	2b01      	cmp	r3, #1
 8008748:	d056      	beq.n	80087f8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800874a:	e099      	b.n	8008880 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800874c:	4b6f      	ldr	r3, [pc, #444]	; (800890c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	f003 0320 	and.w	r3, r3, #32
 8008754:	2b00      	cmp	r3, #0
 8008756:	d02d      	beq.n	80087b4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8008758:	4b6c      	ldr	r3, [pc, #432]	; (800890c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	08db      	lsrs	r3, r3, #3
 800875e:	f003 0303 	and.w	r3, r3, #3
 8008762:	4a6b      	ldr	r2, [pc, #428]	; (8008910 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008764:	fa22 f303 	lsr.w	r3, r2, r3
 8008768:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	ee07 3a90 	vmov	s15, r3
 8008770:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	ee07 3a90 	vmov	s15, r3
 800877a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800877e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008782:	4b62      	ldr	r3, [pc, #392]	; (800890c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008786:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800878a:	ee07 3a90 	vmov	s15, r3
 800878e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008792:	ed97 6a02 	vldr	s12, [r7, #8]
 8008796:	eddf 5a61 	vldr	s11, [pc, #388]	; 800891c <HAL_RCC_GetSysClockFreq+0x2e4>
 800879a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800879e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087ae:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80087b2:	e087      	b.n	80088c4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80087b4:	693b      	ldr	r3, [r7, #16]
 80087b6:	ee07 3a90 	vmov	s15, r3
 80087ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087be:	eddf 6a58 	vldr	s13, [pc, #352]	; 8008920 <HAL_RCC_GetSysClockFreq+0x2e8>
 80087c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80087c6:	4b51      	ldr	r3, [pc, #324]	; (800890c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80087c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80087ce:	ee07 3a90 	vmov	s15, r3
 80087d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80087d6:	ed97 6a02 	vldr	s12, [r7, #8]
 80087da:	eddf 5a50 	vldr	s11, [pc, #320]	; 800891c <HAL_RCC_GetSysClockFreq+0x2e4>
 80087de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80087e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80087e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80087ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80087ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087f2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80087f6:	e065      	b.n	80088c4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	ee07 3a90 	vmov	s15, r3
 80087fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008802:	eddf 6a48 	vldr	s13, [pc, #288]	; 8008924 <HAL_RCC_GetSysClockFreq+0x2ec>
 8008806:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800880a:	4b40      	ldr	r3, [pc, #256]	; (800890c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800880c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800880e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008812:	ee07 3a90 	vmov	s15, r3
 8008816:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800881a:	ed97 6a02 	vldr	s12, [r7, #8]
 800881e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800891c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008822:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008826:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800882a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800882e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008832:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008836:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800883a:	e043      	b.n	80088c4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	ee07 3a90 	vmov	s15, r3
 8008842:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008846:	eddf 6a38 	vldr	s13, [pc, #224]	; 8008928 <HAL_RCC_GetSysClockFreq+0x2f0>
 800884a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800884e:	4b2f      	ldr	r3, [pc, #188]	; (800890c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008852:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008856:	ee07 3a90 	vmov	s15, r3
 800885a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800885e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008862:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800891c <HAL_RCC_GetSysClockFreq+0x2e4>
 8008866:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800886a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800886e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008872:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008876:	ee67 7a27 	vmul.f32	s15, s14, s15
 800887a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800887e:	e021      	b.n	80088c4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	ee07 3a90 	vmov	s15, r3
 8008886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800888a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008924 <HAL_RCC_GetSysClockFreq+0x2ec>
 800888e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008892:	4b1e      	ldr	r3, [pc, #120]	; (800890c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008896:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800889a:	ee07 3a90 	vmov	s15, r3
 800889e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80088a2:	ed97 6a02 	vldr	s12, [r7, #8]
 80088a6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800891c <HAL_RCC_GetSysClockFreq+0x2e4>
 80088aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80088ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80088b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80088ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088be:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80088c2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80088c4:	4b11      	ldr	r3, [pc, #68]	; (800890c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80088c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088c8:	0a5b      	lsrs	r3, r3, #9
 80088ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80088ce:	3301      	adds	r3, #1
 80088d0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	ee07 3a90 	vmov	s15, r3
 80088d8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80088dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80088e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80088e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80088e8:	ee17 3a90 	vmov	r3, s15
 80088ec:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80088ee:	e005      	b.n	80088fc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80088f0:	2300      	movs	r3, #0
 80088f2:	61bb      	str	r3, [r7, #24]
      break;
 80088f4:	e002      	b.n	80088fc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80088f6:	4b07      	ldr	r3, [pc, #28]	; (8008914 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80088f8:	61bb      	str	r3, [r7, #24]
      break;
 80088fa:	bf00      	nop
  }

  return sysclockfreq;
 80088fc:	69bb      	ldr	r3, [r7, #24]
}
 80088fe:	4618      	mov	r0, r3
 8008900:	3724      	adds	r7, #36	; 0x24
 8008902:	46bd      	mov	sp, r7
 8008904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008908:	4770      	bx	lr
 800890a:	bf00      	nop
 800890c:	58024400 	.word	0x58024400
 8008910:	03d09000 	.word	0x03d09000
 8008914:	003d0900 	.word	0x003d0900
 8008918:	00b71b00 	.word	0x00b71b00
 800891c:	46000000 	.word	0x46000000
 8008920:	4c742400 	.word	0x4c742400
 8008924:	4a742400 	.word	0x4a742400
 8008928:	4b371b00 	.word	0x4b371b00

0800892c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800892c:	b580      	push	{r7, lr}
 800892e:	b082      	sub	sp, #8
 8008930:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008932:	f7ff fe81 	bl	8008638 <HAL_RCC_GetSysClockFreq>
 8008936:	4602      	mov	r2, r0
 8008938:	4b10      	ldr	r3, [pc, #64]	; (800897c <HAL_RCC_GetHCLKFreq+0x50>)
 800893a:	699b      	ldr	r3, [r3, #24]
 800893c:	0a1b      	lsrs	r3, r3, #8
 800893e:	f003 030f 	and.w	r3, r3, #15
 8008942:	490f      	ldr	r1, [pc, #60]	; (8008980 <HAL_RCC_GetHCLKFreq+0x54>)
 8008944:	5ccb      	ldrb	r3, [r1, r3]
 8008946:	f003 031f 	and.w	r3, r3, #31
 800894a:	fa22 f303 	lsr.w	r3, r2, r3
 800894e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008950:	4b0a      	ldr	r3, [pc, #40]	; (800897c <HAL_RCC_GetHCLKFreq+0x50>)
 8008952:	699b      	ldr	r3, [r3, #24]
 8008954:	f003 030f 	and.w	r3, r3, #15
 8008958:	4a09      	ldr	r2, [pc, #36]	; (8008980 <HAL_RCC_GetHCLKFreq+0x54>)
 800895a:	5cd3      	ldrb	r3, [r2, r3]
 800895c:	f003 031f 	and.w	r3, r3, #31
 8008960:	687a      	ldr	r2, [r7, #4]
 8008962:	fa22 f303 	lsr.w	r3, r2, r3
 8008966:	4a07      	ldr	r2, [pc, #28]	; (8008984 <HAL_RCC_GetHCLKFreq+0x58>)
 8008968:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800896a:	4a07      	ldr	r2, [pc, #28]	; (8008988 <HAL_RCC_GetHCLKFreq+0x5c>)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008970:	4b04      	ldr	r3, [pc, #16]	; (8008984 <HAL_RCC_GetHCLKFreq+0x58>)
 8008972:	681b      	ldr	r3, [r3, #0]
}
 8008974:	4618      	mov	r0, r3
 8008976:	3708      	adds	r7, #8
 8008978:	46bd      	mov	sp, r7
 800897a:	bd80      	pop	{r7, pc}
 800897c:	58024400 	.word	0x58024400
 8008980:	08011dd4 	.word	0x08011dd4
 8008984:	24000004 	.word	0x24000004
 8008988:	24000000 	.word	0x24000000

0800898c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800898c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008990:	b0ca      	sub	sp, #296	; 0x128
 8008992:	af00      	add	r7, sp, #0
 8008994:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008998:	2300      	movs	r3, #0
 800899a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800899e:	2300      	movs	r3, #0
 80089a0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80089a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089ac:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80089b0:	2500      	movs	r5, #0
 80089b2:	ea54 0305 	orrs.w	r3, r4, r5
 80089b6:	d049      	beq.n	8008a4c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80089b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80089be:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80089c2:	d02f      	beq.n	8008a24 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80089c4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80089c8:	d828      	bhi.n	8008a1c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80089ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80089ce:	d01a      	beq.n	8008a06 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80089d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80089d4:	d822      	bhi.n	8008a1c <HAL_RCCEx_PeriphCLKConfig+0x90>
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d003      	beq.n	80089e2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80089da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089de:	d007      	beq.n	80089f0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80089e0:	e01c      	b.n	8008a1c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089e2:	4bb8      	ldr	r3, [pc, #736]	; (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80089e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089e6:	4ab7      	ldr	r2, [pc, #732]	; (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80089e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089ec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80089ee:	e01a      	b.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80089f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80089f4:	3308      	adds	r3, #8
 80089f6:	2102      	movs	r1, #2
 80089f8:	4618      	mov	r0, r3
 80089fa:	f001 f9d1 	bl	8009da0 <RCCEx_PLL2_Config>
 80089fe:	4603      	mov	r3, r0
 8008a00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008a04:	e00f      	b.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a0a:	3328      	adds	r3, #40	; 0x28
 8008a0c:	2102      	movs	r1, #2
 8008a0e:	4618      	mov	r0, r3
 8008a10:	f001 fa78 	bl	8009f04 <RCCEx_PLL3_Config>
 8008a14:	4603      	mov	r3, r0
 8008a16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008a1a:	e004      	b.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008a22:	e000      	b.n	8008a26 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8008a24:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008a26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d10a      	bne.n	8008a44 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8008a2e:	4ba5      	ldr	r3, [pc, #660]	; (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008a30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a32:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8008a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a3a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008a3c:	4aa1      	ldr	r2, [pc, #644]	; (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008a3e:	430b      	orrs	r3, r1
 8008a40:	6513      	str	r3, [r2, #80]	; 0x50
 8008a42:	e003      	b.n	8008a4c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008a48:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8008a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a54:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8008a58:	f04f 0900 	mov.w	r9, #0
 8008a5c:	ea58 0309 	orrs.w	r3, r8, r9
 8008a60:	d047      	beq.n	8008af2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8008a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a68:	2b04      	cmp	r3, #4
 8008a6a:	d82a      	bhi.n	8008ac2 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8008a6c:	a201      	add	r2, pc, #4	; (adr r2, 8008a74 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8008a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a72:	bf00      	nop
 8008a74:	08008a89 	.word	0x08008a89
 8008a78:	08008a97 	.word	0x08008a97
 8008a7c:	08008aad 	.word	0x08008aad
 8008a80:	08008acb 	.word	0x08008acb
 8008a84:	08008acb 	.word	0x08008acb
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a88:	4b8e      	ldr	r3, [pc, #568]	; (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008a8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a8c:	4a8d      	ldr	r2, [pc, #564]	; (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008a8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a92:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008a94:	e01a      	b.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008a96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008a9a:	3308      	adds	r3, #8
 8008a9c:	2100      	movs	r1, #0
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	f001 f97e 	bl	8009da0 <RCCEx_PLL2_Config>
 8008aa4:	4603      	mov	r3, r0
 8008aa6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008aaa:	e00f      	b.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008aac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ab0:	3328      	adds	r3, #40	; 0x28
 8008ab2:	2100      	movs	r1, #0
 8008ab4:	4618      	mov	r0, r3
 8008ab6:	f001 fa25 	bl	8009f04 <RCCEx_PLL3_Config>
 8008aba:	4603      	mov	r3, r0
 8008abc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008ac0:	e004      	b.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008ac8:	e000      	b.n	8008acc <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008aca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008acc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d10a      	bne.n	8008aea <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008ad4:	4b7b      	ldr	r3, [pc, #492]	; (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ad6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008ad8:	f023 0107 	bic.w	r1, r3, #7
 8008adc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ae0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ae2:	4a78      	ldr	r2, [pc, #480]	; (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ae4:	430b      	orrs	r3, r1
 8008ae6:	6513      	str	r3, [r2, #80]	; 0x50
 8008ae8:	e003      	b.n	8008af2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008aea:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008aee:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8008af2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008af6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008afa:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8008afe:	f04f 0b00 	mov.w	fp, #0
 8008b02:	ea5a 030b 	orrs.w	r3, sl, fp
 8008b06:	d04c      	beq.n	8008ba2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8008b08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b12:	d030      	beq.n	8008b76 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8008b14:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b18:	d829      	bhi.n	8008b6e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008b1a:	2bc0      	cmp	r3, #192	; 0xc0
 8008b1c:	d02d      	beq.n	8008b7a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8008b1e:	2bc0      	cmp	r3, #192	; 0xc0
 8008b20:	d825      	bhi.n	8008b6e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008b22:	2b80      	cmp	r3, #128	; 0x80
 8008b24:	d018      	beq.n	8008b58 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8008b26:	2b80      	cmp	r3, #128	; 0x80
 8008b28:	d821      	bhi.n	8008b6e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d002      	beq.n	8008b34 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8008b2e:	2b40      	cmp	r3, #64	; 0x40
 8008b30:	d007      	beq.n	8008b42 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8008b32:	e01c      	b.n	8008b6e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b34:	4b63      	ldr	r3, [pc, #396]	; (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008b36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b38:	4a62      	ldr	r2, [pc, #392]	; (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008b3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008b40:	e01c      	b.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b46:	3308      	adds	r3, #8
 8008b48:	2100      	movs	r1, #0
 8008b4a:	4618      	mov	r0, r3
 8008b4c:	f001 f928 	bl	8009da0 <RCCEx_PLL2_Config>
 8008b50:	4603      	mov	r3, r0
 8008b52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008b56:	e011      	b.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008b58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b5c:	3328      	adds	r3, #40	; 0x28
 8008b5e:	2100      	movs	r1, #0
 8008b60:	4618      	mov	r0, r3
 8008b62:	f001 f9cf 	bl	8009f04 <RCCEx_PLL3_Config>
 8008b66:	4603      	mov	r3, r0
 8008b68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8008b6c:	e006      	b.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008b74:	e002      	b.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008b76:	bf00      	nop
 8008b78:	e000      	b.n	8008b7c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8008b7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d10a      	bne.n	8008b9a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008b84:	4b4f      	ldr	r3, [pc, #316]	; (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008b86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b88:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8008b8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008b90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b92:	4a4c      	ldr	r2, [pc, #304]	; (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008b94:	430b      	orrs	r3, r1
 8008b96:	6513      	str	r3, [r2, #80]	; 0x50
 8008b98:	e003      	b.n	8008ba2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008b9a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008b9e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008ba2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008baa:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8008bae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8008bb8:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8008bbc:	460b      	mov	r3, r1
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	d053      	beq.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008bc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008bc6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008bca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008bce:	d035      	beq.n	8008c3c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8008bd0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008bd4:	d82e      	bhi.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008bd6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008bda:	d031      	beq.n	8008c40 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8008bdc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8008be0:	d828      	bhi.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008be2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008be6:	d01a      	beq.n	8008c1e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8008be8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008bec:	d822      	bhi.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d003      	beq.n	8008bfa <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8008bf2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008bf6:	d007      	beq.n	8008c08 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8008bf8:	e01c      	b.n	8008c34 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bfa:	4b32      	ldr	r3, [pc, #200]	; (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008bfe:	4a31      	ldr	r2, [pc, #196]	; (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008c00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008c04:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008c06:	e01c      	b.n	8008c42 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008c08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c0c:	3308      	adds	r3, #8
 8008c0e:	2100      	movs	r1, #0
 8008c10:	4618      	mov	r0, r3
 8008c12:	f001 f8c5 	bl	8009da0 <RCCEx_PLL2_Config>
 8008c16:	4603      	mov	r3, r0
 8008c18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008c1c:	e011      	b.n	8008c42 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c22:	3328      	adds	r3, #40	; 0x28
 8008c24:	2100      	movs	r1, #0
 8008c26:	4618      	mov	r0, r3
 8008c28:	f001 f96c 	bl	8009f04 <RCCEx_PLL3_Config>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008c32:	e006      	b.n	8008c42 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008c34:	2301      	movs	r3, #1
 8008c36:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008c3a:	e002      	b.n	8008c42 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008c3c:	bf00      	nop
 8008c3e:	e000      	b.n	8008c42 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008c40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c42:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d10b      	bne.n	8008c62 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008c4a:	4b1e      	ldr	r3, [pc, #120]	; (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c4e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8008c52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c56:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8008c5a:	4a1a      	ldr	r2, [pc, #104]	; (8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008c5c:	430b      	orrs	r3, r1
 8008c5e:	6593      	str	r3, [r2, #88]	; 0x58
 8008c60:	e003      	b.n	8008c6a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008c66:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c72:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8008c76:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8008c80:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8008c84:	460b      	mov	r3, r1
 8008c86:	4313      	orrs	r3, r2
 8008c88:	d056      	beq.n	8008d38 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008c8e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008c92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008c96:	d038      	beq.n	8008d0a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008c98:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008c9c:	d831      	bhi.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008c9e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008ca2:	d034      	beq.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8008ca4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8008ca8:	d82b      	bhi.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008caa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008cae:	d01d      	beq.n	8008cec <HAL_RCCEx_PeriphCLKConfig+0x360>
 8008cb0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008cb4:	d825      	bhi.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d006      	beq.n	8008cc8 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008cba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008cbe:	d00a      	beq.n	8008cd6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008cc0:	e01f      	b.n	8008d02 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008cc2:	bf00      	nop
 8008cc4:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008cc8:	4ba2      	ldr	r3, [pc, #648]	; (8008f54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ccc:	4aa1      	ldr	r2, [pc, #644]	; (8008f54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008cce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008cd2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008cd4:	e01c      	b.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008cd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cda:	3308      	adds	r3, #8
 8008cdc:	2100      	movs	r1, #0
 8008cde:	4618      	mov	r0, r3
 8008ce0:	f001 f85e 	bl	8009da0 <RCCEx_PLL2_Config>
 8008ce4:	4603      	mov	r3, r0
 8008ce6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008cea:	e011      	b.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008cec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008cf0:	3328      	adds	r3, #40	; 0x28
 8008cf2:	2100      	movs	r1, #0
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	f001 f905 	bl	8009f04 <RCCEx_PLL3_Config>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008d00:	e006      	b.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008d02:	2301      	movs	r3, #1
 8008d04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008d08:	e002      	b.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008d0a:	bf00      	nop
 8008d0c:	e000      	b.n	8008d10 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008d0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008d10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d14:	2b00      	cmp	r3, #0
 8008d16:	d10b      	bne.n	8008d30 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008d18:	4b8e      	ldr	r3, [pc, #568]	; (8008f54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008d1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d1c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8008d20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d24:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008d28:	4a8a      	ldr	r2, [pc, #552]	; (8008f54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008d2a:	430b      	orrs	r3, r1
 8008d2c:	6593      	str	r3, [r2, #88]	; 0x58
 8008d2e:	e003      	b.n	8008d38 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d30:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008d34:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008d38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d40:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8008d44:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8008d48:	2300      	movs	r3, #0
 8008d4a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8008d4e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8008d52:	460b      	mov	r3, r1
 8008d54:	4313      	orrs	r3, r2
 8008d56:	d03a      	beq.n	8008dce <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8008d58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008d5e:	2b30      	cmp	r3, #48	; 0x30
 8008d60:	d01f      	beq.n	8008da2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8008d62:	2b30      	cmp	r3, #48	; 0x30
 8008d64:	d819      	bhi.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008d66:	2b20      	cmp	r3, #32
 8008d68:	d00c      	beq.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8008d6a:	2b20      	cmp	r3, #32
 8008d6c:	d815      	bhi.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008d6e:	2b00      	cmp	r3, #0
 8008d70:	d019      	beq.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8008d72:	2b10      	cmp	r3, #16
 8008d74:	d111      	bne.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008d76:	4b77      	ldr	r3, [pc, #476]	; (8008f54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d7a:	4a76      	ldr	r2, [pc, #472]	; (8008f54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008d7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008d80:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008d82:	e011      	b.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008d88:	3308      	adds	r3, #8
 8008d8a:	2102      	movs	r1, #2
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f001 f807 	bl	8009da0 <RCCEx_PLL2_Config>
 8008d92:	4603      	mov	r3, r0
 8008d94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008d98:	e006      	b.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008da0:	e002      	b.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008da2:	bf00      	nop
 8008da4:	e000      	b.n	8008da8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008da6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008da8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d10a      	bne.n	8008dc6 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008db0:	4b68      	ldr	r3, [pc, #416]	; (8008f54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008db2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008db4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8008db8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008dbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008dbe:	4a65      	ldr	r2, [pc, #404]	; (8008f54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008dc0:	430b      	orrs	r3, r1
 8008dc2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8008dc4:	e003      	b.n	8008dce <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dc6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008dca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd6:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8008dda:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8008dde:	2300      	movs	r3, #0
 8008de0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8008de4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8008de8:	460b      	mov	r3, r1
 8008dea:	4313      	orrs	r3, r2
 8008dec:	d051      	beq.n	8008e92 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008dee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008df2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008df4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008df8:	d035      	beq.n	8008e66 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8008dfa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008dfe:	d82e      	bhi.n	8008e5e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008e00:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008e04:	d031      	beq.n	8008e6a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8008e06:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008e0a:	d828      	bhi.n	8008e5e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008e0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e10:	d01a      	beq.n	8008e48 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8008e12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008e16:	d822      	bhi.n	8008e5e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d003      	beq.n	8008e24 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8008e1c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e20:	d007      	beq.n	8008e32 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8008e22:	e01c      	b.n	8008e5e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008e24:	4b4b      	ldr	r3, [pc, #300]	; (8008f54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e28:	4a4a      	ldr	r2, [pc, #296]	; (8008f54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008e2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008e2e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008e30:	e01c      	b.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008e32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e36:	3308      	adds	r3, #8
 8008e38:	2100      	movs	r1, #0
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f000 ffb0 	bl	8009da0 <RCCEx_PLL2_Config>
 8008e40:	4603      	mov	r3, r0
 8008e42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008e46:	e011      	b.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008e48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e4c:	3328      	adds	r3, #40	; 0x28
 8008e4e:	2100      	movs	r1, #0
 8008e50:	4618      	mov	r0, r3
 8008e52:	f001 f857 	bl	8009f04 <RCCEx_PLL3_Config>
 8008e56:	4603      	mov	r3, r0
 8008e58:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008e5c:	e006      	b.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008e5e:	2301      	movs	r3, #1
 8008e60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008e64:	e002      	b.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008e66:	bf00      	nop
 8008e68:	e000      	b.n	8008e6c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008e6a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e6c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d10a      	bne.n	8008e8a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008e74:	4b37      	ldr	r3, [pc, #220]	; (8008f54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008e76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e78:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8008e7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008e82:	4a34      	ldr	r2, [pc, #208]	; (8008f54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008e84:	430b      	orrs	r3, r1
 8008e86:	6513      	str	r3, [r2, #80]	; 0x50
 8008e88:	e003      	b.n	8008e92 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008e8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008e8e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008e92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008e96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e9a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8008e9e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8008ea8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8008eac:	460b      	mov	r3, r1
 8008eae:	4313      	orrs	r3, r2
 8008eb0:	d056      	beq.n	8008f60 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008eb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008eb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008eb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008ebc:	d033      	beq.n	8008f26 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008ebe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008ec2:	d82c      	bhi.n	8008f1e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008ec4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008ec8:	d02f      	beq.n	8008f2a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8008eca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008ece:	d826      	bhi.n	8008f1e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008ed0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008ed4:	d02b      	beq.n	8008f2e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8008ed6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008eda:	d820      	bhi.n	8008f1e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008edc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ee0:	d012      	beq.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8008ee2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008ee6:	d81a      	bhi.n	8008f1e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d022      	beq.n	8008f32 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008eec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ef0:	d115      	bne.n	8008f1e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008ef6:	3308      	adds	r3, #8
 8008ef8:	2101      	movs	r1, #1
 8008efa:	4618      	mov	r0, r3
 8008efc:	f000 ff50 	bl	8009da0 <RCCEx_PLL2_Config>
 8008f00:	4603      	mov	r3, r0
 8008f02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008f06:	e015      	b.n	8008f34 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008f08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f0c:	3328      	adds	r3, #40	; 0x28
 8008f0e:	2101      	movs	r1, #1
 8008f10:	4618      	mov	r0, r3
 8008f12:	f000 fff7 	bl	8009f04 <RCCEx_PLL3_Config>
 8008f16:	4603      	mov	r3, r0
 8008f18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008f1c:	e00a      	b.n	8008f34 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f1e:	2301      	movs	r3, #1
 8008f20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008f24:	e006      	b.n	8008f34 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008f26:	bf00      	nop
 8008f28:	e004      	b.n	8008f34 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008f2a:	bf00      	nop
 8008f2c:	e002      	b.n	8008f34 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008f2e:	bf00      	nop
 8008f30:	e000      	b.n	8008f34 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008f32:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f34:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d10d      	bne.n	8008f58 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008f3c:	4b05      	ldr	r3, [pc, #20]	; (8008f54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008f3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008f40:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8008f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008f4a:	4a02      	ldr	r2, [pc, #8]	; (8008f54 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008f4c:	430b      	orrs	r3, r1
 8008f4e:	6513      	str	r3, [r2, #80]	; 0x50
 8008f50:	e006      	b.n	8008f60 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008f52:	bf00      	nop
 8008f54:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f58:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8008f5c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008f60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f68:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8008f6c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8008f70:	2300      	movs	r3, #0
 8008f72:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008f76:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8008f7a:	460b      	mov	r3, r1
 8008f7c:	4313      	orrs	r3, r2
 8008f7e:	d055      	beq.n	800902c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008f80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008f84:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008f88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008f8c:	d033      	beq.n	8008ff6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8008f8e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008f92:	d82c      	bhi.n	8008fee <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008f94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f98:	d02f      	beq.n	8008ffa <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008f9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008f9e:	d826      	bhi.n	8008fee <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008fa0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008fa4:	d02b      	beq.n	8008ffe <HAL_RCCEx_PeriphCLKConfig+0x672>
 8008fa6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8008faa:	d820      	bhi.n	8008fee <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008fac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fb0:	d012      	beq.n	8008fd8 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8008fb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fb6:	d81a      	bhi.n	8008fee <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	d022      	beq.n	8009002 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008fbc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008fc0:	d115      	bne.n	8008fee <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fc6:	3308      	adds	r3, #8
 8008fc8:	2101      	movs	r1, #1
 8008fca:	4618      	mov	r0, r3
 8008fcc:	f000 fee8 	bl	8009da0 <RCCEx_PLL2_Config>
 8008fd0:	4603      	mov	r3, r0
 8008fd2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008fd6:	e015      	b.n	8009004 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8008fdc:	3328      	adds	r3, #40	; 0x28
 8008fde:	2101      	movs	r1, #1
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	f000 ff8f 	bl	8009f04 <RCCEx_PLL3_Config>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008fec:	e00a      	b.n	8009004 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008fee:	2301      	movs	r3, #1
 8008ff0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8008ff4:	e006      	b.n	8009004 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008ff6:	bf00      	nop
 8008ff8:	e004      	b.n	8009004 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008ffa:	bf00      	nop
 8008ffc:	e002      	b.n	8009004 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008ffe:	bf00      	nop
 8009000:	e000      	b.n	8009004 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009002:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009004:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009008:	2b00      	cmp	r3, #0
 800900a:	d10b      	bne.n	8009024 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800900c:	4ba3      	ldr	r3, [pc, #652]	; (800929c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800900e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009010:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009014:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009018:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800901c:	4a9f      	ldr	r2, [pc, #636]	; (800929c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800901e:	430b      	orrs	r3, r1
 8009020:	6593      	str	r3, [r2, #88]	; 0x58
 8009022:	e003      	b.n	800902c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009024:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009028:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800902c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009034:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8009038:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800903c:	2300      	movs	r3, #0
 800903e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009042:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009046:	460b      	mov	r3, r1
 8009048:	4313      	orrs	r3, r2
 800904a:	d037      	beq.n	80090bc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800904c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009052:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009056:	d00e      	beq.n	8009076 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8009058:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800905c:	d816      	bhi.n	800908c <HAL_RCCEx_PeriphCLKConfig+0x700>
 800905e:	2b00      	cmp	r3, #0
 8009060:	d018      	beq.n	8009094 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8009062:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009066:	d111      	bne.n	800908c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009068:	4b8c      	ldr	r3, [pc, #560]	; (800929c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800906a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800906c:	4a8b      	ldr	r2, [pc, #556]	; (800929c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800906e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009072:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009074:	e00f      	b.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009076:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800907a:	3308      	adds	r3, #8
 800907c:	2101      	movs	r1, #1
 800907e:	4618      	mov	r0, r3
 8009080:	f000 fe8e 	bl	8009da0 <RCCEx_PLL2_Config>
 8009084:	4603      	mov	r3, r0
 8009086:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800908a:	e004      	b.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800908c:	2301      	movs	r3, #1
 800908e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009092:	e000      	b.n	8009096 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8009094:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009096:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800909a:	2b00      	cmp	r3, #0
 800909c:	d10a      	bne.n	80090b4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800909e:	4b7f      	ldr	r3, [pc, #508]	; (800929c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80090a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80090a2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80090a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090ac:	4a7b      	ldr	r2, [pc, #492]	; (800929c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80090ae:	430b      	orrs	r3, r1
 80090b0:	6513      	str	r3, [r2, #80]	; 0x50
 80090b2:	e003      	b.n	80090bc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80090b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80090b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80090bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090c4:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80090c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80090cc:	2300      	movs	r3, #0
 80090ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80090d2:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 80090d6:	460b      	mov	r3, r1
 80090d8:	4313      	orrs	r3, r2
 80090da:	d039      	beq.n	8009150 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 80090dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80090e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090e2:	2b03      	cmp	r3, #3
 80090e4:	d81c      	bhi.n	8009120 <HAL_RCCEx_PeriphCLKConfig+0x794>
 80090e6:	a201      	add	r2, pc, #4	; (adr r2, 80090ec <HAL_RCCEx_PeriphCLKConfig+0x760>)
 80090e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090ec:	08009129 	.word	0x08009129
 80090f0:	080090fd 	.word	0x080090fd
 80090f4:	0800910b 	.word	0x0800910b
 80090f8:	08009129 	.word	0x08009129
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80090fc:	4b67      	ldr	r3, [pc, #412]	; (800929c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80090fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009100:	4a66      	ldr	r2, [pc, #408]	; (800929c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009102:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009106:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009108:	e00f      	b.n	800912a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800910a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800910e:	3308      	adds	r3, #8
 8009110:	2102      	movs	r1, #2
 8009112:	4618      	mov	r0, r3
 8009114:	f000 fe44 	bl	8009da0 <RCCEx_PLL2_Config>
 8009118:	4603      	mov	r3, r0
 800911a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800911e:	e004      	b.n	800912a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009120:	2301      	movs	r3, #1
 8009122:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009126:	e000      	b.n	800912a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009128:	bf00      	nop
    }

    if (ret == HAL_OK)
 800912a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800912e:	2b00      	cmp	r3, #0
 8009130:	d10a      	bne.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009132:	4b5a      	ldr	r3, [pc, #360]	; (800929c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009136:	f023 0103 	bic.w	r1, r3, #3
 800913a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800913e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009140:	4a56      	ldr	r2, [pc, #344]	; (800929c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009142:	430b      	orrs	r3, r1
 8009144:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009146:	e003      	b.n	8009150 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009148:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800914c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009150:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009158:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800915c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009160:	2300      	movs	r3, #0
 8009162:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009166:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800916a:	460b      	mov	r3, r1
 800916c:	4313      	orrs	r3, r2
 800916e:	f000 809f 	beq.w	80092b0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009172:	4b4b      	ldr	r3, [pc, #300]	; (80092a0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	4a4a      	ldr	r2, [pc, #296]	; (80092a0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8009178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800917c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800917e:	f7f8 f899 	bl	80012b4 <HAL_GetTick>
 8009182:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009186:	e00b      	b.n	80091a0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009188:	f7f8 f894 	bl	80012b4 <HAL_GetTick>
 800918c:	4602      	mov	r2, r0
 800918e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009192:	1ad3      	subs	r3, r2, r3
 8009194:	2b64      	cmp	r3, #100	; 0x64
 8009196:	d903      	bls.n	80091a0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8009198:	2303      	movs	r3, #3
 800919a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800919e:	e005      	b.n	80091ac <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80091a0:	4b3f      	ldr	r3, [pc, #252]	; (80092a0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d0ed      	beq.n	8009188 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80091ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80091b0:	2b00      	cmp	r3, #0
 80091b2:	d179      	bne.n	80092a8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80091b4:	4b39      	ldr	r3, [pc, #228]	; (800929c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80091b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80091b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091bc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80091c0:	4053      	eors	r3, r2
 80091c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d015      	beq.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80091ca:	4b34      	ldr	r3, [pc, #208]	; (800929c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80091cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091d2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80091d6:	4b31      	ldr	r3, [pc, #196]	; (800929c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80091d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091da:	4a30      	ldr	r2, [pc, #192]	; (800929c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80091dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80091e0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 80091e2:	4b2e      	ldr	r3, [pc, #184]	; (800929c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80091e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091e6:	4a2d      	ldr	r2, [pc, #180]	; (800929c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80091e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80091ec:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 80091ee:	4a2b      	ldr	r2, [pc, #172]	; (800929c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80091f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80091f4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 80091f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80091fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80091fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009202:	d118      	bne.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009204:	f7f8 f856 	bl	80012b4 <HAL_GetTick>
 8009208:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800920c:	e00d      	b.n	800922a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800920e:	f7f8 f851 	bl	80012b4 <HAL_GetTick>
 8009212:	4602      	mov	r2, r0
 8009214:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8009218:	1ad2      	subs	r2, r2, r3
 800921a:	f241 3388 	movw	r3, #5000	; 0x1388
 800921e:	429a      	cmp	r2, r3
 8009220:	d903      	bls.n	800922a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8009222:	2303      	movs	r3, #3
 8009224:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8009228:	e005      	b.n	8009236 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800922a:	4b1c      	ldr	r3, [pc, #112]	; (800929c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800922c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800922e:	f003 0302 	and.w	r3, r3, #2
 8009232:	2b00      	cmp	r3, #0
 8009234:	d0eb      	beq.n	800920e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8009236:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800923a:	2b00      	cmp	r3, #0
 800923c:	d129      	bne.n	8009292 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800923e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009242:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009246:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800924a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800924e:	d10e      	bne.n	800926e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8009250:	4b12      	ldr	r3, [pc, #72]	; (800929c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009252:	691b      	ldr	r3, [r3, #16]
 8009254:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8009258:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800925c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009260:	091a      	lsrs	r2, r3, #4
 8009262:	4b10      	ldr	r3, [pc, #64]	; (80092a4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8009264:	4013      	ands	r3, r2
 8009266:	4a0d      	ldr	r2, [pc, #52]	; (800929c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009268:	430b      	orrs	r3, r1
 800926a:	6113      	str	r3, [r2, #16]
 800926c:	e005      	b.n	800927a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800926e:	4b0b      	ldr	r3, [pc, #44]	; (800929c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009270:	691b      	ldr	r3, [r3, #16]
 8009272:	4a0a      	ldr	r2, [pc, #40]	; (800929c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009274:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8009278:	6113      	str	r3, [r2, #16]
 800927a:	4b08      	ldr	r3, [pc, #32]	; (800929c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800927c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800927e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009282:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009286:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800928a:	4a04      	ldr	r2, [pc, #16]	; (800929c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800928c:	430b      	orrs	r3, r1
 800928e:	6713      	str	r3, [r2, #112]	; 0x70
 8009290:	e00e      	b.n	80092b0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009292:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009296:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800929a:	e009      	b.n	80092b0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800929c:	58024400 	.word	0x58024400
 80092a0:	58024800 	.word	0x58024800
 80092a4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80092ac:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80092b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b8:	f002 0301 	and.w	r3, r2, #1
 80092bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80092c0:	2300      	movs	r3, #0
 80092c2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80092c6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80092ca:	460b      	mov	r3, r1
 80092cc:	4313      	orrs	r3, r2
 80092ce:	f000 8089 	beq.w	80093e4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80092d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80092d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80092d8:	2b28      	cmp	r3, #40	; 0x28
 80092da:	d86b      	bhi.n	80093b4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 80092dc:	a201      	add	r2, pc, #4	; (adr r2, 80092e4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80092de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80092e2:	bf00      	nop
 80092e4:	080093bd 	.word	0x080093bd
 80092e8:	080093b5 	.word	0x080093b5
 80092ec:	080093b5 	.word	0x080093b5
 80092f0:	080093b5 	.word	0x080093b5
 80092f4:	080093b5 	.word	0x080093b5
 80092f8:	080093b5 	.word	0x080093b5
 80092fc:	080093b5 	.word	0x080093b5
 8009300:	080093b5 	.word	0x080093b5
 8009304:	08009389 	.word	0x08009389
 8009308:	080093b5 	.word	0x080093b5
 800930c:	080093b5 	.word	0x080093b5
 8009310:	080093b5 	.word	0x080093b5
 8009314:	080093b5 	.word	0x080093b5
 8009318:	080093b5 	.word	0x080093b5
 800931c:	080093b5 	.word	0x080093b5
 8009320:	080093b5 	.word	0x080093b5
 8009324:	0800939f 	.word	0x0800939f
 8009328:	080093b5 	.word	0x080093b5
 800932c:	080093b5 	.word	0x080093b5
 8009330:	080093b5 	.word	0x080093b5
 8009334:	080093b5 	.word	0x080093b5
 8009338:	080093b5 	.word	0x080093b5
 800933c:	080093b5 	.word	0x080093b5
 8009340:	080093b5 	.word	0x080093b5
 8009344:	080093bd 	.word	0x080093bd
 8009348:	080093b5 	.word	0x080093b5
 800934c:	080093b5 	.word	0x080093b5
 8009350:	080093b5 	.word	0x080093b5
 8009354:	080093b5 	.word	0x080093b5
 8009358:	080093b5 	.word	0x080093b5
 800935c:	080093b5 	.word	0x080093b5
 8009360:	080093b5 	.word	0x080093b5
 8009364:	080093bd 	.word	0x080093bd
 8009368:	080093b5 	.word	0x080093b5
 800936c:	080093b5 	.word	0x080093b5
 8009370:	080093b5 	.word	0x080093b5
 8009374:	080093b5 	.word	0x080093b5
 8009378:	080093b5 	.word	0x080093b5
 800937c:	080093b5 	.word	0x080093b5
 8009380:	080093b5 	.word	0x080093b5
 8009384:	080093bd 	.word	0x080093bd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009388:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800938c:	3308      	adds	r3, #8
 800938e:	2101      	movs	r1, #1
 8009390:	4618      	mov	r0, r3
 8009392:	f000 fd05 	bl	8009da0 <RCCEx_PLL2_Config>
 8009396:	4603      	mov	r3, r0
 8009398:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800939c:	e00f      	b.n	80093be <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800939e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093a2:	3328      	adds	r3, #40	; 0x28
 80093a4:	2101      	movs	r1, #1
 80093a6:	4618      	mov	r0, r3
 80093a8:	f000 fdac 	bl	8009f04 <RCCEx_PLL3_Config>
 80093ac:	4603      	mov	r3, r0
 80093ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80093b2:	e004      	b.n	80093be <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80093b4:	2301      	movs	r3, #1
 80093b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80093ba:	e000      	b.n	80093be <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80093bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80093be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d10a      	bne.n	80093dc <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80093c6:	4bbf      	ldr	r3, [pc, #764]	; (80096c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80093c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093ca:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80093ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80093d4:	4abb      	ldr	r2, [pc, #748]	; (80096c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80093d6:	430b      	orrs	r3, r1
 80093d8:	6553      	str	r3, [r2, #84]	; 0x54
 80093da:	e003      	b.n	80093e4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80093e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80093e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80093e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ec:	f002 0302 	and.w	r3, r2, #2
 80093f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80093f4:	2300      	movs	r3, #0
 80093f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80093fa:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80093fe:	460b      	mov	r3, r1
 8009400:	4313      	orrs	r3, r2
 8009402:	d041      	beq.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009404:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009408:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800940a:	2b05      	cmp	r3, #5
 800940c:	d824      	bhi.n	8009458 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800940e:	a201      	add	r2, pc, #4	; (adr r2, 8009414 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8009410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009414:	08009461 	.word	0x08009461
 8009418:	0800942d 	.word	0x0800942d
 800941c:	08009443 	.word	0x08009443
 8009420:	08009461 	.word	0x08009461
 8009424:	08009461 	.word	0x08009461
 8009428:	08009461 	.word	0x08009461
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800942c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009430:	3308      	adds	r3, #8
 8009432:	2101      	movs	r1, #1
 8009434:	4618      	mov	r0, r3
 8009436:	f000 fcb3 	bl	8009da0 <RCCEx_PLL2_Config>
 800943a:	4603      	mov	r3, r0
 800943c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009440:	e00f      	b.n	8009462 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009442:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009446:	3328      	adds	r3, #40	; 0x28
 8009448:	2101      	movs	r1, #1
 800944a:	4618      	mov	r0, r3
 800944c:	f000 fd5a 	bl	8009f04 <RCCEx_PLL3_Config>
 8009450:	4603      	mov	r3, r0
 8009452:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8009456:	e004      	b.n	8009462 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009458:	2301      	movs	r3, #1
 800945a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800945e:	e000      	b.n	8009462 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8009460:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009462:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009466:	2b00      	cmp	r3, #0
 8009468:	d10a      	bne.n	8009480 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800946a:	4b96      	ldr	r3, [pc, #600]	; (80096c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800946c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800946e:	f023 0107 	bic.w	r1, r3, #7
 8009472:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009476:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009478:	4a92      	ldr	r2, [pc, #584]	; (80096c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800947a:	430b      	orrs	r3, r1
 800947c:	6553      	str	r3, [r2, #84]	; 0x54
 800947e:	e003      	b.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009480:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009484:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009488:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800948c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009490:	f002 0304 	and.w	r3, r2, #4
 8009494:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009498:	2300      	movs	r3, #0
 800949a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800949e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80094a2:	460b      	mov	r3, r1
 80094a4:	4313      	orrs	r3, r2
 80094a6:	d044      	beq.n	8009532 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80094a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80094b0:	2b05      	cmp	r3, #5
 80094b2:	d825      	bhi.n	8009500 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80094b4:	a201      	add	r2, pc, #4	; (adr r2, 80094bc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80094b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094ba:	bf00      	nop
 80094bc:	08009509 	.word	0x08009509
 80094c0:	080094d5 	.word	0x080094d5
 80094c4:	080094eb 	.word	0x080094eb
 80094c8:	08009509 	.word	0x08009509
 80094cc:	08009509 	.word	0x08009509
 80094d0:	08009509 	.word	0x08009509
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80094d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094d8:	3308      	adds	r3, #8
 80094da:	2101      	movs	r1, #1
 80094dc:	4618      	mov	r0, r3
 80094de:	f000 fc5f 	bl	8009da0 <RCCEx_PLL2_Config>
 80094e2:	4603      	mov	r3, r0
 80094e4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80094e8:	e00f      	b.n	800950a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80094ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80094ee:	3328      	adds	r3, #40	; 0x28
 80094f0:	2101      	movs	r1, #1
 80094f2:	4618      	mov	r0, r3
 80094f4:	f000 fd06 	bl	8009f04 <RCCEx_PLL3_Config>
 80094f8:	4603      	mov	r3, r0
 80094fa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80094fe:	e004      	b.n	800950a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009500:	2301      	movs	r3, #1
 8009502:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009506:	e000      	b.n	800950a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009508:	bf00      	nop
    }

    if (ret == HAL_OK)
 800950a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800950e:	2b00      	cmp	r3, #0
 8009510:	d10b      	bne.n	800952a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009512:	4b6c      	ldr	r3, [pc, #432]	; (80096c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009516:	f023 0107 	bic.w	r1, r3, #7
 800951a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800951e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009522:	4a68      	ldr	r2, [pc, #416]	; (80096c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009524:	430b      	orrs	r3, r1
 8009526:	6593      	str	r3, [r2, #88]	; 0x58
 8009528:	e003      	b.n	8009532 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800952a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800952e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009532:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800953a:	f002 0320 	and.w	r3, r2, #32
 800953e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009542:	2300      	movs	r3, #0
 8009544:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009548:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800954c:	460b      	mov	r3, r1
 800954e:	4313      	orrs	r3, r2
 8009550:	d055      	beq.n	80095fe <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8009552:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800955a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800955e:	d033      	beq.n	80095c8 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8009560:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009564:	d82c      	bhi.n	80095c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009566:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800956a:	d02f      	beq.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800956c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009570:	d826      	bhi.n	80095c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009572:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009576:	d02b      	beq.n	80095d0 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8009578:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800957c:	d820      	bhi.n	80095c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800957e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009582:	d012      	beq.n	80095aa <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009584:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009588:	d81a      	bhi.n	80095c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800958a:	2b00      	cmp	r3, #0
 800958c:	d022      	beq.n	80095d4 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800958e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009592:	d115      	bne.n	80095c0 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009594:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009598:	3308      	adds	r3, #8
 800959a:	2100      	movs	r1, #0
 800959c:	4618      	mov	r0, r3
 800959e:	f000 fbff 	bl	8009da0 <RCCEx_PLL2_Config>
 80095a2:	4603      	mov	r3, r0
 80095a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80095a8:	e015      	b.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80095aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095ae:	3328      	adds	r3, #40	; 0x28
 80095b0:	2102      	movs	r1, #2
 80095b2:	4618      	mov	r0, r3
 80095b4:	f000 fca6 	bl	8009f04 <RCCEx_PLL3_Config>
 80095b8:	4603      	mov	r3, r0
 80095ba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80095be:	e00a      	b.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80095c0:	2301      	movs	r3, #1
 80095c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80095c6:	e006      	b.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80095c8:	bf00      	nop
 80095ca:	e004      	b.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80095cc:	bf00      	nop
 80095ce:	e002      	b.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80095d0:	bf00      	nop
 80095d2:	e000      	b.n	80095d6 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80095d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d10b      	bne.n	80095f6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80095de:	4b39      	ldr	r3, [pc, #228]	; (80096c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80095e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80095e2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80095e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80095ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095ee:	4a35      	ldr	r2, [pc, #212]	; (80096c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80095f0:	430b      	orrs	r3, r1
 80095f2:	6553      	str	r3, [r2, #84]	; 0x54
 80095f4:	e003      	b.n	80095fe <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80095f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80095fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80095fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009602:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009606:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800960a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800960e:	2300      	movs	r3, #0
 8009610:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8009614:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8009618:	460b      	mov	r3, r1
 800961a:	4313      	orrs	r3, r2
 800961c:	d058      	beq.n	80096d0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800961e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009622:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009626:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800962a:	d033      	beq.n	8009694 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800962c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8009630:	d82c      	bhi.n	800968c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009632:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009636:	d02f      	beq.n	8009698 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8009638:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800963c:	d826      	bhi.n	800968c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800963e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009642:	d02b      	beq.n	800969c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8009644:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009648:	d820      	bhi.n	800968c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800964a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800964e:	d012      	beq.n	8009676 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8009650:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009654:	d81a      	bhi.n	800968c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8009656:	2b00      	cmp	r3, #0
 8009658:	d022      	beq.n	80096a0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800965a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800965e:	d115      	bne.n	800968c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009660:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009664:	3308      	adds	r3, #8
 8009666:	2100      	movs	r1, #0
 8009668:	4618      	mov	r0, r3
 800966a:	f000 fb99 	bl	8009da0 <RCCEx_PLL2_Config>
 800966e:	4603      	mov	r3, r0
 8009670:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009674:	e015      	b.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009676:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800967a:	3328      	adds	r3, #40	; 0x28
 800967c:	2102      	movs	r1, #2
 800967e:	4618      	mov	r0, r3
 8009680:	f000 fc40 	bl	8009f04 <RCCEx_PLL3_Config>
 8009684:	4603      	mov	r3, r0
 8009686:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800968a:	e00a      	b.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800968c:	2301      	movs	r3, #1
 800968e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009692:	e006      	b.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009694:	bf00      	nop
 8009696:	e004      	b.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009698:	bf00      	nop
 800969a:	e002      	b.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800969c:	bf00      	nop
 800969e:	e000      	b.n	80096a2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80096a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80096a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d10e      	bne.n	80096c8 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80096aa:	4b06      	ldr	r3, [pc, #24]	; (80096c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80096ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096ae:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80096b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096b6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80096ba:	4a02      	ldr	r2, [pc, #8]	; (80096c4 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80096bc:	430b      	orrs	r3, r1
 80096be:	6593      	str	r3, [r2, #88]	; 0x58
 80096c0:	e006      	b.n	80096d0 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80096c2:	bf00      	nop
 80096c4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80096c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80096cc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80096d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d8:	f002 0380 	and.w	r3, r2, #128	; 0x80
 80096dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80096e0:	2300      	movs	r3, #0
 80096e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80096e6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80096ea:	460b      	mov	r3, r1
 80096ec:	4313      	orrs	r3, r2
 80096ee:	d055      	beq.n	800979c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80096f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80096f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80096f8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80096fc:	d033      	beq.n	8009766 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80096fe:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8009702:	d82c      	bhi.n	800975e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009704:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009708:	d02f      	beq.n	800976a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800970a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800970e:	d826      	bhi.n	800975e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009710:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8009714:	d02b      	beq.n	800976e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8009716:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800971a:	d820      	bhi.n	800975e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800971c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009720:	d012      	beq.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8009722:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009726:	d81a      	bhi.n	800975e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009728:	2b00      	cmp	r3, #0
 800972a:	d022      	beq.n	8009772 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800972c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009730:	d115      	bne.n	800975e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009732:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009736:	3308      	adds	r3, #8
 8009738:	2100      	movs	r1, #0
 800973a:	4618      	mov	r0, r3
 800973c:	f000 fb30 	bl	8009da0 <RCCEx_PLL2_Config>
 8009740:	4603      	mov	r3, r0
 8009742:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8009746:	e015      	b.n	8009774 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009748:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800974c:	3328      	adds	r3, #40	; 0x28
 800974e:	2102      	movs	r1, #2
 8009750:	4618      	mov	r0, r3
 8009752:	f000 fbd7 	bl	8009f04 <RCCEx_PLL3_Config>
 8009756:	4603      	mov	r3, r0
 8009758:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800975c:	e00a      	b.n	8009774 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800975e:	2301      	movs	r3, #1
 8009760:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009764:	e006      	b.n	8009774 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009766:	bf00      	nop
 8009768:	e004      	b.n	8009774 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800976a:	bf00      	nop
 800976c:	e002      	b.n	8009774 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800976e:	bf00      	nop
 8009770:	e000      	b.n	8009774 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8009772:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009774:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009778:	2b00      	cmp	r3, #0
 800977a:	d10b      	bne.n	8009794 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800977c:	4ba1      	ldr	r3, [pc, #644]	; (8009a04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800977e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009780:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8009784:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009788:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800978c:	4a9d      	ldr	r2, [pc, #628]	; (8009a04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800978e:	430b      	orrs	r3, r1
 8009790:	6593      	str	r3, [r2, #88]	; 0x58
 8009792:	e003      	b.n	800979c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009794:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009798:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800979c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a4:	f002 0308 	and.w	r3, r2, #8
 80097a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80097ac:	2300      	movs	r3, #0
 80097ae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80097b2:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80097b6:	460b      	mov	r3, r1
 80097b8:	4313      	orrs	r3, r2
 80097ba:	d01e      	beq.n	80097fa <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80097bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80097c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097c8:	d10c      	bne.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80097ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097ce:	3328      	adds	r3, #40	; 0x28
 80097d0:	2102      	movs	r1, #2
 80097d2:	4618      	mov	r0, r3
 80097d4:	f000 fb96 	bl	8009f04 <RCCEx_PLL3_Config>
 80097d8:	4603      	mov	r3, r0
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d002      	beq.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 80097de:	2301      	movs	r3, #1
 80097e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80097e4:	4b87      	ldr	r3, [pc, #540]	; (8009a04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80097e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80097e8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80097ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80097f4:	4a83      	ldr	r2, [pc, #524]	; (8009a04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80097f6:	430b      	orrs	r3, r1
 80097f8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80097fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80097fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009802:	f002 0310 	and.w	r3, r2, #16
 8009806:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800980a:	2300      	movs	r3, #0
 800980c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8009810:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8009814:	460b      	mov	r3, r1
 8009816:	4313      	orrs	r3, r2
 8009818:	d01e      	beq.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800981a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800981e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009822:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009826:	d10c      	bne.n	8009842 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009828:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800982c:	3328      	adds	r3, #40	; 0x28
 800982e:	2102      	movs	r1, #2
 8009830:	4618      	mov	r0, r3
 8009832:	f000 fb67 	bl	8009f04 <RCCEx_PLL3_Config>
 8009836:	4603      	mov	r3, r0
 8009838:	2b00      	cmp	r3, #0
 800983a:	d002      	beq.n	8009842 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800983c:	2301      	movs	r3, #1
 800983e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009842:	4b70      	ldr	r3, [pc, #448]	; (8009a04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009844:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009846:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800984a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800984e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009852:	4a6c      	ldr	r2, [pc, #432]	; (8009a04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009854:	430b      	orrs	r3, r1
 8009856:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009858:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800985c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009860:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8009864:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009868:	2300      	movs	r3, #0
 800986a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800986e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8009872:	460b      	mov	r3, r1
 8009874:	4313      	orrs	r3, r2
 8009876:	d03e      	beq.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8009878:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800987c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009880:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009884:	d022      	beq.n	80098cc <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8009886:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800988a:	d81b      	bhi.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800988c:	2b00      	cmp	r3, #0
 800988e:	d003      	beq.n	8009898 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8009890:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009894:	d00b      	beq.n	80098ae <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8009896:	e015      	b.n	80098c4 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009898:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800989c:	3308      	adds	r3, #8
 800989e:	2100      	movs	r1, #0
 80098a0:	4618      	mov	r0, r3
 80098a2:	f000 fa7d 	bl	8009da0 <RCCEx_PLL2_Config>
 80098a6:	4603      	mov	r3, r0
 80098a8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80098ac:	e00f      	b.n	80098ce <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80098ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098b2:	3328      	adds	r3, #40	; 0x28
 80098b4:	2102      	movs	r1, #2
 80098b6:	4618      	mov	r0, r3
 80098b8:	f000 fb24 	bl	8009f04 <RCCEx_PLL3_Config>
 80098bc:	4603      	mov	r3, r0
 80098be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80098c2:	e004      	b.n	80098ce <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098c4:	2301      	movs	r3, #1
 80098c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80098ca:	e000      	b.n	80098ce <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 80098cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098d2:	2b00      	cmp	r3, #0
 80098d4:	d10b      	bne.n	80098ee <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80098d6:	4b4b      	ldr	r3, [pc, #300]	; (8009a04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80098d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098da:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80098de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098e2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80098e6:	4a47      	ldr	r2, [pc, #284]	; (8009a04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80098e8:	430b      	orrs	r3, r1
 80098ea:	6593      	str	r3, [r2, #88]	; 0x58
 80098ec:	e003      	b.n	80098f6 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098f2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80098f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098fe:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8009902:	67bb      	str	r3, [r7, #120]	; 0x78
 8009904:	2300      	movs	r3, #0
 8009906:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009908:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800990c:	460b      	mov	r3, r1
 800990e:	4313      	orrs	r3, r2
 8009910:	d03b      	beq.n	800998a <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8009912:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800991a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800991e:	d01f      	beq.n	8009960 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8009920:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009924:	d818      	bhi.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8009926:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800992a:	d003      	beq.n	8009934 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800992c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009930:	d007      	beq.n	8009942 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8009932:	e011      	b.n	8009958 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009934:	4b33      	ldr	r3, [pc, #204]	; (8009a04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009938:	4a32      	ldr	r2, [pc, #200]	; (8009a04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800993a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800993e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8009940:	e00f      	b.n	8009962 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009942:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009946:	3328      	adds	r3, #40	; 0x28
 8009948:	2101      	movs	r1, #1
 800994a:	4618      	mov	r0, r3
 800994c:	f000 fada 	bl	8009f04 <RCCEx_PLL3_Config>
 8009950:	4603      	mov	r3, r0
 8009952:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8009956:	e004      	b.n	8009962 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009958:	2301      	movs	r3, #1
 800995a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800995e:	e000      	b.n	8009962 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8009960:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009962:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009966:	2b00      	cmp	r3, #0
 8009968:	d10b      	bne.n	8009982 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800996a:	4b26      	ldr	r3, [pc, #152]	; (8009a04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800996c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800996e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8009972:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800997a:	4a22      	ldr	r2, [pc, #136]	; (8009a04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800997c:	430b      	orrs	r3, r1
 800997e:	6553      	str	r3, [r2, #84]	; 0x54
 8009980:	e003      	b.n	800998a <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009982:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009986:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800998a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800998e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009992:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8009996:	673b      	str	r3, [r7, #112]	; 0x70
 8009998:	2300      	movs	r3, #0
 800999a:	677b      	str	r3, [r7, #116]	; 0x74
 800999c:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80099a0:	460b      	mov	r3, r1
 80099a2:	4313      	orrs	r3, r2
 80099a4:	d034      	beq.n	8009a10 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80099a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d003      	beq.n	80099b8 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 80099b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099b4:	d007      	beq.n	80099c6 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 80099b6:	e011      	b.n	80099dc <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099b8:	4b12      	ldr	r3, [pc, #72]	; (8009a04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80099ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099bc:	4a11      	ldr	r2, [pc, #68]	; (8009a04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80099be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80099c4:	e00e      	b.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80099c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099ca:	3308      	adds	r3, #8
 80099cc:	2102      	movs	r1, #2
 80099ce:	4618      	mov	r0, r3
 80099d0:	f000 f9e6 	bl	8009da0 <RCCEx_PLL2_Config>
 80099d4:	4603      	mov	r3, r0
 80099d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80099da:	e003      	b.n	80099e4 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 80099dc:	2301      	movs	r3, #1
 80099de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80099e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80099e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d10d      	bne.n	8009a08 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80099ec:	4b05      	ldr	r3, [pc, #20]	; (8009a04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80099ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80099f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099fa:	4a02      	ldr	r2, [pc, #8]	; (8009a04 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80099fc:	430b      	orrs	r3, r1
 80099fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009a00:	e006      	b.n	8009a10 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8009a02:	bf00      	nop
 8009a04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a0c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009a10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a18:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8009a1c:	66bb      	str	r3, [r7, #104]	; 0x68
 8009a1e:	2300      	movs	r3, #0
 8009a20:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009a22:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8009a26:	460b      	mov	r3, r1
 8009a28:	4313      	orrs	r3, r2
 8009a2a:	d00c      	beq.n	8009a46 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009a2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a30:	3328      	adds	r3, #40	; 0x28
 8009a32:	2102      	movs	r1, #2
 8009a34:	4618      	mov	r0, r3
 8009a36:	f000 fa65 	bl	8009f04 <RCCEx_PLL3_Config>
 8009a3a:	4603      	mov	r3, r0
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d002      	beq.n	8009a46 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8009a40:	2301      	movs	r3, #1
 8009a42:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8009a46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a4e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8009a52:	663b      	str	r3, [r7, #96]	; 0x60
 8009a54:	2300      	movs	r3, #0
 8009a56:	667b      	str	r3, [r7, #100]	; 0x64
 8009a58:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8009a5c:	460b      	mov	r3, r1
 8009a5e:	4313      	orrs	r3, r2
 8009a60:	d038      	beq.n	8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8009a62:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009a6a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a6e:	d018      	beq.n	8009aa2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8009a70:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009a74:	d811      	bhi.n	8009a9a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009a76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a7a:	d014      	beq.n	8009aa6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8009a7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009a80:	d80b      	bhi.n	8009a9a <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d011      	beq.n	8009aaa <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8009a86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009a8a:	d106      	bne.n	8009a9a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a8c:	4bc3      	ldr	r3, [pc, #780]	; (8009d9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a90:	4ac2      	ldr	r2, [pc, #776]	; (8009d9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009a92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009a98:	e008      	b.n	8009aac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a9a:	2301      	movs	r3, #1
 8009a9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009aa0:	e004      	b.n	8009aac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009aa2:	bf00      	nop
 8009aa4:	e002      	b.n	8009aac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009aa6:	bf00      	nop
 8009aa8:	e000      	b.n	8009aac <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009aaa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009aac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d10b      	bne.n	8009acc <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009ab4:	4bb9      	ldr	r3, [pc, #740]	; (8009d9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ab8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009abc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ac0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009ac4:	4ab5      	ldr	r2, [pc, #724]	; (8009d9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009ac6:	430b      	orrs	r3, r1
 8009ac8:	6553      	str	r3, [r2, #84]	; 0x54
 8009aca:	e003      	b.n	8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009acc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ad0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009ad4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009adc:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8009ae0:	65bb      	str	r3, [r7, #88]	; 0x58
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009ae6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8009aea:	460b      	mov	r3, r1
 8009aec:	4313      	orrs	r3, r2
 8009aee:	d009      	beq.n	8009b04 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8009af0:	4baa      	ldr	r3, [pc, #680]	; (8009d9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009af2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009af4:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8009af8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009afc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009afe:	4aa7      	ldr	r2, [pc, #668]	; (8009d9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b00:	430b      	orrs	r3, r1
 8009b02:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009b04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b0c:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8009b10:	653b      	str	r3, [r7, #80]	; 0x50
 8009b12:	2300      	movs	r3, #0
 8009b14:	657b      	str	r3, [r7, #84]	; 0x54
 8009b16:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8009b1a:	460b      	mov	r3, r1
 8009b1c:	4313      	orrs	r3, r2
 8009b1e:	d00a      	beq.n	8009b36 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8009b20:	4b9e      	ldr	r3, [pc, #632]	; (8009d9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b22:	691b      	ldr	r3, [r3, #16]
 8009b24:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8009b28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b2c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8009b30:	4a9a      	ldr	r2, [pc, #616]	; (8009d9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b32:	430b      	orrs	r3, r1
 8009b34:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009b36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b3e:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8009b42:	64bb      	str	r3, [r7, #72]	; 0x48
 8009b44:	2300      	movs	r3, #0
 8009b46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b48:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8009b4c:	460b      	mov	r3, r1
 8009b4e:	4313      	orrs	r3, r2
 8009b50:	d009      	beq.n	8009b66 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8009b52:	4b92      	ldr	r3, [pc, #584]	; (8009d9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b54:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b56:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8009b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009b60:	4a8e      	ldr	r2, [pc, #568]	; (8009d9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b62:	430b      	orrs	r3, r1
 8009b64:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8009b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b6e:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8009b72:	643b      	str	r3, [r7, #64]	; 0x40
 8009b74:	2300      	movs	r3, #0
 8009b76:	647b      	str	r3, [r7, #68]	; 0x44
 8009b78:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8009b7c:	460b      	mov	r3, r1
 8009b7e:	4313      	orrs	r3, r2
 8009b80:	d00e      	beq.n	8009ba0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009b82:	4b86      	ldr	r3, [pc, #536]	; (8009d9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b84:	691b      	ldr	r3, [r3, #16]
 8009b86:	4a85      	ldr	r2, [pc, #532]	; (8009d9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b88:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8009b8c:	6113      	str	r3, [r2, #16]
 8009b8e:	4b83      	ldr	r3, [pc, #524]	; (8009d9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b90:	6919      	ldr	r1, [r3, #16]
 8009b92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b96:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8009b9a:	4a80      	ldr	r2, [pc, #512]	; (8009d9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009b9c:	430b      	orrs	r3, r1
 8009b9e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009ba0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ba8:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8009bac:	63bb      	str	r3, [r7, #56]	; 0x38
 8009bae:	2300      	movs	r3, #0
 8009bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009bb2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8009bb6:	460b      	mov	r3, r1
 8009bb8:	4313      	orrs	r3, r2
 8009bba:	d009      	beq.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009bbc:	4b77      	ldr	r3, [pc, #476]	; (8009d9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bc0:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009bc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bca:	4a74      	ldr	r2, [pc, #464]	; (8009d9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009bcc:	430b      	orrs	r3, r1
 8009bce:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bd8:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8009bdc:	633b      	str	r3, [r7, #48]	; 0x30
 8009bde:	2300      	movs	r3, #0
 8009be0:	637b      	str	r3, [r7, #52]	; 0x34
 8009be2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8009be6:	460b      	mov	r3, r1
 8009be8:	4313      	orrs	r3, r2
 8009bea:	d00a      	beq.n	8009c02 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009bec:	4b6b      	ldr	r3, [pc, #428]	; (8009d9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009bf0:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8009bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bf8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009bfc:	4a67      	ldr	r2, [pc, #412]	; (8009d9c <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009bfe:	430b      	orrs	r3, r1
 8009c00:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009c02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c0a:	2100      	movs	r1, #0
 8009c0c:	62b9      	str	r1, [r7, #40]	; 0x28
 8009c0e:	f003 0301 	and.w	r3, r3, #1
 8009c12:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c14:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8009c18:	460b      	mov	r3, r1
 8009c1a:	4313      	orrs	r3, r2
 8009c1c:	d011      	beq.n	8009c42 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009c1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c22:	3308      	adds	r3, #8
 8009c24:	2100      	movs	r1, #0
 8009c26:	4618      	mov	r0, r3
 8009c28:	f000 f8ba 	bl	8009da0 <RCCEx_PLL2_Config>
 8009c2c:	4603      	mov	r3, r0
 8009c2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009c32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d003      	beq.n	8009c42 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c3e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009c42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c4a:	2100      	movs	r1, #0
 8009c4c:	6239      	str	r1, [r7, #32]
 8009c4e:	f003 0302 	and.w	r3, r3, #2
 8009c52:	627b      	str	r3, [r7, #36]	; 0x24
 8009c54:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009c58:	460b      	mov	r3, r1
 8009c5a:	4313      	orrs	r3, r2
 8009c5c:	d011      	beq.n	8009c82 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009c5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c62:	3308      	adds	r3, #8
 8009c64:	2101      	movs	r1, #1
 8009c66:	4618      	mov	r0, r3
 8009c68:	f000 f89a 	bl	8009da0 <RCCEx_PLL2_Config>
 8009c6c:	4603      	mov	r3, r0
 8009c6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009c72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d003      	beq.n	8009c82 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c7e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009c82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c8a:	2100      	movs	r1, #0
 8009c8c:	61b9      	str	r1, [r7, #24]
 8009c8e:	f003 0304 	and.w	r3, r3, #4
 8009c92:	61fb      	str	r3, [r7, #28]
 8009c94:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009c98:	460b      	mov	r3, r1
 8009c9a:	4313      	orrs	r3, r2
 8009c9c:	d011      	beq.n	8009cc2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ca2:	3308      	adds	r3, #8
 8009ca4:	2102      	movs	r1, #2
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	f000 f87a 	bl	8009da0 <RCCEx_PLL2_Config>
 8009cac:	4603      	mov	r3, r0
 8009cae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009cb2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d003      	beq.n	8009cc2 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009cbe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009cc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cca:	2100      	movs	r1, #0
 8009ccc:	6139      	str	r1, [r7, #16]
 8009cce:	f003 0308 	and.w	r3, r3, #8
 8009cd2:	617b      	str	r3, [r7, #20]
 8009cd4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009cd8:	460b      	mov	r3, r1
 8009cda:	4313      	orrs	r3, r2
 8009cdc:	d011      	beq.n	8009d02 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009cde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ce2:	3328      	adds	r3, #40	; 0x28
 8009ce4:	2100      	movs	r1, #0
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	f000 f90c 	bl	8009f04 <RCCEx_PLL3_Config>
 8009cec:	4603      	mov	r3, r0
 8009cee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8009cf2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d003      	beq.n	8009d02 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009cfa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009cfe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009d02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d0a:	2100      	movs	r1, #0
 8009d0c:	60b9      	str	r1, [r7, #8]
 8009d0e:	f003 0310 	and.w	r3, r3, #16
 8009d12:	60fb      	str	r3, [r7, #12]
 8009d14:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009d18:	460b      	mov	r3, r1
 8009d1a:	4313      	orrs	r3, r2
 8009d1c:	d011      	beq.n	8009d42 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009d1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d22:	3328      	adds	r3, #40	; 0x28
 8009d24:	2101      	movs	r1, #1
 8009d26:	4618      	mov	r0, r3
 8009d28:	f000 f8ec 	bl	8009f04 <RCCEx_PLL3_Config>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009d32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d003      	beq.n	8009d42 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d3a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d3e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009d42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d4a:	2100      	movs	r1, #0
 8009d4c:	6039      	str	r1, [r7, #0]
 8009d4e:	f003 0320 	and.w	r3, r3, #32
 8009d52:	607b      	str	r3, [r7, #4]
 8009d54:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009d58:	460b      	mov	r3, r1
 8009d5a:	4313      	orrs	r3, r2
 8009d5c:	d011      	beq.n	8009d82 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009d5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d62:	3328      	adds	r3, #40	; 0x28
 8009d64:	2102      	movs	r1, #2
 8009d66:	4618      	mov	r0, r3
 8009d68:	f000 f8cc 	bl	8009f04 <RCCEx_PLL3_Config>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8009d72:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d76:	2b00      	cmp	r3, #0
 8009d78:	d003      	beq.n	8009d82 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d7a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d7e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8009d82:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d101      	bne.n	8009d8e <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	e000      	b.n	8009d90 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8009d8e:	2301      	movs	r3, #1
}
 8009d90:	4618      	mov	r0, r3
 8009d92:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8009d96:	46bd      	mov	sp, r7
 8009d98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009d9c:	58024400 	.word	0x58024400

08009da0 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b084      	sub	sp, #16
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
 8009da8:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009daa:	2300      	movs	r3, #0
 8009dac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009dae:	4b53      	ldr	r3, [pc, #332]	; (8009efc <RCCEx_PLL2_Config+0x15c>)
 8009db0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009db2:	f003 0303 	and.w	r3, r3, #3
 8009db6:	2b03      	cmp	r3, #3
 8009db8:	d101      	bne.n	8009dbe <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8009dba:	2301      	movs	r3, #1
 8009dbc:	e099      	b.n	8009ef2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8009dbe:	4b4f      	ldr	r3, [pc, #316]	; (8009efc <RCCEx_PLL2_Config+0x15c>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	4a4e      	ldr	r2, [pc, #312]	; (8009efc <RCCEx_PLL2_Config+0x15c>)
 8009dc4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009dc8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009dca:	f7f7 fa73 	bl	80012b4 <HAL_GetTick>
 8009dce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009dd0:	e008      	b.n	8009de4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009dd2:	f7f7 fa6f 	bl	80012b4 <HAL_GetTick>
 8009dd6:	4602      	mov	r2, r0
 8009dd8:	68bb      	ldr	r3, [r7, #8]
 8009dda:	1ad3      	subs	r3, r2, r3
 8009ddc:	2b02      	cmp	r3, #2
 8009dde:	d901      	bls.n	8009de4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009de0:	2303      	movs	r3, #3
 8009de2:	e086      	b.n	8009ef2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8009de4:	4b45      	ldr	r3, [pc, #276]	; (8009efc <RCCEx_PLL2_Config+0x15c>)
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d1f0      	bne.n	8009dd2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8009df0:	4b42      	ldr	r3, [pc, #264]	; (8009efc <RCCEx_PLL2_Config+0x15c>)
 8009df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009df4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	031b      	lsls	r3, r3, #12
 8009dfe:	493f      	ldr	r1, [pc, #252]	; (8009efc <RCCEx_PLL2_Config+0x15c>)
 8009e00:	4313      	orrs	r3, r2
 8009e02:	628b      	str	r3, [r1, #40]	; 0x28
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	685b      	ldr	r3, [r3, #4]
 8009e08:	3b01      	subs	r3, #1
 8009e0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	689b      	ldr	r3, [r3, #8]
 8009e12:	3b01      	subs	r3, #1
 8009e14:	025b      	lsls	r3, r3, #9
 8009e16:	b29b      	uxth	r3, r3
 8009e18:	431a      	orrs	r2, r3
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	68db      	ldr	r3, [r3, #12]
 8009e1e:	3b01      	subs	r3, #1
 8009e20:	041b      	lsls	r3, r3, #16
 8009e22:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009e26:	431a      	orrs	r2, r3
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	691b      	ldr	r3, [r3, #16]
 8009e2c:	3b01      	subs	r3, #1
 8009e2e:	061b      	lsls	r3, r3, #24
 8009e30:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009e34:	4931      	ldr	r1, [pc, #196]	; (8009efc <RCCEx_PLL2_Config+0x15c>)
 8009e36:	4313      	orrs	r3, r2
 8009e38:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8009e3a:	4b30      	ldr	r3, [pc, #192]	; (8009efc <RCCEx_PLL2_Config+0x15c>)
 8009e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e3e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	695b      	ldr	r3, [r3, #20]
 8009e46:	492d      	ldr	r1, [pc, #180]	; (8009efc <RCCEx_PLL2_Config+0x15c>)
 8009e48:	4313      	orrs	r3, r2
 8009e4a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8009e4c:	4b2b      	ldr	r3, [pc, #172]	; (8009efc <RCCEx_PLL2_Config+0x15c>)
 8009e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e50:	f023 0220 	bic.w	r2, r3, #32
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	699b      	ldr	r3, [r3, #24]
 8009e58:	4928      	ldr	r1, [pc, #160]	; (8009efc <RCCEx_PLL2_Config+0x15c>)
 8009e5a:	4313      	orrs	r3, r2
 8009e5c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8009e5e:	4b27      	ldr	r3, [pc, #156]	; (8009efc <RCCEx_PLL2_Config+0x15c>)
 8009e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e62:	4a26      	ldr	r2, [pc, #152]	; (8009efc <RCCEx_PLL2_Config+0x15c>)
 8009e64:	f023 0310 	bic.w	r3, r3, #16
 8009e68:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8009e6a:	4b24      	ldr	r3, [pc, #144]	; (8009efc <RCCEx_PLL2_Config+0x15c>)
 8009e6c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009e6e:	4b24      	ldr	r3, [pc, #144]	; (8009f00 <RCCEx_PLL2_Config+0x160>)
 8009e70:	4013      	ands	r3, r2
 8009e72:	687a      	ldr	r2, [r7, #4]
 8009e74:	69d2      	ldr	r2, [r2, #28]
 8009e76:	00d2      	lsls	r2, r2, #3
 8009e78:	4920      	ldr	r1, [pc, #128]	; (8009efc <RCCEx_PLL2_Config+0x15c>)
 8009e7a:	4313      	orrs	r3, r2
 8009e7c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8009e7e:	4b1f      	ldr	r3, [pc, #124]	; (8009efc <RCCEx_PLL2_Config+0x15c>)
 8009e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e82:	4a1e      	ldr	r2, [pc, #120]	; (8009efc <RCCEx_PLL2_Config+0x15c>)
 8009e84:	f043 0310 	orr.w	r3, r3, #16
 8009e88:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009e8a:	683b      	ldr	r3, [r7, #0]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d106      	bne.n	8009e9e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8009e90:	4b1a      	ldr	r3, [pc, #104]	; (8009efc <RCCEx_PLL2_Config+0x15c>)
 8009e92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e94:	4a19      	ldr	r2, [pc, #100]	; (8009efc <RCCEx_PLL2_Config+0x15c>)
 8009e96:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009e9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009e9c:	e00f      	b.n	8009ebe <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8009e9e:	683b      	ldr	r3, [r7, #0]
 8009ea0:	2b01      	cmp	r3, #1
 8009ea2:	d106      	bne.n	8009eb2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8009ea4:	4b15      	ldr	r3, [pc, #84]	; (8009efc <RCCEx_PLL2_Config+0x15c>)
 8009ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ea8:	4a14      	ldr	r2, [pc, #80]	; (8009efc <RCCEx_PLL2_Config+0x15c>)
 8009eaa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009eae:	62d3      	str	r3, [r2, #44]	; 0x2c
 8009eb0:	e005      	b.n	8009ebe <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8009eb2:	4b12      	ldr	r3, [pc, #72]	; (8009efc <RCCEx_PLL2_Config+0x15c>)
 8009eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eb6:	4a11      	ldr	r2, [pc, #68]	; (8009efc <RCCEx_PLL2_Config+0x15c>)
 8009eb8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009ebc:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8009ebe:	4b0f      	ldr	r3, [pc, #60]	; (8009efc <RCCEx_PLL2_Config+0x15c>)
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	4a0e      	ldr	r2, [pc, #56]	; (8009efc <RCCEx_PLL2_Config+0x15c>)
 8009ec4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009ec8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009eca:	f7f7 f9f3 	bl	80012b4 <HAL_GetTick>
 8009ece:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009ed0:	e008      	b.n	8009ee4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009ed2:	f7f7 f9ef 	bl	80012b4 <HAL_GetTick>
 8009ed6:	4602      	mov	r2, r0
 8009ed8:	68bb      	ldr	r3, [r7, #8]
 8009eda:	1ad3      	subs	r3, r2, r3
 8009edc:	2b02      	cmp	r3, #2
 8009ede:	d901      	bls.n	8009ee4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8009ee0:	2303      	movs	r3, #3
 8009ee2:	e006      	b.n	8009ef2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009ee4:	4b05      	ldr	r3, [pc, #20]	; (8009efc <RCCEx_PLL2_Config+0x15c>)
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009eec:	2b00      	cmp	r3, #0
 8009eee:	d0f0      	beq.n	8009ed2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8009ef0:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3710      	adds	r7, #16
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}
 8009efa:	bf00      	nop
 8009efc:	58024400 	.word	0x58024400
 8009f00:	ffff0007 	.word	0xffff0007

08009f04 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b084      	sub	sp, #16
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	6078      	str	r0, [r7, #4]
 8009f0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8009f12:	4b53      	ldr	r3, [pc, #332]	; (800a060 <RCCEx_PLL3_Config+0x15c>)
 8009f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f16:	f003 0303 	and.w	r3, r3, #3
 8009f1a:	2b03      	cmp	r3, #3
 8009f1c:	d101      	bne.n	8009f22 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8009f1e:	2301      	movs	r3, #1
 8009f20:	e099      	b.n	800a056 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8009f22:	4b4f      	ldr	r3, [pc, #316]	; (800a060 <RCCEx_PLL3_Config+0x15c>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	4a4e      	ldr	r2, [pc, #312]	; (800a060 <RCCEx_PLL3_Config+0x15c>)
 8009f28:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009f2c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f2e:	f7f7 f9c1 	bl	80012b4 <HAL_GetTick>
 8009f32:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009f34:	e008      	b.n	8009f48 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8009f36:	f7f7 f9bd 	bl	80012b4 <HAL_GetTick>
 8009f3a:	4602      	mov	r2, r0
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	1ad3      	subs	r3, r2, r3
 8009f40:	2b02      	cmp	r3, #2
 8009f42:	d901      	bls.n	8009f48 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8009f44:	2303      	movs	r3, #3
 8009f46:	e086      	b.n	800a056 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8009f48:	4b45      	ldr	r3, [pc, #276]	; (800a060 <RCCEx_PLL3_Config+0x15c>)
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d1f0      	bne.n	8009f36 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8009f54:	4b42      	ldr	r3, [pc, #264]	; (800a060 <RCCEx_PLL3_Config+0x15c>)
 8009f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009f58:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	051b      	lsls	r3, r3, #20
 8009f62:	493f      	ldr	r1, [pc, #252]	; (800a060 <RCCEx_PLL3_Config+0x15c>)
 8009f64:	4313      	orrs	r3, r2
 8009f66:	628b      	str	r3, [r1, #40]	; 0x28
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	685b      	ldr	r3, [r3, #4]
 8009f6c:	3b01      	subs	r3, #1
 8009f6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	689b      	ldr	r3, [r3, #8]
 8009f76:	3b01      	subs	r3, #1
 8009f78:	025b      	lsls	r3, r3, #9
 8009f7a:	b29b      	uxth	r3, r3
 8009f7c:	431a      	orrs	r2, r3
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	68db      	ldr	r3, [r3, #12]
 8009f82:	3b01      	subs	r3, #1
 8009f84:	041b      	lsls	r3, r3, #16
 8009f86:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009f8a:	431a      	orrs	r2, r3
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	691b      	ldr	r3, [r3, #16]
 8009f90:	3b01      	subs	r3, #1
 8009f92:	061b      	lsls	r3, r3, #24
 8009f94:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8009f98:	4931      	ldr	r1, [pc, #196]	; (800a060 <RCCEx_PLL3_Config+0x15c>)
 8009f9a:	4313      	orrs	r3, r2
 8009f9c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8009f9e:	4b30      	ldr	r3, [pc, #192]	; (800a060 <RCCEx_PLL3_Config+0x15c>)
 8009fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fa2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	695b      	ldr	r3, [r3, #20]
 8009faa:	492d      	ldr	r1, [pc, #180]	; (800a060 <RCCEx_PLL3_Config+0x15c>)
 8009fac:	4313      	orrs	r3, r2
 8009fae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8009fb0:	4b2b      	ldr	r3, [pc, #172]	; (800a060 <RCCEx_PLL3_Config+0x15c>)
 8009fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fb4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	699b      	ldr	r3, [r3, #24]
 8009fbc:	4928      	ldr	r1, [pc, #160]	; (800a060 <RCCEx_PLL3_Config+0x15c>)
 8009fbe:	4313      	orrs	r3, r2
 8009fc0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8009fc2:	4b27      	ldr	r3, [pc, #156]	; (800a060 <RCCEx_PLL3_Config+0x15c>)
 8009fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fc6:	4a26      	ldr	r2, [pc, #152]	; (800a060 <RCCEx_PLL3_Config+0x15c>)
 8009fc8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009fcc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8009fce:	4b24      	ldr	r3, [pc, #144]	; (800a060 <RCCEx_PLL3_Config+0x15c>)
 8009fd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009fd2:	4b24      	ldr	r3, [pc, #144]	; (800a064 <RCCEx_PLL3_Config+0x160>)
 8009fd4:	4013      	ands	r3, r2
 8009fd6:	687a      	ldr	r2, [r7, #4]
 8009fd8:	69d2      	ldr	r2, [r2, #28]
 8009fda:	00d2      	lsls	r2, r2, #3
 8009fdc:	4920      	ldr	r1, [pc, #128]	; (800a060 <RCCEx_PLL3_Config+0x15c>)
 8009fde:	4313      	orrs	r3, r2
 8009fe0:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8009fe2:	4b1f      	ldr	r3, [pc, #124]	; (800a060 <RCCEx_PLL3_Config+0x15c>)
 8009fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009fe6:	4a1e      	ldr	r2, [pc, #120]	; (800a060 <RCCEx_PLL3_Config+0x15c>)
 8009fe8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009fec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	2b00      	cmp	r3, #0
 8009ff2:	d106      	bne.n	800a002 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8009ff4:	4b1a      	ldr	r3, [pc, #104]	; (800a060 <RCCEx_PLL3_Config+0x15c>)
 8009ff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ff8:	4a19      	ldr	r2, [pc, #100]	; (800a060 <RCCEx_PLL3_Config+0x15c>)
 8009ffa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009ffe:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a000:	e00f      	b.n	800a022 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800a002:	683b      	ldr	r3, [r7, #0]
 800a004:	2b01      	cmp	r3, #1
 800a006:	d106      	bne.n	800a016 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a008:	4b15      	ldr	r3, [pc, #84]	; (800a060 <RCCEx_PLL3_Config+0x15c>)
 800a00a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a00c:	4a14      	ldr	r2, [pc, #80]	; (800a060 <RCCEx_PLL3_Config+0x15c>)
 800a00e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800a012:	62d3      	str	r3, [r2, #44]	; 0x2c
 800a014:	e005      	b.n	800a022 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a016:	4b12      	ldr	r3, [pc, #72]	; (800a060 <RCCEx_PLL3_Config+0x15c>)
 800a018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a01a:	4a11      	ldr	r2, [pc, #68]	; (800a060 <RCCEx_PLL3_Config+0x15c>)
 800a01c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a020:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a022:	4b0f      	ldr	r3, [pc, #60]	; (800a060 <RCCEx_PLL3_Config+0x15c>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	4a0e      	ldr	r2, [pc, #56]	; (800a060 <RCCEx_PLL3_Config+0x15c>)
 800a028:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a02c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a02e:	f7f7 f941 	bl	80012b4 <HAL_GetTick>
 800a032:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a034:	e008      	b.n	800a048 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a036:	f7f7 f93d 	bl	80012b4 <HAL_GetTick>
 800a03a:	4602      	mov	r2, r0
 800a03c:	68bb      	ldr	r3, [r7, #8]
 800a03e:	1ad3      	subs	r3, r2, r3
 800a040:	2b02      	cmp	r3, #2
 800a042:	d901      	bls.n	800a048 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800a044:	2303      	movs	r3, #3
 800a046:	e006      	b.n	800a056 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a048:	4b05      	ldr	r3, [pc, #20]	; (800a060 <RCCEx_PLL3_Config+0x15c>)
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a050:	2b00      	cmp	r3, #0
 800a052:	d0f0      	beq.n	800a036 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800a054:	7bfb      	ldrb	r3, [r7, #15]
}
 800a056:	4618      	mov	r0, r3
 800a058:	3710      	adds	r7, #16
 800a05a:	46bd      	mov	sp, r7
 800a05c:	bd80      	pop	{r7, pc}
 800a05e:	bf00      	nop
 800a060:	58024400 	.word	0x58024400
 800a064:	ffff0007 	.word	0xffff0007

0800a068 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a068:	b580      	push	{r7, lr}
 800a06a:	b084      	sub	sp, #16
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
  uint32_t crc_length;
  uint32_t packet_length;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d101      	bne.n	800a07a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a076:	2301      	movs	r3, #1
 800a078:	e10f      	b.n	800a29a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	2200      	movs	r2, #0
 800a07e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	681b      	ldr	r3, [r3, #0]
 800a084:	4a87      	ldr	r2, [pc, #540]	; (800a2a4 <HAL_SPI_Init+0x23c>)
 800a086:	4293      	cmp	r3, r2
 800a088:	d00f      	beq.n	800a0aa <HAL_SPI_Init+0x42>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	4a86      	ldr	r2, [pc, #536]	; (800a2a8 <HAL_SPI_Init+0x240>)
 800a090:	4293      	cmp	r3, r2
 800a092:	d00a      	beq.n	800a0aa <HAL_SPI_Init+0x42>
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	681b      	ldr	r3, [r3, #0]
 800a098:	4a84      	ldr	r2, [pc, #528]	; (800a2ac <HAL_SPI_Init+0x244>)
 800a09a:	4293      	cmp	r3, r2
 800a09c:	d005      	beq.n	800a0aa <HAL_SPI_Init+0x42>
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	68db      	ldr	r3, [r3, #12]
 800a0a2:	2b0f      	cmp	r3, #15
 800a0a4:	d901      	bls.n	800a0aa <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 800a0a6:	2301      	movs	r3, #1
 800a0a8:	e0f7      	b.n	800a29a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 800a0aa:	6878      	ldr	r0, [r7, #4]
 800a0ac:	f000 fde4 	bl	800ac78 <SPI_GetPacketSize>
 800a0b0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	4a7b      	ldr	r2, [pc, #492]	; (800a2a4 <HAL_SPI_Init+0x23c>)
 800a0b8:	4293      	cmp	r3, r2
 800a0ba:	d00c      	beq.n	800a0d6 <HAL_SPI_Init+0x6e>
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	4a79      	ldr	r2, [pc, #484]	; (800a2a8 <HAL_SPI_Init+0x240>)
 800a0c2:	4293      	cmp	r3, r2
 800a0c4:	d007      	beq.n	800a0d6 <HAL_SPI_Init+0x6e>
 800a0c6:	687b      	ldr	r3, [r7, #4]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	4a78      	ldr	r2, [pc, #480]	; (800a2ac <HAL_SPI_Init+0x244>)
 800a0cc:	4293      	cmp	r3, r2
 800a0ce:	d002      	beq.n	800a0d6 <HAL_SPI_Init+0x6e>
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	2b08      	cmp	r3, #8
 800a0d4:	d811      	bhi.n	800a0fa <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 800a0da:	4a72      	ldr	r2, [pc, #456]	; (800a2a4 <HAL_SPI_Init+0x23c>)
 800a0dc:	4293      	cmp	r3, r2
 800a0de:	d009      	beq.n	800a0f4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	4a70      	ldr	r2, [pc, #448]	; (800a2a8 <HAL_SPI_Init+0x240>)
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	d004      	beq.n	800a0f4 <HAL_SPI_Init+0x8c>
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	4a6f      	ldr	r2, [pc, #444]	; (800a2ac <HAL_SPI_Init+0x244>)
 800a0f0:	4293      	cmp	r3, r2
 800a0f2:	d104      	bne.n	800a0fe <HAL_SPI_Init+0x96>
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	2b10      	cmp	r3, #16
 800a0f8:	d901      	bls.n	800a0fe <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 800a0fa:	2301      	movs	r3, #1
 800a0fc:	e0cd      	b.n	800a29a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a104:	b2db      	uxtb	r3, r3
 800a106:	2b00      	cmp	r3, #0
 800a108:	d106      	bne.n	800a118 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	2200      	movs	r2, #0
 800a10e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f7f6 fdd8 	bl	8000cc8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2202      	movs	r2, #2
 800a11c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	681b      	ldr	r3, [r3, #0]
 800a124:	681a      	ldr	r2, [r3, #0]
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	681b      	ldr	r3, [r3, #0]
 800a12a:	f022 0201 	bic.w	r2, r2, #1
 800a12e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	689b      	ldr	r3, [r3, #8]
 800a136:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 800a13a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	699b      	ldr	r3, [r3, #24]
 800a140:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a144:	d119      	bne.n	800a17a <HAL_SPI_Init+0x112>
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	685b      	ldr	r3, [r3, #4]
 800a14a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a14e:	d103      	bne.n	800a158 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 800a154:	2b00      	cmp	r3, #0
 800a156:	d008      	beq.n	800a16a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d10c      	bne.n	800a17a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 800a164:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a168:	d107      	bne.n	800a17a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	681a      	ldr	r2, [r3, #0]
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	681b      	ldr	r3, [r3, #0]
 800a174:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a178:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	685b      	ldr	r3, [r3, #4]
 800a17e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a182:	2b00      	cmp	r3, #0
 800a184:	d00f      	beq.n	800a1a6 <HAL_SPI_Init+0x13e>
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	68db      	ldr	r3, [r3, #12]
 800a18a:	2b06      	cmp	r3, #6
 800a18c:	d90b      	bls.n	800a1a6 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	430a      	orrs	r2, r1
 800a1a2:	601a      	str	r2, [r3, #0]
 800a1a4:	e007      	b.n	800a1b6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	681a      	ldr	r2, [r3, #0]
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a1b4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	69da      	ldr	r2, [r3, #28]
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a1be:	431a      	orrs	r2, r3
 800a1c0:	68bb      	ldr	r3, [r7, #8]
 800a1c2:	431a      	orrs	r2, r3
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1c8:	ea42 0103 	orr.w	r1, r2, r3
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	68da      	ldr	r2, [r3, #12]
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	430a      	orrs	r2, r1
 800a1d6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1e0:	431a      	orrs	r2, r3
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1e6:	431a      	orrs	r2, r3
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	699b      	ldr	r3, [r3, #24]
 800a1ec:	431a      	orrs	r2, r3
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	691b      	ldr	r3, [r3, #16]
 800a1f2:	431a      	orrs	r2, r3
 800a1f4:	687b      	ldr	r3, [r7, #4]
 800a1f6:	695b      	ldr	r3, [r3, #20]
 800a1f8:	431a      	orrs	r2, r3
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	6a1b      	ldr	r3, [r3, #32]
 800a1fe:	431a      	orrs	r2, r3
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	685b      	ldr	r3, [r3, #4]
 800a204:	431a      	orrs	r2, r3
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a20a:	431a      	orrs	r2, r3
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	689b      	ldr	r3, [r3, #8]
 800a210:	431a      	orrs	r2, r3
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a216:	ea42 0103 	orr.w	r1, r2, r3
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	430a      	orrs	r2, r1
 800a224:	60da      	str	r2, [r3, #12]
    WRITE_REG(hspi->Instance->CRCPOLY, hspi->Init.CRCPolynomial);
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	685b      	ldr	r3, [r3, #4]
 800a22a:	2b00      	cmp	r3, #0
 800a22c:	d113      	bne.n	800a256 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	689b      	ldr	r3, [r3, #8]
 800a234:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a240:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	689b      	ldr	r3, [r3, #8]
 800a248:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a254:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	681b      	ldr	r3, [r3, #0]
 800a25a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	f022 0201 	bic.w	r2, r2, #1
 800a264:	651a      	str	r2, [r3, #80]	; 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	685b      	ldr	r3, [r3, #4]
 800a26a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d00a      	beq.n	800a288 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	68db      	ldr	r3, [r3, #12]
 800a278:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	430a      	orrs	r2, r1
 800a286:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2200      	movs	r2, #0
 800a28c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	2201      	movs	r2, #1
 800a294:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  return HAL_OK;
 800a298:	2300      	movs	r3, #0
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	3710      	adds	r7, #16
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}
 800a2a2:	bf00      	nop
 800a2a4:	40013000 	.word	0x40013000
 800a2a8:	40003800 	.word	0x40003800
 800a2ac:	40003c00 	.word	0x40003c00

0800a2b0 <HAL_SPI_Transmit>:
  * @param  Size   : amount of data to be sent
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b08a      	sub	sp, #40	; 0x28
 800a2b4:	af02      	add	r7, sp, #8
 800a2b6:	60f8      	str	r0, [r7, #12]
 800a2b8:	60b9      	str	r1, [r7, #8]
 800a2ba:	603b      	str	r3, [r7, #0]
 800a2bc:	4613      	mov	r3, r2
 800a2be:	80fb      	strh	r3, [r7, #6]
#if defined (__GNUC__)
  __IO uint16_t *ptxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->TXDR));
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	3320      	adds	r3, #32
 800a2c6:	61fb      	str	r3, [r7, #28]
#endif /* __GNUC__ */

  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	76fb      	strb	r3, [r7, #27]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE_2LINES_TXONLY(hspi->Init.Direction));

  /* Lock the process */
  __HAL_LOCK(hspi);
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800a2d2:	2b01      	cmp	r3, #1
 800a2d4:	d101      	bne.n	800a2da <HAL_SPI_Transmit+0x2a>
 800a2d6:	2302      	movs	r3, #2
 800a2d8:	e1e1      	b.n	800a69e <HAL_SPI_Transmit+0x3ee>
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	2201      	movs	r2, #1
 800a2de:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a2e2:	f7f6 ffe7 	bl	80012b4 <HAL_GetTick>
 800a2e6:	6178      	str	r0, [r7, #20]

  if (hspi->State != HAL_SPI_STATE_READY)
 800a2e8:	68fb      	ldr	r3, [r7, #12]
 800a2ea:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a2ee:	b2db      	uxtb	r3, r3
 800a2f0:	2b01      	cmp	r3, #1
 800a2f2:	d007      	beq.n	800a304 <HAL_SPI_Transmit+0x54>
  {
    errorcode = HAL_BUSY;
 800a2f4:	2302      	movs	r3, #2
 800a2f6:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a300:	7efb      	ldrb	r3, [r7, #27]
 800a302:	e1cc      	b.n	800a69e <HAL_SPI_Transmit+0x3ee>
  }

  if ((pData == NULL) || (Size == 0UL))
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	2b00      	cmp	r3, #0
 800a308:	d002      	beq.n	800a310 <HAL_SPI_Transmit+0x60>
 800a30a:	88fb      	ldrh	r3, [r7, #6]
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	d107      	bne.n	800a320 <HAL_SPI_Transmit+0x70>
  {
    errorcode = HAL_ERROR;
 800a310:	2301      	movs	r3, #1
 800a312:	76fb      	strb	r3, [r7, #27]
    __HAL_UNLOCK(hspi);
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	2200      	movs	r2, #0
 800a318:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
    return errorcode;
 800a31c:	7efb      	ldrb	r3, [r7, #27]
 800a31e:	e1be      	b.n	800a69e <HAL_SPI_Transmit+0x3ee>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a320:	68fb      	ldr	r3, [r7, #12]
 800a322:	2203      	movs	r2, #3
 800a324:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	2200      	movs	r2, #0
 800a32c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	68ba      	ldr	r2, [r7, #8]
 800a334:	65da      	str	r2, [r3, #92]	; 0x5c
  hspi->TxXferSize  = Size;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	88fa      	ldrh	r2, [r7, #6]
 800a33a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  hspi->TxXferCount = Size;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	88fa      	ldrh	r2, [r7, #6]
 800a342:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = NULL;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	2200      	movs	r2, #0
 800a34a:	665a      	str	r2, [r3, #100]	; 0x64
  hspi->RxXferSize  = (uint16_t) 0UL;
 800a34c:	68fb      	ldr	r3, [r7, #12]
 800a34e:	2200      	movs	r2, #0
 800a350:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  hspi->RxXferCount = (uint16_t) 0UL;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	2200      	movs	r2, #0
 800a358:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxISR       = NULL;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	2200      	movs	r2, #0
 800a360:	675a      	str	r2, [r3, #116]	; 0x74
  hspi->RxISR       = NULL;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	2200      	movs	r2, #0
 800a366:	671a      	str	r2, [r3, #112]	; 0x70

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	689b      	ldr	r3, [r3, #8]
 800a36c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 800a370:	d108      	bne.n	800a384 <HAL_SPI_Transmit+0xd4>
  {
    SPI_1LINE_TX(hspi);
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	681a      	ldr	r2, [r3, #0]
 800a378:	68fb      	ldr	r3, [r7, #12]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a380:	601a      	str	r2, [r3, #0]
 800a382:	e009      	b.n	800a398 <HAL_SPI_Transmit+0xe8>
  }
  else
  {
    SPI_2LINES_TX(hspi);
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	68db      	ldr	r3, [r3, #12]
 800a38a:	f423 22c0 	bic.w	r2, r3, #393216	; 0x60000
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800a396:	60da      	str	r2, [r3, #12]
  }

  /* Set the number of data at current transfer */
  MODIFY_REG(hspi->Instance->CR2, SPI_CR2_TSIZE, Size);
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	685a      	ldr	r2, [r3, #4]
 800a39e:	4b96      	ldr	r3, [pc, #600]	; (800a5f8 <HAL_SPI_Transmit+0x348>)
 800a3a0:	4013      	ands	r3, r2
 800a3a2:	88f9      	ldrh	r1, [r7, #6]
 800a3a4:	68fa      	ldr	r2, [r7, #12]
 800a3a6:	6812      	ldr	r2, [r2, #0]
 800a3a8:	430b      	orrs	r3, r1
 800a3aa:	6053      	str	r3, [r2, #4]

  /* Enable SPI peripheral */
  __HAL_SPI_ENABLE(hspi);
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	681a      	ldr	r2, [r3, #0]
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	f042 0201 	orr.w	r2, r2, #1
 800a3ba:	601a      	str	r2, [r3, #0]

  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	685b      	ldr	r3, [r3, #4]
 800a3c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a3c4:	d107      	bne.n	800a3d6 <HAL_SPI_Transmit+0x126>
  {
    /* Master transfer start */
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CSTART);
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	681a      	ldr	r2, [r3, #0]
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a3d4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 32 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	68db      	ldr	r3, [r3, #12]
 800a3da:	2b0f      	cmp	r3, #15
 800a3dc:	d947      	bls.n	800a46e <HAL_SPI_Transmit+0x1be>
  {
    /* Transmit data in 32 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a3de:	e03f      	b.n	800a460 <HAL_SPI_Transmit+0x1b0>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	695b      	ldr	r3, [r3, #20]
 800a3e6:	f003 0302 	and.w	r3, r3, #2
 800a3ea:	2b02      	cmp	r3, #2
 800a3ec:	d114      	bne.n	800a418 <HAL_SPI_Transmit+0x168>
      {
        *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	6812      	ldr	r2, [r2, #0]
 800a3f8:	621a      	str	r2, [r3, #32]
        hspi->pTxBuffPtr += sizeof(uint32_t);
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a3fe:	1d1a      	adds	r2, r3, #4
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	65da      	str	r2, [r3, #92]	; 0x5c
        hspi->TxXferCount--;
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a40a:	b29b      	uxth	r3, r3
 800a40c:	3b01      	subs	r3, #1
 800a40e:	b29a      	uxth	r2, r3
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a416:	e023      	b.n	800a460 <HAL_SPI_Transmit+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a418:	f7f6 ff4c 	bl	80012b4 <HAL_GetTick>
 800a41c:	4602      	mov	r2, r0
 800a41e:	697b      	ldr	r3, [r7, #20]
 800a420:	1ad3      	subs	r3, r2, r3
 800a422:	683a      	ldr	r2, [r7, #0]
 800a424:	429a      	cmp	r2, r3
 800a426:	d803      	bhi.n	800a430 <HAL_SPI_Transmit+0x180>
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a42e:	d102      	bne.n	800a436 <HAL_SPI_Transmit+0x186>
 800a430:	683b      	ldr	r3, [r7, #0]
 800a432:	2b00      	cmp	r3, #0
 800a434:	d114      	bne.n	800a460 <HAL_SPI_Transmit+0x1b0>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a436:	68f8      	ldr	r0, [r7, #12]
 800a438:	f000 fb50 	bl	800aadc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	2200      	movs	r2, #0
 800a440:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a444:	68fb      	ldr	r3, [r7, #12]
 800a446:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a44a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	2201      	movs	r2, #1
 800a458:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800a45c:	2303      	movs	r3, #3
 800a45e:	e11e      	b.n	800a69e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a466:	b29b      	uxth	r3, r3
 800a468:	2b00      	cmp	r3, #0
 800a46a:	d1b9      	bne.n	800a3e0 <HAL_SPI_Transmit+0x130>
 800a46c:	e0f1      	b.n	800a652 <HAL_SPI_Transmit+0x3a2>
        }
      }
    }
  }
  /* Transmit data in 16 Bit mode */
  else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	68db      	ldr	r3, [r3, #12]
 800a472:	2b07      	cmp	r3, #7
 800a474:	f240 80e6 	bls.w	800a644 <HAL_SPI_Transmit+0x394>
  {
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0UL)
 800a478:	e05d      	b.n	800a536 <HAL_SPI_Transmit+0x286>
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	695b      	ldr	r3, [r3, #20]
 800a480:	f003 0302 	and.w	r3, r3, #2
 800a484:	2b02      	cmp	r3, #2
 800a486:	d132      	bne.n	800a4ee <HAL_SPI_Transmit+0x23e>
      {
        if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a48e:	b29b      	uxth	r3, r3
 800a490:	2b01      	cmp	r3, #1
 800a492:	d918      	bls.n	800a4c6 <HAL_SPI_Transmit+0x216>
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d014      	beq.n	800a4c6 <HAL_SPI_Transmit+0x216>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	6812      	ldr	r2, [r2, #0]
 800a4a6:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4ac:	1d1a      	adds	r2, r3, #4
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a4b8:	b29b      	uxth	r3, r3
 800a4ba:	3b02      	subs	r3, #2
 800a4bc:	b29a      	uxth	r2, r3
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a4c4:	e037      	b.n	800a536 <HAL_SPI_Transmit+0x286>
        }
        else
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4ca:	881a      	ldrh	r2, [r3, #0]
 800a4cc:	69fb      	ldr	r3, [r7, #28]
 800a4ce:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a4d4:	1c9a      	adds	r2, r3, #2
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a4e0:	b29b      	uxth	r3, r3
 800a4e2:	3b01      	subs	r3, #1
 800a4e4:	b29a      	uxth	r2, r3
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a4ec:	e023      	b.n	800a536 <HAL_SPI_Transmit+0x286>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a4ee:	f7f6 fee1 	bl	80012b4 <HAL_GetTick>
 800a4f2:	4602      	mov	r2, r0
 800a4f4:	697b      	ldr	r3, [r7, #20]
 800a4f6:	1ad3      	subs	r3, r2, r3
 800a4f8:	683a      	ldr	r2, [r7, #0]
 800a4fa:	429a      	cmp	r2, r3
 800a4fc:	d803      	bhi.n	800a506 <HAL_SPI_Transmit+0x256>
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a504:	d102      	bne.n	800a50c <HAL_SPI_Transmit+0x25c>
 800a506:	683b      	ldr	r3, [r7, #0]
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d114      	bne.n	800a536 <HAL_SPI_Transmit+0x286>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a50c:	68f8      	ldr	r0, [r7, #12]
 800a50e:	f000 fae5 	bl	800aadc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	2200      	movs	r2, #0
 800a516:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a520:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	2201      	movs	r2, #1
 800a52e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800a532:	2303      	movs	r3, #3
 800a534:	e0b3      	b.n	800a69e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a53c:	b29b      	uxth	r3, r3
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d19b      	bne.n	800a47a <HAL_SPI_Transmit+0x1ca>
 800a542:	e086      	b.n	800a652 <HAL_SPI_Transmit+0x3a2>
  else
  {
    while (hspi->TxXferCount > 0UL)
    {
      /* Wait until TXP flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXP))
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	695b      	ldr	r3, [r3, #20]
 800a54a:	f003 0302 	and.w	r3, r3, #2
 800a54e:	2b02      	cmp	r3, #2
 800a550:	d154      	bne.n	800a5fc <HAL_SPI_Transmit+0x34c>
      {
        if ((hspi->TxXferCount > 3UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_03DATA))
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a558:	b29b      	uxth	r3, r3
 800a55a:	2b03      	cmp	r3, #3
 800a55c:	d918      	bls.n	800a590 <HAL_SPI_Transmit+0x2e0>
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a562:	2b40      	cmp	r3, #64	; 0x40
 800a564:	d914      	bls.n	800a590 <HAL_SPI_Transmit+0x2e0>
        {
          *((__IO uint32_t *)&hspi->Instance->TXDR) = *((const uint32_t *)hspi->pTxBuffPtr);
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a56a:	68fb      	ldr	r3, [r7, #12]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	6812      	ldr	r2, [r2, #0]
 800a570:	621a      	str	r2, [r3, #32]
          hspi->pTxBuffPtr += sizeof(uint32_t);
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a576:	1d1a      	adds	r2, r3, #4
 800a578:	68fb      	ldr	r3, [r7, #12]
 800a57a:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)4UL;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a582:	b29b      	uxth	r3, r3
 800a584:	3b04      	subs	r3, #4
 800a586:	b29a      	uxth	r2, r3
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a58e:	e059      	b.n	800a644 <HAL_SPI_Transmit+0x394>
        }
        else if ((hspi->TxXferCount > 1UL) && (hspi->Init.FifoThreshold > SPI_FIFO_THRESHOLD_01DATA))
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a596:	b29b      	uxth	r3, r3
 800a598:	2b01      	cmp	r3, #1
 800a59a:	d917      	bls.n	800a5cc <HAL_SPI_Transmit+0x31c>
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	d013      	beq.n	800a5cc <HAL_SPI_Transmit+0x31c>
        {
#if defined (__GNUC__)
          *ptxdr_16bits = *((const uint16_t *)hspi->pTxBuffPtr);
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5a8:	881a      	ldrh	r2, [r3, #0]
 800a5aa:	69fb      	ldr	r3, [r7, #28]
 800a5ac:	801a      	strh	r2, [r3, #0]
#else
          *((__IO uint16_t *)&hspi->Instance->TXDR) = *((const uint16_t *)hspi->pTxBuffPtr);
#endif /* __GNUC__ */
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5b2:	1c9a      	adds	r2, r3, #2
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount -= (uint16_t)2UL;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a5be:	b29b      	uxth	r3, r3
 800a5c0:	3b02      	subs	r3, #2
 800a5c2:	b29a      	uxth	r2, r3
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a5ca:	e03b      	b.n	800a644 <HAL_SPI_Transmit+0x394>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->TXDR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	3320      	adds	r3, #32
 800a5d6:	7812      	ldrb	r2, [r2, #0]
 800a5d8:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr += sizeof(uint8_t);
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a5de:	1c5a      	adds	r2, r3, #1
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	65da      	str	r2, [r3, #92]	; 0x5c
          hspi->TxXferCount--;
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a5ea:	b29b      	uxth	r3, r3
 800a5ec:	3b01      	subs	r3, #1
 800a5ee:	b29a      	uxth	r2, r3
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
 800a5f6:	e025      	b.n	800a644 <HAL_SPI_Transmit+0x394>
 800a5f8:	ffff0000 	.word	0xffff0000
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800a5fc:	f7f6 fe5a 	bl	80012b4 <HAL_GetTick>
 800a600:	4602      	mov	r2, r0
 800a602:	697b      	ldr	r3, [r7, #20]
 800a604:	1ad3      	subs	r3, r2, r3
 800a606:	683a      	ldr	r2, [r7, #0]
 800a608:	429a      	cmp	r2, r3
 800a60a:	d803      	bhi.n	800a614 <HAL_SPI_Transmit+0x364>
 800a60c:	683b      	ldr	r3, [r7, #0]
 800a60e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a612:	d102      	bne.n	800a61a <HAL_SPI_Transmit+0x36a>
 800a614:	683b      	ldr	r3, [r7, #0]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d114      	bne.n	800a644 <HAL_SPI_Transmit+0x394>
        {
          /* Call standard close procedure with error check */
          SPI_CloseTransfer(hspi);
 800a61a:	68f8      	ldr	r0, [r7, #12]
 800a61c:	f000 fa5e 	bl	800aadc <SPI_CloseTransfer>

          /* Unlock the process */
          __HAL_UNLOCK(hspi);
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	2200      	movs	r2, #0
 800a624:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_TIMEOUT);
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a62e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          hspi->State = HAL_SPI_STATE_READY;
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	2201      	movs	r2, #1
 800a63c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
          return HAL_TIMEOUT;
 800a640:	2303      	movs	r3, #3
 800a642:	e02c      	b.n	800a69e <HAL_SPI_Transmit+0x3ee>
    while (hspi->TxXferCount > 0UL)
 800a644:	68fb      	ldr	r3, [r7, #12]
 800a646:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 800a64a:	b29b      	uxth	r3, r3
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	f47f af79 	bne.w	800a544 <HAL_SPI_Transmit+0x294>
      }
    }
  }

  /* Wait for Tx (and CRC) data to be sent */
  if (SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_EOT, RESET, Timeout, tickstart) != HAL_OK)
 800a652:	697b      	ldr	r3, [r7, #20]
 800a654:	9300      	str	r3, [sp, #0]
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	2200      	movs	r2, #0
 800a65a:	2108      	movs	r1, #8
 800a65c:	68f8      	ldr	r0, [r7, #12]
 800a65e:	f000 fadd 	bl	800ac1c <SPI_WaitOnFlagUntilTimeout>
 800a662:	4603      	mov	r3, r0
 800a664:	2b00      	cmp	r3, #0
 800a666:	d007      	beq.n	800a678 <HAL_SPI_Transmit+0x3c8>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a66e:	f043 0220 	orr.w	r2, r3, #32
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }

  /* Call standard close procedure with error check */
  SPI_CloseTransfer(hspi);
 800a678:	68f8      	ldr	r0, [r7, #12]
 800a67a:	f000 fa2f 	bl	800aadc <SPI_CloseTransfer>

  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	2200      	movs	r2, #0
 800a682:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  hspi->State = HAL_SPI_STATE_READY;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	2201      	movs	r2, #1
 800a68a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a694:	2b00      	cmp	r3, #0
 800a696:	d001      	beq.n	800a69c <HAL_SPI_Transmit+0x3ec>
  {
    return HAL_ERROR;
 800a698:	2301      	movs	r3, #1
 800a69a:	e000      	b.n	800a69e <HAL_SPI_Transmit+0x3ee>
  }
  return errorcode;
 800a69c:	7efb      	ldrb	r3, [r7, #27]
}
 800a69e:	4618      	mov	r0, r3
 800a6a0:	3720      	adds	r7, #32
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}
 800a6a6:	bf00      	nop

0800a6a8 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b08a      	sub	sp, #40	; 0x28
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	681b      	ldr	r3, [r3, #0]
 800a6b4:	691b      	ldr	r3, [r3, #16]
 800a6b6:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	695b      	ldr	r3, [r3, #20]
 800a6be:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 800a6c0:	6a3a      	ldr	r2, [r7, #32]
 800a6c2:	69fb      	ldr	r3, [r7, #28]
 800a6c4:	4013      	ands	r3, r2
 800a6c6:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	689b      	ldr	r3, [r3, #8]
 800a6ce:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800a6da:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	3330      	adds	r3, #48	; 0x30
 800a6e2:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 800a6e4:	69fb      	ldr	r3, [r7, #28]
 800a6e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d010      	beq.n	800a710 <HAL_SPI_IRQHandler+0x68>
 800a6ee:	6a3b      	ldr	r3, [r7, #32]
 800a6f0:	f003 0308 	and.w	r3, r3, #8
 800a6f4:	2b00      	cmp	r3, #0
 800a6f6:	d00b      	beq.n	800a710 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	699a      	ldr	r2, [r3, #24]
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a706:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 800a708:	6878      	ldr	r0, [r7, #4]
 800a70a:	f000 f9c3 	bl	800aa94 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 800a70e:	e192      	b.n	800aa36 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800a710:	69bb      	ldr	r3, [r7, #24]
 800a712:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a716:	2b00      	cmp	r3, #0
 800a718:	d113      	bne.n	800a742 <HAL_SPI_IRQHandler+0x9a>
 800a71a:	69bb      	ldr	r3, [r7, #24]
 800a71c:	f003 0320 	and.w	r3, r3, #32
 800a720:	2b00      	cmp	r3, #0
 800a722:	d10e      	bne.n	800a742 <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 800a724:	69bb      	ldr	r3, [r7, #24]
 800a726:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d009      	beq.n	800a742 <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a732:	6878      	ldr	r0, [r7, #4]
 800a734:	4798      	blx	r3
    hspi->RxISR(hspi);
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a73a:	6878      	ldr	r0, [r7, #4]
 800a73c:	4798      	blx	r3
    handled = 1UL;
 800a73e:	2301      	movs	r3, #1
 800a740:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800a742:	69bb      	ldr	r3, [r7, #24]
 800a744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d10f      	bne.n	800a76c <HAL_SPI_IRQHandler+0xc4>
 800a74c:	69bb      	ldr	r3, [r7, #24]
 800a74e:	f003 0301 	and.w	r3, r3, #1
 800a752:	2b00      	cmp	r3, #0
 800a754:	d00a      	beq.n	800a76c <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800a756:	69bb      	ldr	r3, [r7, #24]
 800a758:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d105      	bne.n	800a76c <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	4798      	blx	r3
    handled = 1UL;
 800a768:	2301      	movs	r3, #1
 800a76a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800a76c:	69bb      	ldr	r3, [r7, #24]
 800a76e:	f003 0320 	and.w	r3, r3, #32
 800a772:	2b00      	cmp	r3, #0
 800a774:	d10f      	bne.n	800a796 <HAL_SPI_IRQHandler+0xee>
 800a776:	69bb      	ldr	r3, [r7, #24]
 800a778:	f003 0302 	and.w	r3, r3, #2
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d00a      	beq.n	800a796 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 800a780:	69bb      	ldr	r3, [r7, #24]
 800a782:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 800a786:	2b00      	cmp	r3, #0
 800a788:	d105      	bne.n	800a796 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a78e:	6878      	ldr	r0, [r7, #4]
 800a790:	4798      	blx	r3
    handled = 1UL;
 800a792:	2301      	movs	r3, #1
 800a794:	627b      	str	r3, [r7, #36]	; 0x24
    hspi->Reload.Requested = 0UL;
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 800a796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a798:	2b00      	cmp	r3, #0
 800a79a:	f040 8147 	bne.w	800aa2c <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 800a79e:	69bb      	ldr	r3, [r7, #24]
 800a7a0:	f003 0308 	and.w	r3, r3, #8
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	f000 808b 	beq.w	800a8c0 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	699a      	ldr	r2, [r3, #24]
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f042 0208 	orr.w	r2, r2, #8
 800a7b8:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	699a      	ldr	r2, [r3, #24]
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	f042 0210 	orr.w	r2, r2, #16
 800a7c8:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	681b      	ldr	r3, [r3, #0]
 800a7ce:	699a      	ldr	r2, [r3, #24]
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a7d8:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	681b      	ldr	r3, [r3, #0]
 800a7de:	691a      	ldr	r2, [r3, #16]
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f022 0208 	bic.w	r2, r2, #8
 800a7e8:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	689b      	ldr	r3, [r3, #8]
 800a7f0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d13d      	bne.n	800a874 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 800a7f8:	e036      	b.n	800a868 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	68db      	ldr	r3, [r3, #12]
 800a7fe:	2b0f      	cmp	r3, #15
 800a800:	d90b      	bls.n	800a81a <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	681a      	ldr	r2, [r3, #0]
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a80a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800a80c:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a812:	1d1a      	adds	r2, r3, #4
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	665a      	str	r2, [r3, #100]	; 0x64
 800a818:	e01d      	b.n	800a856 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	68db      	ldr	r3, [r3, #12]
 800a81e:	2b07      	cmp	r3, #7
 800a820:	d90b      	bls.n	800a83a <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a826:	68fa      	ldr	r2, [r7, #12]
 800a828:	8812      	ldrh	r2, [r2, #0]
 800a82a:	b292      	uxth	r2, r2
 800a82c:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a832:	1c9a      	adds	r2, r3, #2
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	665a      	str	r2, [r3, #100]	; 0x64
 800a838:	e00d      	b.n	800a856 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a846:	7812      	ldrb	r2, [r2, #0]
 800a848:	b2d2      	uxtb	r2, r2
 800a84a:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a850:	1c5a      	adds	r2, r3, #1
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	665a      	str	r2, [r3, #100]	; 0x64
        }

        hspi->RxXferCount--;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a85c:	b29b      	uxth	r3, r3
 800a85e:	3b01      	subs	r3, #1
 800a860:	b29a      	uxth	r2, r3
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      while (hspi->RxXferCount != 0UL)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800a86e:	b29b      	uxth	r3, r3
 800a870:	2b00      	cmp	r3, #0
 800a872:	d1c2      	bne.n	800a7fa <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 800a874:	6878      	ldr	r0, [r7, #4]
 800a876:	f000 f931 	bl	800aadc <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	2201      	movs	r2, #1
 800a87e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d003      	beq.n	800a894 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a88c:	6878      	ldr	r0, [r7, #4]
 800a88e:	f000 f8f7 	bl	800aa80 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800a892:	e0d0      	b.n	800aa36 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 800a894:	7cfb      	ldrb	r3, [r7, #19]
 800a896:	2b05      	cmp	r3, #5
 800a898:	d103      	bne.n	800a8a2 <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f000 f8e6 	bl	800aa6c <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 800a8a0:	e0c6      	b.n	800aa30 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 800a8a2:	7cfb      	ldrb	r3, [r7, #19]
 800a8a4:	2b04      	cmp	r3, #4
 800a8a6:	d103      	bne.n	800a8b0 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f000 f8d5 	bl	800aa58 <HAL_SPI_RxCpltCallback>
    return;
 800a8ae:	e0bf      	b.n	800aa30 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 800a8b0:	7cfb      	ldrb	r3, [r7, #19]
 800a8b2:	2b03      	cmp	r3, #3
 800a8b4:	f040 80bc 	bne.w	800aa30 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 800a8b8:	6878      	ldr	r0, [r7, #4]
 800a8ba:	f000 f8c3 	bl	800aa44 <HAL_SPI_TxCpltCallback>
    return;
 800a8be:	e0b7      	b.n	800aa30 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 800a8c0:	69bb      	ldr	r3, [r7, #24]
 800a8c2:	f403 7358 	and.w	r3, r3, #864	; 0x360
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	f000 80b5 	beq.w	800aa36 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 800a8cc:	69bb      	ldr	r3, [r7, #24]
 800a8ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d00f      	beq.n	800a8f6 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a8dc:	f043 0204 	orr.w	r2, r3, #4
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	699a      	ldr	r2, [r3, #24]
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a8f4:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 800a8f6:	69bb      	ldr	r3, [r7, #24]
 800a8f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d00f      	beq.n	800a920 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a906:	f043 0201 	orr.w	r2, r3, #1
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	699a      	ldr	r2, [r3, #24]
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	681b      	ldr	r3, [r3, #0]
 800a91a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a91e:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 800a920:	69bb      	ldr	r3, [r7, #24]
 800a922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a926:	2b00      	cmp	r3, #0
 800a928:	d00f      	beq.n	800a94a <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a930:	f043 0208 	orr.w	r2, r3, #8
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	699a      	ldr	r2, [r3, #24]
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	681b      	ldr	r3, [r3, #0]
 800a944:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a948:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 800a94a:	69bb      	ldr	r3, [r7, #24]
 800a94c:	f003 0320 	and.w	r3, r3, #32
 800a950:	2b00      	cmp	r3, #0
 800a952:	d00f      	beq.n	800a974 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a95a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	699a      	ldr	r2, [r3, #24]
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f042 0220 	orr.w	r2, r2, #32
 800a972:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d05a      	beq.n	800aa34 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	681a      	ldr	r2, [r3, #0]
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	681b      	ldr	r3, [r3, #0]
 800a988:	f022 0201 	bic.w	r2, r2, #1
 800a98c:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	6919      	ldr	r1, [r3, #16]
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681a      	ldr	r2, [r3, #0]
 800a998:	4b28      	ldr	r3, [pc, #160]	; (800aa3c <HAL_SPI_IRQHandler+0x394>)
 800a99a:	400b      	ands	r3, r1
 800a99c:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a9a4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a9a8:	d138      	bne.n	800aa1c <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	689a      	ldr	r2, [r3, #8]
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800a9b8:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d013      	beq.n	800a9ea <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a9c6:	4a1e      	ldr	r2, [pc, #120]	; (800aa40 <HAL_SPI_IRQHandler+0x398>)
 800a9c8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a9ce:	4618      	mov	r0, r3
 800a9d0:	f7f8 fad6 	bl	8002f80 <HAL_DMA_Abort_IT>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	2b00      	cmp	r3, #0
 800a9d8:	d007      	beq.n	800a9ea <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a9da:	687b      	ldr	r3, [r7, #4]
 800a9dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a9e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d020      	beq.n	800aa34 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a9f6:	4a12      	ldr	r2, [pc, #72]	; (800aa40 <HAL_SPI_IRQHandler+0x398>)
 800a9f8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a9fa:	687b      	ldr	r3, [r7, #4]
 800a9fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a9fe:	4618      	mov	r0, r3
 800aa00:	f7f8 fabe 	bl	8002f80 <HAL_DMA_Abort_IT>
 800aa04:	4603      	mov	r3, r0
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d014      	beq.n	800aa34 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800aa10:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800aa1a:	e00b      	b.n	800aa34 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	2201      	movs	r2, #1
 800aa20:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
        HAL_SPI_ErrorCallback(hspi);
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	f000 f82b 	bl	800aa80 <HAL_SPI_ErrorCallback>
    return;
 800aa2a:	e003      	b.n	800aa34 <HAL_SPI_IRQHandler+0x38c>
    return;
 800aa2c:	bf00      	nop
 800aa2e:	e002      	b.n	800aa36 <HAL_SPI_IRQHandler+0x38e>
    return;
 800aa30:	bf00      	nop
 800aa32:	e000      	b.n	800aa36 <HAL_SPI_IRQHandler+0x38e>
    return;
 800aa34:	bf00      	nop
  }
}
 800aa36:	3728      	adds	r7, #40	; 0x28
 800aa38:	46bd      	mov	sp, r7
 800aa3a:	bd80      	pop	{r7, pc}
 800aa3c:	fffffc94 	.word	0xfffffc94
 800aa40:	0800aaa9 	.word	0x0800aaa9

0800aa44 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800aa44:	b480      	push	{r7}
 800aa46:	b083      	sub	sp, #12
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800aa4c:	bf00      	nop
 800aa4e:	370c      	adds	r7, #12
 800aa50:	46bd      	mov	sp, r7
 800aa52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa56:	4770      	bx	lr

0800aa58 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800aa58:	b480      	push	{r7}
 800aa5a:	b083      	sub	sp, #12
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 800aa60:	bf00      	nop
 800aa62:	370c      	adds	r7, #12
 800aa64:	46bd      	mov	sp, r7
 800aa66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa6a:	4770      	bx	lr

0800aa6c <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800aa6c:	b480      	push	{r7}
 800aa6e:	b083      	sub	sp, #12
 800aa70:	af00      	add	r7, sp, #0
 800aa72:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 800aa74:	bf00      	nop
 800aa76:	370c      	adds	r7, #12
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa7e:	4770      	bx	lr

0800aa80 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800aa80:	b480      	push	{r7}
 800aa82:	b083      	sub	sp, #12
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800aa88:	bf00      	nop
 800aa8a:	370c      	adds	r7, #12
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa92:	4770      	bx	lr

0800aa94 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi)
{
 800aa94:	b480      	push	{r7}
 800aa96:	b083      	sub	sp, #12
 800aa98:	af00      	add	r7, sp, #0
 800aa9a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 800aa9c:	bf00      	nop
 800aa9e:	370c      	adds	r7, #12
 800aaa0:	46bd      	mov	sp, r7
 800aaa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa6:	4770      	bx	lr

0800aaa8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800aaa8:	b580      	push	{r7, lr}
 800aaaa:	b084      	sub	sp, #16
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aab4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	2200      	movs	r2, #0
 800aaba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	2200      	movs	r2, #0
 800aac2:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	2201      	movs	r2, #1
 800aaca:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800aace:	68f8      	ldr	r0, [r7, #12]
 800aad0:	f7ff ffd6 	bl	800aa80 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800aad4:	bf00      	nop
 800aad6:	3710      	adds	r7, #16
 800aad8:	46bd      	mov	sp, r7
 800aada:	bd80      	pop	{r7, pc}

0800aadc <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 800aadc:	b480      	push	{r7}
 800aade:	b085      	sub	sp, #20
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	695b      	ldr	r3, [r3, #20]
 800aaea:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	699a      	ldr	r2, [r3, #24]
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	f042 0208 	orr.w	r2, r2, #8
 800aafa:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	699a      	ldr	r2, [r3, #24]
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	681b      	ldr	r3, [r3, #0]
 800ab06:	f042 0210 	orr.w	r2, r2, #16
 800ab0a:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	681a      	ldr	r2, [r3, #0]
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	681b      	ldr	r3, [r3, #0]
 800ab16:	f022 0201 	bic.w	r2, r2, #1
 800ab1a:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	681b      	ldr	r3, [r3, #0]
 800ab20:	6919      	ldr	r1, [r3, #16]
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681a      	ldr	r2, [r3, #0]
 800ab26:	4b3c      	ldr	r3, [pc, #240]	; (800ac18 <SPI_CloseTransfer+0x13c>)
 800ab28:	400b      	ands	r3, r1
 800ab2a:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	689a      	ldr	r2, [r3, #8]
 800ab32:	687b      	ldr	r3, [r7, #4]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 800ab3a:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ab42:	b2db      	uxtb	r3, r3
 800ab44:	2b04      	cmp	r3, #4
 800ab46:	d014      	beq.n	800ab72 <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 800ab48:	68fb      	ldr	r3, [r7, #12]
 800ab4a:	f003 0320 	and.w	r3, r3, #32
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d00f      	beq.n	800ab72 <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab58:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	699a      	ldr	r2, [r3, #24]
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	f042 0220 	orr.w	r2, r2, #32
 800ab70:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800ab78:	b2db      	uxtb	r3, r3
 800ab7a:	2b03      	cmp	r3, #3
 800ab7c:	d014      	beq.n	800aba8 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d00f      	beq.n	800aba8 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ab8e:	f043 0204 	orr.w	r2, r3, #4
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	699a      	ldr	r2, [r3, #24]
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800aba6:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 800aba8:	68fb      	ldr	r3, [r7, #12]
 800abaa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d00f      	beq.n	800abd2 <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800abb8:	f043 0201 	orr.w	r2, r3, #1
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	699a      	ldr	r2, [r3, #24]
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800abd0:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800abd8:	2b00      	cmp	r3, #0
 800abda:	d00f      	beq.n	800abfc <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800abe2:	f043 0208 	orr.w	r2, r3, #8
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	699a      	ldr	r2, [r3, #24]
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800abfa:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2200      	movs	r2, #0
 800ac00:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2200      	movs	r2, #0
 800ac08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
}
 800ac0c:	bf00      	nop
 800ac0e:	3714      	adds	r7, #20
 800ac10:	46bd      	mov	sp, r7
 800ac12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac16:	4770      	bx	lr
 800ac18:	fffffc90 	.word	0xfffffc90

0800ac1c <SPI_WaitOnFlagUntilTimeout>:
  * @param Tickstart: Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b084      	sub	sp, #16
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	60f8      	str	r0, [r7, #12]
 800ac24:	60b9      	str	r1, [r7, #8]
 800ac26:	603b      	str	r3, [r7, #0]
 800ac28:	4613      	mov	r3, r2
 800ac2a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800ac2c:	e010      	b.n	800ac50 <SPI_WaitOnFlagUntilTimeout+0x34>
  {
    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800ac2e:	f7f6 fb41 	bl	80012b4 <HAL_GetTick>
 800ac32:	4602      	mov	r2, r0
 800ac34:	69bb      	ldr	r3, [r7, #24]
 800ac36:	1ad3      	subs	r3, r2, r3
 800ac38:	683a      	ldr	r2, [r7, #0]
 800ac3a:	429a      	cmp	r2, r3
 800ac3c:	d803      	bhi.n	800ac46 <SPI_WaitOnFlagUntilTimeout+0x2a>
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac44:	d102      	bne.n	800ac4c <SPI_WaitOnFlagUntilTimeout+0x30>
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d101      	bne.n	800ac50 <SPI_WaitOnFlagUntilTimeout+0x34>
    {
      return HAL_TIMEOUT;
 800ac4c:	2303      	movs	r3, #3
 800ac4e:	e00f      	b.n	800ac70 <SPI_WaitOnFlagUntilTimeout+0x54>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) == Status)
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	695a      	ldr	r2, [r3, #20]
 800ac56:	68bb      	ldr	r3, [r7, #8]
 800ac58:	4013      	ands	r3, r2
 800ac5a:	68ba      	ldr	r2, [r7, #8]
 800ac5c:	429a      	cmp	r2, r3
 800ac5e:	bf0c      	ite	eq
 800ac60:	2301      	moveq	r3, #1
 800ac62:	2300      	movne	r3, #0
 800ac64:	b2db      	uxtb	r3, r3
 800ac66:	461a      	mov	r2, r3
 800ac68:	79fb      	ldrb	r3, [r7, #7]
 800ac6a:	429a      	cmp	r2, r3
 800ac6c:	d0df      	beq.n	800ac2e <SPI_WaitOnFlagUntilTimeout+0x12>
    }
  }
  return HAL_OK;
 800ac6e:	2300      	movs	r3, #0
}
 800ac70:	4618      	mov	r0, r3
 800ac72:	3710      	adds	r7, #16
 800ac74:	46bd      	mov	sp, r7
 800ac76:	bd80      	pop	{r7, pc}

0800ac78 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(SPI_HandleTypeDef *hspi)
{
 800ac78:	b480      	push	{r7}
 800ac7a:	b085      	sub	sp, #20
 800ac7c:	af00      	add	r7, sp, #0
 800ac7e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ac84:	095b      	lsrs	r3, r3, #5
 800ac86:	3301      	adds	r3, #1
 800ac88:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	68db      	ldr	r3, [r3, #12]
 800ac8e:	3301      	adds	r3, #1
 800ac90:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	3307      	adds	r3, #7
 800ac96:	08db      	lsrs	r3, r3, #3
 800ac98:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	68fa      	ldr	r2, [r7, #12]
 800ac9e:	fb02 f303 	mul.w	r3, r2, r3
}
 800aca2:	4618      	mov	r0, r3
 800aca4:	3714      	adds	r7, #20
 800aca6:	46bd      	mov	sp, r7
 800aca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acac:	4770      	bx	lr
	...

0800acb0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800acb0:	b084      	sub	sp, #16
 800acb2:	b580      	push	{r7, lr}
 800acb4:	b084      	sub	sp, #16
 800acb6:	af00      	add	r7, sp, #0
 800acb8:	6078      	str	r0, [r7, #4]
 800acba:	f107 001c 	add.w	r0, r7, #28
 800acbe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800acc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800acc4:	2b01      	cmp	r3, #1
 800acc6:	d120      	bne.n	800ad0a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800accc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	68da      	ldr	r2, [r3, #12]
 800acd8:	4b2a      	ldr	r3, [pc, #168]	; (800ad84 <USB_CoreInit+0xd4>)
 800acda:	4013      	ands	r3, r2
 800acdc:	687a      	ldr	r2, [r7, #4]
 800acde:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	68db      	ldr	r3, [r3, #12]
 800ace4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800acec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800acee:	2b01      	cmp	r3, #1
 800acf0:	d105      	bne.n	800acfe <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	68db      	ldr	r3, [r3, #12]
 800acf6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800acfe:	6878      	ldr	r0, [r7, #4]
 800ad00:	f001 faf8 	bl	800c2f4 <USB_CoreReset>
 800ad04:	4603      	mov	r3, r0
 800ad06:	73fb      	strb	r3, [r7, #15]
 800ad08:	e01a      	b.n	800ad40 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	68db      	ldr	r3, [r3, #12]
 800ad0e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ad16:	6878      	ldr	r0, [r7, #4]
 800ad18:	f001 faec 	bl	800c2f4 <USB_CoreReset>
 800ad1c:	4603      	mov	r3, r0
 800ad1e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ad20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d106      	bne.n	800ad34 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad2a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	639a      	str	r2, [r3, #56]	; 0x38
 800ad32:	e005      	b.n	800ad40 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad38:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ad40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad42:	2b01      	cmp	r3, #1
 800ad44:	d116      	bne.n	800ad74 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ad4a:	b29a      	uxth	r2, r3
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800ad54:	4b0c      	ldr	r3, [pc, #48]	; (800ad88 <USB_CoreInit+0xd8>)
 800ad56:	4313      	orrs	r3, r2
 800ad58:	687a      	ldr	r2, [r7, #4]
 800ad5a:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	689b      	ldr	r3, [r3, #8]
 800ad60:	f043 0206 	orr.w	r2, r3, #6
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	689b      	ldr	r3, [r3, #8]
 800ad6c:	f043 0220 	orr.w	r2, r3, #32
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ad74:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad76:	4618      	mov	r0, r3
 800ad78:	3710      	adds	r7, #16
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ad80:	b004      	add	sp, #16
 800ad82:	4770      	bx	lr
 800ad84:	ffbdffbf 	.word	0xffbdffbf
 800ad88:	03ee0000 	.word	0x03ee0000

0800ad8c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800ad8c:	b480      	push	{r7}
 800ad8e:	b087      	sub	sp, #28
 800ad90:	af00      	add	r7, sp, #0
 800ad92:	60f8      	str	r0, [r7, #12]
 800ad94:	60b9      	str	r1, [r7, #8]
 800ad96:	4613      	mov	r3, r2
 800ad98:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800ad9a:	79fb      	ldrb	r3, [r7, #7]
 800ad9c:	2b02      	cmp	r3, #2
 800ad9e:	d165      	bne.n	800ae6c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ada0:	68bb      	ldr	r3, [r7, #8]
 800ada2:	4a41      	ldr	r2, [pc, #260]	; (800aea8 <USB_SetTurnaroundTime+0x11c>)
 800ada4:	4293      	cmp	r3, r2
 800ada6:	d906      	bls.n	800adb6 <USB_SetTurnaroundTime+0x2a>
 800ada8:	68bb      	ldr	r3, [r7, #8]
 800adaa:	4a40      	ldr	r2, [pc, #256]	; (800aeac <USB_SetTurnaroundTime+0x120>)
 800adac:	4293      	cmp	r3, r2
 800adae:	d202      	bcs.n	800adb6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800adb0:	230f      	movs	r3, #15
 800adb2:	617b      	str	r3, [r7, #20]
 800adb4:	e062      	b.n	800ae7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800adb6:	68bb      	ldr	r3, [r7, #8]
 800adb8:	4a3c      	ldr	r2, [pc, #240]	; (800aeac <USB_SetTurnaroundTime+0x120>)
 800adba:	4293      	cmp	r3, r2
 800adbc:	d306      	bcc.n	800adcc <USB_SetTurnaroundTime+0x40>
 800adbe:	68bb      	ldr	r3, [r7, #8]
 800adc0:	4a3b      	ldr	r2, [pc, #236]	; (800aeb0 <USB_SetTurnaroundTime+0x124>)
 800adc2:	4293      	cmp	r3, r2
 800adc4:	d202      	bcs.n	800adcc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800adc6:	230e      	movs	r3, #14
 800adc8:	617b      	str	r3, [r7, #20]
 800adca:	e057      	b.n	800ae7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800adcc:	68bb      	ldr	r3, [r7, #8]
 800adce:	4a38      	ldr	r2, [pc, #224]	; (800aeb0 <USB_SetTurnaroundTime+0x124>)
 800add0:	4293      	cmp	r3, r2
 800add2:	d306      	bcc.n	800ade2 <USB_SetTurnaroundTime+0x56>
 800add4:	68bb      	ldr	r3, [r7, #8]
 800add6:	4a37      	ldr	r2, [pc, #220]	; (800aeb4 <USB_SetTurnaroundTime+0x128>)
 800add8:	4293      	cmp	r3, r2
 800adda:	d202      	bcs.n	800ade2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800addc:	230d      	movs	r3, #13
 800adde:	617b      	str	r3, [r7, #20]
 800ade0:	e04c      	b.n	800ae7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800ade2:	68bb      	ldr	r3, [r7, #8]
 800ade4:	4a33      	ldr	r2, [pc, #204]	; (800aeb4 <USB_SetTurnaroundTime+0x128>)
 800ade6:	4293      	cmp	r3, r2
 800ade8:	d306      	bcc.n	800adf8 <USB_SetTurnaroundTime+0x6c>
 800adea:	68bb      	ldr	r3, [r7, #8]
 800adec:	4a32      	ldr	r2, [pc, #200]	; (800aeb8 <USB_SetTurnaroundTime+0x12c>)
 800adee:	4293      	cmp	r3, r2
 800adf0:	d802      	bhi.n	800adf8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800adf2:	230c      	movs	r3, #12
 800adf4:	617b      	str	r3, [r7, #20]
 800adf6:	e041      	b.n	800ae7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800adf8:	68bb      	ldr	r3, [r7, #8]
 800adfa:	4a2f      	ldr	r2, [pc, #188]	; (800aeb8 <USB_SetTurnaroundTime+0x12c>)
 800adfc:	4293      	cmp	r3, r2
 800adfe:	d906      	bls.n	800ae0e <USB_SetTurnaroundTime+0x82>
 800ae00:	68bb      	ldr	r3, [r7, #8]
 800ae02:	4a2e      	ldr	r2, [pc, #184]	; (800aebc <USB_SetTurnaroundTime+0x130>)
 800ae04:	4293      	cmp	r3, r2
 800ae06:	d802      	bhi.n	800ae0e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800ae08:	230b      	movs	r3, #11
 800ae0a:	617b      	str	r3, [r7, #20]
 800ae0c:	e036      	b.n	800ae7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800ae0e:	68bb      	ldr	r3, [r7, #8]
 800ae10:	4a2a      	ldr	r2, [pc, #168]	; (800aebc <USB_SetTurnaroundTime+0x130>)
 800ae12:	4293      	cmp	r3, r2
 800ae14:	d906      	bls.n	800ae24 <USB_SetTurnaroundTime+0x98>
 800ae16:	68bb      	ldr	r3, [r7, #8]
 800ae18:	4a29      	ldr	r2, [pc, #164]	; (800aec0 <USB_SetTurnaroundTime+0x134>)
 800ae1a:	4293      	cmp	r3, r2
 800ae1c:	d802      	bhi.n	800ae24 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800ae1e:	230a      	movs	r3, #10
 800ae20:	617b      	str	r3, [r7, #20]
 800ae22:	e02b      	b.n	800ae7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800ae24:	68bb      	ldr	r3, [r7, #8]
 800ae26:	4a26      	ldr	r2, [pc, #152]	; (800aec0 <USB_SetTurnaroundTime+0x134>)
 800ae28:	4293      	cmp	r3, r2
 800ae2a:	d906      	bls.n	800ae3a <USB_SetTurnaroundTime+0xae>
 800ae2c:	68bb      	ldr	r3, [r7, #8]
 800ae2e:	4a25      	ldr	r2, [pc, #148]	; (800aec4 <USB_SetTurnaroundTime+0x138>)
 800ae30:	4293      	cmp	r3, r2
 800ae32:	d202      	bcs.n	800ae3a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800ae34:	2309      	movs	r3, #9
 800ae36:	617b      	str	r3, [r7, #20]
 800ae38:	e020      	b.n	800ae7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800ae3a:	68bb      	ldr	r3, [r7, #8]
 800ae3c:	4a21      	ldr	r2, [pc, #132]	; (800aec4 <USB_SetTurnaroundTime+0x138>)
 800ae3e:	4293      	cmp	r3, r2
 800ae40:	d306      	bcc.n	800ae50 <USB_SetTurnaroundTime+0xc4>
 800ae42:	68bb      	ldr	r3, [r7, #8]
 800ae44:	4a20      	ldr	r2, [pc, #128]	; (800aec8 <USB_SetTurnaroundTime+0x13c>)
 800ae46:	4293      	cmp	r3, r2
 800ae48:	d802      	bhi.n	800ae50 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800ae4a:	2308      	movs	r3, #8
 800ae4c:	617b      	str	r3, [r7, #20]
 800ae4e:	e015      	b.n	800ae7c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800ae50:	68bb      	ldr	r3, [r7, #8]
 800ae52:	4a1d      	ldr	r2, [pc, #116]	; (800aec8 <USB_SetTurnaroundTime+0x13c>)
 800ae54:	4293      	cmp	r3, r2
 800ae56:	d906      	bls.n	800ae66 <USB_SetTurnaroundTime+0xda>
 800ae58:	68bb      	ldr	r3, [r7, #8]
 800ae5a:	4a1c      	ldr	r2, [pc, #112]	; (800aecc <USB_SetTurnaroundTime+0x140>)
 800ae5c:	4293      	cmp	r3, r2
 800ae5e:	d202      	bcs.n	800ae66 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800ae60:	2307      	movs	r3, #7
 800ae62:	617b      	str	r3, [r7, #20]
 800ae64:	e00a      	b.n	800ae7c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800ae66:	2306      	movs	r3, #6
 800ae68:	617b      	str	r3, [r7, #20]
 800ae6a:	e007      	b.n	800ae7c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800ae6c:	79fb      	ldrb	r3, [r7, #7]
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d102      	bne.n	800ae78 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800ae72:	2309      	movs	r3, #9
 800ae74:	617b      	str	r3, [r7, #20]
 800ae76:	e001      	b.n	800ae7c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800ae78:	2309      	movs	r3, #9
 800ae7a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800ae7c:	68fb      	ldr	r3, [r7, #12]
 800ae7e:	68db      	ldr	r3, [r3, #12]
 800ae80:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	68da      	ldr	r2, [r3, #12]
 800ae8c:	697b      	ldr	r3, [r7, #20]
 800ae8e:	029b      	lsls	r3, r3, #10
 800ae90:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800ae94:	431a      	orrs	r2, r3
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800ae9a:	2300      	movs	r3, #0
}
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	371c      	adds	r7, #28
 800aea0:	46bd      	mov	sp, r7
 800aea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aea6:	4770      	bx	lr
 800aea8:	00d8acbf 	.word	0x00d8acbf
 800aeac:	00e4e1c0 	.word	0x00e4e1c0
 800aeb0:	00f42400 	.word	0x00f42400
 800aeb4:	01067380 	.word	0x01067380
 800aeb8:	011a499f 	.word	0x011a499f
 800aebc:	01312cff 	.word	0x01312cff
 800aec0:	014ca43f 	.word	0x014ca43f
 800aec4:	016e3600 	.word	0x016e3600
 800aec8:	01a6ab1f 	.word	0x01a6ab1f
 800aecc:	01e84800 	.word	0x01e84800

0800aed0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800aed0:	b480      	push	{r7}
 800aed2:	b083      	sub	sp, #12
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	689b      	ldr	r3, [r3, #8]
 800aedc:	f043 0201 	orr.w	r2, r3, #1
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800aee4:	2300      	movs	r3, #0
}
 800aee6:	4618      	mov	r0, r3
 800aee8:	370c      	adds	r7, #12
 800aeea:	46bd      	mov	sp, r7
 800aeec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aef0:	4770      	bx	lr

0800aef2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800aef2:	b480      	push	{r7}
 800aef4:	b083      	sub	sp, #12
 800aef6:	af00      	add	r7, sp, #0
 800aef8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	689b      	ldr	r3, [r3, #8]
 800aefe:	f023 0201 	bic.w	r2, r3, #1
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800af06:	2300      	movs	r3, #0
}
 800af08:	4618      	mov	r0, r3
 800af0a:	370c      	adds	r7, #12
 800af0c:	46bd      	mov	sp, r7
 800af0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af12:	4770      	bx	lr

0800af14 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b084      	sub	sp, #16
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
 800af1c:	460b      	mov	r3, r1
 800af1e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800af20:	2300      	movs	r3, #0
 800af22:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	68db      	ldr	r3, [r3, #12]
 800af28:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800af30:	78fb      	ldrb	r3, [r7, #3]
 800af32:	2b01      	cmp	r3, #1
 800af34:	d115      	bne.n	800af62 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	68db      	ldr	r3, [r3, #12]
 800af3a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800af42:	2001      	movs	r0, #1
 800af44:	f7f6 f9c2 	bl	80012cc <HAL_Delay>
      ms++;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	3301      	adds	r3, #1
 800af4c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800af4e:	6878      	ldr	r0, [r7, #4]
 800af50:	f001 f93f 	bl	800c1d2 <USB_GetMode>
 800af54:	4603      	mov	r3, r0
 800af56:	2b01      	cmp	r3, #1
 800af58:	d01e      	beq.n	800af98 <USB_SetCurrentMode+0x84>
 800af5a:	68fb      	ldr	r3, [r7, #12]
 800af5c:	2b31      	cmp	r3, #49	; 0x31
 800af5e:	d9f0      	bls.n	800af42 <USB_SetCurrentMode+0x2e>
 800af60:	e01a      	b.n	800af98 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800af62:	78fb      	ldrb	r3, [r7, #3]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d115      	bne.n	800af94 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	68db      	ldr	r3, [r3, #12]
 800af6c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800af74:	2001      	movs	r0, #1
 800af76:	f7f6 f9a9 	bl	80012cc <HAL_Delay>
      ms++;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	3301      	adds	r3, #1
 800af7e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800af80:	6878      	ldr	r0, [r7, #4]
 800af82:	f001 f926 	bl	800c1d2 <USB_GetMode>
 800af86:	4603      	mov	r3, r0
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d005      	beq.n	800af98 <USB_SetCurrentMode+0x84>
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	2b31      	cmp	r3, #49	; 0x31
 800af90:	d9f0      	bls.n	800af74 <USB_SetCurrentMode+0x60>
 800af92:	e001      	b.n	800af98 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800af94:	2301      	movs	r3, #1
 800af96:	e005      	b.n	800afa4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	2b32      	cmp	r3, #50	; 0x32
 800af9c:	d101      	bne.n	800afa2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800af9e:	2301      	movs	r3, #1
 800afa0:	e000      	b.n	800afa4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800afa2:	2300      	movs	r3, #0
}
 800afa4:	4618      	mov	r0, r3
 800afa6:	3710      	adds	r7, #16
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd80      	pop	{r7, pc}

0800afac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800afac:	b084      	sub	sp, #16
 800afae:	b580      	push	{r7, lr}
 800afb0:	b086      	sub	sp, #24
 800afb2:	af00      	add	r7, sp, #0
 800afb4:	6078      	str	r0, [r7, #4]
 800afb6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800afba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800afbe:	2300      	movs	r3, #0
 800afc0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800afc6:	2300      	movs	r3, #0
 800afc8:	613b      	str	r3, [r7, #16]
 800afca:	e009      	b.n	800afe0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800afcc:	687a      	ldr	r2, [r7, #4]
 800afce:	693b      	ldr	r3, [r7, #16]
 800afd0:	3340      	adds	r3, #64	; 0x40
 800afd2:	009b      	lsls	r3, r3, #2
 800afd4:	4413      	add	r3, r2
 800afd6:	2200      	movs	r2, #0
 800afd8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800afda:	693b      	ldr	r3, [r7, #16]
 800afdc:	3301      	adds	r3, #1
 800afde:	613b      	str	r3, [r7, #16]
 800afe0:	693b      	ldr	r3, [r7, #16]
 800afe2:	2b0e      	cmp	r3, #14
 800afe4:	d9f2      	bls.n	800afcc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800afe6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d11c      	bne.n	800b026 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800aff2:	685b      	ldr	r3, [r3, #4]
 800aff4:	68fa      	ldr	r2, [r7, #12]
 800aff6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800affa:	f043 0302 	orr.w	r3, r3, #2
 800affe:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b004:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	601a      	str	r2, [r3, #0]
 800b024:	e005      	b.n	800b032 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b02a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b038:	461a      	mov	r2, r3
 800b03a:	2300      	movs	r3, #0
 800b03c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b044:	4619      	mov	r1, r3
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b04c:	461a      	mov	r2, r3
 800b04e:	680b      	ldr	r3, [r1, #0]
 800b050:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b054:	2b01      	cmp	r3, #1
 800b056:	d10c      	bne.n	800b072 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800b058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d104      	bne.n	800b068 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800b05e:	2100      	movs	r1, #0
 800b060:	6878      	ldr	r0, [r7, #4]
 800b062:	f000 f965 	bl	800b330 <USB_SetDevSpeed>
 800b066:	e008      	b.n	800b07a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800b068:	2101      	movs	r1, #1
 800b06a:	6878      	ldr	r0, [r7, #4]
 800b06c:	f000 f960 	bl	800b330 <USB_SetDevSpeed>
 800b070:	e003      	b.n	800b07a <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800b072:	2103      	movs	r1, #3
 800b074:	6878      	ldr	r0, [r7, #4]
 800b076:	f000 f95b 	bl	800b330 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800b07a:	2110      	movs	r1, #16
 800b07c:	6878      	ldr	r0, [r7, #4]
 800b07e:	f000 f8f3 	bl	800b268 <USB_FlushTxFifo>
 800b082:	4603      	mov	r3, r0
 800b084:	2b00      	cmp	r3, #0
 800b086:	d001      	beq.n	800b08c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800b088:	2301      	movs	r3, #1
 800b08a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800b08c:	6878      	ldr	r0, [r7, #4]
 800b08e:	f000 f91f 	bl	800b2d0 <USB_FlushRxFifo>
 800b092:	4603      	mov	r3, r0
 800b094:	2b00      	cmp	r3, #0
 800b096:	d001      	beq.n	800b09c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800b098:	2301      	movs	r3, #1
 800b09a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0a2:	461a      	mov	r2, r3
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800b0a8:	68fb      	ldr	r3, [r7, #12]
 800b0aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0ae:	461a      	mov	r2, r3
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b0ba:	461a      	mov	r2, r3
 800b0bc:	2300      	movs	r3, #0
 800b0be:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	613b      	str	r3, [r7, #16]
 800b0c4:	e043      	b.n	800b14e <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b0c6:	693b      	ldr	r3, [r7, #16]
 800b0c8:	015a      	lsls	r2, r3, #5
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	4413      	add	r3, r2
 800b0ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b0d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b0dc:	d118      	bne.n	800b110 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800b0de:	693b      	ldr	r3, [r7, #16]
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	d10a      	bne.n	800b0fa <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800b0e4:	693b      	ldr	r3, [r7, #16]
 800b0e6:	015a      	lsls	r2, r3, #5
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	4413      	add	r3, r2
 800b0ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b0f0:	461a      	mov	r2, r3
 800b0f2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b0f6:	6013      	str	r3, [r2, #0]
 800b0f8:	e013      	b.n	800b122 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800b0fa:	693b      	ldr	r3, [r7, #16]
 800b0fc:	015a      	lsls	r2, r3, #5
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	4413      	add	r3, r2
 800b102:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b106:	461a      	mov	r2, r3
 800b108:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b10c:	6013      	str	r3, [r2, #0]
 800b10e:	e008      	b.n	800b122 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800b110:	693b      	ldr	r3, [r7, #16]
 800b112:	015a      	lsls	r2, r3, #5
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	4413      	add	r3, r2
 800b118:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b11c:	461a      	mov	r2, r3
 800b11e:	2300      	movs	r3, #0
 800b120:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800b122:	693b      	ldr	r3, [r7, #16]
 800b124:	015a      	lsls	r2, r3, #5
 800b126:	68fb      	ldr	r3, [r7, #12]
 800b128:	4413      	add	r3, r2
 800b12a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b12e:	461a      	mov	r2, r3
 800b130:	2300      	movs	r3, #0
 800b132:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800b134:	693b      	ldr	r3, [r7, #16]
 800b136:	015a      	lsls	r2, r3, #5
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	4413      	add	r3, r2
 800b13c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b140:	461a      	mov	r2, r3
 800b142:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b146:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b148:	693b      	ldr	r3, [r7, #16]
 800b14a:	3301      	adds	r3, #1
 800b14c:	613b      	str	r3, [r7, #16]
 800b14e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b150:	693a      	ldr	r2, [r7, #16]
 800b152:	429a      	cmp	r2, r3
 800b154:	d3b7      	bcc.n	800b0c6 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b156:	2300      	movs	r3, #0
 800b158:	613b      	str	r3, [r7, #16]
 800b15a:	e043      	b.n	800b1e4 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b15c:	693b      	ldr	r3, [r7, #16]
 800b15e:	015a      	lsls	r2, r3, #5
 800b160:	68fb      	ldr	r3, [r7, #12]
 800b162:	4413      	add	r3, r2
 800b164:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b16e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b172:	d118      	bne.n	800b1a6 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800b174:	693b      	ldr	r3, [r7, #16]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d10a      	bne.n	800b190 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800b17a:	693b      	ldr	r3, [r7, #16]
 800b17c:	015a      	lsls	r2, r3, #5
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	4413      	add	r3, r2
 800b182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b186:	461a      	mov	r2, r3
 800b188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800b18c:	6013      	str	r3, [r2, #0]
 800b18e:	e013      	b.n	800b1b8 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800b190:	693b      	ldr	r3, [r7, #16]
 800b192:	015a      	lsls	r2, r3, #5
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	4413      	add	r3, r2
 800b198:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b19c:	461a      	mov	r2, r3
 800b19e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800b1a2:	6013      	str	r3, [r2, #0]
 800b1a4:	e008      	b.n	800b1b8 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800b1a6:	693b      	ldr	r3, [r7, #16]
 800b1a8:	015a      	lsls	r2, r3, #5
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	4413      	add	r3, r2
 800b1ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1b2:	461a      	mov	r2, r3
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800b1b8:	693b      	ldr	r3, [r7, #16]
 800b1ba:	015a      	lsls	r2, r3, #5
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	4413      	add	r3, r2
 800b1c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1c4:	461a      	mov	r2, r3
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800b1ca:	693b      	ldr	r3, [r7, #16]
 800b1cc:	015a      	lsls	r2, r3, #5
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	4413      	add	r3, r2
 800b1d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b1d6:	461a      	mov	r2, r3
 800b1d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b1dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800b1de:	693b      	ldr	r3, [r7, #16]
 800b1e0:	3301      	adds	r3, #1
 800b1e2:	613b      	str	r3, [r7, #16]
 800b1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1e6:	693a      	ldr	r2, [r7, #16]
 800b1e8:	429a      	cmp	r2, r3
 800b1ea:	d3b7      	bcc.n	800b15c <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b1f2:	691b      	ldr	r3, [r3, #16]
 800b1f4:	68fa      	ldr	r2, [r7, #12]
 800b1f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b1fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b1fe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	2200      	movs	r2, #0
 800b204:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800b20c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800b20e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b210:	2b00      	cmp	r3, #0
 800b212:	d105      	bne.n	800b220 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	699b      	ldr	r3, [r3, #24]
 800b218:	f043 0210 	orr.w	r2, r3, #16
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	699a      	ldr	r2, [r3, #24]
 800b224:	4b0e      	ldr	r3, [pc, #56]	; (800b260 <USB_DevInit+0x2b4>)
 800b226:	4313      	orrs	r3, r2
 800b228:	687a      	ldr	r2, [r7, #4]
 800b22a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800b22c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d005      	beq.n	800b23e <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	699b      	ldr	r3, [r3, #24]
 800b236:	f043 0208 	orr.w	r2, r3, #8
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800b23e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b240:	2b01      	cmp	r3, #1
 800b242:	d105      	bne.n	800b250 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	699a      	ldr	r2, [r3, #24]
 800b248:	4b06      	ldr	r3, [pc, #24]	; (800b264 <USB_DevInit+0x2b8>)
 800b24a:	4313      	orrs	r3, r2
 800b24c:	687a      	ldr	r2, [r7, #4]
 800b24e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800b250:	7dfb      	ldrb	r3, [r7, #23]
}
 800b252:	4618      	mov	r0, r3
 800b254:	3718      	adds	r7, #24
 800b256:	46bd      	mov	sp, r7
 800b258:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800b25c:	b004      	add	sp, #16
 800b25e:	4770      	bx	lr
 800b260:	803c3800 	.word	0x803c3800
 800b264:	40000004 	.word	0x40000004

0800b268 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800b268:	b480      	push	{r7}
 800b26a:	b085      	sub	sp, #20
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
 800b270:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800b272:	2300      	movs	r3, #0
 800b274:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	3301      	adds	r3, #1
 800b27a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	4a13      	ldr	r2, [pc, #76]	; (800b2cc <USB_FlushTxFifo+0x64>)
 800b280:	4293      	cmp	r3, r2
 800b282:	d901      	bls.n	800b288 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800b284:	2303      	movs	r3, #3
 800b286:	e01b      	b.n	800b2c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	691b      	ldr	r3, [r3, #16]
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	daf2      	bge.n	800b276 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800b290:	2300      	movs	r3, #0
 800b292:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	019b      	lsls	r3, r3, #6
 800b298:	f043 0220 	orr.w	r2, r3, #32
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	3301      	adds	r3, #1
 800b2a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	4a08      	ldr	r2, [pc, #32]	; (800b2cc <USB_FlushTxFifo+0x64>)
 800b2aa:	4293      	cmp	r3, r2
 800b2ac:	d901      	bls.n	800b2b2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800b2ae:	2303      	movs	r3, #3
 800b2b0:	e006      	b.n	800b2c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	691b      	ldr	r3, [r3, #16]
 800b2b6:	f003 0320 	and.w	r3, r3, #32
 800b2ba:	2b20      	cmp	r3, #32
 800b2bc:	d0f0      	beq.n	800b2a0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800b2be:	2300      	movs	r3, #0
}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	3714      	adds	r7, #20
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ca:	4770      	bx	lr
 800b2cc:	00030d40 	.word	0x00030d40

0800b2d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800b2d0:	b480      	push	{r7}
 800b2d2:	b085      	sub	sp, #20
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b2d8:	2300      	movs	r3, #0
 800b2da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	3301      	adds	r3, #1
 800b2e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	4a11      	ldr	r2, [pc, #68]	; (800b32c <USB_FlushRxFifo+0x5c>)
 800b2e6:	4293      	cmp	r3, r2
 800b2e8:	d901      	bls.n	800b2ee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800b2ea:	2303      	movs	r3, #3
 800b2ec:	e018      	b.n	800b320 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	691b      	ldr	r3, [r3, #16]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	daf2      	bge.n	800b2dc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800b2f6:	2300      	movs	r3, #0
 800b2f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	2210      	movs	r2, #16
 800b2fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	3301      	adds	r3, #1
 800b304:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	4a08      	ldr	r2, [pc, #32]	; (800b32c <USB_FlushRxFifo+0x5c>)
 800b30a:	4293      	cmp	r3, r2
 800b30c:	d901      	bls.n	800b312 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800b30e:	2303      	movs	r3, #3
 800b310:	e006      	b.n	800b320 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	691b      	ldr	r3, [r3, #16]
 800b316:	f003 0310 	and.w	r3, r3, #16
 800b31a:	2b10      	cmp	r3, #16
 800b31c:	d0f0      	beq.n	800b300 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800b31e:	2300      	movs	r3, #0
}
 800b320:	4618      	mov	r0, r3
 800b322:	3714      	adds	r7, #20
 800b324:	46bd      	mov	sp, r7
 800b326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32a:	4770      	bx	lr
 800b32c:	00030d40 	.word	0x00030d40

0800b330 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800b330:	b480      	push	{r7}
 800b332:	b085      	sub	sp, #20
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
 800b338:	460b      	mov	r3, r1
 800b33a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b346:	681a      	ldr	r2, [r3, #0]
 800b348:	78fb      	ldrb	r3, [r7, #3]
 800b34a:	68f9      	ldr	r1, [r7, #12]
 800b34c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b350:	4313      	orrs	r3, r2
 800b352:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800b354:	2300      	movs	r3, #0
}
 800b356:	4618      	mov	r0, r3
 800b358:	3714      	adds	r7, #20
 800b35a:	46bd      	mov	sp, r7
 800b35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b360:	4770      	bx	lr

0800b362 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800b362:	b480      	push	{r7}
 800b364:	b087      	sub	sp, #28
 800b366:	af00      	add	r7, sp, #0
 800b368:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800b36e:	693b      	ldr	r3, [r7, #16]
 800b370:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b374:	689b      	ldr	r3, [r3, #8]
 800b376:	f003 0306 	and.w	r3, r3, #6
 800b37a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	2b00      	cmp	r3, #0
 800b380:	d102      	bne.n	800b388 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800b382:	2300      	movs	r3, #0
 800b384:	75fb      	strb	r3, [r7, #23]
 800b386:	e00a      	b.n	800b39e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800b388:	68fb      	ldr	r3, [r7, #12]
 800b38a:	2b02      	cmp	r3, #2
 800b38c:	d002      	beq.n	800b394 <USB_GetDevSpeed+0x32>
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	2b06      	cmp	r3, #6
 800b392:	d102      	bne.n	800b39a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800b394:	2302      	movs	r3, #2
 800b396:	75fb      	strb	r3, [r7, #23]
 800b398:	e001      	b.n	800b39e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800b39a:	230f      	movs	r3, #15
 800b39c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800b39e:	7dfb      	ldrb	r3, [r7, #23]
}
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	371c      	adds	r7, #28
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3aa:	4770      	bx	lr

0800b3ac <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b3ac:	b480      	push	{r7}
 800b3ae:	b085      	sub	sp, #20
 800b3b0:	af00      	add	r7, sp, #0
 800b3b2:	6078      	str	r0, [r7, #4]
 800b3b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b3ba:	683b      	ldr	r3, [r7, #0]
 800b3bc:	781b      	ldrb	r3, [r3, #0]
 800b3be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800b3c0:	683b      	ldr	r3, [r7, #0]
 800b3c2:	785b      	ldrb	r3, [r3, #1]
 800b3c4:	2b01      	cmp	r3, #1
 800b3c6:	d139      	bne.n	800b43c <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b3ce:	69da      	ldr	r2, [r3, #28]
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	781b      	ldrb	r3, [r3, #0]
 800b3d4:	f003 030f 	and.w	r3, r3, #15
 800b3d8:	2101      	movs	r1, #1
 800b3da:	fa01 f303 	lsl.w	r3, r1, r3
 800b3de:	b29b      	uxth	r3, r3
 800b3e0:	68f9      	ldr	r1, [r7, #12]
 800b3e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b3e6:	4313      	orrs	r3, r2
 800b3e8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800b3ea:	68bb      	ldr	r3, [r7, #8]
 800b3ec:	015a      	lsls	r2, r3, #5
 800b3ee:	68fb      	ldr	r3, [r7, #12]
 800b3f0:	4413      	add	r3, r2
 800b3f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b3fc:	2b00      	cmp	r3, #0
 800b3fe:	d153      	bne.n	800b4a8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	015a      	lsls	r2, r3, #5
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	4413      	add	r3, r2
 800b408:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b40c:	681a      	ldr	r2, [r3, #0]
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	689b      	ldr	r3, [r3, #8]
 800b412:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b416:	683b      	ldr	r3, [r7, #0]
 800b418:	791b      	ldrb	r3, [r3, #4]
 800b41a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b41c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800b41e:	68bb      	ldr	r3, [r7, #8]
 800b420:	059b      	lsls	r3, r3, #22
 800b422:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800b424:	431a      	orrs	r2, r3
 800b426:	68bb      	ldr	r3, [r7, #8]
 800b428:	0159      	lsls	r1, r3, #5
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	440b      	add	r3, r1
 800b42e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b432:	4619      	mov	r1, r3
 800b434:	4b20      	ldr	r3, [pc, #128]	; (800b4b8 <USB_ActivateEndpoint+0x10c>)
 800b436:	4313      	orrs	r3, r2
 800b438:	600b      	str	r3, [r1, #0]
 800b43a:	e035      	b.n	800b4a8 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b442:	69da      	ldr	r2, [r3, #28]
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	781b      	ldrb	r3, [r3, #0]
 800b448:	f003 030f 	and.w	r3, r3, #15
 800b44c:	2101      	movs	r1, #1
 800b44e:	fa01 f303 	lsl.w	r3, r1, r3
 800b452:	041b      	lsls	r3, r3, #16
 800b454:	68f9      	ldr	r1, [r7, #12]
 800b456:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b45a:	4313      	orrs	r3, r2
 800b45c:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800b45e:	68bb      	ldr	r3, [r7, #8]
 800b460:	015a      	lsls	r2, r3, #5
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	4413      	add	r3, r2
 800b466:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b470:	2b00      	cmp	r3, #0
 800b472:	d119      	bne.n	800b4a8 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b474:	68bb      	ldr	r3, [r7, #8]
 800b476:	015a      	lsls	r2, r3, #5
 800b478:	68fb      	ldr	r3, [r7, #12]
 800b47a:	4413      	add	r3, r2
 800b47c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b480:	681a      	ldr	r2, [r3, #0]
 800b482:	683b      	ldr	r3, [r7, #0]
 800b484:	689b      	ldr	r3, [r3, #8]
 800b486:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800b48a:	683b      	ldr	r3, [r7, #0]
 800b48c:	791b      	ldrb	r3, [r3, #4]
 800b48e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800b490:	430b      	orrs	r3, r1
 800b492:	431a      	orrs	r2, r3
 800b494:	68bb      	ldr	r3, [r7, #8]
 800b496:	0159      	lsls	r1, r3, #5
 800b498:	68fb      	ldr	r3, [r7, #12]
 800b49a:	440b      	add	r3, r1
 800b49c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b4a0:	4619      	mov	r1, r3
 800b4a2:	4b05      	ldr	r3, [pc, #20]	; (800b4b8 <USB_ActivateEndpoint+0x10c>)
 800b4a4:	4313      	orrs	r3, r2
 800b4a6:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800b4a8:	2300      	movs	r3, #0
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3714      	adds	r7, #20
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b4:	4770      	bx	lr
 800b4b6:	bf00      	nop
 800b4b8:	10008000 	.word	0x10008000

0800b4bc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800b4bc:	b480      	push	{r7}
 800b4be:	b085      	sub	sp, #20
 800b4c0:	af00      	add	r7, sp, #0
 800b4c2:	6078      	str	r0, [r7, #4]
 800b4c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800b4ca:	683b      	ldr	r3, [r7, #0]
 800b4cc:	781b      	ldrb	r3, [r3, #0]
 800b4ce:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800b4d0:	683b      	ldr	r3, [r7, #0]
 800b4d2:	785b      	ldrb	r3, [r3, #1]
 800b4d4:	2b01      	cmp	r3, #1
 800b4d6:	d161      	bne.n	800b59c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800b4d8:	68bb      	ldr	r3, [r7, #8]
 800b4da:	015a      	lsls	r2, r3, #5
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	4413      	add	r3, r2
 800b4e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b4ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b4ee:	d11f      	bne.n	800b530 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800b4f0:	68bb      	ldr	r3, [r7, #8]
 800b4f2:	015a      	lsls	r2, r3, #5
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	4413      	add	r3, r2
 800b4f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b4fc:	681b      	ldr	r3, [r3, #0]
 800b4fe:	68ba      	ldr	r2, [r7, #8]
 800b500:	0151      	lsls	r1, r2, #5
 800b502:	68fa      	ldr	r2, [r7, #12]
 800b504:	440a      	add	r2, r1
 800b506:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b50a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b50e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800b510:	68bb      	ldr	r3, [r7, #8]
 800b512:	015a      	lsls	r2, r3, #5
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	4413      	add	r3, r2
 800b518:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	68ba      	ldr	r2, [r7, #8]
 800b520:	0151      	lsls	r1, r2, #5
 800b522:	68fa      	ldr	r2, [r7, #12]
 800b524:	440a      	add	r2, r1
 800b526:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b52a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b52e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b530:	68fb      	ldr	r3, [r7, #12]
 800b532:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b536:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b538:	683b      	ldr	r3, [r7, #0]
 800b53a:	781b      	ldrb	r3, [r3, #0]
 800b53c:	f003 030f 	and.w	r3, r3, #15
 800b540:	2101      	movs	r1, #1
 800b542:	fa01 f303 	lsl.w	r3, r1, r3
 800b546:	b29b      	uxth	r3, r3
 800b548:	43db      	mvns	r3, r3
 800b54a:	68f9      	ldr	r1, [r7, #12]
 800b54c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b550:	4013      	ands	r3, r2
 800b552:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b55a:	69da      	ldr	r2, [r3, #28]
 800b55c:	683b      	ldr	r3, [r7, #0]
 800b55e:	781b      	ldrb	r3, [r3, #0]
 800b560:	f003 030f 	and.w	r3, r3, #15
 800b564:	2101      	movs	r1, #1
 800b566:	fa01 f303 	lsl.w	r3, r1, r3
 800b56a:	b29b      	uxth	r3, r3
 800b56c:	43db      	mvns	r3, r3
 800b56e:	68f9      	ldr	r1, [r7, #12]
 800b570:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b574:	4013      	ands	r3, r2
 800b576:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800b578:	68bb      	ldr	r3, [r7, #8]
 800b57a:	015a      	lsls	r2, r3, #5
 800b57c:	68fb      	ldr	r3, [r7, #12]
 800b57e:	4413      	add	r3, r2
 800b580:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b584:	681a      	ldr	r2, [r3, #0]
 800b586:	68bb      	ldr	r3, [r7, #8]
 800b588:	0159      	lsls	r1, r3, #5
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	440b      	add	r3, r1
 800b58e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b592:	4619      	mov	r1, r3
 800b594:	4b35      	ldr	r3, [pc, #212]	; (800b66c <USB_DeactivateEndpoint+0x1b0>)
 800b596:	4013      	ands	r3, r2
 800b598:	600b      	str	r3, [r1, #0]
 800b59a:	e060      	b.n	800b65e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800b59c:	68bb      	ldr	r3, [r7, #8]
 800b59e:	015a      	lsls	r2, r3, #5
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	4413      	add	r3, r2
 800b5a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b5ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b5b2:	d11f      	bne.n	800b5f4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b5b4:	68bb      	ldr	r3, [r7, #8]
 800b5b6:	015a      	lsls	r2, r3, #5
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	4413      	add	r3, r2
 800b5bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	68ba      	ldr	r2, [r7, #8]
 800b5c4:	0151      	lsls	r1, r2, #5
 800b5c6:	68fa      	ldr	r2, [r7, #12]
 800b5c8:	440a      	add	r2, r1
 800b5ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b5ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b5d2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	015a      	lsls	r2, r3, #5
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	4413      	add	r3, r2
 800b5dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	68ba      	ldr	r2, [r7, #8]
 800b5e4:	0151      	lsls	r1, r2, #5
 800b5e6:	68fa      	ldr	r2, [r7, #12]
 800b5e8:	440a      	add	r2, r1
 800b5ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b5ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800b5f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b5fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	781b      	ldrb	r3, [r3, #0]
 800b600:	f003 030f 	and.w	r3, r3, #15
 800b604:	2101      	movs	r1, #1
 800b606:	fa01 f303 	lsl.w	r3, r1, r3
 800b60a:	041b      	lsls	r3, r3, #16
 800b60c:	43db      	mvns	r3, r3
 800b60e:	68f9      	ldr	r1, [r7, #12]
 800b610:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b614:	4013      	ands	r3, r2
 800b616:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b61e:	69da      	ldr	r2, [r3, #28]
 800b620:	683b      	ldr	r3, [r7, #0]
 800b622:	781b      	ldrb	r3, [r3, #0]
 800b624:	f003 030f 	and.w	r3, r3, #15
 800b628:	2101      	movs	r1, #1
 800b62a:	fa01 f303 	lsl.w	r3, r1, r3
 800b62e:	041b      	lsls	r3, r3, #16
 800b630:	43db      	mvns	r3, r3
 800b632:	68f9      	ldr	r1, [r7, #12]
 800b634:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b638:	4013      	ands	r3, r2
 800b63a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800b63c:	68bb      	ldr	r3, [r7, #8]
 800b63e:	015a      	lsls	r2, r3, #5
 800b640:	68fb      	ldr	r3, [r7, #12]
 800b642:	4413      	add	r3, r2
 800b644:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b648:	681a      	ldr	r2, [r3, #0]
 800b64a:	68bb      	ldr	r3, [r7, #8]
 800b64c:	0159      	lsls	r1, r3, #5
 800b64e:	68fb      	ldr	r3, [r7, #12]
 800b650:	440b      	add	r3, r1
 800b652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b656:	4619      	mov	r1, r3
 800b658:	4b05      	ldr	r3, [pc, #20]	; (800b670 <USB_DeactivateEndpoint+0x1b4>)
 800b65a:	4013      	ands	r3, r2
 800b65c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800b65e:	2300      	movs	r3, #0
}
 800b660:	4618      	mov	r0, r3
 800b662:	3714      	adds	r7, #20
 800b664:	46bd      	mov	sp, r7
 800b666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66a:	4770      	bx	lr
 800b66c:	ec337800 	.word	0xec337800
 800b670:	eff37800 	.word	0xeff37800

0800b674 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800b674:	b580      	push	{r7, lr}
 800b676:	b08a      	sub	sp, #40	; 0x28
 800b678:	af02      	add	r7, sp, #8
 800b67a:	60f8      	str	r0, [r7, #12]
 800b67c:	60b9      	str	r1, [r7, #8]
 800b67e:	4613      	mov	r3, r2
 800b680:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800b682:	68fb      	ldr	r3, [r7, #12]
 800b684:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800b686:	68bb      	ldr	r3, [r7, #8]
 800b688:	781b      	ldrb	r3, [r3, #0]
 800b68a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800b68c:	68bb      	ldr	r3, [r7, #8]
 800b68e:	785b      	ldrb	r3, [r3, #1]
 800b690:	2b01      	cmp	r3, #1
 800b692:	f040 8181 	bne.w	800b998 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800b696:	68bb      	ldr	r3, [r7, #8]
 800b698:	691b      	ldr	r3, [r3, #16]
 800b69a:	2b00      	cmp	r3, #0
 800b69c:	d132      	bne.n	800b704 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b69e:	69bb      	ldr	r3, [r7, #24]
 800b6a0:	015a      	lsls	r2, r3, #5
 800b6a2:	69fb      	ldr	r3, [r7, #28]
 800b6a4:	4413      	add	r3, r2
 800b6a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6aa:	691a      	ldr	r2, [r3, #16]
 800b6ac:	69bb      	ldr	r3, [r7, #24]
 800b6ae:	0159      	lsls	r1, r3, #5
 800b6b0:	69fb      	ldr	r3, [r7, #28]
 800b6b2:	440b      	add	r3, r1
 800b6b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6b8:	4619      	mov	r1, r3
 800b6ba:	4ba5      	ldr	r3, [pc, #660]	; (800b950 <USB_EPStartXfer+0x2dc>)
 800b6bc:	4013      	ands	r3, r2
 800b6be:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b6c0:	69bb      	ldr	r3, [r7, #24]
 800b6c2:	015a      	lsls	r2, r3, #5
 800b6c4:	69fb      	ldr	r3, [r7, #28]
 800b6c6:	4413      	add	r3, r2
 800b6c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6cc:	691b      	ldr	r3, [r3, #16]
 800b6ce:	69ba      	ldr	r2, [r7, #24]
 800b6d0:	0151      	lsls	r1, r2, #5
 800b6d2:	69fa      	ldr	r2, [r7, #28]
 800b6d4:	440a      	add	r2, r1
 800b6d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b6da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b6de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b6e0:	69bb      	ldr	r3, [r7, #24]
 800b6e2:	015a      	lsls	r2, r3, #5
 800b6e4:	69fb      	ldr	r3, [r7, #28]
 800b6e6:	4413      	add	r3, r2
 800b6e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6ec:	691a      	ldr	r2, [r3, #16]
 800b6ee:	69bb      	ldr	r3, [r7, #24]
 800b6f0:	0159      	lsls	r1, r3, #5
 800b6f2:	69fb      	ldr	r3, [r7, #28]
 800b6f4:	440b      	add	r3, r1
 800b6f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b6fa:	4619      	mov	r1, r3
 800b6fc:	4b95      	ldr	r3, [pc, #596]	; (800b954 <USB_EPStartXfer+0x2e0>)
 800b6fe:	4013      	ands	r3, r2
 800b700:	610b      	str	r3, [r1, #16]
 800b702:	e092      	b.n	800b82a <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800b704:	69bb      	ldr	r3, [r7, #24]
 800b706:	015a      	lsls	r2, r3, #5
 800b708:	69fb      	ldr	r3, [r7, #28]
 800b70a:	4413      	add	r3, r2
 800b70c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b710:	691a      	ldr	r2, [r3, #16]
 800b712:	69bb      	ldr	r3, [r7, #24]
 800b714:	0159      	lsls	r1, r3, #5
 800b716:	69fb      	ldr	r3, [r7, #28]
 800b718:	440b      	add	r3, r1
 800b71a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b71e:	4619      	mov	r1, r3
 800b720:	4b8c      	ldr	r3, [pc, #560]	; (800b954 <USB_EPStartXfer+0x2e0>)
 800b722:	4013      	ands	r3, r2
 800b724:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800b726:	69bb      	ldr	r3, [r7, #24]
 800b728:	015a      	lsls	r2, r3, #5
 800b72a:	69fb      	ldr	r3, [r7, #28]
 800b72c:	4413      	add	r3, r2
 800b72e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b732:	691a      	ldr	r2, [r3, #16]
 800b734:	69bb      	ldr	r3, [r7, #24]
 800b736:	0159      	lsls	r1, r3, #5
 800b738:	69fb      	ldr	r3, [r7, #28]
 800b73a:	440b      	add	r3, r1
 800b73c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b740:	4619      	mov	r1, r3
 800b742:	4b83      	ldr	r3, [pc, #524]	; (800b950 <USB_EPStartXfer+0x2dc>)
 800b744:	4013      	ands	r3, r2
 800b746:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800b748:	69bb      	ldr	r3, [r7, #24]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	d11a      	bne.n	800b784 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	691a      	ldr	r2, [r3, #16]
 800b752:	68bb      	ldr	r3, [r7, #8]
 800b754:	689b      	ldr	r3, [r3, #8]
 800b756:	429a      	cmp	r2, r3
 800b758:	d903      	bls.n	800b762 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800b75a:	68bb      	ldr	r3, [r7, #8]
 800b75c:	689a      	ldr	r2, [r3, #8]
 800b75e:	68bb      	ldr	r3, [r7, #8]
 800b760:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800b762:	69bb      	ldr	r3, [r7, #24]
 800b764:	015a      	lsls	r2, r3, #5
 800b766:	69fb      	ldr	r3, [r7, #28]
 800b768:	4413      	add	r3, r2
 800b76a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b76e:	691b      	ldr	r3, [r3, #16]
 800b770:	69ba      	ldr	r2, [r7, #24]
 800b772:	0151      	lsls	r1, r2, #5
 800b774:	69fa      	ldr	r2, [r7, #28]
 800b776:	440a      	add	r2, r1
 800b778:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b77c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800b780:	6113      	str	r3, [r2, #16]
 800b782:	e01b      	b.n	800b7bc <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b784:	69bb      	ldr	r3, [r7, #24]
 800b786:	015a      	lsls	r2, r3, #5
 800b788:	69fb      	ldr	r3, [r7, #28]
 800b78a:	4413      	add	r3, r2
 800b78c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b790:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800b792:	68bb      	ldr	r3, [r7, #8]
 800b794:	6919      	ldr	r1, [r3, #16]
 800b796:	68bb      	ldr	r3, [r7, #8]
 800b798:	689b      	ldr	r3, [r3, #8]
 800b79a:	440b      	add	r3, r1
 800b79c:	1e59      	subs	r1, r3, #1
 800b79e:	68bb      	ldr	r3, [r7, #8]
 800b7a0:	689b      	ldr	r3, [r3, #8]
 800b7a2:	fbb1 f3f3 	udiv	r3, r1, r3
 800b7a6:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800b7a8:	4b6b      	ldr	r3, [pc, #428]	; (800b958 <USB_EPStartXfer+0x2e4>)
 800b7aa:	400b      	ands	r3, r1
 800b7ac:	69b9      	ldr	r1, [r7, #24]
 800b7ae:	0148      	lsls	r0, r1, #5
 800b7b0:	69f9      	ldr	r1, [r7, #28]
 800b7b2:	4401      	add	r1, r0
 800b7b4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b7b8:	4313      	orrs	r3, r2
 800b7ba:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800b7bc:	69bb      	ldr	r3, [r7, #24]
 800b7be:	015a      	lsls	r2, r3, #5
 800b7c0:	69fb      	ldr	r3, [r7, #28]
 800b7c2:	4413      	add	r3, r2
 800b7c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7c8:	691a      	ldr	r2, [r3, #16]
 800b7ca:	68bb      	ldr	r3, [r7, #8]
 800b7cc:	691b      	ldr	r3, [r3, #16]
 800b7ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800b7d2:	69b9      	ldr	r1, [r7, #24]
 800b7d4:	0148      	lsls	r0, r1, #5
 800b7d6:	69f9      	ldr	r1, [r7, #28]
 800b7d8:	4401      	add	r1, r0
 800b7da:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800b7de:	4313      	orrs	r3, r2
 800b7e0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800b7e2:	68bb      	ldr	r3, [r7, #8]
 800b7e4:	791b      	ldrb	r3, [r3, #4]
 800b7e6:	2b01      	cmp	r3, #1
 800b7e8:	d11f      	bne.n	800b82a <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800b7ea:	69bb      	ldr	r3, [r7, #24]
 800b7ec:	015a      	lsls	r2, r3, #5
 800b7ee:	69fb      	ldr	r3, [r7, #28]
 800b7f0:	4413      	add	r3, r2
 800b7f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b7f6:	691b      	ldr	r3, [r3, #16]
 800b7f8:	69ba      	ldr	r2, [r7, #24]
 800b7fa:	0151      	lsls	r1, r2, #5
 800b7fc:	69fa      	ldr	r2, [r7, #28]
 800b7fe:	440a      	add	r2, r1
 800b800:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b804:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800b808:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800b80a:	69bb      	ldr	r3, [r7, #24]
 800b80c:	015a      	lsls	r2, r3, #5
 800b80e:	69fb      	ldr	r3, [r7, #28]
 800b810:	4413      	add	r3, r2
 800b812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b816:	691b      	ldr	r3, [r3, #16]
 800b818:	69ba      	ldr	r2, [r7, #24]
 800b81a:	0151      	lsls	r1, r2, #5
 800b81c:	69fa      	ldr	r2, [r7, #28]
 800b81e:	440a      	add	r2, r1
 800b820:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b824:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b828:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800b82a:	79fb      	ldrb	r3, [r7, #7]
 800b82c:	2b01      	cmp	r3, #1
 800b82e:	d14b      	bne.n	800b8c8 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800b830:	68bb      	ldr	r3, [r7, #8]
 800b832:	69db      	ldr	r3, [r3, #28]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d009      	beq.n	800b84c <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800b838:	69bb      	ldr	r3, [r7, #24]
 800b83a:	015a      	lsls	r2, r3, #5
 800b83c:	69fb      	ldr	r3, [r7, #28]
 800b83e:	4413      	add	r3, r2
 800b840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b844:	461a      	mov	r2, r3
 800b846:	68bb      	ldr	r3, [r7, #8]
 800b848:	69db      	ldr	r3, [r3, #28]
 800b84a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800b84c:	68bb      	ldr	r3, [r7, #8]
 800b84e:	791b      	ldrb	r3, [r3, #4]
 800b850:	2b01      	cmp	r3, #1
 800b852:	d128      	bne.n	800b8a6 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b854:	69fb      	ldr	r3, [r7, #28]
 800b856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b85a:	689b      	ldr	r3, [r3, #8]
 800b85c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b860:	2b00      	cmp	r3, #0
 800b862:	d110      	bne.n	800b886 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b864:	69bb      	ldr	r3, [r7, #24]
 800b866:	015a      	lsls	r2, r3, #5
 800b868:	69fb      	ldr	r3, [r7, #28]
 800b86a:	4413      	add	r3, r2
 800b86c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	69ba      	ldr	r2, [r7, #24]
 800b874:	0151      	lsls	r1, r2, #5
 800b876:	69fa      	ldr	r2, [r7, #28]
 800b878:	440a      	add	r2, r1
 800b87a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b87e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b882:	6013      	str	r3, [r2, #0]
 800b884:	e00f      	b.n	800b8a6 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b886:	69bb      	ldr	r3, [r7, #24]
 800b888:	015a      	lsls	r2, r3, #5
 800b88a:	69fb      	ldr	r3, [r7, #28]
 800b88c:	4413      	add	r3, r2
 800b88e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	69ba      	ldr	r2, [r7, #24]
 800b896:	0151      	lsls	r1, r2, #5
 800b898:	69fa      	ldr	r2, [r7, #28]
 800b89a:	440a      	add	r2, r1
 800b89c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b8a4:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b8a6:	69bb      	ldr	r3, [r7, #24]
 800b8a8:	015a      	lsls	r2, r3, #5
 800b8aa:	69fb      	ldr	r3, [r7, #28]
 800b8ac:	4413      	add	r3, r2
 800b8ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	69ba      	ldr	r2, [r7, #24]
 800b8b6:	0151      	lsls	r1, r2, #5
 800b8b8:	69fa      	ldr	r2, [r7, #28]
 800b8ba:	440a      	add	r2, r1
 800b8bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8c0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b8c4:	6013      	str	r3, [r2, #0]
 800b8c6:	e16a      	b.n	800bb9e <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800b8c8:	69bb      	ldr	r3, [r7, #24]
 800b8ca:	015a      	lsls	r2, r3, #5
 800b8cc:	69fb      	ldr	r3, [r7, #28]
 800b8ce:	4413      	add	r3, r2
 800b8d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	69ba      	ldr	r2, [r7, #24]
 800b8d8:	0151      	lsls	r1, r2, #5
 800b8da:	69fa      	ldr	r2, [r7, #28]
 800b8dc:	440a      	add	r2, r1
 800b8de:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b8e2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800b8e6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800b8e8:	68bb      	ldr	r3, [r7, #8]
 800b8ea:	791b      	ldrb	r3, [r3, #4]
 800b8ec:	2b01      	cmp	r3, #1
 800b8ee:	d015      	beq.n	800b91c <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800b8f0:	68bb      	ldr	r3, [r7, #8]
 800b8f2:	691b      	ldr	r3, [r3, #16]
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	f000 8152 	beq.w	800bb9e <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800b8fa:	69fb      	ldr	r3, [r7, #28]
 800b8fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b900:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b902:	68bb      	ldr	r3, [r7, #8]
 800b904:	781b      	ldrb	r3, [r3, #0]
 800b906:	f003 030f 	and.w	r3, r3, #15
 800b90a:	2101      	movs	r1, #1
 800b90c:	fa01 f303 	lsl.w	r3, r1, r3
 800b910:	69f9      	ldr	r1, [r7, #28]
 800b912:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b916:	4313      	orrs	r3, r2
 800b918:	634b      	str	r3, [r1, #52]	; 0x34
 800b91a:	e140      	b.n	800bb9e <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800b91c:	69fb      	ldr	r3, [r7, #28]
 800b91e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b922:	689b      	ldr	r3, [r3, #8]
 800b924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d117      	bne.n	800b95c <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800b92c:	69bb      	ldr	r3, [r7, #24]
 800b92e:	015a      	lsls	r2, r3, #5
 800b930:	69fb      	ldr	r3, [r7, #28]
 800b932:	4413      	add	r3, r2
 800b934:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	69ba      	ldr	r2, [r7, #24]
 800b93c:	0151      	lsls	r1, r2, #5
 800b93e:	69fa      	ldr	r2, [r7, #28]
 800b940:	440a      	add	r2, r1
 800b942:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b946:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800b94a:	6013      	str	r3, [r2, #0]
 800b94c:	e016      	b.n	800b97c <USB_EPStartXfer+0x308>
 800b94e:	bf00      	nop
 800b950:	e007ffff 	.word	0xe007ffff
 800b954:	fff80000 	.word	0xfff80000
 800b958:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800b95c:	69bb      	ldr	r3, [r7, #24]
 800b95e:	015a      	lsls	r2, r3, #5
 800b960:	69fb      	ldr	r3, [r7, #28]
 800b962:	4413      	add	r3, r2
 800b964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	69ba      	ldr	r2, [r7, #24]
 800b96c:	0151      	lsls	r1, r2, #5
 800b96e:	69fa      	ldr	r2, [r7, #28]
 800b970:	440a      	add	r2, r1
 800b972:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b976:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800b97a:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800b97c:	68bb      	ldr	r3, [r7, #8]
 800b97e:	68d9      	ldr	r1, [r3, #12]
 800b980:	68bb      	ldr	r3, [r7, #8]
 800b982:	781a      	ldrb	r2, [r3, #0]
 800b984:	68bb      	ldr	r3, [r7, #8]
 800b986:	691b      	ldr	r3, [r3, #16]
 800b988:	b298      	uxth	r0, r3
 800b98a:	79fb      	ldrb	r3, [r7, #7]
 800b98c:	9300      	str	r3, [sp, #0]
 800b98e:	4603      	mov	r3, r0
 800b990:	68f8      	ldr	r0, [r7, #12]
 800b992:	f000 f9b9 	bl	800bd08 <USB_WritePacket>
 800b996:	e102      	b.n	800bb9e <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800b998:	69bb      	ldr	r3, [r7, #24]
 800b99a:	015a      	lsls	r2, r3, #5
 800b99c:	69fb      	ldr	r3, [r7, #28]
 800b99e:	4413      	add	r3, r2
 800b9a0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9a4:	691a      	ldr	r2, [r3, #16]
 800b9a6:	69bb      	ldr	r3, [r7, #24]
 800b9a8:	0159      	lsls	r1, r3, #5
 800b9aa:	69fb      	ldr	r3, [r7, #28]
 800b9ac:	440b      	add	r3, r1
 800b9ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9b2:	4619      	mov	r1, r3
 800b9b4:	4b7c      	ldr	r3, [pc, #496]	; (800bba8 <USB_EPStartXfer+0x534>)
 800b9b6:	4013      	ands	r3, r2
 800b9b8:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800b9ba:	69bb      	ldr	r3, [r7, #24]
 800b9bc:	015a      	lsls	r2, r3, #5
 800b9be:	69fb      	ldr	r3, [r7, #28]
 800b9c0:	4413      	add	r3, r2
 800b9c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9c6:	691a      	ldr	r2, [r3, #16]
 800b9c8:	69bb      	ldr	r3, [r7, #24]
 800b9ca:	0159      	lsls	r1, r3, #5
 800b9cc:	69fb      	ldr	r3, [r7, #28]
 800b9ce:	440b      	add	r3, r1
 800b9d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b9d4:	4619      	mov	r1, r3
 800b9d6:	4b75      	ldr	r3, [pc, #468]	; (800bbac <USB_EPStartXfer+0x538>)
 800b9d8:	4013      	ands	r3, r2
 800b9da:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800b9dc:	69bb      	ldr	r3, [r7, #24]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d12f      	bne.n	800ba42 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800b9e2:	68bb      	ldr	r3, [r7, #8]
 800b9e4:	691b      	ldr	r3, [r3, #16]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d003      	beq.n	800b9f2 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800b9ea:	68bb      	ldr	r3, [r7, #8]
 800b9ec:	689a      	ldr	r2, [r3, #8]
 800b9ee:	68bb      	ldr	r3, [r7, #8]
 800b9f0:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800b9f2:	68bb      	ldr	r3, [r7, #8]
 800b9f4:	689a      	ldr	r2, [r3, #8]
 800b9f6:	68bb      	ldr	r3, [r7, #8]
 800b9f8:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800b9fa:	69bb      	ldr	r3, [r7, #24]
 800b9fc:	015a      	lsls	r2, r3, #5
 800b9fe:	69fb      	ldr	r3, [r7, #28]
 800ba00:	4413      	add	r3, r2
 800ba02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba06:	691a      	ldr	r2, [r3, #16]
 800ba08:	68bb      	ldr	r3, [r7, #8]
 800ba0a:	6a1b      	ldr	r3, [r3, #32]
 800ba0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ba10:	69b9      	ldr	r1, [r7, #24]
 800ba12:	0148      	lsls	r0, r1, #5
 800ba14:	69f9      	ldr	r1, [r7, #28]
 800ba16:	4401      	add	r1, r0
 800ba18:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ba1c:	4313      	orrs	r3, r2
 800ba1e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ba20:	69bb      	ldr	r3, [r7, #24]
 800ba22:	015a      	lsls	r2, r3, #5
 800ba24:	69fb      	ldr	r3, [r7, #28]
 800ba26:	4413      	add	r3, r2
 800ba28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba2c:	691b      	ldr	r3, [r3, #16]
 800ba2e:	69ba      	ldr	r2, [r7, #24]
 800ba30:	0151      	lsls	r1, r2, #5
 800ba32:	69fa      	ldr	r2, [r7, #28]
 800ba34:	440a      	add	r2, r1
 800ba36:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba3a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ba3e:	6113      	str	r3, [r2, #16]
 800ba40:	e05f      	b.n	800bb02 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800ba42:	68bb      	ldr	r3, [r7, #8]
 800ba44:	691b      	ldr	r3, [r3, #16]
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d123      	bne.n	800ba92 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800ba4a:	69bb      	ldr	r3, [r7, #24]
 800ba4c:	015a      	lsls	r2, r3, #5
 800ba4e:	69fb      	ldr	r3, [r7, #28]
 800ba50:	4413      	add	r3, r2
 800ba52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba56:	691a      	ldr	r2, [r3, #16]
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	689b      	ldr	r3, [r3, #8]
 800ba5c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800ba60:	69b9      	ldr	r1, [r7, #24]
 800ba62:	0148      	lsls	r0, r1, #5
 800ba64:	69f9      	ldr	r1, [r7, #28]
 800ba66:	4401      	add	r1, r0
 800ba68:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800ba6c:	4313      	orrs	r3, r2
 800ba6e:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800ba70:	69bb      	ldr	r3, [r7, #24]
 800ba72:	015a      	lsls	r2, r3, #5
 800ba74:	69fb      	ldr	r3, [r7, #28]
 800ba76:	4413      	add	r3, r2
 800ba78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800ba7c:	691b      	ldr	r3, [r3, #16]
 800ba7e:	69ba      	ldr	r2, [r7, #24]
 800ba80:	0151      	lsls	r1, r2, #5
 800ba82:	69fa      	ldr	r2, [r7, #28]
 800ba84:	440a      	add	r2, r1
 800ba86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800ba8a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ba8e:	6113      	str	r3, [r2, #16]
 800ba90:	e037      	b.n	800bb02 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800ba92:	68bb      	ldr	r3, [r7, #8]
 800ba94:	691a      	ldr	r2, [r3, #16]
 800ba96:	68bb      	ldr	r3, [r7, #8]
 800ba98:	689b      	ldr	r3, [r3, #8]
 800ba9a:	4413      	add	r3, r2
 800ba9c:	1e5a      	subs	r2, r3, #1
 800ba9e:	68bb      	ldr	r3, [r7, #8]
 800baa0:	689b      	ldr	r3, [r3, #8]
 800baa2:	fbb2 f3f3 	udiv	r3, r2, r3
 800baa6:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	689b      	ldr	r3, [r3, #8]
 800baac:	8afa      	ldrh	r2, [r7, #22]
 800baae:	fb03 f202 	mul.w	r2, r3, r2
 800bab2:	68bb      	ldr	r3, [r7, #8]
 800bab4:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800bab6:	69bb      	ldr	r3, [r7, #24]
 800bab8:	015a      	lsls	r2, r3, #5
 800baba:	69fb      	ldr	r3, [r7, #28]
 800babc:	4413      	add	r3, r2
 800babe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bac2:	691a      	ldr	r2, [r3, #16]
 800bac4:	8afb      	ldrh	r3, [r7, #22]
 800bac6:	04d9      	lsls	r1, r3, #19
 800bac8:	4b39      	ldr	r3, [pc, #228]	; (800bbb0 <USB_EPStartXfer+0x53c>)
 800baca:	400b      	ands	r3, r1
 800bacc:	69b9      	ldr	r1, [r7, #24]
 800bace:	0148      	lsls	r0, r1, #5
 800bad0:	69f9      	ldr	r1, [r7, #28]
 800bad2:	4401      	add	r1, r0
 800bad4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bad8:	4313      	orrs	r3, r2
 800bada:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800badc:	69bb      	ldr	r3, [r7, #24]
 800bade:	015a      	lsls	r2, r3, #5
 800bae0:	69fb      	ldr	r3, [r7, #28]
 800bae2:	4413      	add	r3, r2
 800bae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bae8:	691a      	ldr	r2, [r3, #16]
 800baea:	68bb      	ldr	r3, [r7, #8]
 800baec:	6a1b      	ldr	r3, [r3, #32]
 800baee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800baf2:	69b9      	ldr	r1, [r7, #24]
 800baf4:	0148      	lsls	r0, r1, #5
 800baf6:	69f9      	ldr	r1, [r7, #28]
 800baf8:	4401      	add	r1, r0
 800bafa:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800bafe:	4313      	orrs	r3, r2
 800bb00:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800bb02:	79fb      	ldrb	r3, [r7, #7]
 800bb04:	2b01      	cmp	r3, #1
 800bb06:	d10d      	bne.n	800bb24 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800bb08:	68bb      	ldr	r3, [r7, #8]
 800bb0a:	68db      	ldr	r3, [r3, #12]
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	d009      	beq.n	800bb24 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800bb10:	68bb      	ldr	r3, [r7, #8]
 800bb12:	68d9      	ldr	r1, [r3, #12]
 800bb14:	69bb      	ldr	r3, [r7, #24]
 800bb16:	015a      	lsls	r2, r3, #5
 800bb18:	69fb      	ldr	r3, [r7, #28]
 800bb1a:	4413      	add	r3, r2
 800bb1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb20:	460a      	mov	r2, r1
 800bb22:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800bb24:	68bb      	ldr	r3, [r7, #8]
 800bb26:	791b      	ldrb	r3, [r3, #4]
 800bb28:	2b01      	cmp	r3, #1
 800bb2a:	d128      	bne.n	800bb7e <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800bb2c:	69fb      	ldr	r3, [r7, #28]
 800bb2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bb32:	689b      	ldr	r3, [r3, #8]
 800bb34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bb38:	2b00      	cmp	r3, #0
 800bb3a:	d110      	bne.n	800bb5e <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800bb3c:	69bb      	ldr	r3, [r7, #24]
 800bb3e:	015a      	lsls	r2, r3, #5
 800bb40:	69fb      	ldr	r3, [r7, #28]
 800bb42:	4413      	add	r3, r2
 800bb44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	69ba      	ldr	r2, [r7, #24]
 800bb4c:	0151      	lsls	r1, r2, #5
 800bb4e:	69fa      	ldr	r2, [r7, #28]
 800bb50:	440a      	add	r2, r1
 800bb52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb56:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800bb5a:	6013      	str	r3, [r2, #0]
 800bb5c:	e00f      	b.n	800bb7e <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800bb5e:	69bb      	ldr	r3, [r7, #24]
 800bb60:	015a      	lsls	r2, r3, #5
 800bb62:	69fb      	ldr	r3, [r7, #28]
 800bb64:	4413      	add	r3, r2
 800bb66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	69ba      	ldr	r2, [r7, #24]
 800bb6e:	0151      	lsls	r1, r2, #5
 800bb70:	69fa      	ldr	r2, [r7, #28]
 800bb72:	440a      	add	r2, r1
 800bb74:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bb7c:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800bb7e:	69bb      	ldr	r3, [r7, #24]
 800bb80:	015a      	lsls	r2, r3, #5
 800bb82:	69fb      	ldr	r3, [r7, #28]
 800bb84:	4413      	add	r3, r2
 800bb86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	69ba      	ldr	r2, [r7, #24]
 800bb8e:	0151      	lsls	r1, r2, #5
 800bb90:	69fa      	ldr	r2, [r7, #28]
 800bb92:	440a      	add	r2, r1
 800bb94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bb98:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800bb9c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bb9e:	2300      	movs	r3, #0
}
 800bba0:	4618      	mov	r0, r3
 800bba2:	3720      	adds	r7, #32
 800bba4:	46bd      	mov	sp, r7
 800bba6:	bd80      	pop	{r7, pc}
 800bba8:	fff80000 	.word	0xfff80000
 800bbac:	e007ffff 	.word	0xe007ffff
 800bbb0:	1ff80000 	.word	0x1ff80000

0800bbb4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bbb4:	b480      	push	{r7}
 800bbb6:	b087      	sub	sp, #28
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
 800bbbc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800bbc2:	2300      	movs	r3, #0
 800bbc4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800bbca:	683b      	ldr	r3, [r7, #0]
 800bbcc:	785b      	ldrb	r3, [r3, #1]
 800bbce:	2b01      	cmp	r3, #1
 800bbd0:	d14a      	bne.n	800bc68 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	781b      	ldrb	r3, [r3, #0]
 800bbd6:	015a      	lsls	r2, r3, #5
 800bbd8:	693b      	ldr	r3, [r7, #16]
 800bbda:	4413      	add	r3, r2
 800bbdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbe0:	681b      	ldr	r3, [r3, #0]
 800bbe2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bbe6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bbea:	f040 8086 	bne.w	800bcfa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	781b      	ldrb	r3, [r3, #0]
 800bbf2:	015a      	lsls	r2, r3, #5
 800bbf4:	693b      	ldr	r3, [r7, #16]
 800bbf6:	4413      	add	r3, r2
 800bbf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	683a      	ldr	r2, [r7, #0]
 800bc00:	7812      	ldrb	r2, [r2, #0]
 800bc02:	0151      	lsls	r1, r2, #5
 800bc04:	693a      	ldr	r2, [r7, #16]
 800bc06:	440a      	add	r2, r1
 800bc08:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc0c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bc10:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800bc12:	683b      	ldr	r3, [r7, #0]
 800bc14:	781b      	ldrb	r3, [r3, #0]
 800bc16:	015a      	lsls	r2, r3, #5
 800bc18:	693b      	ldr	r3, [r7, #16]
 800bc1a:	4413      	add	r3, r2
 800bc1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	683a      	ldr	r2, [r7, #0]
 800bc24:	7812      	ldrb	r2, [r2, #0]
 800bc26:	0151      	lsls	r1, r2, #5
 800bc28:	693a      	ldr	r2, [r7, #16]
 800bc2a:	440a      	add	r2, r1
 800bc2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bc30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bc34:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800bc36:	68fb      	ldr	r3, [r7, #12]
 800bc38:	3301      	adds	r3, #1
 800bc3a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	f242 7210 	movw	r2, #10000	; 0x2710
 800bc42:	4293      	cmp	r3, r2
 800bc44:	d902      	bls.n	800bc4c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800bc46:	2301      	movs	r3, #1
 800bc48:	75fb      	strb	r3, [r7, #23]
          break;
 800bc4a:	e056      	b.n	800bcfa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800bc4c:	683b      	ldr	r3, [r7, #0]
 800bc4e:	781b      	ldrb	r3, [r3, #0]
 800bc50:	015a      	lsls	r2, r3, #5
 800bc52:	693b      	ldr	r3, [r7, #16]
 800bc54:	4413      	add	r3, r2
 800bc56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bc5a:	681b      	ldr	r3, [r3, #0]
 800bc5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bc60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bc64:	d0e7      	beq.n	800bc36 <USB_EPStopXfer+0x82>
 800bc66:	e048      	b.n	800bcfa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800bc68:	683b      	ldr	r3, [r7, #0]
 800bc6a:	781b      	ldrb	r3, [r3, #0]
 800bc6c:	015a      	lsls	r2, r3, #5
 800bc6e:	693b      	ldr	r3, [r7, #16]
 800bc70:	4413      	add	r3, r2
 800bc72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bc7c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bc80:	d13b      	bne.n	800bcfa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800bc82:	683b      	ldr	r3, [r7, #0]
 800bc84:	781b      	ldrb	r3, [r3, #0]
 800bc86:	015a      	lsls	r2, r3, #5
 800bc88:	693b      	ldr	r3, [r7, #16]
 800bc8a:	4413      	add	r3, r2
 800bc8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	683a      	ldr	r2, [r7, #0]
 800bc94:	7812      	ldrb	r2, [r2, #0]
 800bc96:	0151      	lsls	r1, r2, #5
 800bc98:	693a      	ldr	r2, [r7, #16]
 800bc9a:	440a      	add	r2, r1
 800bc9c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bca0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800bca4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800bca6:	683b      	ldr	r3, [r7, #0]
 800bca8:	781b      	ldrb	r3, [r3, #0]
 800bcaa:	015a      	lsls	r2, r3, #5
 800bcac:	693b      	ldr	r3, [r7, #16]
 800bcae:	4413      	add	r3, r2
 800bcb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	683a      	ldr	r2, [r7, #0]
 800bcb8:	7812      	ldrb	r2, [r2, #0]
 800bcba:	0151      	lsls	r1, r2, #5
 800bcbc:	693a      	ldr	r2, [r7, #16]
 800bcbe:	440a      	add	r2, r1
 800bcc0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bcc4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800bcc8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	3301      	adds	r3, #1
 800bcce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	f242 7210 	movw	r2, #10000	; 0x2710
 800bcd6:	4293      	cmp	r3, r2
 800bcd8:	d902      	bls.n	800bce0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800bcda:	2301      	movs	r3, #1
 800bcdc:	75fb      	strb	r3, [r7, #23]
          break;
 800bcde:	e00c      	b.n	800bcfa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	781b      	ldrb	r3, [r3, #0]
 800bce4:	015a      	lsls	r2, r3, #5
 800bce6:	693b      	ldr	r3, [r7, #16]
 800bce8:	4413      	add	r3, r2
 800bcea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800bcf4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800bcf8:	d0e7      	beq.n	800bcca <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800bcfa:	7dfb      	ldrb	r3, [r7, #23]
}
 800bcfc:	4618      	mov	r0, r3
 800bcfe:	371c      	adds	r7, #28
 800bd00:	46bd      	mov	sp, r7
 800bd02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd06:	4770      	bx	lr

0800bd08 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800bd08:	b480      	push	{r7}
 800bd0a:	b089      	sub	sp, #36	; 0x24
 800bd0c:	af00      	add	r7, sp, #0
 800bd0e:	60f8      	str	r0, [r7, #12]
 800bd10:	60b9      	str	r1, [r7, #8]
 800bd12:	4611      	mov	r1, r2
 800bd14:	461a      	mov	r2, r3
 800bd16:	460b      	mov	r3, r1
 800bd18:	71fb      	strb	r3, [r7, #7]
 800bd1a:	4613      	mov	r3, r2
 800bd1c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800bd22:	68bb      	ldr	r3, [r7, #8]
 800bd24:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800bd26:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d123      	bne.n	800bd76 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800bd2e:	88bb      	ldrh	r3, [r7, #4]
 800bd30:	3303      	adds	r3, #3
 800bd32:	089b      	lsrs	r3, r3, #2
 800bd34:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800bd36:	2300      	movs	r3, #0
 800bd38:	61bb      	str	r3, [r7, #24]
 800bd3a:	e018      	b.n	800bd6e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800bd3c:	79fb      	ldrb	r3, [r7, #7]
 800bd3e:	031a      	lsls	r2, r3, #12
 800bd40:	697b      	ldr	r3, [r7, #20]
 800bd42:	4413      	add	r3, r2
 800bd44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bd48:	461a      	mov	r2, r3
 800bd4a:	69fb      	ldr	r3, [r7, #28]
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	6013      	str	r3, [r2, #0]
      pSrc++;
 800bd50:	69fb      	ldr	r3, [r7, #28]
 800bd52:	3301      	adds	r3, #1
 800bd54:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bd56:	69fb      	ldr	r3, [r7, #28]
 800bd58:	3301      	adds	r3, #1
 800bd5a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bd5c:	69fb      	ldr	r3, [r7, #28]
 800bd5e:	3301      	adds	r3, #1
 800bd60:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bd62:	69fb      	ldr	r3, [r7, #28]
 800bd64:	3301      	adds	r3, #1
 800bd66:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800bd68:	69bb      	ldr	r3, [r7, #24]
 800bd6a:	3301      	adds	r3, #1
 800bd6c:	61bb      	str	r3, [r7, #24]
 800bd6e:	69ba      	ldr	r2, [r7, #24]
 800bd70:	693b      	ldr	r3, [r7, #16]
 800bd72:	429a      	cmp	r2, r3
 800bd74:	d3e2      	bcc.n	800bd3c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800bd76:	2300      	movs	r3, #0
}
 800bd78:	4618      	mov	r0, r3
 800bd7a:	3724      	adds	r7, #36	; 0x24
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd82:	4770      	bx	lr

0800bd84 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800bd84:	b480      	push	{r7}
 800bd86:	b08b      	sub	sp, #44	; 0x2c
 800bd88:	af00      	add	r7, sp, #0
 800bd8a:	60f8      	str	r0, [r7, #12]
 800bd8c:	60b9      	str	r1, [r7, #8]
 800bd8e:	4613      	mov	r3, r2
 800bd90:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800bd96:	68bb      	ldr	r3, [r7, #8]
 800bd98:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800bd9a:	88fb      	ldrh	r3, [r7, #6]
 800bd9c:	089b      	lsrs	r3, r3, #2
 800bd9e:	b29b      	uxth	r3, r3
 800bda0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800bda2:	88fb      	ldrh	r3, [r7, #6]
 800bda4:	f003 0303 	and.w	r3, r3, #3
 800bda8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800bdaa:	2300      	movs	r3, #0
 800bdac:	623b      	str	r3, [r7, #32]
 800bdae:	e014      	b.n	800bdda <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800bdb0:	69bb      	ldr	r3, [r7, #24]
 800bdb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bdb6:	681a      	ldr	r2, [r3, #0]
 800bdb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdba:	601a      	str	r2, [r3, #0]
    pDest++;
 800bdbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdbe:	3301      	adds	r3, #1
 800bdc0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bdc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdc4:	3301      	adds	r3, #1
 800bdc6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bdc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdca:	3301      	adds	r3, #1
 800bdcc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800bdce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdd0:	3301      	adds	r3, #1
 800bdd2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800bdd4:	6a3b      	ldr	r3, [r7, #32]
 800bdd6:	3301      	adds	r3, #1
 800bdd8:	623b      	str	r3, [r7, #32]
 800bdda:	6a3a      	ldr	r2, [r7, #32]
 800bddc:	697b      	ldr	r3, [r7, #20]
 800bdde:	429a      	cmp	r2, r3
 800bde0:	d3e6      	bcc.n	800bdb0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800bde2:	8bfb      	ldrh	r3, [r7, #30]
 800bde4:	2b00      	cmp	r3, #0
 800bde6:	d01e      	beq.n	800be26 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800bde8:	2300      	movs	r3, #0
 800bdea:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800bdec:	69bb      	ldr	r3, [r7, #24]
 800bdee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800bdf2:	461a      	mov	r2, r3
 800bdf4:	f107 0310 	add.w	r3, r7, #16
 800bdf8:	6812      	ldr	r2, [r2, #0]
 800bdfa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800bdfc:	693a      	ldr	r2, [r7, #16]
 800bdfe:	6a3b      	ldr	r3, [r7, #32]
 800be00:	b2db      	uxtb	r3, r3
 800be02:	00db      	lsls	r3, r3, #3
 800be04:	fa22 f303 	lsr.w	r3, r2, r3
 800be08:	b2da      	uxtb	r2, r3
 800be0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be0c:	701a      	strb	r2, [r3, #0]
      i++;
 800be0e:	6a3b      	ldr	r3, [r7, #32]
 800be10:	3301      	adds	r3, #1
 800be12:	623b      	str	r3, [r7, #32]
      pDest++;
 800be14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be16:	3301      	adds	r3, #1
 800be18:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800be1a:	8bfb      	ldrh	r3, [r7, #30]
 800be1c:	3b01      	subs	r3, #1
 800be1e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800be20:	8bfb      	ldrh	r3, [r7, #30]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d1ea      	bne.n	800bdfc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800be26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800be28:	4618      	mov	r0, r3
 800be2a:	372c      	adds	r7, #44	; 0x2c
 800be2c:	46bd      	mov	sp, r7
 800be2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be32:	4770      	bx	lr

0800be34 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800be34:	b480      	push	{r7}
 800be36:	b085      	sub	sp, #20
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
 800be3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800be42:	683b      	ldr	r3, [r7, #0]
 800be44:	781b      	ldrb	r3, [r3, #0]
 800be46:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	785b      	ldrb	r3, [r3, #1]
 800be4c:	2b01      	cmp	r3, #1
 800be4e:	d12c      	bne.n	800beaa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800be50:	68bb      	ldr	r3, [r7, #8]
 800be52:	015a      	lsls	r2, r3, #5
 800be54:	68fb      	ldr	r3, [r7, #12]
 800be56:	4413      	add	r3, r2
 800be58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	2b00      	cmp	r3, #0
 800be60:	db12      	blt.n	800be88 <USB_EPSetStall+0x54>
 800be62:	68bb      	ldr	r3, [r7, #8]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d00f      	beq.n	800be88 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800be68:	68bb      	ldr	r3, [r7, #8]
 800be6a:	015a      	lsls	r2, r3, #5
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	4413      	add	r3, r2
 800be70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be74:	681b      	ldr	r3, [r3, #0]
 800be76:	68ba      	ldr	r2, [r7, #8]
 800be78:	0151      	lsls	r1, r2, #5
 800be7a:	68fa      	ldr	r2, [r7, #12]
 800be7c:	440a      	add	r2, r1
 800be7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800be82:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800be86:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	015a      	lsls	r2, r3, #5
 800be8c:	68fb      	ldr	r3, [r7, #12]
 800be8e:	4413      	add	r3, r2
 800be90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	68ba      	ldr	r2, [r7, #8]
 800be98:	0151      	lsls	r1, r2, #5
 800be9a:	68fa      	ldr	r2, [r7, #12]
 800be9c:	440a      	add	r2, r1
 800be9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bea2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bea6:	6013      	str	r3, [r2, #0]
 800bea8:	e02b      	b.n	800bf02 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800beaa:	68bb      	ldr	r3, [r7, #8]
 800beac:	015a      	lsls	r2, r3, #5
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	4413      	add	r3, r2
 800beb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800beb6:	681b      	ldr	r3, [r3, #0]
 800beb8:	2b00      	cmp	r3, #0
 800beba:	db12      	blt.n	800bee2 <USB_EPSetStall+0xae>
 800bebc:	68bb      	ldr	r3, [r7, #8]
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d00f      	beq.n	800bee2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800bec2:	68bb      	ldr	r3, [r7, #8]
 800bec4:	015a      	lsls	r2, r3, #5
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	4413      	add	r3, r2
 800beca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	68ba      	ldr	r2, [r7, #8]
 800bed2:	0151      	lsls	r1, r2, #5
 800bed4:	68fa      	ldr	r2, [r7, #12]
 800bed6:	440a      	add	r2, r1
 800bed8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bedc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800bee0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800bee2:	68bb      	ldr	r3, [r7, #8]
 800bee4:	015a      	lsls	r2, r3, #5
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	4413      	add	r3, r2
 800beea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	68ba      	ldr	r2, [r7, #8]
 800bef2:	0151      	lsls	r1, r2, #5
 800bef4:	68fa      	ldr	r2, [r7, #12]
 800bef6:	440a      	add	r2, r1
 800bef8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800befc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800bf00:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800bf02:	2300      	movs	r3, #0
}
 800bf04:	4618      	mov	r0, r3
 800bf06:	3714      	adds	r7, #20
 800bf08:	46bd      	mov	sp, r7
 800bf0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf0e:	4770      	bx	lr

0800bf10 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800bf10:	b480      	push	{r7}
 800bf12:	b085      	sub	sp, #20
 800bf14:	af00      	add	r7, sp, #0
 800bf16:	6078      	str	r0, [r7, #4]
 800bf18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf1a:	687b      	ldr	r3, [r7, #4]
 800bf1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800bf1e:	683b      	ldr	r3, [r7, #0]
 800bf20:	781b      	ldrb	r3, [r3, #0]
 800bf22:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	785b      	ldrb	r3, [r3, #1]
 800bf28:	2b01      	cmp	r3, #1
 800bf2a:	d128      	bne.n	800bf7e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800bf2c:	68bb      	ldr	r3, [r7, #8]
 800bf2e:	015a      	lsls	r2, r3, #5
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	4413      	add	r3, r2
 800bf34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	68ba      	ldr	r2, [r7, #8]
 800bf3c:	0151      	lsls	r1, r2, #5
 800bf3e:	68fa      	ldr	r2, [r7, #12]
 800bf40:	440a      	add	r2, r1
 800bf42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf46:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bf4a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bf4c:	683b      	ldr	r3, [r7, #0]
 800bf4e:	791b      	ldrb	r3, [r3, #4]
 800bf50:	2b03      	cmp	r3, #3
 800bf52:	d003      	beq.n	800bf5c <USB_EPClearStall+0x4c>
 800bf54:	683b      	ldr	r3, [r7, #0]
 800bf56:	791b      	ldrb	r3, [r3, #4]
 800bf58:	2b02      	cmp	r3, #2
 800bf5a:	d138      	bne.n	800bfce <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bf5c:	68bb      	ldr	r3, [r7, #8]
 800bf5e:	015a      	lsls	r2, r3, #5
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	4413      	add	r3, r2
 800bf64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	68ba      	ldr	r2, [r7, #8]
 800bf6c:	0151      	lsls	r1, r2, #5
 800bf6e:	68fa      	ldr	r2, [r7, #12]
 800bf70:	440a      	add	r2, r1
 800bf72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800bf76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bf7a:	6013      	str	r3, [r2, #0]
 800bf7c:	e027      	b.n	800bfce <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800bf7e:	68bb      	ldr	r3, [r7, #8]
 800bf80:	015a      	lsls	r2, r3, #5
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	4413      	add	r3, r2
 800bf86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	68ba      	ldr	r2, [r7, #8]
 800bf8e:	0151      	lsls	r1, r2, #5
 800bf90:	68fa      	ldr	r2, [r7, #12]
 800bf92:	440a      	add	r2, r1
 800bf94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bf98:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800bf9c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	791b      	ldrb	r3, [r3, #4]
 800bfa2:	2b03      	cmp	r3, #3
 800bfa4:	d003      	beq.n	800bfae <USB_EPClearStall+0x9e>
 800bfa6:	683b      	ldr	r3, [r7, #0]
 800bfa8:	791b      	ldrb	r3, [r3, #4]
 800bfaa:	2b02      	cmp	r3, #2
 800bfac:	d10f      	bne.n	800bfce <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800bfae:	68bb      	ldr	r3, [r7, #8]
 800bfb0:	015a      	lsls	r2, r3, #5
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	4413      	add	r3, r2
 800bfb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	68ba      	ldr	r2, [r7, #8]
 800bfbe:	0151      	lsls	r1, r2, #5
 800bfc0:	68fa      	ldr	r2, [r7, #12]
 800bfc2:	440a      	add	r2, r1
 800bfc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800bfc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bfcc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800bfce:	2300      	movs	r3, #0
}
 800bfd0:	4618      	mov	r0, r3
 800bfd2:	3714      	adds	r7, #20
 800bfd4:	46bd      	mov	sp, r7
 800bfd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfda:	4770      	bx	lr

0800bfdc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800bfdc:	b480      	push	{r7}
 800bfde:	b085      	sub	sp, #20
 800bfe0:	af00      	add	r7, sp, #0
 800bfe2:	6078      	str	r0, [r7, #4]
 800bfe4:	460b      	mov	r3, r1
 800bfe6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bfe8:	687b      	ldr	r3, [r7, #4]
 800bfea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	68fa      	ldr	r2, [r7, #12]
 800bff6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800bffa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800bffe:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c006:	681a      	ldr	r2, [r3, #0]
 800c008:	78fb      	ldrb	r3, [r7, #3]
 800c00a:	011b      	lsls	r3, r3, #4
 800c00c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800c010:	68f9      	ldr	r1, [r7, #12]
 800c012:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800c016:	4313      	orrs	r3, r2
 800c018:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800c01a:	2300      	movs	r3, #0
}
 800c01c:	4618      	mov	r0, r3
 800c01e:	3714      	adds	r7, #20
 800c020:	46bd      	mov	sp, r7
 800c022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c026:	4770      	bx	lr

0800c028 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c028:	b480      	push	{r7}
 800c02a:	b085      	sub	sp, #20
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	68fa      	ldr	r2, [r7, #12]
 800c03e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c042:	f023 0303 	bic.w	r3, r3, #3
 800c046:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c04e:	685b      	ldr	r3, [r3, #4]
 800c050:	68fa      	ldr	r2, [r7, #12]
 800c052:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c056:	f023 0302 	bic.w	r3, r3, #2
 800c05a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c05c:	2300      	movs	r3, #0
}
 800c05e:	4618      	mov	r0, r3
 800c060:	3714      	adds	r7, #20
 800c062:	46bd      	mov	sp, r7
 800c064:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c068:	4770      	bx	lr

0800c06a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800c06a:	b480      	push	{r7}
 800c06c:	b085      	sub	sp, #20
 800c06e:	af00      	add	r7, sp, #0
 800c070:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	68fa      	ldr	r2, [r7, #12]
 800c080:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c084:	f023 0303 	bic.w	r3, r3, #3
 800c088:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c090:	685b      	ldr	r3, [r3, #4]
 800c092:	68fa      	ldr	r2, [r7, #12]
 800c094:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c098:	f043 0302 	orr.w	r3, r3, #2
 800c09c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c09e:	2300      	movs	r3, #0
}
 800c0a0:	4618      	mov	r0, r3
 800c0a2:	3714      	adds	r7, #20
 800c0a4:	46bd      	mov	sp, r7
 800c0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0aa:	4770      	bx	lr

0800c0ac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800c0ac:	b480      	push	{r7}
 800c0ae:	b085      	sub	sp, #20
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	695b      	ldr	r3, [r3, #20]
 800c0b8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	699b      	ldr	r3, [r3, #24]
 800c0be:	68fa      	ldr	r2, [r7, #12]
 800c0c0:	4013      	ands	r3, r2
 800c0c2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800c0c4:	68fb      	ldr	r3, [r7, #12]
}
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	3714      	adds	r7, #20
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0d0:	4770      	bx	lr

0800c0d2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c0d2:	b480      	push	{r7}
 800c0d4:	b085      	sub	sp, #20
 800c0d6:	af00      	add	r7, sp, #0
 800c0d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0da:	687b      	ldr	r3, [r7, #4]
 800c0dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0e4:	699b      	ldr	r3, [r3, #24]
 800c0e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c0ee:	69db      	ldr	r3, [r3, #28]
 800c0f0:	68ba      	ldr	r2, [r7, #8]
 800c0f2:	4013      	ands	r3, r2
 800c0f4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800c0f6:	68bb      	ldr	r3, [r7, #8]
 800c0f8:	0c1b      	lsrs	r3, r3, #16
}
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	3714      	adds	r7, #20
 800c0fe:	46bd      	mov	sp, r7
 800c100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c104:	4770      	bx	lr

0800c106 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800c106:	b480      	push	{r7}
 800c108:	b085      	sub	sp, #20
 800c10a:	af00      	add	r7, sp, #0
 800c10c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800c112:	68fb      	ldr	r3, [r7, #12]
 800c114:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c118:	699b      	ldr	r3, [r3, #24]
 800c11a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c122:	69db      	ldr	r3, [r3, #28]
 800c124:	68ba      	ldr	r2, [r7, #8]
 800c126:	4013      	ands	r3, r2
 800c128:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800c12a:	68bb      	ldr	r3, [r7, #8]
 800c12c:	b29b      	uxth	r3, r3
}
 800c12e:	4618      	mov	r0, r3
 800c130:	3714      	adds	r7, #20
 800c132:	46bd      	mov	sp, r7
 800c134:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c138:	4770      	bx	lr

0800c13a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c13a:	b480      	push	{r7}
 800c13c:	b085      	sub	sp, #20
 800c13e:	af00      	add	r7, sp, #0
 800c140:	6078      	str	r0, [r7, #4]
 800c142:	460b      	mov	r3, r1
 800c144:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800c14a:	78fb      	ldrb	r3, [r7, #3]
 800c14c:	015a      	lsls	r2, r3, #5
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	4413      	add	r3, r2
 800c152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c156:	689b      	ldr	r3, [r3, #8]
 800c158:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c160:	695b      	ldr	r3, [r3, #20]
 800c162:	68ba      	ldr	r2, [r7, #8]
 800c164:	4013      	ands	r3, r2
 800c166:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c168:	68bb      	ldr	r3, [r7, #8]
}
 800c16a:	4618      	mov	r0, r3
 800c16c:	3714      	adds	r7, #20
 800c16e:	46bd      	mov	sp, r7
 800c170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c174:	4770      	bx	lr

0800c176 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800c176:	b480      	push	{r7}
 800c178:	b087      	sub	sp, #28
 800c17a:	af00      	add	r7, sp, #0
 800c17c:	6078      	str	r0, [r7, #4]
 800c17e:	460b      	mov	r3, r1
 800c180:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800c186:	697b      	ldr	r3, [r7, #20]
 800c188:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c18c:	691b      	ldr	r3, [r3, #16]
 800c18e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800c190:	697b      	ldr	r3, [r7, #20]
 800c192:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c196:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c198:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800c19a:	78fb      	ldrb	r3, [r7, #3]
 800c19c:	f003 030f 	and.w	r3, r3, #15
 800c1a0:	68fa      	ldr	r2, [r7, #12]
 800c1a2:	fa22 f303 	lsr.w	r3, r2, r3
 800c1a6:	01db      	lsls	r3, r3, #7
 800c1a8:	b2db      	uxtb	r3, r3
 800c1aa:	693a      	ldr	r2, [r7, #16]
 800c1ac:	4313      	orrs	r3, r2
 800c1ae:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800c1b0:	78fb      	ldrb	r3, [r7, #3]
 800c1b2:	015a      	lsls	r2, r3, #5
 800c1b4:	697b      	ldr	r3, [r7, #20]
 800c1b6:	4413      	add	r3, r2
 800c1b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c1bc:	689b      	ldr	r3, [r3, #8]
 800c1be:	693a      	ldr	r2, [r7, #16]
 800c1c0:	4013      	ands	r3, r2
 800c1c2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800c1c4:	68bb      	ldr	r3, [r7, #8]
}
 800c1c6:	4618      	mov	r0, r3
 800c1c8:	371c      	adds	r7, #28
 800c1ca:	46bd      	mov	sp, r7
 800c1cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d0:	4770      	bx	lr

0800c1d2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800c1d2:	b480      	push	{r7}
 800c1d4:	b083      	sub	sp, #12
 800c1d6:	af00      	add	r7, sp, #0
 800c1d8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	695b      	ldr	r3, [r3, #20]
 800c1de:	f003 0301 	and.w	r3, r3, #1
}
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	370c      	adds	r7, #12
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ec:	4770      	bx	lr
	...

0800c1f0 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800c1f0:	b480      	push	{r7}
 800c1f2:	b085      	sub	sp, #20
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c202:	681a      	ldr	r2, [r3, #0]
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800c20a:	4619      	mov	r1, r3
 800c20c:	4b09      	ldr	r3, [pc, #36]	; (800c234 <USB_ActivateSetup+0x44>)
 800c20e:	4013      	ands	r3, r2
 800c210:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800c218:	685b      	ldr	r3, [r3, #4]
 800c21a:	68fa      	ldr	r2, [r7, #12]
 800c21c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800c220:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c224:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800c226:	2300      	movs	r3, #0
}
 800c228:	4618      	mov	r0, r3
 800c22a:	3714      	adds	r7, #20
 800c22c:	46bd      	mov	sp, r7
 800c22e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c232:	4770      	bx	lr
 800c234:	fffff800 	.word	0xfffff800

0800c238 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800c238:	b480      	push	{r7}
 800c23a:	b087      	sub	sp, #28
 800c23c:	af00      	add	r7, sp, #0
 800c23e:	60f8      	str	r0, [r7, #12]
 800c240:	460b      	mov	r3, r1
 800c242:	607a      	str	r2, [r7, #4]
 800c244:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c246:	68fb      	ldr	r3, [r7, #12]
 800c248:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	333c      	adds	r3, #60	; 0x3c
 800c24e:	3304      	adds	r3, #4
 800c250:	681b      	ldr	r3, [r3, #0]
 800c252:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800c254:	693b      	ldr	r3, [r7, #16]
 800c256:	4a26      	ldr	r2, [pc, #152]	; (800c2f0 <USB_EP0_OutStart+0xb8>)
 800c258:	4293      	cmp	r3, r2
 800c25a:	d90a      	bls.n	800c272 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800c25c:	697b      	ldr	r3, [r7, #20]
 800c25e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800c268:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800c26c:	d101      	bne.n	800c272 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800c26e:	2300      	movs	r3, #0
 800c270:	e037      	b.n	800c2e2 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800c272:	697b      	ldr	r3, [r7, #20]
 800c274:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c278:	461a      	mov	r2, r3
 800c27a:	2300      	movs	r3, #0
 800c27c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800c27e:	697b      	ldr	r3, [r7, #20]
 800c280:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c284:	691b      	ldr	r3, [r3, #16]
 800c286:	697a      	ldr	r2, [r7, #20]
 800c288:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c28c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c290:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800c292:	697b      	ldr	r3, [r7, #20]
 800c294:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c298:	691b      	ldr	r3, [r3, #16]
 800c29a:	697a      	ldr	r2, [r7, #20]
 800c29c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c2a0:	f043 0318 	orr.w	r3, r3, #24
 800c2a4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800c2a6:	697b      	ldr	r3, [r7, #20]
 800c2a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2ac:	691b      	ldr	r3, [r3, #16]
 800c2ae:	697a      	ldr	r2, [r7, #20]
 800c2b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c2b4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800c2b8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800c2ba:	7afb      	ldrb	r3, [r7, #11]
 800c2bc:	2b01      	cmp	r3, #1
 800c2be:	d10f      	bne.n	800c2e0 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800c2c0:	697b      	ldr	r3, [r7, #20]
 800c2c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2c6:	461a      	mov	r2, r3
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800c2cc:	697b      	ldr	r3, [r7, #20]
 800c2ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	697a      	ldr	r2, [r7, #20]
 800c2d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800c2da:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800c2de:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800c2e0:	2300      	movs	r3, #0
}
 800c2e2:	4618      	mov	r0, r3
 800c2e4:	371c      	adds	r7, #28
 800c2e6:	46bd      	mov	sp, r7
 800c2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ec:	4770      	bx	lr
 800c2ee:	bf00      	nop
 800c2f0:	4f54300a 	.word	0x4f54300a

0800c2f4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800c2f4:	b480      	push	{r7}
 800c2f6:	b085      	sub	sp, #20
 800c2f8:	af00      	add	r7, sp, #0
 800c2fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800c2fc:	2300      	movs	r3, #0
 800c2fe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	3301      	adds	r3, #1
 800c304:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c306:	68fb      	ldr	r3, [r7, #12]
 800c308:	4a13      	ldr	r2, [pc, #76]	; (800c358 <USB_CoreReset+0x64>)
 800c30a:	4293      	cmp	r3, r2
 800c30c:	d901      	bls.n	800c312 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800c30e:	2303      	movs	r3, #3
 800c310:	e01b      	b.n	800c34a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	691b      	ldr	r3, [r3, #16]
 800c316:	2b00      	cmp	r3, #0
 800c318:	daf2      	bge.n	800c300 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800c31a:	2300      	movs	r3, #0
 800c31c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	691b      	ldr	r3, [r3, #16]
 800c322:	f043 0201 	orr.w	r2, r3, #1
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800c32a:	68fb      	ldr	r3, [r7, #12]
 800c32c:	3301      	adds	r3, #1
 800c32e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800c330:	68fb      	ldr	r3, [r7, #12]
 800c332:	4a09      	ldr	r2, [pc, #36]	; (800c358 <USB_CoreReset+0x64>)
 800c334:	4293      	cmp	r3, r2
 800c336:	d901      	bls.n	800c33c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800c338:	2303      	movs	r3, #3
 800c33a:	e006      	b.n	800c34a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	691b      	ldr	r3, [r3, #16]
 800c340:	f003 0301 	and.w	r3, r3, #1
 800c344:	2b01      	cmp	r3, #1
 800c346:	d0f0      	beq.n	800c32a <USB_CoreReset+0x36>

  return HAL_OK;
 800c348:	2300      	movs	r3, #0
}
 800c34a:	4618      	mov	r0, r3
 800c34c:	3714      	adds	r7, #20
 800c34e:	46bd      	mov	sp, r7
 800c350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c354:	4770      	bx	lr
 800c356:	bf00      	nop
 800c358:	00030d40 	.word	0x00030d40

0800c35c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c35c:	b580      	push	{r7, lr}
 800c35e:	b084      	sub	sp, #16
 800c360:	af00      	add	r7, sp, #0
 800c362:	6078      	str	r0, [r7, #4]
 800c364:	460b      	mov	r3, r1
 800c366:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800c368:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c36c:	f003 f84c 	bl	800f408 <USBD_static_malloc>
 800c370:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800c372:	68fb      	ldr	r3, [r7, #12]
 800c374:	2b00      	cmp	r3, #0
 800c376:	d109      	bne.n	800c38c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	32b0      	adds	r2, #176	; 0xb0
 800c382:	2100      	movs	r1, #0
 800c384:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800c388:	2302      	movs	r3, #2
 800c38a:	e0d4      	b.n	800c536 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800c38c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800c390:	2100      	movs	r1, #0
 800c392:	68f8      	ldr	r0, [r7, #12]
 800c394:	f004 fec6 	bl	8011124 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	32b0      	adds	r2, #176	; 0xb0
 800c3a2:	68f9      	ldr	r1, [r7, #12]
 800c3a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	32b0      	adds	r2, #176	; 0xb0
 800c3b2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	7c1b      	ldrb	r3, [r3, #16]
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d138      	bne.n	800c436 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c3c4:	4b5e      	ldr	r3, [pc, #376]	; (800c540 <USBD_CDC_Init+0x1e4>)
 800c3c6:	7819      	ldrb	r1, [r3, #0]
 800c3c8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c3cc:	2202      	movs	r2, #2
 800c3ce:	6878      	ldr	r0, [r7, #4]
 800c3d0:	f002 fef7 	bl	800f1c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c3d4:	4b5a      	ldr	r3, [pc, #360]	; (800c540 <USBD_CDC_Init+0x1e4>)
 800c3d6:	781b      	ldrb	r3, [r3, #0]
 800c3d8:	f003 020f 	and.w	r2, r3, #15
 800c3dc:	6879      	ldr	r1, [r7, #4]
 800c3de:	4613      	mov	r3, r2
 800c3e0:	009b      	lsls	r3, r3, #2
 800c3e2:	4413      	add	r3, r2
 800c3e4:	009b      	lsls	r3, r3, #2
 800c3e6:	440b      	add	r3, r1
 800c3e8:	3324      	adds	r3, #36	; 0x24
 800c3ea:	2201      	movs	r2, #1
 800c3ec:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c3ee:	4b55      	ldr	r3, [pc, #340]	; (800c544 <USBD_CDC_Init+0x1e8>)
 800c3f0:	7819      	ldrb	r1, [r3, #0]
 800c3f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c3f6:	2202      	movs	r2, #2
 800c3f8:	6878      	ldr	r0, [r7, #4]
 800c3fa:	f002 fee2 	bl	800f1c2 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c3fe:	4b51      	ldr	r3, [pc, #324]	; (800c544 <USBD_CDC_Init+0x1e8>)
 800c400:	781b      	ldrb	r3, [r3, #0]
 800c402:	f003 020f 	and.w	r2, r3, #15
 800c406:	6879      	ldr	r1, [r7, #4]
 800c408:	4613      	mov	r3, r2
 800c40a:	009b      	lsls	r3, r3, #2
 800c40c:	4413      	add	r3, r2
 800c40e:	009b      	lsls	r3, r3, #2
 800c410:	440b      	add	r3, r1
 800c412:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c416:	2201      	movs	r2, #1
 800c418:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800c41a:	4b4b      	ldr	r3, [pc, #300]	; (800c548 <USBD_CDC_Init+0x1ec>)
 800c41c:	781b      	ldrb	r3, [r3, #0]
 800c41e:	f003 020f 	and.w	r2, r3, #15
 800c422:	6879      	ldr	r1, [r7, #4]
 800c424:	4613      	mov	r3, r2
 800c426:	009b      	lsls	r3, r3, #2
 800c428:	4413      	add	r3, r2
 800c42a:	009b      	lsls	r3, r3, #2
 800c42c:	440b      	add	r3, r1
 800c42e:	3326      	adds	r3, #38	; 0x26
 800c430:	2210      	movs	r2, #16
 800c432:	801a      	strh	r2, [r3, #0]
 800c434:	e035      	b.n	800c4a2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800c436:	4b42      	ldr	r3, [pc, #264]	; (800c540 <USBD_CDC_Init+0x1e4>)
 800c438:	7819      	ldrb	r1, [r3, #0]
 800c43a:	2340      	movs	r3, #64	; 0x40
 800c43c:	2202      	movs	r2, #2
 800c43e:	6878      	ldr	r0, [r7, #4]
 800c440:	f002 febf 	bl	800f1c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800c444:	4b3e      	ldr	r3, [pc, #248]	; (800c540 <USBD_CDC_Init+0x1e4>)
 800c446:	781b      	ldrb	r3, [r3, #0]
 800c448:	f003 020f 	and.w	r2, r3, #15
 800c44c:	6879      	ldr	r1, [r7, #4]
 800c44e:	4613      	mov	r3, r2
 800c450:	009b      	lsls	r3, r3, #2
 800c452:	4413      	add	r3, r2
 800c454:	009b      	lsls	r3, r3, #2
 800c456:	440b      	add	r3, r1
 800c458:	3324      	adds	r3, #36	; 0x24
 800c45a:	2201      	movs	r2, #1
 800c45c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800c45e:	4b39      	ldr	r3, [pc, #228]	; (800c544 <USBD_CDC_Init+0x1e8>)
 800c460:	7819      	ldrb	r1, [r3, #0]
 800c462:	2340      	movs	r3, #64	; 0x40
 800c464:	2202      	movs	r2, #2
 800c466:	6878      	ldr	r0, [r7, #4]
 800c468:	f002 feab 	bl	800f1c2 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800c46c:	4b35      	ldr	r3, [pc, #212]	; (800c544 <USBD_CDC_Init+0x1e8>)
 800c46e:	781b      	ldrb	r3, [r3, #0]
 800c470:	f003 020f 	and.w	r2, r3, #15
 800c474:	6879      	ldr	r1, [r7, #4]
 800c476:	4613      	mov	r3, r2
 800c478:	009b      	lsls	r3, r3, #2
 800c47a:	4413      	add	r3, r2
 800c47c:	009b      	lsls	r3, r3, #2
 800c47e:	440b      	add	r3, r1
 800c480:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c484:	2201      	movs	r2, #1
 800c486:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800c488:	4b2f      	ldr	r3, [pc, #188]	; (800c548 <USBD_CDC_Init+0x1ec>)
 800c48a:	781b      	ldrb	r3, [r3, #0]
 800c48c:	f003 020f 	and.w	r2, r3, #15
 800c490:	6879      	ldr	r1, [r7, #4]
 800c492:	4613      	mov	r3, r2
 800c494:	009b      	lsls	r3, r3, #2
 800c496:	4413      	add	r3, r2
 800c498:	009b      	lsls	r3, r3, #2
 800c49a:	440b      	add	r3, r1
 800c49c:	3326      	adds	r3, #38	; 0x26
 800c49e:	2210      	movs	r2, #16
 800c4a0:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c4a2:	4b29      	ldr	r3, [pc, #164]	; (800c548 <USBD_CDC_Init+0x1ec>)
 800c4a4:	7819      	ldrb	r1, [r3, #0]
 800c4a6:	2308      	movs	r3, #8
 800c4a8:	2203      	movs	r2, #3
 800c4aa:	6878      	ldr	r0, [r7, #4]
 800c4ac:	f002 fe89 	bl	800f1c2 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800c4b0:	4b25      	ldr	r3, [pc, #148]	; (800c548 <USBD_CDC_Init+0x1ec>)
 800c4b2:	781b      	ldrb	r3, [r3, #0]
 800c4b4:	f003 020f 	and.w	r2, r3, #15
 800c4b8:	6879      	ldr	r1, [r7, #4]
 800c4ba:	4613      	mov	r3, r2
 800c4bc:	009b      	lsls	r3, r3, #2
 800c4be:	4413      	add	r3, r2
 800c4c0:	009b      	lsls	r3, r3, #2
 800c4c2:	440b      	add	r3, r1
 800c4c4:	3324      	adds	r3, #36	; 0x24
 800c4c6:	2201      	movs	r2, #1
 800c4c8:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c4d8:	687a      	ldr	r2, [r7, #4]
 800c4da:	33b0      	adds	r3, #176	; 0xb0
 800c4dc:	009b      	lsls	r3, r3, #2
 800c4de:	4413      	add	r3, r2
 800c4e0:	685b      	ldr	r3, [r3, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800c4e6:	68fb      	ldr	r3, [r7, #12]
 800c4e8:	2200      	movs	r2, #0
 800c4ea:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	2200      	movs	r2, #0
 800c4f2:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d101      	bne.n	800c504 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800c500:	2302      	movs	r3, #2
 800c502:	e018      	b.n	800c536 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	7c1b      	ldrb	r3, [r3, #16]
 800c508:	2b00      	cmp	r3, #0
 800c50a:	d10a      	bne.n	800c522 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c50c:	4b0d      	ldr	r3, [pc, #52]	; (800c544 <USBD_CDC_Init+0x1e8>)
 800c50e:	7819      	ldrb	r1, [r3, #0]
 800c510:	68fb      	ldr	r3, [r7, #12]
 800c512:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c516:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c51a:	6878      	ldr	r0, [r7, #4]
 800c51c:	f002 ff40 	bl	800f3a0 <USBD_LL_PrepareReceive>
 800c520:	e008      	b.n	800c534 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800c522:	4b08      	ldr	r3, [pc, #32]	; (800c544 <USBD_CDC_Init+0x1e8>)
 800c524:	7819      	ldrb	r1, [r3, #0]
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800c52c:	2340      	movs	r3, #64	; 0x40
 800c52e:	6878      	ldr	r0, [r7, #4]
 800c530:	f002 ff36 	bl	800f3a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800c534:	2300      	movs	r3, #0
}
 800c536:	4618      	mov	r0, r3
 800c538:	3710      	adds	r7, #16
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bd80      	pop	{r7, pc}
 800c53e:	bf00      	nop
 800c540:	24000097 	.word	0x24000097
 800c544:	24000098 	.word	0x24000098
 800c548:	24000099 	.word	0x24000099

0800c54c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c54c:	b580      	push	{r7, lr}
 800c54e:	b082      	sub	sp, #8
 800c550:	af00      	add	r7, sp, #0
 800c552:	6078      	str	r0, [r7, #4]
 800c554:	460b      	mov	r3, r1
 800c556:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800c558:	4b3a      	ldr	r3, [pc, #232]	; (800c644 <USBD_CDC_DeInit+0xf8>)
 800c55a:	781b      	ldrb	r3, [r3, #0]
 800c55c:	4619      	mov	r1, r3
 800c55e:	6878      	ldr	r0, [r7, #4]
 800c560:	f002 fe55 	bl	800f20e <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800c564:	4b37      	ldr	r3, [pc, #220]	; (800c644 <USBD_CDC_DeInit+0xf8>)
 800c566:	781b      	ldrb	r3, [r3, #0]
 800c568:	f003 020f 	and.w	r2, r3, #15
 800c56c:	6879      	ldr	r1, [r7, #4]
 800c56e:	4613      	mov	r3, r2
 800c570:	009b      	lsls	r3, r3, #2
 800c572:	4413      	add	r3, r2
 800c574:	009b      	lsls	r3, r3, #2
 800c576:	440b      	add	r3, r1
 800c578:	3324      	adds	r3, #36	; 0x24
 800c57a:	2200      	movs	r2, #0
 800c57c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800c57e:	4b32      	ldr	r3, [pc, #200]	; (800c648 <USBD_CDC_DeInit+0xfc>)
 800c580:	781b      	ldrb	r3, [r3, #0]
 800c582:	4619      	mov	r1, r3
 800c584:	6878      	ldr	r0, [r7, #4]
 800c586:	f002 fe42 	bl	800f20e <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800c58a:	4b2f      	ldr	r3, [pc, #188]	; (800c648 <USBD_CDC_DeInit+0xfc>)
 800c58c:	781b      	ldrb	r3, [r3, #0]
 800c58e:	f003 020f 	and.w	r2, r3, #15
 800c592:	6879      	ldr	r1, [r7, #4]
 800c594:	4613      	mov	r3, r2
 800c596:	009b      	lsls	r3, r3, #2
 800c598:	4413      	add	r3, r2
 800c59a:	009b      	lsls	r3, r3, #2
 800c59c:	440b      	add	r3, r1
 800c59e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800c5a2:	2200      	movs	r2, #0
 800c5a4:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800c5a6:	4b29      	ldr	r3, [pc, #164]	; (800c64c <USBD_CDC_DeInit+0x100>)
 800c5a8:	781b      	ldrb	r3, [r3, #0]
 800c5aa:	4619      	mov	r1, r3
 800c5ac:	6878      	ldr	r0, [r7, #4]
 800c5ae:	f002 fe2e 	bl	800f20e <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800c5b2:	4b26      	ldr	r3, [pc, #152]	; (800c64c <USBD_CDC_DeInit+0x100>)
 800c5b4:	781b      	ldrb	r3, [r3, #0]
 800c5b6:	f003 020f 	and.w	r2, r3, #15
 800c5ba:	6879      	ldr	r1, [r7, #4]
 800c5bc:	4613      	mov	r3, r2
 800c5be:	009b      	lsls	r3, r3, #2
 800c5c0:	4413      	add	r3, r2
 800c5c2:	009b      	lsls	r3, r3, #2
 800c5c4:	440b      	add	r3, r1
 800c5c6:	3324      	adds	r3, #36	; 0x24
 800c5c8:	2200      	movs	r2, #0
 800c5ca:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800c5cc:	4b1f      	ldr	r3, [pc, #124]	; (800c64c <USBD_CDC_DeInit+0x100>)
 800c5ce:	781b      	ldrb	r3, [r3, #0]
 800c5d0:	f003 020f 	and.w	r2, r3, #15
 800c5d4:	6879      	ldr	r1, [r7, #4]
 800c5d6:	4613      	mov	r3, r2
 800c5d8:	009b      	lsls	r3, r3, #2
 800c5da:	4413      	add	r3, r2
 800c5dc:	009b      	lsls	r3, r3, #2
 800c5de:	440b      	add	r3, r1
 800c5e0:	3326      	adds	r3, #38	; 0x26
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	32b0      	adds	r2, #176	; 0xb0
 800c5f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d01f      	beq.n	800c638 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c5fe:	687a      	ldr	r2, [r7, #4]
 800c600:	33b0      	adds	r3, #176	; 0xb0
 800c602:	009b      	lsls	r3, r3, #2
 800c604:	4413      	add	r3, r2
 800c606:	685b      	ldr	r3, [r3, #4]
 800c608:	685b      	ldr	r3, [r3, #4]
 800c60a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	32b0      	adds	r2, #176	; 0xb0
 800c616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c61a:	4618      	mov	r0, r3
 800c61c:	f002 ff02 	bl	800f424 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800c620:	687b      	ldr	r3, [r7, #4]
 800c622:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	32b0      	adds	r2, #176	; 0xb0
 800c62a:	2100      	movs	r1, #0
 800c62c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	2200      	movs	r2, #0
 800c634:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800c638:	2300      	movs	r3, #0
}
 800c63a:	4618      	mov	r0, r3
 800c63c:	3708      	adds	r7, #8
 800c63e:	46bd      	mov	sp, r7
 800c640:	bd80      	pop	{r7, pc}
 800c642:	bf00      	nop
 800c644:	24000097 	.word	0x24000097
 800c648:	24000098 	.word	0x24000098
 800c64c:	24000099 	.word	0x24000099

0800c650 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800c650:	b580      	push	{r7, lr}
 800c652:	b086      	sub	sp, #24
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
 800c658:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	32b0      	adds	r2, #176	; 0xb0
 800c664:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c668:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800c66a:	2300      	movs	r3, #0
 800c66c:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800c66e:	2300      	movs	r3, #0
 800c670:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800c672:	2300      	movs	r3, #0
 800c674:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800c676:	693b      	ldr	r3, [r7, #16]
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d101      	bne.n	800c680 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800c67c:	2303      	movs	r3, #3
 800c67e:	e0bf      	b.n	800c800 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800c680:	683b      	ldr	r3, [r7, #0]
 800c682:	781b      	ldrb	r3, [r3, #0]
 800c684:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800c688:	2b00      	cmp	r3, #0
 800c68a:	d050      	beq.n	800c72e <USBD_CDC_Setup+0xde>
 800c68c:	2b20      	cmp	r3, #32
 800c68e:	f040 80af 	bne.w	800c7f0 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800c692:	683b      	ldr	r3, [r7, #0]
 800c694:	88db      	ldrh	r3, [r3, #6]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d03a      	beq.n	800c710 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800c69a:	683b      	ldr	r3, [r7, #0]
 800c69c:	781b      	ldrb	r3, [r3, #0]
 800c69e:	b25b      	sxtb	r3, r3
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	da1b      	bge.n	800c6dc <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c6aa:	687a      	ldr	r2, [r7, #4]
 800c6ac:	33b0      	adds	r3, #176	; 0xb0
 800c6ae:	009b      	lsls	r3, r3, #2
 800c6b0:	4413      	add	r3, r2
 800c6b2:	685b      	ldr	r3, [r3, #4]
 800c6b4:	689b      	ldr	r3, [r3, #8]
 800c6b6:	683a      	ldr	r2, [r7, #0]
 800c6b8:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800c6ba:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c6bc:	683a      	ldr	r2, [r7, #0]
 800c6be:	88d2      	ldrh	r2, [r2, #6]
 800c6c0:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800c6c2:	683b      	ldr	r3, [r7, #0]
 800c6c4:	88db      	ldrh	r3, [r3, #6]
 800c6c6:	2b07      	cmp	r3, #7
 800c6c8:	bf28      	it	cs
 800c6ca:	2307      	movcs	r3, #7
 800c6cc:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800c6ce:	693b      	ldr	r3, [r7, #16]
 800c6d0:	89fa      	ldrh	r2, [r7, #14]
 800c6d2:	4619      	mov	r1, r3
 800c6d4:	6878      	ldr	r0, [r7, #4]
 800c6d6:	f001 fdb3 	bl	800e240 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800c6da:	e090      	b.n	800c7fe <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800c6dc:	683b      	ldr	r3, [r7, #0]
 800c6de:	785a      	ldrb	r2, [r3, #1]
 800c6e0:	693b      	ldr	r3, [r7, #16]
 800c6e2:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800c6e6:	683b      	ldr	r3, [r7, #0]
 800c6e8:	88db      	ldrh	r3, [r3, #6]
 800c6ea:	2b3f      	cmp	r3, #63	; 0x3f
 800c6ec:	d803      	bhi.n	800c6f6 <USBD_CDC_Setup+0xa6>
 800c6ee:	683b      	ldr	r3, [r7, #0]
 800c6f0:	88db      	ldrh	r3, [r3, #6]
 800c6f2:	b2da      	uxtb	r2, r3
 800c6f4:	e000      	b.n	800c6f8 <USBD_CDC_Setup+0xa8>
 800c6f6:	2240      	movs	r2, #64	; 0x40
 800c6f8:	693b      	ldr	r3, [r7, #16]
 800c6fa:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800c6fe:	6939      	ldr	r1, [r7, #16]
 800c700:	693b      	ldr	r3, [r7, #16]
 800c702:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800c706:	461a      	mov	r2, r3
 800c708:	6878      	ldr	r0, [r7, #4]
 800c70a:	f001 fdc5 	bl	800e298 <USBD_CtlPrepareRx>
      break;
 800c70e:	e076      	b.n	800c7fe <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c716:	687a      	ldr	r2, [r7, #4]
 800c718:	33b0      	adds	r3, #176	; 0xb0
 800c71a:	009b      	lsls	r3, r3, #2
 800c71c:	4413      	add	r3, r2
 800c71e:	685b      	ldr	r3, [r3, #4]
 800c720:	689b      	ldr	r3, [r3, #8]
 800c722:	683a      	ldr	r2, [r7, #0]
 800c724:	7850      	ldrb	r0, [r2, #1]
 800c726:	2200      	movs	r2, #0
 800c728:	6839      	ldr	r1, [r7, #0]
 800c72a:	4798      	blx	r3
      break;
 800c72c:	e067      	b.n	800c7fe <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800c72e:	683b      	ldr	r3, [r7, #0]
 800c730:	785b      	ldrb	r3, [r3, #1]
 800c732:	2b0b      	cmp	r3, #11
 800c734:	d851      	bhi.n	800c7da <USBD_CDC_Setup+0x18a>
 800c736:	a201      	add	r2, pc, #4	; (adr r2, 800c73c <USBD_CDC_Setup+0xec>)
 800c738:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c73c:	0800c76d 	.word	0x0800c76d
 800c740:	0800c7e9 	.word	0x0800c7e9
 800c744:	0800c7db 	.word	0x0800c7db
 800c748:	0800c7db 	.word	0x0800c7db
 800c74c:	0800c7db 	.word	0x0800c7db
 800c750:	0800c7db 	.word	0x0800c7db
 800c754:	0800c7db 	.word	0x0800c7db
 800c758:	0800c7db 	.word	0x0800c7db
 800c75c:	0800c7db 	.word	0x0800c7db
 800c760:	0800c7db 	.word	0x0800c7db
 800c764:	0800c797 	.word	0x0800c797
 800c768:	0800c7c1 	.word	0x0800c7c1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c772:	b2db      	uxtb	r3, r3
 800c774:	2b03      	cmp	r3, #3
 800c776:	d107      	bne.n	800c788 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800c778:	f107 030a 	add.w	r3, r7, #10
 800c77c:	2202      	movs	r2, #2
 800c77e:	4619      	mov	r1, r3
 800c780:	6878      	ldr	r0, [r7, #4]
 800c782:	f001 fd5d 	bl	800e240 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c786:	e032      	b.n	800c7ee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c788:	6839      	ldr	r1, [r7, #0]
 800c78a:	6878      	ldr	r0, [r7, #4]
 800c78c:	f001 fce7 	bl	800e15e <USBD_CtlError>
            ret = USBD_FAIL;
 800c790:	2303      	movs	r3, #3
 800c792:	75fb      	strb	r3, [r7, #23]
          break;
 800c794:	e02b      	b.n	800c7ee <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c79c:	b2db      	uxtb	r3, r3
 800c79e:	2b03      	cmp	r3, #3
 800c7a0:	d107      	bne.n	800c7b2 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800c7a2:	f107 030d 	add.w	r3, r7, #13
 800c7a6:	2201      	movs	r2, #1
 800c7a8:	4619      	mov	r1, r3
 800c7aa:	6878      	ldr	r0, [r7, #4]
 800c7ac:	f001 fd48 	bl	800e240 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800c7b0:	e01d      	b.n	800c7ee <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800c7b2:	6839      	ldr	r1, [r7, #0]
 800c7b4:	6878      	ldr	r0, [r7, #4]
 800c7b6:	f001 fcd2 	bl	800e15e <USBD_CtlError>
            ret = USBD_FAIL;
 800c7ba:	2303      	movs	r3, #3
 800c7bc:	75fb      	strb	r3, [r7, #23]
          break;
 800c7be:	e016      	b.n	800c7ee <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800c7c6:	b2db      	uxtb	r3, r3
 800c7c8:	2b03      	cmp	r3, #3
 800c7ca:	d00f      	beq.n	800c7ec <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800c7cc:	6839      	ldr	r1, [r7, #0]
 800c7ce:	6878      	ldr	r0, [r7, #4]
 800c7d0:	f001 fcc5 	bl	800e15e <USBD_CtlError>
            ret = USBD_FAIL;
 800c7d4:	2303      	movs	r3, #3
 800c7d6:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800c7d8:	e008      	b.n	800c7ec <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800c7da:	6839      	ldr	r1, [r7, #0]
 800c7dc:	6878      	ldr	r0, [r7, #4]
 800c7de:	f001 fcbe 	bl	800e15e <USBD_CtlError>
          ret = USBD_FAIL;
 800c7e2:	2303      	movs	r3, #3
 800c7e4:	75fb      	strb	r3, [r7, #23]
          break;
 800c7e6:	e002      	b.n	800c7ee <USBD_CDC_Setup+0x19e>
          break;
 800c7e8:	bf00      	nop
 800c7ea:	e008      	b.n	800c7fe <USBD_CDC_Setup+0x1ae>
          break;
 800c7ec:	bf00      	nop
      }
      break;
 800c7ee:	e006      	b.n	800c7fe <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800c7f0:	6839      	ldr	r1, [r7, #0]
 800c7f2:	6878      	ldr	r0, [r7, #4]
 800c7f4:	f001 fcb3 	bl	800e15e <USBD_CtlError>
      ret = USBD_FAIL;
 800c7f8:	2303      	movs	r3, #3
 800c7fa:	75fb      	strb	r3, [r7, #23]
      break;
 800c7fc:	bf00      	nop
  }

  return (uint8_t)ret;
 800c7fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800c800:	4618      	mov	r0, r3
 800c802:	3718      	adds	r7, #24
 800c804:	46bd      	mov	sp, r7
 800c806:	bd80      	pop	{r7, pc}

0800c808 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c808:	b580      	push	{r7, lr}
 800c80a:	b084      	sub	sp, #16
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
 800c810:	460b      	mov	r3, r1
 800c812:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c81a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	32b0      	adds	r2, #176	; 0xb0
 800c826:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d101      	bne.n	800c832 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800c82e:	2303      	movs	r3, #3
 800c830:	e065      	b.n	800c8fe <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c838:	687b      	ldr	r3, [r7, #4]
 800c83a:	32b0      	adds	r2, #176	; 0xb0
 800c83c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c840:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c842:	78fb      	ldrb	r3, [r7, #3]
 800c844:	f003 020f 	and.w	r2, r3, #15
 800c848:	6879      	ldr	r1, [r7, #4]
 800c84a:	4613      	mov	r3, r2
 800c84c:	009b      	lsls	r3, r3, #2
 800c84e:	4413      	add	r3, r2
 800c850:	009b      	lsls	r3, r3, #2
 800c852:	440b      	add	r3, r1
 800c854:	3318      	adds	r3, #24
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d02f      	beq.n	800c8bc <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800c85c:	78fb      	ldrb	r3, [r7, #3]
 800c85e:	f003 020f 	and.w	r2, r3, #15
 800c862:	6879      	ldr	r1, [r7, #4]
 800c864:	4613      	mov	r3, r2
 800c866:	009b      	lsls	r3, r3, #2
 800c868:	4413      	add	r3, r2
 800c86a:	009b      	lsls	r3, r3, #2
 800c86c:	440b      	add	r3, r1
 800c86e:	3318      	adds	r3, #24
 800c870:	681a      	ldr	r2, [r3, #0]
 800c872:	78fb      	ldrb	r3, [r7, #3]
 800c874:	f003 010f 	and.w	r1, r3, #15
 800c878:	68f8      	ldr	r0, [r7, #12]
 800c87a:	460b      	mov	r3, r1
 800c87c:	00db      	lsls	r3, r3, #3
 800c87e:	440b      	add	r3, r1
 800c880:	009b      	lsls	r3, r3, #2
 800c882:	4403      	add	r3, r0
 800c884:	3344      	adds	r3, #68	; 0x44
 800c886:	681b      	ldr	r3, [r3, #0]
 800c888:	fbb2 f1f3 	udiv	r1, r2, r3
 800c88c:	fb01 f303 	mul.w	r3, r1, r3
 800c890:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800c892:	2b00      	cmp	r3, #0
 800c894:	d112      	bne.n	800c8bc <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800c896:	78fb      	ldrb	r3, [r7, #3]
 800c898:	f003 020f 	and.w	r2, r3, #15
 800c89c:	6879      	ldr	r1, [r7, #4]
 800c89e:	4613      	mov	r3, r2
 800c8a0:	009b      	lsls	r3, r3, #2
 800c8a2:	4413      	add	r3, r2
 800c8a4:	009b      	lsls	r3, r3, #2
 800c8a6:	440b      	add	r3, r1
 800c8a8:	3318      	adds	r3, #24
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800c8ae:	78f9      	ldrb	r1, [r7, #3]
 800c8b0:	2300      	movs	r3, #0
 800c8b2:	2200      	movs	r2, #0
 800c8b4:	6878      	ldr	r0, [r7, #4]
 800c8b6:	f002 fd52 	bl	800f35e <USBD_LL_Transmit>
 800c8ba:	e01f      	b.n	800c8fc <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800c8bc:	68bb      	ldr	r3, [r7, #8]
 800c8be:	2200      	movs	r2, #0
 800c8c0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c8ca:	687a      	ldr	r2, [r7, #4]
 800c8cc:	33b0      	adds	r3, #176	; 0xb0
 800c8ce:	009b      	lsls	r3, r3, #2
 800c8d0:	4413      	add	r3, r2
 800c8d2:	685b      	ldr	r3, [r3, #4]
 800c8d4:	691b      	ldr	r3, [r3, #16]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d010      	beq.n	800c8fc <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c8e0:	687a      	ldr	r2, [r7, #4]
 800c8e2:	33b0      	adds	r3, #176	; 0xb0
 800c8e4:	009b      	lsls	r3, r3, #2
 800c8e6:	4413      	add	r3, r2
 800c8e8:	685b      	ldr	r3, [r3, #4]
 800c8ea:	691b      	ldr	r3, [r3, #16]
 800c8ec:	68ba      	ldr	r2, [r7, #8]
 800c8ee:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 800c8f2:	68ba      	ldr	r2, [r7, #8]
 800c8f4:	f502 7104 	add.w	r1, r2, #528	; 0x210
 800c8f8:	78fa      	ldrb	r2, [r7, #3]
 800c8fa:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800c8fc:	2300      	movs	r3, #0
}
 800c8fe:	4618      	mov	r0, r3
 800c900:	3710      	adds	r7, #16
 800c902:	46bd      	mov	sp, r7
 800c904:	bd80      	pop	{r7, pc}

0800c906 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800c906:	b580      	push	{r7, lr}
 800c908:	b084      	sub	sp, #16
 800c90a:	af00      	add	r7, sp, #0
 800c90c:	6078      	str	r0, [r7, #4]
 800c90e:	460b      	mov	r3, r1
 800c910:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	32b0      	adds	r2, #176	; 0xb0
 800c91c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c920:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	32b0      	adds	r2, #176	; 0xb0
 800c92c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d101      	bne.n	800c938 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800c934:	2303      	movs	r3, #3
 800c936:	e01a      	b.n	800c96e <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800c938:	78fb      	ldrb	r3, [r7, #3]
 800c93a:	4619      	mov	r1, r3
 800c93c:	6878      	ldr	r0, [r7, #4]
 800c93e:	f002 fd50 	bl	800f3e2 <USBD_LL_GetRxDataSize>
 800c942:	4602      	mov	r2, r0
 800c944:	68fb      	ldr	r3, [r7, #12]
 800c946:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c950:	687a      	ldr	r2, [r7, #4]
 800c952:	33b0      	adds	r3, #176	; 0xb0
 800c954:	009b      	lsls	r3, r3, #2
 800c956:	4413      	add	r3, r2
 800c958:	685b      	ldr	r3, [r3, #4]
 800c95a:	68db      	ldr	r3, [r3, #12]
 800c95c:	68fa      	ldr	r2, [r7, #12]
 800c95e:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800c962:	68fa      	ldr	r2, [r7, #12]
 800c964:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800c968:	4611      	mov	r1, r2
 800c96a:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800c96c:	2300      	movs	r3, #0
}
 800c96e:	4618      	mov	r0, r3
 800c970:	3710      	adds	r7, #16
 800c972:	46bd      	mov	sp, r7
 800c974:	bd80      	pop	{r7, pc}

0800c976 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800c976:	b580      	push	{r7, lr}
 800c978:	b084      	sub	sp, #16
 800c97a:	af00      	add	r7, sp, #0
 800c97c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	32b0      	adds	r2, #176	; 0xb0
 800c988:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c98c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d101      	bne.n	800c998 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800c994:	2303      	movs	r3, #3
 800c996:	e025      	b.n	800c9e4 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c99e:	687a      	ldr	r2, [r7, #4]
 800c9a0:	33b0      	adds	r3, #176	; 0xb0
 800c9a2:	009b      	lsls	r3, r3, #2
 800c9a4:	4413      	add	r3, r2
 800c9a6:	685b      	ldr	r3, [r3, #4]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d01a      	beq.n	800c9e2 <USBD_CDC_EP0_RxReady+0x6c>
 800c9ac:	68fb      	ldr	r3, [r7, #12]
 800c9ae:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800c9b2:	2bff      	cmp	r3, #255	; 0xff
 800c9b4:	d015      	beq.n	800c9e2 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800c9bc:	687a      	ldr	r2, [r7, #4]
 800c9be:	33b0      	adds	r3, #176	; 0xb0
 800c9c0:	009b      	lsls	r3, r3, #2
 800c9c2:	4413      	add	r3, r2
 800c9c4:	685b      	ldr	r3, [r3, #4]
 800c9c6:	689b      	ldr	r3, [r3, #8]
 800c9c8:	68fa      	ldr	r2, [r7, #12]
 800c9ca:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 800c9ce:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800c9d0:	68fa      	ldr	r2, [r7, #12]
 800c9d2:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800c9d6:	b292      	uxth	r2, r2
 800c9d8:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	22ff      	movs	r2, #255	; 0xff
 800c9de:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 800c9e2:	2300      	movs	r3, #0
}
 800c9e4:	4618      	mov	r0, r3
 800c9e6:	3710      	adds	r7, #16
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	bd80      	pop	{r7, pc}

0800c9ec <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b086      	sub	sp, #24
 800c9f0:	af00      	add	r7, sp, #0
 800c9f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800c9f4:	2182      	movs	r1, #130	; 0x82
 800c9f6:	4818      	ldr	r0, [pc, #96]	; (800ca58 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800c9f8:	f000 fd4f 	bl	800d49a <USBD_GetEpDesc>
 800c9fc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800c9fe:	2101      	movs	r1, #1
 800ca00:	4815      	ldr	r0, [pc, #84]	; (800ca58 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ca02:	f000 fd4a 	bl	800d49a <USBD_GetEpDesc>
 800ca06:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ca08:	2181      	movs	r1, #129	; 0x81
 800ca0a:	4813      	ldr	r0, [pc, #76]	; (800ca58 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800ca0c:	f000 fd45 	bl	800d49a <USBD_GetEpDesc>
 800ca10:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ca12:	697b      	ldr	r3, [r7, #20]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d002      	beq.n	800ca1e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800ca18:	697b      	ldr	r3, [r7, #20]
 800ca1a:	2210      	movs	r2, #16
 800ca1c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ca1e:	693b      	ldr	r3, [r7, #16]
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d006      	beq.n	800ca32 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ca24:	693b      	ldr	r3, [r7, #16]
 800ca26:	2200      	movs	r2, #0
 800ca28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ca2c:	711a      	strb	r2, [r3, #4]
 800ca2e:	2200      	movs	r2, #0
 800ca30:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800ca32:	68fb      	ldr	r3, [r7, #12]
 800ca34:	2b00      	cmp	r3, #0
 800ca36:	d006      	beq.n	800ca46 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ca40:	711a      	strb	r2, [r3, #4]
 800ca42:	2200      	movs	r2, #0
 800ca44:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	2243      	movs	r2, #67	; 0x43
 800ca4a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800ca4c:	4b02      	ldr	r3, [pc, #8]	; (800ca58 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800ca4e:	4618      	mov	r0, r3
 800ca50:	3718      	adds	r7, #24
 800ca52:	46bd      	mov	sp, r7
 800ca54:	bd80      	pop	{r7, pc}
 800ca56:	bf00      	nop
 800ca58:	24000054 	.word	0x24000054

0800ca5c <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b086      	sub	sp, #24
 800ca60:	af00      	add	r7, sp, #0
 800ca62:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800ca64:	2182      	movs	r1, #130	; 0x82
 800ca66:	4818      	ldr	r0, [pc, #96]	; (800cac8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ca68:	f000 fd17 	bl	800d49a <USBD_GetEpDesc>
 800ca6c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800ca6e:	2101      	movs	r1, #1
 800ca70:	4815      	ldr	r0, [pc, #84]	; (800cac8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ca72:	f000 fd12 	bl	800d49a <USBD_GetEpDesc>
 800ca76:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800ca78:	2181      	movs	r1, #129	; 0x81
 800ca7a:	4813      	ldr	r0, [pc, #76]	; (800cac8 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800ca7c:	f000 fd0d 	bl	800d49a <USBD_GetEpDesc>
 800ca80:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800ca82:	697b      	ldr	r3, [r7, #20]
 800ca84:	2b00      	cmp	r3, #0
 800ca86:	d002      	beq.n	800ca8e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800ca88:	697b      	ldr	r3, [r7, #20]
 800ca8a:	2210      	movs	r2, #16
 800ca8c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800ca8e:	693b      	ldr	r3, [r7, #16]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d006      	beq.n	800caa2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800ca94:	693b      	ldr	r3, [r7, #16]
 800ca96:	2200      	movs	r2, #0
 800ca98:	711a      	strb	r2, [r3, #4]
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	f042 0202 	orr.w	r2, r2, #2
 800caa0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800caa2:	68fb      	ldr	r3, [r7, #12]
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d006      	beq.n	800cab6 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800caa8:	68fb      	ldr	r3, [r7, #12]
 800caaa:	2200      	movs	r2, #0
 800caac:	711a      	strb	r2, [r3, #4]
 800caae:	2200      	movs	r2, #0
 800cab0:	f042 0202 	orr.w	r2, r2, #2
 800cab4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	2243      	movs	r2, #67	; 0x43
 800caba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800cabc:	4b02      	ldr	r3, [pc, #8]	; (800cac8 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800cabe:	4618      	mov	r0, r3
 800cac0:	3718      	adds	r7, #24
 800cac2:	46bd      	mov	sp, r7
 800cac4:	bd80      	pop	{r7, pc}
 800cac6:	bf00      	nop
 800cac8:	24000054 	.word	0x24000054

0800cacc <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b086      	sub	sp, #24
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800cad4:	2182      	movs	r1, #130	; 0x82
 800cad6:	4818      	ldr	r0, [pc, #96]	; (800cb38 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800cad8:	f000 fcdf 	bl	800d49a <USBD_GetEpDesc>
 800cadc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800cade:	2101      	movs	r1, #1
 800cae0:	4815      	ldr	r0, [pc, #84]	; (800cb38 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800cae2:	f000 fcda 	bl	800d49a <USBD_GetEpDesc>
 800cae6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800cae8:	2181      	movs	r1, #129	; 0x81
 800caea:	4813      	ldr	r0, [pc, #76]	; (800cb38 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800caec:	f000 fcd5 	bl	800d49a <USBD_GetEpDesc>
 800caf0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800caf2:	697b      	ldr	r3, [r7, #20]
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d002      	beq.n	800cafe <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800caf8:	697b      	ldr	r3, [r7, #20]
 800cafa:	2210      	movs	r2, #16
 800cafc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800cafe:	693b      	ldr	r3, [r7, #16]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d006      	beq.n	800cb12 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cb04:	693b      	ldr	r3, [r7, #16]
 800cb06:	2200      	movs	r2, #0
 800cb08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cb0c:	711a      	strb	r2, [r3, #4]
 800cb0e:	2200      	movs	r2, #0
 800cb10:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800cb12:	68fb      	ldr	r3, [r7, #12]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	d006      	beq.n	800cb26 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	2200      	movs	r2, #0
 800cb1c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800cb20:	711a      	strb	r2, [r3, #4]
 800cb22:	2200      	movs	r2, #0
 800cb24:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	2243      	movs	r2, #67	; 0x43
 800cb2a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800cb2c:	4b02      	ldr	r3, [pc, #8]	; (800cb38 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800cb2e:	4618      	mov	r0, r3
 800cb30:	3718      	adds	r7, #24
 800cb32:	46bd      	mov	sp, r7
 800cb34:	bd80      	pop	{r7, pc}
 800cb36:	bf00      	nop
 800cb38:	24000054 	.word	0x24000054

0800cb3c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800cb3c:	b480      	push	{r7}
 800cb3e:	b083      	sub	sp, #12
 800cb40:	af00      	add	r7, sp, #0
 800cb42:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	220a      	movs	r2, #10
 800cb48:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800cb4a:	4b03      	ldr	r3, [pc, #12]	; (800cb58 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800cb4c:	4618      	mov	r0, r3
 800cb4e:	370c      	adds	r7, #12
 800cb50:	46bd      	mov	sp, r7
 800cb52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb56:	4770      	bx	lr
 800cb58:	24000010 	.word	0x24000010

0800cb5c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800cb5c:	b480      	push	{r7}
 800cb5e:	b083      	sub	sp, #12
 800cb60:	af00      	add	r7, sp, #0
 800cb62:	6078      	str	r0, [r7, #4]
 800cb64:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d101      	bne.n	800cb70 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800cb6c:	2303      	movs	r3, #3
 800cb6e:	e009      	b.n	800cb84 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800cb76:	687a      	ldr	r2, [r7, #4]
 800cb78:	33b0      	adds	r3, #176	; 0xb0
 800cb7a:	009b      	lsls	r3, r3, #2
 800cb7c:	4413      	add	r3, r2
 800cb7e:	683a      	ldr	r2, [r7, #0]
 800cb80:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800cb82:	2300      	movs	r3, #0
}
 800cb84:	4618      	mov	r0, r3
 800cb86:	370c      	adds	r7, #12
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb8e:	4770      	bx	lr

0800cb90 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800cb90:	b480      	push	{r7}
 800cb92:	b087      	sub	sp, #28
 800cb94:	af00      	add	r7, sp, #0
 800cb96:	60f8      	str	r0, [r7, #12]
 800cb98:	60b9      	str	r1, [r7, #8]
 800cb9a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cb9c:	68fb      	ldr	r3, [r7, #12]
 800cb9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	32b0      	adds	r2, #176	; 0xb0
 800cba6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbaa:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800cbac:	697b      	ldr	r3, [r7, #20]
 800cbae:	2b00      	cmp	r3, #0
 800cbb0:	d101      	bne.n	800cbb6 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800cbb2:	2303      	movs	r3, #3
 800cbb4:	e008      	b.n	800cbc8 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800cbb6:	697b      	ldr	r3, [r7, #20]
 800cbb8:	68ba      	ldr	r2, [r7, #8]
 800cbba:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800cbbe:	697b      	ldr	r3, [r7, #20]
 800cbc0:	687a      	ldr	r2, [r7, #4]
 800cbc2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 800cbc6:	2300      	movs	r3, #0
}
 800cbc8:	4618      	mov	r0, r3
 800cbca:	371c      	adds	r7, #28
 800cbcc:	46bd      	mov	sp, r7
 800cbce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd2:	4770      	bx	lr

0800cbd4 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800cbd4:	b480      	push	{r7}
 800cbd6:	b085      	sub	sp, #20
 800cbd8:	af00      	add	r7, sp, #0
 800cbda:	6078      	str	r0, [r7, #4]
 800cbdc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	32b0      	adds	r2, #176	; 0xb0
 800cbe8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbec:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d101      	bne.n	800cbf8 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800cbf4:	2303      	movs	r3, #3
 800cbf6:	e004      	b.n	800cc02 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	683a      	ldr	r2, [r7, #0]
 800cbfc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 800cc00:	2300      	movs	r3, #0
}
 800cc02:	4618      	mov	r0, r3
 800cc04:	3714      	adds	r7, #20
 800cc06:	46bd      	mov	sp, r7
 800cc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0c:	4770      	bx	lr
	...

0800cc10 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800cc10:	b580      	push	{r7, lr}
 800cc12:	b084      	sub	sp, #16
 800cc14:	af00      	add	r7, sp, #0
 800cc16:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cc18:	687b      	ldr	r3, [r7, #4]
 800cc1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cc1e:	687b      	ldr	r3, [r7, #4]
 800cc20:	32b0      	adds	r2, #176	; 0xb0
 800cc22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cc26:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800cc28:	2301      	movs	r3, #1
 800cc2a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800cc2c:	68bb      	ldr	r3, [r7, #8]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d101      	bne.n	800cc36 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800cc32:	2303      	movs	r3, #3
 800cc34:	e025      	b.n	800cc82 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800cc36:	68bb      	ldr	r3, [r7, #8]
 800cc38:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d11f      	bne.n	800cc80 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800cc40:	68bb      	ldr	r3, [r7, #8]
 800cc42:	2201      	movs	r2, #1
 800cc44:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800cc48:	4b10      	ldr	r3, [pc, #64]	; (800cc8c <USBD_CDC_TransmitPacket+0x7c>)
 800cc4a:	781b      	ldrb	r3, [r3, #0]
 800cc4c:	f003 020f 	and.w	r2, r3, #15
 800cc50:	68bb      	ldr	r3, [r7, #8]
 800cc52:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800cc56:	6878      	ldr	r0, [r7, #4]
 800cc58:	4613      	mov	r3, r2
 800cc5a:	009b      	lsls	r3, r3, #2
 800cc5c:	4413      	add	r3, r2
 800cc5e:	009b      	lsls	r3, r3, #2
 800cc60:	4403      	add	r3, r0
 800cc62:	3318      	adds	r3, #24
 800cc64:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800cc66:	4b09      	ldr	r3, [pc, #36]	; (800cc8c <USBD_CDC_TransmitPacket+0x7c>)
 800cc68:	7819      	ldrb	r1, [r3, #0]
 800cc6a:	68bb      	ldr	r3, [r7, #8]
 800cc6c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 800cc70:	68bb      	ldr	r3, [r7, #8]
 800cc72:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800cc76:	6878      	ldr	r0, [r7, #4]
 800cc78:	f002 fb71 	bl	800f35e <USBD_LL_Transmit>

    ret = USBD_OK;
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800cc80:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc82:	4618      	mov	r0, r3
 800cc84:	3710      	adds	r7, #16
 800cc86:	46bd      	mov	sp, r7
 800cc88:	bd80      	pop	{r7, pc}
 800cc8a:	bf00      	nop
 800cc8c:	24000097 	.word	0x24000097

0800cc90 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800cc90:	b580      	push	{r7, lr}
 800cc92:	b084      	sub	sp, #16
 800cc94:	af00      	add	r7, sp, #0
 800cc96:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	32b0      	adds	r2, #176	; 0xb0
 800cca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cca6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	32b0      	adds	r2, #176	; 0xb0
 800ccb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d101      	bne.n	800ccbe <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800ccba:	2303      	movs	r3, #3
 800ccbc:	e018      	b.n	800ccf0 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	7c1b      	ldrb	r3, [r3, #16]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d10a      	bne.n	800ccdc <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ccc6:	4b0c      	ldr	r3, [pc, #48]	; (800ccf8 <USBD_CDC_ReceivePacket+0x68>)
 800ccc8:	7819      	ldrb	r1, [r3, #0]
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ccd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ccd4:	6878      	ldr	r0, [r7, #4]
 800ccd6:	f002 fb63 	bl	800f3a0 <USBD_LL_PrepareReceive>
 800ccda:	e008      	b.n	800ccee <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800ccdc:	4b06      	ldr	r3, [pc, #24]	; (800ccf8 <USBD_CDC_ReceivePacket+0x68>)
 800ccde:	7819      	ldrb	r1, [r3, #0]
 800cce0:	68fb      	ldr	r3, [r7, #12]
 800cce2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cce6:	2340      	movs	r3, #64	; 0x40
 800cce8:	6878      	ldr	r0, [r7, #4]
 800ccea:	f002 fb59 	bl	800f3a0 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800ccee:	2300      	movs	r3, #0
}
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	3710      	adds	r7, #16
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	bd80      	pop	{r7, pc}
 800ccf8:	24000098 	.word	0x24000098

0800ccfc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800ccfc:	b580      	push	{r7, lr}
 800ccfe:	b086      	sub	sp, #24
 800cd00:	af00      	add	r7, sp, #0
 800cd02:	60f8      	str	r0, [r7, #12]
 800cd04:	60b9      	str	r1, [r7, #8]
 800cd06:	4613      	mov	r3, r2
 800cd08:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d101      	bne.n	800cd14 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800cd10:	2303      	movs	r3, #3
 800cd12:	e01f      	b.n	800cd54 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	2200      	movs	r2, #0
 800cd18:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800cd1c:	68fb      	ldr	r3, [r7, #12]
 800cd1e:	2200      	movs	r2, #0
 800cd20:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800cd24:	68fb      	ldr	r3, [r7, #12]
 800cd26:	2200      	movs	r2, #0
 800cd28:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800cd2c:	68bb      	ldr	r3, [r7, #8]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d003      	beq.n	800cd3a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800cd32:	68fb      	ldr	r3, [r7, #12]
 800cd34:	68ba      	ldr	r2, [r7, #8]
 800cd36:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	2201      	movs	r2, #1
 800cd3e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	79fa      	ldrb	r2, [r7, #7]
 800cd46:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800cd48:	68f8      	ldr	r0, [r7, #12]
 800cd4a:	f002 f9cf 	bl	800f0ec <USBD_LL_Init>
 800cd4e:	4603      	mov	r3, r0
 800cd50:	75fb      	strb	r3, [r7, #23]

  return ret;
 800cd52:	7dfb      	ldrb	r3, [r7, #23]
}
 800cd54:	4618      	mov	r0, r3
 800cd56:	3718      	adds	r7, #24
 800cd58:	46bd      	mov	sp, r7
 800cd5a:	bd80      	pop	{r7, pc}

0800cd5c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b084      	sub	sp, #16
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
 800cd64:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800cd66:	2300      	movs	r3, #0
 800cd68:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800cd6a:	683b      	ldr	r3, [r7, #0]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d101      	bne.n	800cd74 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800cd70:	2303      	movs	r3, #3
 800cd72:	e025      	b.n	800cdc0 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	683a      	ldr	r2, [r7, #0]
 800cd78:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	32ae      	adds	r2, #174	; 0xae
 800cd86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d00f      	beq.n	800cdb0 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800cd96:	687b      	ldr	r3, [r7, #4]
 800cd98:	32ae      	adds	r2, #174	; 0xae
 800cd9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cd9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cda0:	f107 020e 	add.w	r2, r7, #14
 800cda4:	4610      	mov	r0, r2
 800cda6:	4798      	blx	r3
 800cda8:	4602      	mov	r2, r0
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800cdb6:	1c5a      	adds	r2, r3, #1
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800cdbe:	2300      	movs	r3, #0
}
 800cdc0:	4618      	mov	r0, r3
 800cdc2:	3710      	adds	r7, #16
 800cdc4:	46bd      	mov	sp, r7
 800cdc6:	bd80      	pop	{r7, pc}

0800cdc8 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b082      	sub	sp, #8
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800cdd0:	6878      	ldr	r0, [r7, #4]
 800cdd2:	f002 f9db 	bl	800f18c <USBD_LL_Start>
 800cdd6:	4603      	mov	r3, r0
}
 800cdd8:	4618      	mov	r0, r3
 800cdda:	3708      	adds	r7, #8
 800cddc:	46bd      	mov	sp, r7
 800cdde:	bd80      	pop	{r7, pc}

0800cde0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800cde0:	b480      	push	{r7}
 800cde2:	b083      	sub	sp, #12
 800cde4:	af00      	add	r7, sp, #0
 800cde6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cde8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800cdea:	4618      	mov	r0, r3
 800cdec:	370c      	adds	r7, #12
 800cdee:	46bd      	mov	sp, r7
 800cdf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdf4:	4770      	bx	lr

0800cdf6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cdf6:	b580      	push	{r7, lr}
 800cdf8:	b084      	sub	sp, #16
 800cdfa:	af00      	add	r7, sp, #0
 800cdfc:	6078      	str	r0, [r7, #4]
 800cdfe:	460b      	mov	r3, r1
 800ce00:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ce02:	2300      	movs	r3, #0
 800ce04:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	d009      	beq.n	800ce24 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	78fa      	ldrb	r2, [r7, #3]
 800ce1a:	4611      	mov	r1, r2
 800ce1c:	6878      	ldr	r0, [r7, #4]
 800ce1e:	4798      	blx	r3
 800ce20:	4603      	mov	r3, r0
 800ce22:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ce24:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce26:	4618      	mov	r0, r3
 800ce28:	3710      	adds	r7, #16
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	bd80      	pop	{r7, pc}

0800ce2e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ce2e:	b580      	push	{r7, lr}
 800ce30:	b084      	sub	sp, #16
 800ce32:	af00      	add	r7, sp, #0
 800ce34:	6078      	str	r0, [r7, #4]
 800ce36:	460b      	mov	r3, r1
 800ce38:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ce44:	685b      	ldr	r3, [r3, #4]
 800ce46:	78fa      	ldrb	r2, [r7, #3]
 800ce48:	4611      	mov	r1, r2
 800ce4a:	6878      	ldr	r0, [r7, #4]
 800ce4c:	4798      	blx	r3
 800ce4e:	4603      	mov	r3, r0
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	d001      	beq.n	800ce58 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800ce54:	2303      	movs	r3, #3
 800ce56:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ce58:	7bfb      	ldrb	r3, [r7, #15]
}
 800ce5a:	4618      	mov	r0, r3
 800ce5c:	3710      	adds	r7, #16
 800ce5e:	46bd      	mov	sp, r7
 800ce60:	bd80      	pop	{r7, pc}

0800ce62 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800ce62:	b580      	push	{r7, lr}
 800ce64:	b084      	sub	sp, #16
 800ce66:	af00      	add	r7, sp, #0
 800ce68:	6078      	str	r0, [r7, #4]
 800ce6a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ce72:	6839      	ldr	r1, [r7, #0]
 800ce74:	4618      	mov	r0, r3
 800ce76:	f001 f938 	bl	800e0ea <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800ce7a:	687b      	ldr	r3, [r7, #4]
 800ce7c:	2201      	movs	r2, #1
 800ce7e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800ce88:	461a      	mov	r2, r3
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ce96:	f003 031f 	and.w	r3, r3, #31
 800ce9a:	2b02      	cmp	r3, #2
 800ce9c:	d01a      	beq.n	800ced4 <USBD_LL_SetupStage+0x72>
 800ce9e:	2b02      	cmp	r3, #2
 800cea0:	d822      	bhi.n	800cee8 <USBD_LL_SetupStage+0x86>
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d002      	beq.n	800ceac <USBD_LL_SetupStage+0x4a>
 800cea6:	2b01      	cmp	r3, #1
 800cea8:	d00a      	beq.n	800cec0 <USBD_LL_SetupStage+0x5e>
 800ceaa:	e01d      	b.n	800cee8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ceb2:	4619      	mov	r1, r3
 800ceb4:	6878      	ldr	r0, [r7, #4]
 800ceb6:	f000 fb65 	bl	800d584 <USBD_StdDevReq>
 800ceba:	4603      	mov	r3, r0
 800cebc:	73fb      	strb	r3, [r7, #15]
      break;
 800cebe:	e020      	b.n	800cf02 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800cec6:	4619      	mov	r1, r3
 800cec8:	6878      	ldr	r0, [r7, #4]
 800ceca:	f000 fbcd 	bl	800d668 <USBD_StdItfReq>
 800cece:	4603      	mov	r3, r0
 800ced0:	73fb      	strb	r3, [r7, #15]
      break;
 800ced2:	e016      	b.n	800cf02 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800ceda:	4619      	mov	r1, r3
 800cedc:	6878      	ldr	r0, [r7, #4]
 800cede:	f000 fc2f 	bl	800d740 <USBD_StdEPReq>
 800cee2:	4603      	mov	r3, r0
 800cee4:	73fb      	strb	r3, [r7, #15]
      break;
 800cee6:	e00c      	b.n	800cf02 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800ceee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800cef2:	b2db      	uxtb	r3, r3
 800cef4:	4619      	mov	r1, r3
 800cef6:	6878      	ldr	r0, [r7, #4]
 800cef8:	f002 f9a8 	bl	800f24c <USBD_LL_StallEP>
 800cefc:	4603      	mov	r3, r0
 800cefe:	73fb      	strb	r3, [r7, #15]
      break;
 800cf00:	bf00      	nop
  }

  return ret;
 800cf02:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf04:	4618      	mov	r0, r3
 800cf06:	3710      	adds	r7, #16
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	bd80      	pop	{r7, pc}

0800cf0c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800cf0c:	b580      	push	{r7, lr}
 800cf0e:	b086      	sub	sp, #24
 800cf10:	af00      	add	r7, sp, #0
 800cf12:	60f8      	str	r0, [r7, #12]
 800cf14:	460b      	mov	r3, r1
 800cf16:	607a      	str	r2, [r7, #4]
 800cf18:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800cf1e:	7afb      	ldrb	r3, [r7, #11]
 800cf20:	2b00      	cmp	r3, #0
 800cf22:	d16e      	bne.n	800d002 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800cf24:	68fb      	ldr	r3, [r7, #12]
 800cf26:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800cf2a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800cf2c:	68fb      	ldr	r3, [r7, #12]
 800cf2e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cf32:	2b03      	cmp	r3, #3
 800cf34:	f040 8098 	bne.w	800d068 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800cf38:	693b      	ldr	r3, [r7, #16]
 800cf3a:	689a      	ldr	r2, [r3, #8]
 800cf3c:	693b      	ldr	r3, [r7, #16]
 800cf3e:	68db      	ldr	r3, [r3, #12]
 800cf40:	429a      	cmp	r2, r3
 800cf42:	d913      	bls.n	800cf6c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800cf44:	693b      	ldr	r3, [r7, #16]
 800cf46:	689a      	ldr	r2, [r3, #8]
 800cf48:	693b      	ldr	r3, [r7, #16]
 800cf4a:	68db      	ldr	r3, [r3, #12]
 800cf4c:	1ad2      	subs	r2, r2, r3
 800cf4e:	693b      	ldr	r3, [r7, #16]
 800cf50:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800cf52:	693b      	ldr	r3, [r7, #16]
 800cf54:	68da      	ldr	r2, [r3, #12]
 800cf56:	693b      	ldr	r3, [r7, #16]
 800cf58:	689b      	ldr	r3, [r3, #8]
 800cf5a:	4293      	cmp	r3, r2
 800cf5c:	bf28      	it	cs
 800cf5e:	4613      	movcs	r3, r2
 800cf60:	461a      	mov	r2, r3
 800cf62:	6879      	ldr	r1, [r7, #4]
 800cf64:	68f8      	ldr	r0, [r7, #12]
 800cf66:	f001 f9b4 	bl	800e2d2 <USBD_CtlContinueRx>
 800cf6a:	e07d      	b.n	800d068 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800cf72:	f003 031f 	and.w	r3, r3, #31
 800cf76:	2b02      	cmp	r3, #2
 800cf78:	d014      	beq.n	800cfa4 <USBD_LL_DataOutStage+0x98>
 800cf7a:	2b02      	cmp	r3, #2
 800cf7c:	d81d      	bhi.n	800cfba <USBD_LL_DataOutStage+0xae>
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d002      	beq.n	800cf88 <USBD_LL_DataOutStage+0x7c>
 800cf82:	2b01      	cmp	r3, #1
 800cf84:	d003      	beq.n	800cf8e <USBD_LL_DataOutStage+0x82>
 800cf86:	e018      	b.n	800cfba <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800cf88:	2300      	movs	r3, #0
 800cf8a:	75bb      	strb	r3, [r7, #22]
            break;
 800cf8c:	e018      	b.n	800cfc0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800cf94:	b2db      	uxtb	r3, r3
 800cf96:	4619      	mov	r1, r3
 800cf98:	68f8      	ldr	r0, [r7, #12]
 800cf9a:	f000 fa64 	bl	800d466 <USBD_CoreFindIF>
 800cf9e:	4603      	mov	r3, r0
 800cfa0:	75bb      	strb	r3, [r7, #22]
            break;
 800cfa2:	e00d      	b.n	800cfc0 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800cfaa:	b2db      	uxtb	r3, r3
 800cfac:	4619      	mov	r1, r3
 800cfae:	68f8      	ldr	r0, [r7, #12]
 800cfb0:	f000 fa66 	bl	800d480 <USBD_CoreFindEP>
 800cfb4:	4603      	mov	r3, r0
 800cfb6:	75bb      	strb	r3, [r7, #22]
            break;
 800cfb8:	e002      	b.n	800cfc0 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800cfba:	2300      	movs	r3, #0
 800cfbc:	75bb      	strb	r3, [r7, #22]
            break;
 800cfbe:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800cfc0:	7dbb      	ldrb	r3, [r7, #22]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d119      	bne.n	800cffa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800cfcc:	b2db      	uxtb	r3, r3
 800cfce:	2b03      	cmp	r3, #3
 800cfd0:	d113      	bne.n	800cffa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800cfd2:	7dba      	ldrb	r2, [r7, #22]
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	32ae      	adds	r2, #174	; 0xae
 800cfd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cfdc:	691b      	ldr	r3, [r3, #16]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d00b      	beq.n	800cffa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800cfe2:	7dba      	ldrb	r2, [r7, #22]
 800cfe4:	68fb      	ldr	r3, [r7, #12]
 800cfe6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800cfea:	7dba      	ldrb	r2, [r7, #22]
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	32ae      	adds	r2, #174	; 0xae
 800cff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cff4:	691b      	ldr	r3, [r3, #16]
 800cff6:	68f8      	ldr	r0, [r7, #12]
 800cff8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800cffa:	68f8      	ldr	r0, [r7, #12]
 800cffc:	f001 f97a 	bl	800e2f4 <USBD_CtlSendStatus>
 800d000:	e032      	b.n	800d068 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800d002:	7afb      	ldrb	r3, [r7, #11]
 800d004:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d008:	b2db      	uxtb	r3, r3
 800d00a:	4619      	mov	r1, r3
 800d00c:	68f8      	ldr	r0, [r7, #12]
 800d00e:	f000 fa37 	bl	800d480 <USBD_CoreFindEP>
 800d012:	4603      	mov	r3, r0
 800d014:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d016:	7dbb      	ldrb	r3, [r7, #22]
 800d018:	2bff      	cmp	r3, #255	; 0xff
 800d01a:	d025      	beq.n	800d068 <USBD_LL_DataOutStage+0x15c>
 800d01c:	7dbb      	ldrb	r3, [r7, #22]
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d122      	bne.n	800d068 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d028:	b2db      	uxtb	r3, r3
 800d02a:	2b03      	cmp	r3, #3
 800d02c:	d117      	bne.n	800d05e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800d02e:	7dba      	ldrb	r2, [r7, #22]
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	32ae      	adds	r2, #174	; 0xae
 800d034:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d038:	699b      	ldr	r3, [r3, #24]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d00f      	beq.n	800d05e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800d03e:	7dba      	ldrb	r2, [r7, #22]
 800d040:	68fb      	ldr	r3, [r7, #12]
 800d042:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800d046:	7dba      	ldrb	r2, [r7, #22]
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	32ae      	adds	r2, #174	; 0xae
 800d04c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d050:	699b      	ldr	r3, [r3, #24]
 800d052:	7afa      	ldrb	r2, [r7, #11]
 800d054:	4611      	mov	r1, r2
 800d056:	68f8      	ldr	r0, [r7, #12]
 800d058:	4798      	blx	r3
 800d05a:	4603      	mov	r3, r0
 800d05c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800d05e:	7dfb      	ldrb	r3, [r7, #23]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d001      	beq.n	800d068 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800d064:	7dfb      	ldrb	r3, [r7, #23]
 800d066:	e000      	b.n	800d06a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800d068:	2300      	movs	r3, #0
}
 800d06a:	4618      	mov	r0, r3
 800d06c:	3718      	adds	r7, #24
 800d06e:	46bd      	mov	sp, r7
 800d070:	bd80      	pop	{r7, pc}

0800d072 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800d072:	b580      	push	{r7, lr}
 800d074:	b086      	sub	sp, #24
 800d076:	af00      	add	r7, sp, #0
 800d078:	60f8      	str	r0, [r7, #12]
 800d07a:	460b      	mov	r3, r1
 800d07c:	607a      	str	r2, [r7, #4]
 800d07e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800d080:	7afb      	ldrb	r3, [r7, #11]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d16f      	bne.n	800d166 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	3314      	adds	r3, #20
 800d08a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800d092:	2b02      	cmp	r3, #2
 800d094:	d15a      	bne.n	800d14c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800d096:	693b      	ldr	r3, [r7, #16]
 800d098:	689a      	ldr	r2, [r3, #8]
 800d09a:	693b      	ldr	r3, [r7, #16]
 800d09c:	68db      	ldr	r3, [r3, #12]
 800d09e:	429a      	cmp	r2, r3
 800d0a0:	d914      	bls.n	800d0cc <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800d0a2:	693b      	ldr	r3, [r7, #16]
 800d0a4:	689a      	ldr	r2, [r3, #8]
 800d0a6:	693b      	ldr	r3, [r7, #16]
 800d0a8:	68db      	ldr	r3, [r3, #12]
 800d0aa:	1ad2      	subs	r2, r2, r3
 800d0ac:	693b      	ldr	r3, [r7, #16]
 800d0ae:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800d0b0:	693b      	ldr	r3, [r7, #16]
 800d0b2:	689b      	ldr	r3, [r3, #8]
 800d0b4:	461a      	mov	r2, r3
 800d0b6:	6879      	ldr	r1, [r7, #4]
 800d0b8:	68f8      	ldr	r0, [r7, #12]
 800d0ba:	f001 f8dc 	bl	800e276 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d0be:	2300      	movs	r3, #0
 800d0c0:	2200      	movs	r2, #0
 800d0c2:	2100      	movs	r1, #0
 800d0c4:	68f8      	ldr	r0, [r7, #12]
 800d0c6:	f002 f96b 	bl	800f3a0 <USBD_LL_PrepareReceive>
 800d0ca:	e03f      	b.n	800d14c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800d0cc:	693b      	ldr	r3, [r7, #16]
 800d0ce:	68da      	ldr	r2, [r3, #12]
 800d0d0:	693b      	ldr	r3, [r7, #16]
 800d0d2:	689b      	ldr	r3, [r3, #8]
 800d0d4:	429a      	cmp	r2, r3
 800d0d6:	d11c      	bne.n	800d112 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800d0d8:	693b      	ldr	r3, [r7, #16]
 800d0da:	685a      	ldr	r2, [r3, #4]
 800d0dc:	693b      	ldr	r3, [r7, #16]
 800d0de:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800d0e0:	429a      	cmp	r2, r3
 800d0e2:	d316      	bcc.n	800d112 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800d0e4:	693b      	ldr	r3, [r7, #16]
 800d0e6:	685a      	ldr	r2, [r3, #4]
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800d0ee:	429a      	cmp	r2, r3
 800d0f0:	d20f      	bcs.n	800d112 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d0f2:	2200      	movs	r2, #0
 800d0f4:	2100      	movs	r1, #0
 800d0f6:	68f8      	ldr	r0, [r7, #12]
 800d0f8:	f001 f8bd 	bl	800e276 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	2200      	movs	r2, #0
 800d100:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800d104:	2300      	movs	r3, #0
 800d106:	2200      	movs	r2, #0
 800d108:	2100      	movs	r1, #0
 800d10a:	68f8      	ldr	r0, [r7, #12]
 800d10c:	f002 f948 	bl	800f3a0 <USBD_LL_PrepareReceive>
 800d110:	e01c      	b.n	800d14c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d118:	b2db      	uxtb	r3, r3
 800d11a:	2b03      	cmp	r3, #3
 800d11c:	d10f      	bne.n	800d13e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800d11e:	68fb      	ldr	r3, [r7, #12]
 800d120:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d124:	68db      	ldr	r3, [r3, #12]
 800d126:	2b00      	cmp	r3, #0
 800d128:	d009      	beq.n	800d13e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	2200      	movs	r2, #0
 800d12e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d138:	68db      	ldr	r3, [r3, #12]
 800d13a:	68f8      	ldr	r0, [r7, #12]
 800d13c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800d13e:	2180      	movs	r1, #128	; 0x80
 800d140:	68f8      	ldr	r0, [r7, #12]
 800d142:	f002 f883 	bl	800f24c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800d146:	68f8      	ldr	r0, [r7, #12]
 800d148:	f001 f8e7 	bl	800e31a <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800d14c:	68fb      	ldr	r3, [r7, #12]
 800d14e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800d152:	2b00      	cmp	r3, #0
 800d154:	d03a      	beq.n	800d1cc <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800d156:	68f8      	ldr	r0, [r7, #12]
 800d158:	f7ff fe42 	bl	800cde0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	2200      	movs	r2, #0
 800d160:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800d164:	e032      	b.n	800d1cc <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800d166:	7afb      	ldrb	r3, [r7, #11]
 800d168:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800d16c:	b2db      	uxtb	r3, r3
 800d16e:	4619      	mov	r1, r3
 800d170:	68f8      	ldr	r0, [r7, #12]
 800d172:	f000 f985 	bl	800d480 <USBD_CoreFindEP>
 800d176:	4603      	mov	r3, r0
 800d178:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d17a:	7dfb      	ldrb	r3, [r7, #23]
 800d17c:	2bff      	cmp	r3, #255	; 0xff
 800d17e:	d025      	beq.n	800d1cc <USBD_LL_DataInStage+0x15a>
 800d180:	7dfb      	ldrb	r3, [r7, #23]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d122      	bne.n	800d1cc <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d18c:	b2db      	uxtb	r3, r3
 800d18e:	2b03      	cmp	r3, #3
 800d190:	d11c      	bne.n	800d1cc <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800d192:	7dfa      	ldrb	r2, [r7, #23]
 800d194:	68fb      	ldr	r3, [r7, #12]
 800d196:	32ae      	adds	r2, #174	; 0xae
 800d198:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d19c:	695b      	ldr	r3, [r3, #20]
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d014      	beq.n	800d1cc <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800d1a2:	7dfa      	ldrb	r2, [r7, #23]
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800d1aa:	7dfa      	ldrb	r2, [r7, #23]
 800d1ac:	68fb      	ldr	r3, [r7, #12]
 800d1ae:	32ae      	adds	r2, #174	; 0xae
 800d1b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d1b4:	695b      	ldr	r3, [r3, #20]
 800d1b6:	7afa      	ldrb	r2, [r7, #11]
 800d1b8:	4611      	mov	r1, r2
 800d1ba:	68f8      	ldr	r0, [r7, #12]
 800d1bc:	4798      	blx	r3
 800d1be:	4603      	mov	r3, r0
 800d1c0:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800d1c2:	7dbb      	ldrb	r3, [r7, #22]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d001      	beq.n	800d1cc <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800d1c8:	7dbb      	ldrb	r3, [r7, #22]
 800d1ca:	e000      	b.n	800d1ce <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800d1cc:	2300      	movs	r3, #0
}
 800d1ce:	4618      	mov	r0, r3
 800d1d0:	3718      	adds	r7, #24
 800d1d2:	46bd      	mov	sp, r7
 800d1d4:	bd80      	pop	{r7, pc}

0800d1d6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800d1d6:	b580      	push	{r7, lr}
 800d1d8:	b084      	sub	sp, #16
 800d1da:	af00      	add	r7, sp, #0
 800d1dc:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800d1de:	2300      	movs	r3, #0
 800d1e0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	2201      	movs	r2, #1
 800d1e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	2200      	movs	r2, #0
 800d1ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	2200      	movs	r2, #0
 800d1f6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	2200      	movs	r2, #0
 800d204:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d014      	beq.n	800d23c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d218:	685b      	ldr	r3, [r3, #4]
 800d21a:	2b00      	cmp	r3, #0
 800d21c:	d00e      	beq.n	800d23c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d224:	685b      	ldr	r3, [r3, #4]
 800d226:	687a      	ldr	r2, [r7, #4]
 800d228:	6852      	ldr	r2, [r2, #4]
 800d22a:	b2d2      	uxtb	r2, r2
 800d22c:	4611      	mov	r1, r2
 800d22e:	6878      	ldr	r0, [r7, #4]
 800d230:	4798      	blx	r3
 800d232:	4603      	mov	r3, r0
 800d234:	2b00      	cmp	r3, #0
 800d236:	d001      	beq.n	800d23c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800d238:	2303      	movs	r3, #3
 800d23a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d23c:	2340      	movs	r3, #64	; 0x40
 800d23e:	2200      	movs	r2, #0
 800d240:	2100      	movs	r1, #0
 800d242:	6878      	ldr	r0, [r7, #4]
 800d244:	f001 ffbd 	bl	800f1c2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	2201      	movs	r2, #1
 800d24c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	2240      	movs	r2, #64	; 0x40
 800d254:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d258:	2340      	movs	r3, #64	; 0x40
 800d25a:	2200      	movs	r2, #0
 800d25c:	2180      	movs	r1, #128	; 0x80
 800d25e:	6878      	ldr	r0, [r7, #4]
 800d260:	f001 ffaf 	bl	800f1c2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	2201      	movs	r2, #1
 800d268:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	2240      	movs	r2, #64	; 0x40
 800d26e:	621a      	str	r2, [r3, #32]

  return ret;
 800d270:	7bfb      	ldrb	r3, [r7, #15]
}
 800d272:	4618      	mov	r0, r3
 800d274:	3710      	adds	r7, #16
 800d276:	46bd      	mov	sp, r7
 800d278:	bd80      	pop	{r7, pc}

0800d27a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800d27a:	b480      	push	{r7}
 800d27c:	b083      	sub	sp, #12
 800d27e:	af00      	add	r7, sp, #0
 800d280:	6078      	str	r0, [r7, #4]
 800d282:	460b      	mov	r3, r1
 800d284:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	78fa      	ldrb	r2, [r7, #3]
 800d28a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800d28c:	2300      	movs	r3, #0
}
 800d28e:	4618      	mov	r0, r3
 800d290:	370c      	adds	r7, #12
 800d292:	46bd      	mov	sp, r7
 800d294:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d298:	4770      	bx	lr

0800d29a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800d29a:	b480      	push	{r7}
 800d29c:	b083      	sub	sp, #12
 800d29e:	af00      	add	r7, sp, #0
 800d2a0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2a8:	b2db      	uxtb	r3, r3
 800d2aa:	2b04      	cmp	r3, #4
 800d2ac:	d006      	beq.n	800d2bc <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2b4:	b2da      	uxtb	r2, r3
 800d2b6:	687b      	ldr	r3, [r7, #4]
 800d2b8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	2204      	movs	r2, #4
 800d2c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800d2c4:	2300      	movs	r3, #0
}
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	370c      	adds	r7, #12
 800d2ca:	46bd      	mov	sp, r7
 800d2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d0:	4770      	bx	lr

0800d2d2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800d2d2:	b480      	push	{r7}
 800d2d4:	b083      	sub	sp, #12
 800d2d6:	af00      	add	r7, sp, #0
 800d2d8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d2e0:	b2db      	uxtb	r3, r3
 800d2e2:	2b04      	cmp	r3, #4
 800d2e4:	d106      	bne.n	800d2f4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800d2ec:	b2da      	uxtb	r2, r3
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800d2f4:	2300      	movs	r3, #0
}
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	370c      	adds	r7, #12
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d300:	4770      	bx	lr

0800d302 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800d302:	b580      	push	{r7, lr}
 800d304:	b082      	sub	sp, #8
 800d306:	af00      	add	r7, sp, #0
 800d308:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d310:	b2db      	uxtb	r3, r3
 800d312:	2b03      	cmp	r3, #3
 800d314:	d110      	bne.n	800d338 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d31c:	2b00      	cmp	r3, #0
 800d31e:	d00b      	beq.n	800d338 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d326:	69db      	ldr	r3, [r3, #28]
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d005      	beq.n	800d338 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d332:	69db      	ldr	r3, [r3, #28]
 800d334:	6878      	ldr	r0, [r7, #4]
 800d336:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800d338:	2300      	movs	r3, #0
}
 800d33a:	4618      	mov	r0, r3
 800d33c:	3708      	adds	r7, #8
 800d33e:	46bd      	mov	sp, r7
 800d340:	bd80      	pop	{r7, pc}

0800d342 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800d342:	b580      	push	{r7, lr}
 800d344:	b082      	sub	sp, #8
 800d346:	af00      	add	r7, sp, #0
 800d348:	6078      	str	r0, [r7, #4]
 800d34a:	460b      	mov	r3, r1
 800d34c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	32ae      	adds	r2, #174	; 0xae
 800d358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d101      	bne.n	800d364 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800d360:	2303      	movs	r3, #3
 800d362:	e01c      	b.n	800d39e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d36a:	b2db      	uxtb	r3, r3
 800d36c:	2b03      	cmp	r3, #3
 800d36e:	d115      	bne.n	800d39c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	32ae      	adds	r2, #174	; 0xae
 800d37a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d37e:	6a1b      	ldr	r3, [r3, #32]
 800d380:	2b00      	cmp	r3, #0
 800d382:	d00b      	beq.n	800d39c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800d384:	687b      	ldr	r3, [r7, #4]
 800d386:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	32ae      	adds	r2, #174	; 0xae
 800d38e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d392:	6a1b      	ldr	r3, [r3, #32]
 800d394:	78fa      	ldrb	r2, [r7, #3]
 800d396:	4611      	mov	r1, r2
 800d398:	6878      	ldr	r0, [r7, #4]
 800d39a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d39c:	2300      	movs	r3, #0
}
 800d39e:	4618      	mov	r0, r3
 800d3a0:	3708      	adds	r7, #8
 800d3a2:	46bd      	mov	sp, r7
 800d3a4:	bd80      	pop	{r7, pc}

0800d3a6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800d3a6:	b580      	push	{r7, lr}
 800d3a8:	b082      	sub	sp, #8
 800d3aa:	af00      	add	r7, sp, #0
 800d3ac:	6078      	str	r0, [r7, #4]
 800d3ae:	460b      	mov	r3, r1
 800d3b0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800d3b2:	687b      	ldr	r3, [r7, #4]
 800d3b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	32ae      	adds	r2, #174	; 0xae
 800d3bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3c0:	2b00      	cmp	r3, #0
 800d3c2:	d101      	bne.n	800d3c8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800d3c4:	2303      	movs	r3, #3
 800d3c6:	e01c      	b.n	800d402 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d3ce:	b2db      	uxtb	r3, r3
 800d3d0:	2b03      	cmp	r3, #3
 800d3d2:	d115      	bne.n	800d400 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800d3d4:	687b      	ldr	r3, [r7, #4]
 800d3d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	32ae      	adds	r2, #174	; 0xae
 800d3de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3e4:	2b00      	cmp	r3, #0
 800d3e6:	d00b      	beq.n	800d400 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	32ae      	adds	r2, #174	; 0xae
 800d3f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d3f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3f8:	78fa      	ldrb	r2, [r7, #3]
 800d3fa:	4611      	mov	r1, r2
 800d3fc:	6878      	ldr	r0, [r7, #4]
 800d3fe:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800d400:	2300      	movs	r3, #0
}
 800d402:	4618      	mov	r0, r3
 800d404:	3708      	adds	r7, #8
 800d406:	46bd      	mov	sp, r7
 800d408:	bd80      	pop	{r7, pc}

0800d40a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800d40a:	b480      	push	{r7}
 800d40c:	b083      	sub	sp, #12
 800d40e:	af00      	add	r7, sp, #0
 800d410:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d412:	2300      	movs	r3, #0
}
 800d414:	4618      	mov	r0, r3
 800d416:	370c      	adds	r7, #12
 800d418:	46bd      	mov	sp, r7
 800d41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d41e:	4770      	bx	lr

0800d420 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800d420:	b580      	push	{r7, lr}
 800d422:	b084      	sub	sp, #16
 800d424:	af00      	add	r7, sp, #0
 800d426:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800d428:	2300      	movs	r3, #0
 800d42a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	2201      	movs	r2, #1
 800d430:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800d434:	687b      	ldr	r3, [r7, #4]
 800d436:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d00e      	beq.n	800d45c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800d444:	685b      	ldr	r3, [r3, #4]
 800d446:	687a      	ldr	r2, [r7, #4]
 800d448:	6852      	ldr	r2, [r2, #4]
 800d44a:	b2d2      	uxtb	r2, r2
 800d44c:	4611      	mov	r1, r2
 800d44e:	6878      	ldr	r0, [r7, #4]
 800d450:	4798      	blx	r3
 800d452:	4603      	mov	r3, r0
 800d454:	2b00      	cmp	r3, #0
 800d456:	d001      	beq.n	800d45c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800d458:	2303      	movs	r3, #3
 800d45a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800d45c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d45e:	4618      	mov	r0, r3
 800d460:	3710      	adds	r7, #16
 800d462:	46bd      	mov	sp, r7
 800d464:	bd80      	pop	{r7, pc}

0800d466 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d466:	b480      	push	{r7}
 800d468:	b083      	sub	sp, #12
 800d46a:	af00      	add	r7, sp, #0
 800d46c:	6078      	str	r0, [r7, #4]
 800d46e:	460b      	mov	r3, r1
 800d470:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d472:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d474:	4618      	mov	r0, r3
 800d476:	370c      	adds	r7, #12
 800d478:	46bd      	mov	sp, r7
 800d47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d47e:	4770      	bx	lr

0800d480 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800d480:	b480      	push	{r7}
 800d482:	b083      	sub	sp, #12
 800d484:	af00      	add	r7, sp, #0
 800d486:	6078      	str	r0, [r7, #4]
 800d488:	460b      	mov	r3, r1
 800d48a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800d48c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800d48e:	4618      	mov	r0, r3
 800d490:	370c      	adds	r7, #12
 800d492:	46bd      	mov	sp, r7
 800d494:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d498:	4770      	bx	lr

0800d49a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800d49a:	b580      	push	{r7, lr}
 800d49c:	b086      	sub	sp, #24
 800d49e:	af00      	add	r7, sp, #0
 800d4a0:	6078      	str	r0, [r7, #4]
 800d4a2:	460b      	mov	r3, r1
 800d4a4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800d4ae:	2300      	movs	r3, #0
 800d4b0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800d4b2:	68fb      	ldr	r3, [r7, #12]
 800d4b4:	885b      	ldrh	r3, [r3, #2]
 800d4b6:	b29a      	uxth	r2, r3
 800d4b8:	68fb      	ldr	r3, [r7, #12]
 800d4ba:	781b      	ldrb	r3, [r3, #0]
 800d4bc:	b29b      	uxth	r3, r3
 800d4be:	429a      	cmp	r2, r3
 800d4c0:	d920      	bls.n	800d504 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800d4c2:	68fb      	ldr	r3, [r7, #12]
 800d4c4:	781b      	ldrb	r3, [r3, #0]
 800d4c6:	b29b      	uxth	r3, r3
 800d4c8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800d4ca:	e013      	b.n	800d4f4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800d4cc:	f107 030a 	add.w	r3, r7, #10
 800d4d0:	4619      	mov	r1, r3
 800d4d2:	6978      	ldr	r0, [r7, #20]
 800d4d4:	f000 f81b 	bl	800d50e <USBD_GetNextDesc>
 800d4d8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d4da:	697b      	ldr	r3, [r7, #20]
 800d4dc:	785b      	ldrb	r3, [r3, #1]
 800d4de:	2b05      	cmp	r3, #5
 800d4e0:	d108      	bne.n	800d4f4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800d4e2:	697b      	ldr	r3, [r7, #20]
 800d4e4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800d4e6:	693b      	ldr	r3, [r7, #16]
 800d4e8:	789b      	ldrb	r3, [r3, #2]
 800d4ea:	78fa      	ldrb	r2, [r7, #3]
 800d4ec:	429a      	cmp	r2, r3
 800d4ee:	d008      	beq.n	800d502 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800d4f0:	2300      	movs	r3, #0
 800d4f2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	885b      	ldrh	r3, [r3, #2]
 800d4f8:	b29a      	uxth	r2, r3
 800d4fa:	897b      	ldrh	r3, [r7, #10]
 800d4fc:	429a      	cmp	r2, r3
 800d4fe:	d8e5      	bhi.n	800d4cc <USBD_GetEpDesc+0x32>
 800d500:	e000      	b.n	800d504 <USBD_GetEpDesc+0x6a>
          break;
 800d502:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800d504:	693b      	ldr	r3, [r7, #16]
}
 800d506:	4618      	mov	r0, r3
 800d508:	3718      	adds	r7, #24
 800d50a:	46bd      	mov	sp, r7
 800d50c:	bd80      	pop	{r7, pc}

0800d50e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800d50e:	b480      	push	{r7}
 800d510:	b085      	sub	sp, #20
 800d512:	af00      	add	r7, sp, #0
 800d514:	6078      	str	r0, [r7, #4]
 800d516:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800d518:	687b      	ldr	r3, [r7, #4]
 800d51a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800d51c:	683b      	ldr	r3, [r7, #0]
 800d51e:	881a      	ldrh	r2, [r3, #0]
 800d520:	68fb      	ldr	r3, [r7, #12]
 800d522:	781b      	ldrb	r3, [r3, #0]
 800d524:	b29b      	uxth	r3, r3
 800d526:	4413      	add	r3, r2
 800d528:	b29a      	uxth	r2, r3
 800d52a:	683b      	ldr	r3, [r7, #0]
 800d52c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	781b      	ldrb	r3, [r3, #0]
 800d532:	461a      	mov	r2, r3
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	4413      	add	r3, r2
 800d538:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800d53a:	68fb      	ldr	r3, [r7, #12]
}
 800d53c:	4618      	mov	r0, r3
 800d53e:	3714      	adds	r7, #20
 800d540:	46bd      	mov	sp, r7
 800d542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d546:	4770      	bx	lr

0800d548 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800d548:	b480      	push	{r7}
 800d54a:	b087      	sub	sp, #28
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800d554:	697b      	ldr	r3, [r7, #20]
 800d556:	781b      	ldrb	r3, [r3, #0]
 800d558:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800d55a:	697b      	ldr	r3, [r7, #20]
 800d55c:	3301      	adds	r3, #1
 800d55e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800d560:	697b      	ldr	r3, [r7, #20]
 800d562:	781b      	ldrb	r3, [r3, #0]
 800d564:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800d566:	8a3b      	ldrh	r3, [r7, #16]
 800d568:	021b      	lsls	r3, r3, #8
 800d56a:	b21a      	sxth	r2, r3
 800d56c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800d570:	4313      	orrs	r3, r2
 800d572:	b21b      	sxth	r3, r3
 800d574:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800d576:	89fb      	ldrh	r3, [r7, #14]
}
 800d578:	4618      	mov	r0, r3
 800d57a:	371c      	adds	r7, #28
 800d57c:	46bd      	mov	sp, r7
 800d57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d582:	4770      	bx	lr

0800d584 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d584:	b580      	push	{r7, lr}
 800d586:	b084      	sub	sp, #16
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
 800d58c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d58e:	2300      	movs	r3, #0
 800d590:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d592:	683b      	ldr	r3, [r7, #0]
 800d594:	781b      	ldrb	r3, [r3, #0]
 800d596:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d59a:	2b40      	cmp	r3, #64	; 0x40
 800d59c:	d005      	beq.n	800d5aa <USBD_StdDevReq+0x26>
 800d59e:	2b40      	cmp	r3, #64	; 0x40
 800d5a0:	d857      	bhi.n	800d652 <USBD_StdDevReq+0xce>
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d00f      	beq.n	800d5c6 <USBD_StdDevReq+0x42>
 800d5a6:	2b20      	cmp	r3, #32
 800d5a8:	d153      	bne.n	800d652 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	32ae      	adds	r2, #174	; 0xae
 800d5b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d5b8:	689b      	ldr	r3, [r3, #8]
 800d5ba:	6839      	ldr	r1, [r7, #0]
 800d5bc:	6878      	ldr	r0, [r7, #4]
 800d5be:	4798      	blx	r3
 800d5c0:	4603      	mov	r3, r0
 800d5c2:	73fb      	strb	r3, [r7, #15]
      break;
 800d5c4:	e04a      	b.n	800d65c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d5c6:	683b      	ldr	r3, [r7, #0]
 800d5c8:	785b      	ldrb	r3, [r3, #1]
 800d5ca:	2b09      	cmp	r3, #9
 800d5cc:	d83b      	bhi.n	800d646 <USBD_StdDevReq+0xc2>
 800d5ce:	a201      	add	r2, pc, #4	; (adr r2, 800d5d4 <USBD_StdDevReq+0x50>)
 800d5d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5d4:	0800d629 	.word	0x0800d629
 800d5d8:	0800d63d 	.word	0x0800d63d
 800d5dc:	0800d647 	.word	0x0800d647
 800d5e0:	0800d633 	.word	0x0800d633
 800d5e4:	0800d647 	.word	0x0800d647
 800d5e8:	0800d607 	.word	0x0800d607
 800d5ec:	0800d5fd 	.word	0x0800d5fd
 800d5f0:	0800d647 	.word	0x0800d647
 800d5f4:	0800d61f 	.word	0x0800d61f
 800d5f8:	0800d611 	.word	0x0800d611
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800d5fc:	6839      	ldr	r1, [r7, #0]
 800d5fe:	6878      	ldr	r0, [r7, #4]
 800d600:	f000 fa3c 	bl	800da7c <USBD_GetDescriptor>
          break;
 800d604:	e024      	b.n	800d650 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800d606:	6839      	ldr	r1, [r7, #0]
 800d608:	6878      	ldr	r0, [r7, #4]
 800d60a:	f000 fbcb 	bl	800dda4 <USBD_SetAddress>
          break;
 800d60e:	e01f      	b.n	800d650 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800d610:	6839      	ldr	r1, [r7, #0]
 800d612:	6878      	ldr	r0, [r7, #4]
 800d614:	f000 fc0a 	bl	800de2c <USBD_SetConfig>
 800d618:	4603      	mov	r3, r0
 800d61a:	73fb      	strb	r3, [r7, #15]
          break;
 800d61c:	e018      	b.n	800d650 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800d61e:	6839      	ldr	r1, [r7, #0]
 800d620:	6878      	ldr	r0, [r7, #4]
 800d622:	f000 fcad 	bl	800df80 <USBD_GetConfig>
          break;
 800d626:	e013      	b.n	800d650 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800d628:	6839      	ldr	r1, [r7, #0]
 800d62a:	6878      	ldr	r0, [r7, #4]
 800d62c:	f000 fcde 	bl	800dfec <USBD_GetStatus>
          break;
 800d630:	e00e      	b.n	800d650 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800d632:	6839      	ldr	r1, [r7, #0]
 800d634:	6878      	ldr	r0, [r7, #4]
 800d636:	f000 fd0d 	bl	800e054 <USBD_SetFeature>
          break;
 800d63a:	e009      	b.n	800d650 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800d63c:	6839      	ldr	r1, [r7, #0]
 800d63e:	6878      	ldr	r0, [r7, #4]
 800d640:	f000 fd31 	bl	800e0a6 <USBD_ClrFeature>
          break;
 800d644:	e004      	b.n	800d650 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800d646:	6839      	ldr	r1, [r7, #0]
 800d648:	6878      	ldr	r0, [r7, #4]
 800d64a:	f000 fd88 	bl	800e15e <USBD_CtlError>
          break;
 800d64e:	bf00      	nop
      }
      break;
 800d650:	e004      	b.n	800d65c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800d652:	6839      	ldr	r1, [r7, #0]
 800d654:	6878      	ldr	r0, [r7, #4]
 800d656:	f000 fd82 	bl	800e15e <USBD_CtlError>
      break;
 800d65a:	bf00      	nop
  }

  return ret;
 800d65c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d65e:	4618      	mov	r0, r3
 800d660:	3710      	adds	r7, #16
 800d662:	46bd      	mov	sp, r7
 800d664:	bd80      	pop	{r7, pc}
 800d666:	bf00      	nop

0800d668 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d668:	b580      	push	{r7, lr}
 800d66a:	b084      	sub	sp, #16
 800d66c:	af00      	add	r7, sp, #0
 800d66e:	6078      	str	r0, [r7, #4]
 800d670:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d672:	2300      	movs	r3, #0
 800d674:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d676:	683b      	ldr	r3, [r7, #0]
 800d678:	781b      	ldrb	r3, [r3, #0]
 800d67a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d67e:	2b40      	cmp	r3, #64	; 0x40
 800d680:	d005      	beq.n	800d68e <USBD_StdItfReq+0x26>
 800d682:	2b40      	cmp	r3, #64	; 0x40
 800d684:	d852      	bhi.n	800d72c <USBD_StdItfReq+0xc4>
 800d686:	2b00      	cmp	r3, #0
 800d688:	d001      	beq.n	800d68e <USBD_StdItfReq+0x26>
 800d68a:	2b20      	cmp	r3, #32
 800d68c:	d14e      	bne.n	800d72c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d694:	b2db      	uxtb	r3, r3
 800d696:	3b01      	subs	r3, #1
 800d698:	2b02      	cmp	r3, #2
 800d69a:	d840      	bhi.n	800d71e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d69c:	683b      	ldr	r3, [r7, #0]
 800d69e:	889b      	ldrh	r3, [r3, #4]
 800d6a0:	b2db      	uxtb	r3, r3
 800d6a2:	2b01      	cmp	r3, #1
 800d6a4:	d836      	bhi.n	800d714 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800d6a6:	683b      	ldr	r3, [r7, #0]
 800d6a8:	889b      	ldrh	r3, [r3, #4]
 800d6aa:	b2db      	uxtb	r3, r3
 800d6ac:	4619      	mov	r1, r3
 800d6ae:	6878      	ldr	r0, [r7, #4]
 800d6b0:	f7ff fed9 	bl	800d466 <USBD_CoreFindIF>
 800d6b4:	4603      	mov	r3, r0
 800d6b6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d6b8:	7bbb      	ldrb	r3, [r7, #14]
 800d6ba:	2bff      	cmp	r3, #255	; 0xff
 800d6bc:	d01d      	beq.n	800d6fa <USBD_StdItfReq+0x92>
 800d6be:	7bbb      	ldrb	r3, [r7, #14]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d11a      	bne.n	800d6fa <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800d6c4:	7bba      	ldrb	r2, [r7, #14]
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	32ae      	adds	r2, #174	; 0xae
 800d6ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6ce:	689b      	ldr	r3, [r3, #8]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d00f      	beq.n	800d6f4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800d6d4:	7bba      	ldrb	r2, [r7, #14]
 800d6d6:	687b      	ldr	r3, [r7, #4]
 800d6d8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d6dc:	7bba      	ldrb	r2, [r7, #14]
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	32ae      	adds	r2, #174	; 0xae
 800d6e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6e6:	689b      	ldr	r3, [r3, #8]
 800d6e8:	6839      	ldr	r1, [r7, #0]
 800d6ea:	6878      	ldr	r0, [r7, #4]
 800d6ec:	4798      	blx	r3
 800d6ee:	4603      	mov	r3, r0
 800d6f0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d6f2:	e004      	b.n	800d6fe <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800d6f4:	2303      	movs	r3, #3
 800d6f6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800d6f8:	e001      	b.n	800d6fe <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800d6fa:	2303      	movs	r3, #3
 800d6fc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800d6fe:	683b      	ldr	r3, [r7, #0]
 800d700:	88db      	ldrh	r3, [r3, #6]
 800d702:	2b00      	cmp	r3, #0
 800d704:	d110      	bne.n	800d728 <USBD_StdItfReq+0xc0>
 800d706:	7bfb      	ldrb	r3, [r7, #15]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	d10d      	bne.n	800d728 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800d70c:	6878      	ldr	r0, [r7, #4]
 800d70e:	f000 fdf1 	bl	800e2f4 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800d712:	e009      	b.n	800d728 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800d714:	6839      	ldr	r1, [r7, #0]
 800d716:	6878      	ldr	r0, [r7, #4]
 800d718:	f000 fd21 	bl	800e15e <USBD_CtlError>
          break;
 800d71c:	e004      	b.n	800d728 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800d71e:	6839      	ldr	r1, [r7, #0]
 800d720:	6878      	ldr	r0, [r7, #4]
 800d722:	f000 fd1c 	bl	800e15e <USBD_CtlError>
          break;
 800d726:	e000      	b.n	800d72a <USBD_StdItfReq+0xc2>
          break;
 800d728:	bf00      	nop
      }
      break;
 800d72a:	e004      	b.n	800d736 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800d72c:	6839      	ldr	r1, [r7, #0]
 800d72e:	6878      	ldr	r0, [r7, #4]
 800d730:	f000 fd15 	bl	800e15e <USBD_CtlError>
      break;
 800d734:	bf00      	nop
  }

  return ret;
 800d736:	7bfb      	ldrb	r3, [r7, #15]
}
 800d738:	4618      	mov	r0, r3
 800d73a:	3710      	adds	r7, #16
 800d73c:	46bd      	mov	sp, r7
 800d73e:	bd80      	pop	{r7, pc}

0800d740 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b084      	sub	sp, #16
 800d744:	af00      	add	r7, sp, #0
 800d746:	6078      	str	r0, [r7, #4]
 800d748:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800d74a:	2300      	movs	r3, #0
 800d74c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800d74e:	683b      	ldr	r3, [r7, #0]
 800d750:	889b      	ldrh	r3, [r3, #4]
 800d752:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d754:	683b      	ldr	r3, [r7, #0]
 800d756:	781b      	ldrb	r3, [r3, #0]
 800d758:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d75c:	2b40      	cmp	r3, #64	; 0x40
 800d75e:	d007      	beq.n	800d770 <USBD_StdEPReq+0x30>
 800d760:	2b40      	cmp	r3, #64	; 0x40
 800d762:	f200 817f 	bhi.w	800da64 <USBD_StdEPReq+0x324>
 800d766:	2b00      	cmp	r3, #0
 800d768:	d02a      	beq.n	800d7c0 <USBD_StdEPReq+0x80>
 800d76a:	2b20      	cmp	r3, #32
 800d76c:	f040 817a 	bne.w	800da64 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800d770:	7bbb      	ldrb	r3, [r7, #14]
 800d772:	4619      	mov	r1, r3
 800d774:	6878      	ldr	r0, [r7, #4]
 800d776:	f7ff fe83 	bl	800d480 <USBD_CoreFindEP>
 800d77a:	4603      	mov	r3, r0
 800d77c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d77e:	7b7b      	ldrb	r3, [r7, #13]
 800d780:	2bff      	cmp	r3, #255	; 0xff
 800d782:	f000 8174 	beq.w	800da6e <USBD_StdEPReq+0x32e>
 800d786:	7b7b      	ldrb	r3, [r7, #13]
 800d788:	2b00      	cmp	r3, #0
 800d78a:	f040 8170 	bne.w	800da6e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800d78e:	7b7a      	ldrb	r2, [r7, #13]
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800d796:	7b7a      	ldrb	r2, [r7, #13]
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	32ae      	adds	r2, #174	; 0xae
 800d79c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7a0:	689b      	ldr	r3, [r3, #8]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	f000 8163 	beq.w	800da6e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800d7a8:	7b7a      	ldrb	r2, [r7, #13]
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	32ae      	adds	r2, #174	; 0xae
 800d7ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d7b2:	689b      	ldr	r3, [r3, #8]
 800d7b4:	6839      	ldr	r1, [r7, #0]
 800d7b6:	6878      	ldr	r0, [r7, #4]
 800d7b8:	4798      	blx	r3
 800d7ba:	4603      	mov	r3, r0
 800d7bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800d7be:	e156      	b.n	800da6e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800d7c0:	683b      	ldr	r3, [r7, #0]
 800d7c2:	785b      	ldrb	r3, [r3, #1]
 800d7c4:	2b03      	cmp	r3, #3
 800d7c6:	d008      	beq.n	800d7da <USBD_StdEPReq+0x9a>
 800d7c8:	2b03      	cmp	r3, #3
 800d7ca:	f300 8145 	bgt.w	800da58 <USBD_StdEPReq+0x318>
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	f000 809b 	beq.w	800d90a <USBD_StdEPReq+0x1ca>
 800d7d4:	2b01      	cmp	r3, #1
 800d7d6:	d03c      	beq.n	800d852 <USBD_StdEPReq+0x112>
 800d7d8:	e13e      	b.n	800da58 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d7e0:	b2db      	uxtb	r3, r3
 800d7e2:	2b02      	cmp	r3, #2
 800d7e4:	d002      	beq.n	800d7ec <USBD_StdEPReq+0xac>
 800d7e6:	2b03      	cmp	r3, #3
 800d7e8:	d016      	beq.n	800d818 <USBD_StdEPReq+0xd8>
 800d7ea:	e02c      	b.n	800d846 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d7ec:	7bbb      	ldrb	r3, [r7, #14]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d00d      	beq.n	800d80e <USBD_StdEPReq+0xce>
 800d7f2:	7bbb      	ldrb	r3, [r7, #14]
 800d7f4:	2b80      	cmp	r3, #128	; 0x80
 800d7f6:	d00a      	beq.n	800d80e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d7f8:	7bbb      	ldrb	r3, [r7, #14]
 800d7fa:	4619      	mov	r1, r3
 800d7fc:	6878      	ldr	r0, [r7, #4]
 800d7fe:	f001 fd25 	bl	800f24c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d802:	2180      	movs	r1, #128	; 0x80
 800d804:	6878      	ldr	r0, [r7, #4]
 800d806:	f001 fd21 	bl	800f24c <USBD_LL_StallEP>
 800d80a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d80c:	e020      	b.n	800d850 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800d80e:	6839      	ldr	r1, [r7, #0]
 800d810:	6878      	ldr	r0, [r7, #4]
 800d812:	f000 fca4 	bl	800e15e <USBD_CtlError>
              break;
 800d816:	e01b      	b.n	800d850 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d818:	683b      	ldr	r3, [r7, #0]
 800d81a:	885b      	ldrh	r3, [r3, #2]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	d10e      	bne.n	800d83e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d820:	7bbb      	ldrb	r3, [r7, #14]
 800d822:	2b00      	cmp	r3, #0
 800d824:	d00b      	beq.n	800d83e <USBD_StdEPReq+0xfe>
 800d826:	7bbb      	ldrb	r3, [r7, #14]
 800d828:	2b80      	cmp	r3, #128	; 0x80
 800d82a:	d008      	beq.n	800d83e <USBD_StdEPReq+0xfe>
 800d82c:	683b      	ldr	r3, [r7, #0]
 800d82e:	88db      	ldrh	r3, [r3, #6]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d104      	bne.n	800d83e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800d834:	7bbb      	ldrb	r3, [r7, #14]
 800d836:	4619      	mov	r1, r3
 800d838:	6878      	ldr	r0, [r7, #4]
 800d83a:	f001 fd07 	bl	800f24c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800d83e:	6878      	ldr	r0, [r7, #4]
 800d840:	f000 fd58 	bl	800e2f4 <USBD_CtlSendStatus>

              break;
 800d844:	e004      	b.n	800d850 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800d846:	6839      	ldr	r1, [r7, #0]
 800d848:	6878      	ldr	r0, [r7, #4]
 800d84a:	f000 fc88 	bl	800e15e <USBD_CtlError>
              break;
 800d84e:	bf00      	nop
          }
          break;
 800d850:	e107      	b.n	800da62 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800d852:	687b      	ldr	r3, [r7, #4]
 800d854:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d858:	b2db      	uxtb	r3, r3
 800d85a:	2b02      	cmp	r3, #2
 800d85c:	d002      	beq.n	800d864 <USBD_StdEPReq+0x124>
 800d85e:	2b03      	cmp	r3, #3
 800d860:	d016      	beq.n	800d890 <USBD_StdEPReq+0x150>
 800d862:	e04b      	b.n	800d8fc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d864:	7bbb      	ldrb	r3, [r7, #14]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d00d      	beq.n	800d886 <USBD_StdEPReq+0x146>
 800d86a:	7bbb      	ldrb	r3, [r7, #14]
 800d86c:	2b80      	cmp	r3, #128	; 0x80
 800d86e:	d00a      	beq.n	800d886 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800d870:	7bbb      	ldrb	r3, [r7, #14]
 800d872:	4619      	mov	r1, r3
 800d874:	6878      	ldr	r0, [r7, #4]
 800d876:	f001 fce9 	bl	800f24c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800d87a:	2180      	movs	r1, #128	; 0x80
 800d87c:	6878      	ldr	r0, [r7, #4]
 800d87e:	f001 fce5 	bl	800f24c <USBD_LL_StallEP>
 800d882:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800d884:	e040      	b.n	800d908 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800d886:	6839      	ldr	r1, [r7, #0]
 800d888:	6878      	ldr	r0, [r7, #4]
 800d88a:	f000 fc68 	bl	800e15e <USBD_CtlError>
              break;
 800d88e:	e03b      	b.n	800d908 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800d890:	683b      	ldr	r3, [r7, #0]
 800d892:	885b      	ldrh	r3, [r3, #2]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d136      	bne.n	800d906 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800d898:	7bbb      	ldrb	r3, [r7, #14]
 800d89a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d004      	beq.n	800d8ac <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800d8a2:	7bbb      	ldrb	r3, [r7, #14]
 800d8a4:	4619      	mov	r1, r3
 800d8a6:	6878      	ldr	r0, [r7, #4]
 800d8a8:	f001 fcef 	bl	800f28a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800d8ac:	6878      	ldr	r0, [r7, #4]
 800d8ae:	f000 fd21 	bl	800e2f4 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800d8b2:	7bbb      	ldrb	r3, [r7, #14]
 800d8b4:	4619      	mov	r1, r3
 800d8b6:	6878      	ldr	r0, [r7, #4]
 800d8b8:	f7ff fde2 	bl	800d480 <USBD_CoreFindEP>
 800d8bc:	4603      	mov	r3, r0
 800d8be:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800d8c0:	7b7b      	ldrb	r3, [r7, #13]
 800d8c2:	2bff      	cmp	r3, #255	; 0xff
 800d8c4:	d01f      	beq.n	800d906 <USBD_StdEPReq+0x1c6>
 800d8c6:	7b7b      	ldrb	r3, [r7, #13]
 800d8c8:	2b00      	cmp	r3, #0
 800d8ca:	d11c      	bne.n	800d906 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800d8cc:	7b7a      	ldrb	r2, [r7, #13]
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800d8d4:	7b7a      	ldrb	r2, [r7, #13]
 800d8d6:	687b      	ldr	r3, [r7, #4]
 800d8d8:	32ae      	adds	r2, #174	; 0xae
 800d8da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8de:	689b      	ldr	r3, [r3, #8]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d010      	beq.n	800d906 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800d8e4:	7b7a      	ldrb	r2, [r7, #13]
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	32ae      	adds	r2, #174	; 0xae
 800d8ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8ee:	689b      	ldr	r3, [r3, #8]
 800d8f0:	6839      	ldr	r1, [r7, #0]
 800d8f2:	6878      	ldr	r0, [r7, #4]
 800d8f4:	4798      	blx	r3
 800d8f6:	4603      	mov	r3, r0
 800d8f8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800d8fa:	e004      	b.n	800d906 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800d8fc:	6839      	ldr	r1, [r7, #0]
 800d8fe:	6878      	ldr	r0, [r7, #4]
 800d900:	f000 fc2d 	bl	800e15e <USBD_CtlError>
              break;
 800d904:	e000      	b.n	800d908 <USBD_StdEPReq+0x1c8>
              break;
 800d906:	bf00      	nop
          }
          break;
 800d908:	e0ab      	b.n	800da62 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800d910:	b2db      	uxtb	r3, r3
 800d912:	2b02      	cmp	r3, #2
 800d914:	d002      	beq.n	800d91c <USBD_StdEPReq+0x1dc>
 800d916:	2b03      	cmp	r3, #3
 800d918:	d032      	beq.n	800d980 <USBD_StdEPReq+0x240>
 800d91a:	e097      	b.n	800da4c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d91c:	7bbb      	ldrb	r3, [r7, #14]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d007      	beq.n	800d932 <USBD_StdEPReq+0x1f2>
 800d922:	7bbb      	ldrb	r3, [r7, #14]
 800d924:	2b80      	cmp	r3, #128	; 0x80
 800d926:	d004      	beq.n	800d932 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800d928:	6839      	ldr	r1, [r7, #0]
 800d92a:	6878      	ldr	r0, [r7, #4]
 800d92c:	f000 fc17 	bl	800e15e <USBD_CtlError>
                break;
 800d930:	e091      	b.n	800da56 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d932:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d936:	2b00      	cmp	r3, #0
 800d938:	da0b      	bge.n	800d952 <USBD_StdEPReq+0x212>
 800d93a:	7bbb      	ldrb	r3, [r7, #14]
 800d93c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d940:	4613      	mov	r3, r2
 800d942:	009b      	lsls	r3, r3, #2
 800d944:	4413      	add	r3, r2
 800d946:	009b      	lsls	r3, r3, #2
 800d948:	3310      	adds	r3, #16
 800d94a:	687a      	ldr	r2, [r7, #4]
 800d94c:	4413      	add	r3, r2
 800d94e:	3304      	adds	r3, #4
 800d950:	e00b      	b.n	800d96a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d952:	7bbb      	ldrb	r3, [r7, #14]
 800d954:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d958:	4613      	mov	r3, r2
 800d95a:	009b      	lsls	r3, r3, #2
 800d95c:	4413      	add	r3, r2
 800d95e:	009b      	lsls	r3, r3, #2
 800d960:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800d964:	687a      	ldr	r2, [r7, #4]
 800d966:	4413      	add	r3, r2
 800d968:	3304      	adds	r3, #4
 800d96a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800d96c:	68bb      	ldr	r3, [r7, #8]
 800d96e:	2200      	movs	r2, #0
 800d970:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800d972:	68bb      	ldr	r3, [r7, #8]
 800d974:	2202      	movs	r2, #2
 800d976:	4619      	mov	r1, r3
 800d978:	6878      	ldr	r0, [r7, #4]
 800d97a:	f000 fc61 	bl	800e240 <USBD_CtlSendData>
              break;
 800d97e:	e06a      	b.n	800da56 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800d980:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d984:	2b00      	cmp	r3, #0
 800d986:	da11      	bge.n	800d9ac <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d988:	7bbb      	ldrb	r3, [r7, #14]
 800d98a:	f003 020f 	and.w	r2, r3, #15
 800d98e:	6879      	ldr	r1, [r7, #4]
 800d990:	4613      	mov	r3, r2
 800d992:	009b      	lsls	r3, r3, #2
 800d994:	4413      	add	r3, r2
 800d996:	009b      	lsls	r3, r3, #2
 800d998:	440b      	add	r3, r1
 800d99a:	3324      	adds	r3, #36	; 0x24
 800d99c:	881b      	ldrh	r3, [r3, #0]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d117      	bne.n	800d9d2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d9a2:	6839      	ldr	r1, [r7, #0]
 800d9a4:	6878      	ldr	r0, [r7, #4]
 800d9a6:	f000 fbda 	bl	800e15e <USBD_CtlError>
                  break;
 800d9aa:	e054      	b.n	800da56 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d9ac:	7bbb      	ldrb	r3, [r7, #14]
 800d9ae:	f003 020f 	and.w	r2, r3, #15
 800d9b2:	6879      	ldr	r1, [r7, #4]
 800d9b4:	4613      	mov	r3, r2
 800d9b6:	009b      	lsls	r3, r3, #2
 800d9b8:	4413      	add	r3, r2
 800d9ba:	009b      	lsls	r3, r3, #2
 800d9bc:	440b      	add	r3, r1
 800d9be:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800d9c2:	881b      	ldrh	r3, [r3, #0]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d104      	bne.n	800d9d2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800d9c8:	6839      	ldr	r1, [r7, #0]
 800d9ca:	6878      	ldr	r0, [r7, #4]
 800d9cc:	f000 fbc7 	bl	800e15e <USBD_CtlError>
                  break;
 800d9d0:	e041      	b.n	800da56 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d9d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	da0b      	bge.n	800d9f2 <USBD_StdEPReq+0x2b2>
 800d9da:	7bbb      	ldrb	r3, [r7, #14]
 800d9dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d9e0:	4613      	mov	r3, r2
 800d9e2:	009b      	lsls	r3, r3, #2
 800d9e4:	4413      	add	r3, r2
 800d9e6:	009b      	lsls	r3, r3, #2
 800d9e8:	3310      	adds	r3, #16
 800d9ea:	687a      	ldr	r2, [r7, #4]
 800d9ec:	4413      	add	r3, r2
 800d9ee:	3304      	adds	r3, #4
 800d9f0:	e00b      	b.n	800da0a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800d9f2:	7bbb      	ldrb	r3, [r7, #14]
 800d9f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800d9f8:	4613      	mov	r3, r2
 800d9fa:	009b      	lsls	r3, r3, #2
 800d9fc:	4413      	add	r3, r2
 800d9fe:	009b      	lsls	r3, r3, #2
 800da00:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800da04:	687a      	ldr	r2, [r7, #4]
 800da06:	4413      	add	r3, r2
 800da08:	3304      	adds	r3, #4
 800da0a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800da0c:	7bbb      	ldrb	r3, [r7, #14]
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d002      	beq.n	800da18 <USBD_StdEPReq+0x2d8>
 800da12:	7bbb      	ldrb	r3, [r7, #14]
 800da14:	2b80      	cmp	r3, #128	; 0x80
 800da16:	d103      	bne.n	800da20 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800da18:	68bb      	ldr	r3, [r7, #8]
 800da1a:	2200      	movs	r2, #0
 800da1c:	601a      	str	r2, [r3, #0]
 800da1e:	e00e      	b.n	800da3e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800da20:	7bbb      	ldrb	r3, [r7, #14]
 800da22:	4619      	mov	r1, r3
 800da24:	6878      	ldr	r0, [r7, #4]
 800da26:	f001 fc4f 	bl	800f2c8 <USBD_LL_IsStallEP>
 800da2a:	4603      	mov	r3, r0
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d003      	beq.n	800da38 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800da30:	68bb      	ldr	r3, [r7, #8]
 800da32:	2201      	movs	r2, #1
 800da34:	601a      	str	r2, [r3, #0]
 800da36:	e002      	b.n	800da3e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800da38:	68bb      	ldr	r3, [r7, #8]
 800da3a:	2200      	movs	r2, #0
 800da3c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800da3e:	68bb      	ldr	r3, [r7, #8]
 800da40:	2202      	movs	r2, #2
 800da42:	4619      	mov	r1, r3
 800da44:	6878      	ldr	r0, [r7, #4]
 800da46:	f000 fbfb 	bl	800e240 <USBD_CtlSendData>
              break;
 800da4a:	e004      	b.n	800da56 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800da4c:	6839      	ldr	r1, [r7, #0]
 800da4e:	6878      	ldr	r0, [r7, #4]
 800da50:	f000 fb85 	bl	800e15e <USBD_CtlError>
              break;
 800da54:	bf00      	nop
          }
          break;
 800da56:	e004      	b.n	800da62 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800da58:	6839      	ldr	r1, [r7, #0]
 800da5a:	6878      	ldr	r0, [r7, #4]
 800da5c:	f000 fb7f 	bl	800e15e <USBD_CtlError>
          break;
 800da60:	bf00      	nop
      }
      break;
 800da62:	e005      	b.n	800da70 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800da64:	6839      	ldr	r1, [r7, #0]
 800da66:	6878      	ldr	r0, [r7, #4]
 800da68:	f000 fb79 	bl	800e15e <USBD_CtlError>
      break;
 800da6c:	e000      	b.n	800da70 <USBD_StdEPReq+0x330>
      break;
 800da6e:	bf00      	nop
  }

  return ret;
 800da70:	7bfb      	ldrb	r3, [r7, #15]
}
 800da72:	4618      	mov	r0, r3
 800da74:	3710      	adds	r7, #16
 800da76:	46bd      	mov	sp, r7
 800da78:	bd80      	pop	{r7, pc}
	...

0800da7c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da7c:	b580      	push	{r7, lr}
 800da7e:	b084      	sub	sp, #16
 800da80:	af00      	add	r7, sp, #0
 800da82:	6078      	str	r0, [r7, #4]
 800da84:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800da86:	2300      	movs	r3, #0
 800da88:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800da8a:	2300      	movs	r3, #0
 800da8c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800da8e:	2300      	movs	r3, #0
 800da90:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800da92:	683b      	ldr	r3, [r7, #0]
 800da94:	885b      	ldrh	r3, [r3, #2]
 800da96:	0a1b      	lsrs	r3, r3, #8
 800da98:	b29b      	uxth	r3, r3
 800da9a:	3b01      	subs	r3, #1
 800da9c:	2b0e      	cmp	r3, #14
 800da9e:	f200 8152 	bhi.w	800dd46 <USBD_GetDescriptor+0x2ca>
 800daa2:	a201      	add	r2, pc, #4	; (adr r2, 800daa8 <USBD_GetDescriptor+0x2c>)
 800daa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800daa8:	0800db19 	.word	0x0800db19
 800daac:	0800db31 	.word	0x0800db31
 800dab0:	0800db71 	.word	0x0800db71
 800dab4:	0800dd47 	.word	0x0800dd47
 800dab8:	0800dd47 	.word	0x0800dd47
 800dabc:	0800dce7 	.word	0x0800dce7
 800dac0:	0800dd13 	.word	0x0800dd13
 800dac4:	0800dd47 	.word	0x0800dd47
 800dac8:	0800dd47 	.word	0x0800dd47
 800dacc:	0800dd47 	.word	0x0800dd47
 800dad0:	0800dd47 	.word	0x0800dd47
 800dad4:	0800dd47 	.word	0x0800dd47
 800dad8:	0800dd47 	.word	0x0800dd47
 800dadc:	0800dd47 	.word	0x0800dd47
 800dae0:	0800dae5 	.word	0x0800dae5
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 800dae4:	687b      	ldr	r3, [r7, #4]
 800dae6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800daea:	69db      	ldr	r3, [r3, #28]
 800daec:	2b00      	cmp	r3, #0
 800daee:	d00b      	beq.n	800db08 <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800daf6:	69db      	ldr	r3, [r3, #28]
 800daf8:	687a      	ldr	r2, [r7, #4]
 800dafa:	7c12      	ldrb	r2, [r2, #16]
 800dafc:	f107 0108 	add.w	r1, r7, #8
 800db00:	4610      	mov	r0, r2
 800db02:	4798      	blx	r3
 800db04:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800db06:	e126      	b.n	800dd56 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800db08:	6839      	ldr	r1, [r7, #0]
 800db0a:	6878      	ldr	r0, [r7, #4]
 800db0c:	f000 fb27 	bl	800e15e <USBD_CtlError>
        err++;
 800db10:	7afb      	ldrb	r3, [r7, #11]
 800db12:	3301      	adds	r3, #1
 800db14:	72fb      	strb	r3, [r7, #11]
      break;
 800db16:	e11e      	b.n	800dd56 <USBD_GetDescriptor+0x2da>
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800db1e:	681b      	ldr	r3, [r3, #0]
 800db20:	687a      	ldr	r2, [r7, #4]
 800db22:	7c12      	ldrb	r2, [r2, #16]
 800db24:	f107 0108 	add.w	r1, r7, #8
 800db28:	4610      	mov	r0, r2
 800db2a:	4798      	blx	r3
 800db2c:	60f8      	str	r0, [r7, #12]
      break;
 800db2e:	e112      	b.n	800dd56 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	7c1b      	ldrb	r3, [r3, #16]
 800db34:	2b00      	cmp	r3, #0
 800db36:	d10d      	bne.n	800db54 <USBD_GetDescriptor+0xd8>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800db40:	f107 0208 	add.w	r2, r7, #8
 800db44:	4610      	mov	r0, r2
 800db46:	4798      	blx	r3
 800db48:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	3301      	adds	r3, #1
 800db4e:	2202      	movs	r2, #2
 800db50:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800db52:	e100      	b.n	800dd56 <USBD_GetDescriptor+0x2da>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800db5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800db5c:	f107 0208 	add.w	r2, r7, #8
 800db60:	4610      	mov	r0, r2
 800db62:	4798      	blx	r3
 800db64:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800db66:	68fb      	ldr	r3, [r7, #12]
 800db68:	3301      	adds	r3, #1
 800db6a:	2202      	movs	r2, #2
 800db6c:	701a      	strb	r2, [r3, #0]
      break;
 800db6e:	e0f2      	b.n	800dd56 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800db70:	683b      	ldr	r3, [r7, #0]
 800db72:	885b      	ldrh	r3, [r3, #2]
 800db74:	b2db      	uxtb	r3, r3
 800db76:	2b05      	cmp	r3, #5
 800db78:	f200 80ac 	bhi.w	800dcd4 <USBD_GetDescriptor+0x258>
 800db7c:	a201      	add	r2, pc, #4	; (adr r2, 800db84 <USBD_GetDescriptor+0x108>)
 800db7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db82:	bf00      	nop
 800db84:	0800db9d 	.word	0x0800db9d
 800db88:	0800dbd1 	.word	0x0800dbd1
 800db8c:	0800dc05 	.word	0x0800dc05
 800db90:	0800dc39 	.word	0x0800dc39
 800db94:	0800dc6d 	.word	0x0800dc6d
 800db98:	0800dca1 	.word	0x0800dca1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dba2:	685b      	ldr	r3, [r3, #4]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	d00b      	beq.n	800dbc0 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dbae:	685b      	ldr	r3, [r3, #4]
 800dbb0:	687a      	ldr	r2, [r7, #4]
 800dbb2:	7c12      	ldrb	r2, [r2, #16]
 800dbb4:	f107 0108 	add.w	r1, r7, #8
 800dbb8:	4610      	mov	r0, r2
 800dbba:	4798      	blx	r3
 800dbbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dbbe:	e091      	b.n	800dce4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dbc0:	6839      	ldr	r1, [r7, #0]
 800dbc2:	6878      	ldr	r0, [r7, #4]
 800dbc4:	f000 facb 	bl	800e15e <USBD_CtlError>
            err++;
 800dbc8:	7afb      	ldrb	r3, [r7, #11]
 800dbca:	3301      	adds	r3, #1
 800dbcc:	72fb      	strb	r3, [r7, #11]
          break;
 800dbce:	e089      	b.n	800dce4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dbd6:	689b      	ldr	r3, [r3, #8]
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d00b      	beq.n	800dbf4 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dbe2:	689b      	ldr	r3, [r3, #8]
 800dbe4:	687a      	ldr	r2, [r7, #4]
 800dbe6:	7c12      	ldrb	r2, [r2, #16]
 800dbe8:	f107 0108 	add.w	r1, r7, #8
 800dbec:	4610      	mov	r0, r2
 800dbee:	4798      	blx	r3
 800dbf0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dbf2:	e077      	b.n	800dce4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dbf4:	6839      	ldr	r1, [r7, #0]
 800dbf6:	6878      	ldr	r0, [r7, #4]
 800dbf8:	f000 fab1 	bl	800e15e <USBD_CtlError>
            err++;
 800dbfc:	7afb      	ldrb	r3, [r7, #11]
 800dbfe:	3301      	adds	r3, #1
 800dc00:	72fb      	strb	r3, [r7, #11]
          break;
 800dc02:	e06f      	b.n	800dce4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800dc04:	687b      	ldr	r3, [r7, #4]
 800dc06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc0a:	68db      	ldr	r3, [r3, #12]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d00b      	beq.n	800dc28 <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc16:	68db      	ldr	r3, [r3, #12]
 800dc18:	687a      	ldr	r2, [r7, #4]
 800dc1a:	7c12      	ldrb	r2, [r2, #16]
 800dc1c:	f107 0108 	add.w	r1, r7, #8
 800dc20:	4610      	mov	r0, r2
 800dc22:	4798      	blx	r3
 800dc24:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dc26:	e05d      	b.n	800dce4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dc28:	6839      	ldr	r1, [r7, #0]
 800dc2a:	6878      	ldr	r0, [r7, #4]
 800dc2c:	f000 fa97 	bl	800e15e <USBD_CtlError>
            err++;
 800dc30:	7afb      	ldrb	r3, [r7, #11]
 800dc32:	3301      	adds	r3, #1
 800dc34:	72fb      	strb	r3, [r7, #11]
          break;
 800dc36:	e055      	b.n	800dce4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc3e:	691b      	ldr	r3, [r3, #16]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d00b      	beq.n	800dc5c <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc4a:	691b      	ldr	r3, [r3, #16]
 800dc4c:	687a      	ldr	r2, [r7, #4]
 800dc4e:	7c12      	ldrb	r2, [r2, #16]
 800dc50:	f107 0108 	add.w	r1, r7, #8
 800dc54:	4610      	mov	r0, r2
 800dc56:	4798      	blx	r3
 800dc58:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dc5a:	e043      	b.n	800dce4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dc5c:	6839      	ldr	r1, [r7, #0]
 800dc5e:	6878      	ldr	r0, [r7, #4]
 800dc60:	f000 fa7d 	bl	800e15e <USBD_CtlError>
            err++;
 800dc64:	7afb      	ldrb	r3, [r7, #11]
 800dc66:	3301      	adds	r3, #1
 800dc68:	72fb      	strb	r3, [r7, #11]
          break;
 800dc6a:	e03b      	b.n	800dce4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc72:	695b      	ldr	r3, [r3, #20]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d00b      	beq.n	800dc90 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dc7e:	695b      	ldr	r3, [r3, #20]
 800dc80:	687a      	ldr	r2, [r7, #4]
 800dc82:	7c12      	ldrb	r2, [r2, #16]
 800dc84:	f107 0108 	add.w	r1, r7, #8
 800dc88:	4610      	mov	r0, r2
 800dc8a:	4798      	blx	r3
 800dc8c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dc8e:	e029      	b.n	800dce4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dc90:	6839      	ldr	r1, [r7, #0]
 800dc92:	6878      	ldr	r0, [r7, #4]
 800dc94:	f000 fa63 	bl	800e15e <USBD_CtlError>
            err++;
 800dc98:	7afb      	ldrb	r3, [r7, #11]
 800dc9a:	3301      	adds	r3, #1
 800dc9c:	72fb      	strb	r3, [r7, #11]
          break;
 800dc9e:	e021      	b.n	800dce4 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dca6:	699b      	ldr	r3, [r3, #24]
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d00b      	beq.n	800dcc4 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800dcb2:	699b      	ldr	r3, [r3, #24]
 800dcb4:	687a      	ldr	r2, [r7, #4]
 800dcb6:	7c12      	ldrb	r2, [r2, #16]
 800dcb8:	f107 0108 	add.w	r1, r7, #8
 800dcbc:	4610      	mov	r0, r2
 800dcbe:	4798      	blx	r3
 800dcc0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800dcc2:	e00f      	b.n	800dce4 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 800dcc4:	6839      	ldr	r1, [r7, #0]
 800dcc6:	6878      	ldr	r0, [r7, #4]
 800dcc8:	f000 fa49 	bl	800e15e <USBD_CtlError>
            err++;
 800dccc:	7afb      	ldrb	r3, [r7, #11]
 800dcce:	3301      	adds	r3, #1
 800dcd0:	72fb      	strb	r3, [r7, #11]
          break;
 800dcd2:	e007      	b.n	800dce4 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800dcd4:	6839      	ldr	r1, [r7, #0]
 800dcd6:	6878      	ldr	r0, [r7, #4]
 800dcd8:	f000 fa41 	bl	800e15e <USBD_CtlError>
          err++;
 800dcdc:	7afb      	ldrb	r3, [r7, #11]
 800dcde:	3301      	adds	r3, #1
 800dce0:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800dce2:	bf00      	nop
      }
      break;
 800dce4:	e037      	b.n	800dd56 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	7c1b      	ldrb	r3, [r3, #16]
 800dcea:	2b00      	cmp	r3, #0
 800dcec:	d109      	bne.n	800dd02 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dcf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dcf6:	f107 0208 	add.w	r2, r7, #8
 800dcfa:	4610      	mov	r0, r2
 800dcfc:	4798      	blx	r3
 800dcfe:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dd00:	e029      	b.n	800dd56 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800dd02:	6839      	ldr	r1, [r7, #0]
 800dd04:	6878      	ldr	r0, [r7, #4]
 800dd06:	f000 fa2a 	bl	800e15e <USBD_CtlError>
        err++;
 800dd0a:	7afb      	ldrb	r3, [r7, #11]
 800dd0c:	3301      	adds	r3, #1
 800dd0e:	72fb      	strb	r3, [r7, #11]
      break;
 800dd10:	e021      	b.n	800dd56 <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	7c1b      	ldrb	r3, [r3, #16]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d10d      	bne.n	800dd36 <USBD_GetDescriptor+0x2ba>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800dd20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dd22:	f107 0208 	add.w	r2, r7, #8
 800dd26:	4610      	mov	r0, r2
 800dd28:	4798      	blx	r3
 800dd2a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800dd2c:	68fb      	ldr	r3, [r7, #12]
 800dd2e:	3301      	adds	r3, #1
 800dd30:	2207      	movs	r2, #7
 800dd32:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800dd34:	e00f      	b.n	800dd56 <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800dd36:	6839      	ldr	r1, [r7, #0]
 800dd38:	6878      	ldr	r0, [r7, #4]
 800dd3a:	f000 fa10 	bl	800e15e <USBD_CtlError>
        err++;
 800dd3e:	7afb      	ldrb	r3, [r7, #11]
 800dd40:	3301      	adds	r3, #1
 800dd42:	72fb      	strb	r3, [r7, #11]
      break;
 800dd44:	e007      	b.n	800dd56 <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800dd46:	6839      	ldr	r1, [r7, #0]
 800dd48:	6878      	ldr	r0, [r7, #4]
 800dd4a:	f000 fa08 	bl	800e15e <USBD_CtlError>
      err++;
 800dd4e:	7afb      	ldrb	r3, [r7, #11]
 800dd50:	3301      	adds	r3, #1
 800dd52:	72fb      	strb	r3, [r7, #11]
      break;
 800dd54:	bf00      	nop
  }

  if (err != 0U)
 800dd56:	7afb      	ldrb	r3, [r7, #11]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d11e      	bne.n	800dd9a <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 800dd5c:	683b      	ldr	r3, [r7, #0]
 800dd5e:	88db      	ldrh	r3, [r3, #6]
 800dd60:	2b00      	cmp	r3, #0
 800dd62:	d016      	beq.n	800dd92 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 800dd64:	893b      	ldrh	r3, [r7, #8]
 800dd66:	2b00      	cmp	r3, #0
 800dd68:	d00e      	beq.n	800dd88 <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800dd6a:	683b      	ldr	r3, [r7, #0]
 800dd6c:	88da      	ldrh	r2, [r3, #6]
 800dd6e:	893b      	ldrh	r3, [r7, #8]
 800dd70:	4293      	cmp	r3, r2
 800dd72:	bf28      	it	cs
 800dd74:	4613      	movcs	r3, r2
 800dd76:	b29b      	uxth	r3, r3
 800dd78:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800dd7a:	893b      	ldrh	r3, [r7, #8]
 800dd7c:	461a      	mov	r2, r3
 800dd7e:	68f9      	ldr	r1, [r7, #12]
 800dd80:	6878      	ldr	r0, [r7, #4]
 800dd82:	f000 fa5d 	bl	800e240 <USBD_CtlSendData>
 800dd86:	e009      	b.n	800dd9c <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800dd88:	6839      	ldr	r1, [r7, #0]
 800dd8a:	6878      	ldr	r0, [r7, #4]
 800dd8c:	f000 f9e7 	bl	800e15e <USBD_CtlError>
 800dd90:	e004      	b.n	800dd9c <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800dd92:	6878      	ldr	r0, [r7, #4]
 800dd94:	f000 faae 	bl	800e2f4 <USBD_CtlSendStatus>
 800dd98:	e000      	b.n	800dd9c <USBD_GetDescriptor+0x320>
    return;
 800dd9a:	bf00      	nop
  }
}
 800dd9c:	3710      	adds	r7, #16
 800dd9e:	46bd      	mov	sp, r7
 800dda0:	bd80      	pop	{r7, pc}
 800dda2:	bf00      	nop

0800dda4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b084      	sub	sp, #16
 800dda8:	af00      	add	r7, sp, #0
 800ddaa:	6078      	str	r0, [r7, #4]
 800ddac:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800ddae:	683b      	ldr	r3, [r7, #0]
 800ddb0:	889b      	ldrh	r3, [r3, #4]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d131      	bne.n	800de1a <USBD_SetAddress+0x76>
 800ddb6:	683b      	ldr	r3, [r7, #0]
 800ddb8:	88db      	ldrh	r3, [r3, #6]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d12d      	bne.n	800de1a <USBD_SetAddress+0x76>
 800ddbe:	683b      	ldr	r3, [r7, #0]
 800ddc0:	885b      	ldrh	r3, [r3, #2]
 800ddc2:	2b7f      	cmp	r3, #127	; 0x7f
 800ddc4:	d829      	bhi.n	800de1a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ddc6:	683b      	ldr	r3, [r7, #0]
 800ddc8:	885b      	ldrh	r3, [r3, #2]
 800ddca:	b2db      	uxtb	r3, r3
 800ddcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ddd0:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ddd8:	b2db      	uxtb	r3, r3
 800ddda:	2b03      	cmp	r3, #3
 800dddc:	d104      	bne.n	800dde8 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ddde:	6839      	ldr	r1, [r7, #0]
 800dde0:	6878      	ldr	r0, [r7, #4]
 800dde2:	f000 f9bc 	bl	800e15e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dde6:	e01d      	b.n	800de24 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	7bfa      	ldrb	r2, [r7, #15]
 800ddec:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ddf0:	7bfb      	ldrb	r3, [r7, #15]
 800ddf2:	4619      	mov	r1, r3
 800ddf4:	6878      	ldr	r0, [r7, #4]
 800ddf6:	f001 fa93 	bl	800f320 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ddfa:	6878      	ldr	r0, [r7, #4]
 800ddfc:	f000 fa7a 	bl	800e2f4 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800de00:	7bfb      	ldrb	r3, [r7, #15]
 800de02:	2b00      	cmp	r3, #0
 800de04:	d004      	beq.n	800de10 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	2202      	movs	r2, #2
 800de0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de0e:	e009      	b.n	800de24 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800de10:	687b      	ldr	r3, [r7, #4]
 800de12:	2201      	movs	r2, #1
 800de14:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800de18:	e004      	b.n	800de24 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800de1a:	6839      	ldr	r1, [r7, #0]
 800de1c:	6878      	ldr	r0, [r7, #4]
 800de1e:	f000 f99e 	bl	800e15e <USBD_CtlError>
  }
}
 800de22:	bf00      	nop
 800de24:	bf00      	nop
 800de26:	3710      	adds	r7, #16
 800de28:	46bd      	mov	sp, r7
 800de2a:	bd80      	pop	{r7, pc}

0800de2c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800de2c:	b580      	push	{r7, lr}
 800de2e:	b084      	sub	sp, #16
 800de30:	af00      	add	r7, sp, #0
 800de32:	6078      	str	r0, [r7, #4]
 800de34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800de36:	2300      	movs	r3, #0
 800de38:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800de3a:	683b      	ldr	r3, [r7, #0]
 800de3c:	885b      	ldrh	r3, [r3, #2]
 800de3e:	b2da      	uxtb	r2, r3
 800de40:	4b4e      	ldr	r3, [pc, #312]	; (800df7c <USBD_SetConfig+0x150>)
 800de42:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800de44:	4b4d      	ldr	r3, [pc, #308]	; (800df7c <USBD_SetConfig+0x150>)
 800de46:	781b      	ldrb	r3, [r3, #0]
 800de48:	2b01      	cmp	r3, #1
 800de4a:	d905      	bls.n	800de58 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800de4c:	6839      	ldr	r1, [r7, #0]
 800de4e:	6878      	ldr	r0, [r7, #4]
 800de50:	f000 f985 	bl	800e15e <USBD_CtlError>
    return USBD_FAIL;
 800de54:	2303      	movs	r3, #3
 800de56:	e08c      	b.n	800df72 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800de5e:	b2db      	uxtb	r3, r3
 800de60:	2b02      	cmp	r3, #2
 800de62:	d002      	beq.n	800de6a <USBD_SetConfig+0x3e>
 800de64:	2b03      	cmp	r3, #3
 800de66:	d029      	beq.n	800debc <USBD_SetConfig+0x90>
 800de68:	e075      	b.n	800df56 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800de6a:	4b44      	ldr	r3, [pc, #272]	; (800df7c <USBD_SetConfig+0x150>)
 800de6c:	781b      	ldrb	r3, [r3, #0]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d020      	beq.n	800deb4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800de72:	4b42      	ldr	r3, [pc, #264]	; (800df7c <USBD_SetConfig+0x150>)
 800de74:	781b      	ldrb	r3, [r3, #0]
 800de76:	461a      	mov	r2, r3
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800de7c:	4b3f      	ldr	r3, [pc, #252]	; (800df7c <USBD_SetConfig+0x150>)
 800de7e:	781b      	ldrb	r3, [r3, #0]
 800de80:	4619      	mov	r1, r3
 800de82:	6878      	ldr	r0, [r7, #4]
 800de84:	f7fe ffb7 	bl	800cdf6 <USBD_SetClassConfig>
 800de88:	4603      	mov	r3, r0
 800de8a:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800de8c:	7bfb      	ldrb	r3, [r7, #15]
 800de8e:	2b00      	cmp	r3, #0
 800de90:	d008      	beq.n	800dea4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800de92:	6839      	ldr	r1, [r7, #0]
 800de94:	6878      	ldr	r0, [r7, #4]
 800de96:	f000 f962 	bl	800e15e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	2202      	movs	r2, #2
 800de9e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800dea2:	e065      	b.n	800df70 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800dea4:	6878      	ldr	r0, [r7, #4]
 800dea6:	f000 fa25 	bl	800e2f4 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	2203      	movs	r2, #3
 800deae:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800deb2:	e05d      	b.n	800df70 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800deb4:	6878      	ldr	r0, [r7, #4]
 800deb6:	f000 fa1d 	bl	800e2f4 <USBD_CtlSendStatus>
      break;
 800deba:	e059      	b.n	800df70 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800debc:	4b2f      	ldr	r3, [pc, #188]	; (800df7c <USBD_SetConfig+0x150>)
 800debe:	781b      	ldrb	r3, [r3, #0]
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d112      	bne.n	800deea <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	2202      	movs	r2, #2
 800dec8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800decc:	4b2b      	ldr	r3, [pc, #172]	; (800df7c <USBD_SetConfig+0x150>)
 800dece:	781b      	ldrb	r3, [r3, #0]
 800ded0:	461a      	mov	r2, r3
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ded6:	4b29      	ldr	r3, [pc, #164]	; (800df7c <USBD_SetConfig+0x150>)
 800ded8:	781b      	ldrb	r3, [r3, #0]
 800deda:	4619      	mov	r1, r3
 800dedc:	6878      	ldr	r0, [r7, #4]
 800dede:	f7fe ffa6 	bl	800ce2e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800dee2:	6878      	ldr	r0, [r7, #4]
 800dee4:	f000 fa06 	bl	800e2f4 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800dee8:	e042      	b.n	800df70 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800deea:	4b24      	ldr	r3, [pc, #144]	; (800df7c <USBD_SetConfig+0x150>)
 800deec:	781b      	ldrb	r3, [r3, #0]
 800deee:	461a      	mov	r2, r3
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	685b      	ldr	r3, [r3, #4]
 800def4:	429a      	cmp	r2, r3
 800def6:	d02a      	beq.n	800df4e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	685b      	ldr	r3, [r3, #4]
 800defc:	b2db      	uxtb	r3, r3
 800defe:	4619      	mov	r1, r3
 800df00:	6878      	ldr	r0, [r7, #4]
 800df02:	f7fe ff94 	bl	800ce2e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800df06:	4b1d      	ldr	r3, [pc, #116]	; (800df7c <USBD_SetConfig+0x150>)
 800df08:	781b      	ldrb	r3, [r3, #0]
 800df0a:	461a      	mov	r2, r3
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800df10:	4b1a      	ldr	r3, [pc, #104]	; (800df7c <USBD_SetConfig+0x150>)
 800df12:	781b      	ldrb	r3, [r3, #0]
 800df14:	4619      	mov	r1, r3
 800df16:	6878      	ldr	r0, [r7, #4]
 800df18:	f7fe ff6d 	bl	800cdf6 <USBD_SetClassConfig>
 800df1c:	4603      	mov	r3, r0
 800df1e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800df20:	7bfb      	ldrb	r3, [r7, #15]
 800df22:	2b00      	cmp	r3, #0
 800df24:	d00f      	beq.n	800df46 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800df26:	6839      	ldr	r1, [r7, #0]
 800df28:	6878      	ldr	r0, [r7, #4]
 800df2a:	f000 f918 	bl	800e15e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	685b      	ldr	r3, [r3, #4]
 800df32:	b2db      	uxtb	r3, r3
 800df34:	4619      	mov	r1, r3
 800df36:	6878      	ldr	r0, [r7, #4]
 800df38:	f7fe ff79 	bl	800ce2e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	2202      	movs	r2, #2
 800df40:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800df44:	e014      	b.n	800df70 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800df46:	6878      	ldr	r0, [r7, #4]
 800df48:	f000 f9d4 	bl	800e2f4 <USBD_CtlSendStatus>
      break;
 800df4c:	e010      	b.n	800df70 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800df4e:	6878      	ldr	r0, [r7, #4]
 800df50:	f000 f9d0 	bl	800e2f4 <USBD_CtlSendStatus>
      break;
 800df54:	e00c      	b.n	800df70 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800df56:	6839      	ldr	r1, [r7, #0]
 800df58:	6878      	ldr	r0, [r7, #4]
 800df5a:	f000 f900 	bl	800e15e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800df5e:	4b07      	ldr	r3, [pc, #28]	; (800df7c <USBD_SetConfig+0x150>)
 800df60:	781b      	ldrb	r3, [r3, #0]
 800df62:	4619      	mov	r1, r3
 800df64:	6878      	ldr	r0, [r7, #4]
 800df66:	f7fe ff62 	bl	800ce2e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800df6a:	2303      	movs	r3, #3
 800df6c:	73fb      	strb	r3, [r7, #15]
      break;
 800df6e:	bf00      	nop
  }

  return ret;
 800df70:	7bfb      	ldrb	r3, [r7, #15]
}
 800df72:	4618      	mov	r0, r3
 800df74:	3710      	adds	r7, #16
 800df76:	46bd      	mov	sp, r7
 800df78:	bd80      	pop	{r7, pc}
 800df7a:	bf00      	nop
 800df7c:	2400a9cc 	.word	0x2400a9cc

0800df80 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800df80:	b580      	push	{r7, lr}
 800df82:	b082      	sub	sp, #8
 800df84:	af00      	add	r7, sp, #0
 800df86:	6078      	str	r0, [r7, #4]
 800df88:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800df8a:	683b      	ldr	r3, [r7, #0]
 800df8c:	88db      	ldrh	r3, [r3, #6]
 800df8e:	2b01      	cmp	r3, #1
 800df90:	d004      	beq.n	800df9c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800df92:	6839      	ldr	r1, [r7, #0]
 800df94:	6878      	ldr	r0, [r7, #4]
 800df96:	f000 f8e2 	bl	800e15e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800df9a:	e023      	b.n	800dfe4 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dfa2:	b2db      	uxtb	r3, r3
 800dfa4:	2b02      	cmp	r3, #2
 800dfa6:	dc02      	bgt.n	800dfae <USBD_GetConfig+0x2e>
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	dc03      	bgt.n	800dfb4 <USBD_GetConfig+0x34>
 800dfac:	e015      	b.n	800dfda <USBD_GetConfig+0x5a>
 800dfae:	2b03      	cmp	r3, #3
 800dfb0:	d00b      	beq.n	800dfca <USBD_GetConfig+0x4a>
 800dfb2:	e012      	b.n	800dfda <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	2200      	movs	r2, #0
 800dfb8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	3308      	adds	r3, #8
 800dfbe:	2201      	movs	r2, #1
 800dfc0:	4619      	mov	r1, r3
 800dfc2:	6878      	ldr	r0, [r7, #4]
 800dfc4:	f000 f93c 	bl	800e240 <USBD_CtlSendData>
        break;
 800dfc8:	e00c      	b.n	800dfe4 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800dfca:	687b      	ldr	r3, [r7, #4]
 800dfcc:	3304      	adds	r3, #4
 800dfce:	2201      	movs	r2, #1
 800dfd0:	4619      	mov	r1, r3
 800dfd2:	6878      	ldr	r0, [r7, #4]
 800dfd4:	f000 f934 	bl	800e240 <USBD_CtlSendData>
        break;
 800dfd8:	e004      	b.n	800dfe4 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800dfda:	6839      	ldr	r1, [r7, #0]
 800dfdc:	6878      	ldr	r0, [r7, #4]
 800dfde:	f000 f8be 	bl	800e15e <USBD_CtlError>
        break;
 800dfe2:	bf00      	nop
}
 800dfe4:	bf00      	nop
 800dfe6:	3708      	adds	r7, #8
 800dfe8:	46bd      	mov	sp, r7
 800dfea:	bd80      	pop	{r7, pc}

0800dfec <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dfec:	b580      	push	{r7, lr}
 800dfee:	b082      	sub	sp, #8
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	6078      	str	r0, [r7, #4]
 800dff4:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800dffc:	b2db      	uxtb	r3, r3
 800dffe:	3b01      	subs	r3, #1
 800e000:	2b02      	cmp	r3, #2
 800e002:	d81e      	bhi.n	800e042 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800e004:	683b      	ldr	r3, [r7, #0]
 800e006:	88db      	ldrh	r3, [r3, #6]
 800e008:	2b02      	cmp	r3, #2
 800e00a:	d004      	beq.n	800e016 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800e00c:	6839      	ldr	r1, [r7, #0]
 800e00e:	6878      	ldr	r0, [r7, #4]
 800e010:	f000 f8a5 	bl	800e15e <USBD_CtlError>
        break;
 800e014:	e01a      	b.n	800e04c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	2201      	movs	r2, #1
 800e01a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800e01c:	687b      	ldr	r3, [r7, #4]
 800e01e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800e022:	2b00      	cmp	r3, #0
 800e024:	d005      	beq.n	800e032 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	68db      	ldr	r3, [r3, #12]
 800e02a:	f043 0202 	orr.w	r2, r3, #2
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	330c      	adds	r3, #12
 800e036:	2202      	movs	r2, #2
 800e038:	4619      	mov	r1, r3
 800e03a:	6878      	ldr	r0, [r7, #4]
 800e03c:	f000 f900 	bl	800e240 <USBD_CtlSendData>
      break;
 800e040:	e004      	b.n	800e04c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800e042:	6839      	ldr	r1, [r7, #0]
 800e044:	6878      	ldr	r0, [r7, #4]
 800e046:	f000 f88a 	bl	800e15e <USBD_CtlError>
      break;
 800e04a:	bf00      	nop
  }
}
 800e04c:	bf00      	nop
 800e04e:	3708      	adds	r7, #8
 800e050:	46bd      	mov	sp, r7
 800e052:	bd80      	pop	{r7, pc}

0800e054 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e054:	b580      	push	{r7, lr}
 800e056:	b082      	sub	sp, #8
 800e058:	af00      	add	r7, sp, #0
 800e05a:	6078      	str	r0, [r7, #4]
 800e05c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e05e:	683b      	ldr	r3, [r7, #0]
 800e060:	885b      	ldrh	r3, [r3, #2]
 800e062:	2b01      	cmp	r3, #1
 800e064:	d107      	bne.n	800e076 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800e066:	687b      	ldr	r3, [r7, #4]
 800e068:	2201      	movs	r2, #1
 800e06a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800e06e:	6878      	ldr	r0, [r7, #4]
 800e070:	f000 f940 	bl	800e2f4 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800e074:	e013      	b.n	800e09e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800e076:	683b      	ldr	r3, [r7, #0]
 800e078:	885b      	ldrh	r3, [r3, #2]
 800e07a:	2b02      	cmp	r3, #2
 800e07c:	d10b      	bne.n	800e096 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800e07e:	683b      	ldr	r3, [r7, #0]
 800e080:	889b      	ldrh	r3, [r3, #4]
 800e082:	0a1b      	lsrs	r3, r3, #8
 800e084:	b29b      	uxth	r3, r3
 800e086:	b2da      	uxtb	r2, r3
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800e08e:	6878      	ldr	r0, [r7, #4]
 800e090:	f000 f930 	bl	800e2f4 <USBD_CtlSendStatus>
}
 800e094:	e003      	b.n	800e09e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800e096:	6839      	ldr	r1, [r7, #0]
 800e098:	6878      	ldr	r0, [r7, #4]
 800e09a:	f000 f860 	bl	800e15e <USBD_CtlError>
}
 800e09e:	bf00      	nop
 800e0a0:	3708      	adds	r7, #8
 800e0a2:	46bd      	mov	sp, r7
 800e0a4:	bd80      	pop	{r7, pc}

0800e0a6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e0a6:	b580      	push	{r7, lr}
 800e0a8:	b082      	sub	sp, #8
 800e0aa:	af00      	add	r7, sp, #0
 800e0ac:	6078      	str	r0, [r7, #4]
 800e0ae:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800e0b6:	b2db      	uxtb	r3, r3
 800e0b8:	3b01      	subs	r3, #1
 800e0ba:	2b02      	cmp	r3, #2
 800e0bc:	d80b      	bhi.n	800e0d6 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800e0be:	683b      	ldr	r3, [r7, #0]
 800e0c0:	885b      	ldrh	r3, [r3, #2]
 800e0c2:	2b01      	cmp	r3, #1
 800e0c4:	d10c      	bne.n	800e0e0 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800e0c6:	687b      	ldr	r3, [r7, #4]
 800e0c8:	2200      	movs	r2, #0
 800e0ca:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800e0ce:	6878      	ldr	r0, [r7, #4]
 800e0d0:	f000 f910 	bl	800e2f4 <USBD_CtlSendStatus>
      }
      break;
 800e0d4:	e004      	b.n	800e0e0 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800e0d6:	6839      	ldr	r1, [r7, #0]
 800e0d8:	6878      	ldr	r0, [r7, #4]
 800e0da:	f000 f840 	bl	800e15e <USBD_CtlError>
      break;
 800e0de:	e000      	b.n	800e0e2 <USBD_ClrFeature+0x3c>
      break;
 800e0e0:	bf00      	nop
  }
}
 800e0e2:	bf00      	nop
 800e0e4:	3708      	adds	r7, #8
 800e0e6:	46bd      	mov	sp, r7
 800e0e8:	bd80      	pop	{r7, pc}

0800e0ea <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800e0ea:	b580      	push	{r7, lr}
 800e0ec:	b084      	sub	sp, #16
 800e0ee:	af00      	add	r7, sp, #0
 800e0f0:	6078      	str	r0, [r7, #4]
 800e0f2:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800e0f4:	683b      	ldr	r3, [r7, #0]
 800e0f6:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800e0f8:	68fb      	ldr	r3, [r7, #12]
 800e0fa:	781a      	ldrb	r2, [r3, #0]
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	3301      	adds	r3, #1
 800e104:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	781a      	ldrb	r2, [r3, #0]
 800e10a:	687b      	ldr	r3, [r7, #4]
 800e10c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800e10e:	68fb      	ldr	r3, [r7, #12]
 800e110:	3301      	adds	r3, #1
 800e112:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800e114:	68f8      	ldr	r0, [r7, #12]
 800e116:	f7ff fa17 	bl	800d548 <SWAPBYTE>
 800e11a:	4603      	mov	r3, r0
 800e11c:	461a      	mov	r2, r3
 800e11e:	687b      	ldr	r3, [r7, #4]
 800e120:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	3301      	adds	r3, #1
 800e126:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e128:	68fb      	ldr	r3, [r7, #12]
 800e12a:	3301      	adds	r3, #1
 800e12c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800e12e:	68f8      	ldr	r0, [r7, #12]
 800e130:	f7ff fa0a 	bl	800d548 <SWAPBYTE>
 800e134:	4603      	mov	r3, r0
 800e136:	461a      	mov	r2, r3
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800e13c:	68fb      	ldr	r3, [r7, #12]
 800e13e:	3301      	adds	r3, #1
 800e140:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	3301      	adds	r3, #1
 800e146:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800e148:	68f8      	ldr	r0, [r7, #12]
 800e14a:	f7ff f9fd 	bl	800d548 <SWAPBYTE>
 800e14e:	4603      	mov	r3, r0
 800e150:	461a      	mov	r2, r3
 800e152:	687b      	ldr	r3, [r7, #4]
 800e154:	80da      	strh	r2, [r3, #6]
}
 800e156:	bf00      	nop
 800e158:	3710      	adds	r7, #16
 800e15a:	46bd      	mov	sp, r7
 800e15c:	bd80      	pop	{r7, pc}

0800e15e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800e15e:	b580      	push	{r7, lr}
 800e160:	b082      	sub	sp, #8
 800e162:	af00      	add	r7, sp, #0
 800e164:	6078      	str	r0, [r7, #4]
 800e166:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800e168:	2180      	movs	r1, #128	; 0x80
 800e16a:	6878      	ldr	r0, [r7, #4]
 800e16c:	f001 f86e 	bl	800f24c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800e170:	2100      	movs	r1, #0
 800e172:	6878      	ldr	r0, [r7, #4]
 800e174:	f001 f86a 	bl	800f24c <USBD_LL_StallEP>
}
 800e178:	bf00      	nop
 800e17a:	3708      	adds	r7, #8
 800e17c:	46bd      	mov	sp, r7
 800e17e:	bd80      	pop	{r7, pc}

0800e180 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800e180:	b580      	push	{r7, lr}
 800e182:	b086      	sub	sp, #24
 800e184:	af00      	add	r7, sp, #0
 800e186:	60f8      	str	r0, [r7, #12]
 800e188:	60b9      	str	r1, [r7, #8]
 800e18a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800e18c:	2300      	movs	r3, #0
 800e18e:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800e190:	68fb      	ldr	r3, [r7, #12]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d036      	beq.n	800e204 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800e19a:	6938      	ldr	r0, [r7, #16]
 800e19c:	f000 f836 	bl	800e20c <USBD_GetLen>
 800e1a0:	4603      	mov	r3, r0
 800e1a2:	3301      	adds	r3, #1
 800e1a4:	b29b      	uxth	r3, r3
 800e1a6:	005b      	lsls	r3, r3, #1
 800e1a8:	b29a      	uxth	r2, r3
 800e1aa:	687b      	ldr	r3, [r7, #4]
 800e1ac:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800e1ae:	7dfb      	ldrb	r3, [r7, #23]
 800e1b0:	68ba      	ldr	r2, [r7, #8]
 800e1b2:	4413      	add	r3, r2
 800e1b4:	687a      	ldr	r2, [r7, #4]
 800e1b6:	7812      	ldrb	r2, [r2, #0]
 800e1b8:	701a      	strb	r2, [r3, #0]
  idx++;
 800e1ba:	7dfb      	ldrb	r3, [r7, #23]
 800e1bc:	3301      	adds	r3, #1
 800e1be:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800e1c0:	7dfb      	ldrb	r3, [r7, #23]
 800e1c2:	68ba      	ldr	r2, [r7, #8]
 800e1c4:	4413      	add	r3, r2
 800e1c6:	2203      	movs	r2, #3
 800e1c8:	701a      	strb	r2, [r3, #0]
  idx++;
 800e1ca:	7dfb      	ldrb	r3, [r7, #23]
 800e1cc:	3301      	adds	r3, #1
 800e1ce:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800e1d0:	e013      	b.n	800e1fa <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800e1d2:	7dfb      	ldrb	r3, [r7, #23]
 800e1d4:	68ba      	ldr	r2, [r7, #8]
 800e1d6:	4413      	add	r3, r2
 800e1d8:	693a      	ldr	r2, [r7, #16]
 800e1da:	7812      	ldrb	r2, [r2, #0]
 800e1dc:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800e1de:	693b      	ldr	r3, [r7, #16]
 800e1e0:	3301      	adds	r3, #1
 800e1e2:	613b      	str	r3, [r7, #16]
    idx++;
 800e1e4:	7dfb      	ldrb	r3, [r7, #23]
 800e1e6:	3301      	adds	r3, #1
 800e1e8:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800e1ea:	7dfb      	ldrb	r3, [r7, #23]
 800e1ec:	68ba      	ldr	r2, [r7, #8]
 800e1ee:	4413      	add	r3, r2
 800e1f0:	2200      	movs	r2, #0
 800e1f2:	701a      	strb	r2, [r3, #0]
    idx++;
 800e1f4:	7dfb      	ldrb	r3, [r7, #23]
 800e1f6:	3301      	adds	r3, #1
 800e1f8:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800e1fa:	693b      	ldr	r3, [r7, #16]
 800e1fc:	781b      	ldrb	r3, [r3, #0]
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d1e7      	bne.n	800e1d2 <USBD_GetString+0x52>
 800e202:	e000      	b.n	800e206 <USBD_GetString+0x86>
    return;
 800e204:	bf00      	nop
  }
}
 800e206:	3718      	adds	r7, #24
 800e208:	46bd      	mov	sp, r7
 800e20a:	bd80      	pop	{r7, pc}

0800e20c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e20c:	b480      	push	{r7}
 800e20e:	b085      	sub	sp, #20
 800e210:	af00      	add	r7, sp, #0
 800e212:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800e214:	2300      	movs	r3, #0
 800e216:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800e21c:	e005      	b.n	800e22a <USBD_GetLen+0x1e>
  {
    len++;
 800e21e:	7bfb      	ldrb	r3, [r7, #15]
 800e220:	3301      	adds	r3, #1
 800e222:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800e224:	68bb      	ldr	r3, [r7, #8]
 800e226:	3301      	adds	r3, #1
 800e228:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800e22a:	68bb      	ldr	r3, [r7, #8]
 800e22c:	781b      	ldrb	r3, [r3, #0]
 800e22e:	2b00      	cmp	r3, #0
 800e230:	d1f5      	bne.n	800e21e <USBD_GetLen+0x12>
  }

  return len;
 800e232:	7bfb      	ldrb	r3, [r7, #15]
}
 800e234:	4618      	mov	r0, r3
 800e236:	3714      	adds	r7, #20
 800e238:	46bd      	mov	sp, r7
 800e23a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e23e:	4770      	bx	lr

0800e240 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800e240:	b580      	push	{r7, lr}
 800e242:	b084      	sub	sp, #16
 800e244:	af00      	add	r7, sp, #0
 800e246:	60f8      	str	r0, [r7, #12]
 800e248:	60b9      	str	r1, [r7, #8]
 800e24a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	2202      	movs	r2, #2
 800e250:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	687a      	ldr	r2, [r7, #4]
 800e258:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	687a      	ldr	r2, [r7, #4]
 800e25e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e260:	687b      	ldr	r3, [r7, #4]
 800e262:	68ba      	ldr	r2, [r7, #8]
 800e264:	2100      	movs	r1, #0
 800e266:	68f8      	ldr	r0, [r7, #12]
 800e268:	f001 f879 	bl	800f35e <USBD_LL_Transmit>

  return USBD_OK;
 800e26c:	2300      	movs	r3, #0
}
 800e26e:	4618      	mov	r0, r3
 800e270:	3710      	adds	r7, #16
 800e272:	46bd      	mov	sp, r7
 800e274:	bd80      	pop	{r7, pc}

0800e276 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800e276:	b580      	push	{r7, lr}
 800e278:	b084      	sub	sp, #16
 800e27a:	af00      	add	r7, sp, #0
 800e27c:	60f8      	str	r0, [r7, #12]
 800e27e:	60b9      	str	r1, [r7, #8]
 800e280:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800e282:	687b      	ldr	r3, [r7, #4]
 800e284:	68ba      	ldr	r2, [r7, #8]
 800e286:	2100      	movs	r1, #0
 800e288:	68f8      	ldr	r0, [r7, #12]
 800e28a:	f001 f868 	bl	800f35e <USBD_LL_Transmit>

  return USBD_OK;
 800e28e:	2300      	movs	r3, #0
}
 800e290:	4618      	mov	r0, r3
 800e292:	3710      	adds	r7, #16
 800e294:	46bd      	mov	sp, r7
 800e296:	bd80      	pop	{r7, pc}

0800e298 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800e298:	b580      	push	{r7, lr}
 800e29a:	b084      	sub	sp, #16
 800e29c:	af00      	add	r7, sp, #0
 800e29e:	60f8      	str	r0, [r7, #12]
 800e2a0:	60b9      	str	r1, [r7, #8]
 800e2a2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	2203      	movs	r2, #3
 800e2a8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800e2ac:	68fb      	ldr	r3, [r7, #12]
 800e2ae:	687a      	ldr	r2, [r7, #4]
 800e2b0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	687a      	ldr	r2, [r7, #4]
 800e2b8:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	68ba      	ldr	r2, [r7, #8]
 800e2c0:	2100      	movs	r1, #0
 800e2c2:	68f8      	ldr	r0, [r7, #12]
 800e2c4:	f001 f86c 	bl	800f3a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e2c8:	2300      	movs	r3, #0
}
 800e2ca:	4618      	mov	r0, r3
 800e2cc:	3710      	adds	r7, #16
 800e2ce:	46bd      	mov	sp, r7
 800e2d0:	bd80      	pop	{r7, pc}

0800e2d2 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800e2d2:	b580      	push	{r7, lr}
 800e2d4:	b084      	sub	sp, #16
 800e2d6:	af00      	add	r7, sp, #0
 800e2d8:	60f8      	str	r0, [r7, #12]
 800e2da:	60b9      	str	r1, [r7, #8]
 800e2dc:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	68ba      	ldr	r2, [r7, #8]
 800e2e2:	2100      	movs	r1, #0
 800e2e4:	68f8      	ldr	r0, [r7, #12]
 800e2e6:	f001 f85b 	bl	800f3a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e2ea:	2300      	movs	r3, #0
}
 800e2ec:	4618      	mov	r0, r3
 800e2ee:	3710      	adds	r7, #16
 800e2f0:	46bd      	mov	sp, r7
 800e2f2:	bd80      	pop	{r7, pc}

0800e2f4 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	b082      	sub	sp, #8
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	2204      	movs	r2, #4
 800e300:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e304:	2300      	movs	r3, #0
 800e306:	2200      	movs	r2, #0
 800e308:	2100      	movs	r1, #0
 800e30a:	6878      	ldr	r0, [r7, #4]
 800e30c:	f001 f827 	bl	800f35e <USBD_LL_Transmit>

  return USBD_OK;
 800e310:	2300      	movs	r3, #0
}
 800e312:	4618      	mov	r0, r3
 800e314:	3708      	adds	r7, #8
 800e316:	46bd      	mov	sp, r7
 800e318:	bd80      	pop	{r7, pc}

0800e31a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800e31a:	b580      	push	{r7, lr}
 800e31c:	b082      	sub	sp, #8
 800e31e:	af00      	add	r7, sp, #0
 800e320:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e322:	687b      	ldr	r3, [r7, #4]
 800e324:	2205      	movs	r2, #5
 800e326:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800e32a:	2300      	movs	r3, #0
 800e32c:	2200      	movs	r2, #0
 800e32e:	2100      	movs	r1, #0
 800e330:	6878      	ldr	r0, [r7, #4]
 800e332:	f001 f835 	bl	800f3a0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e336:	2300      	movs	r3, #0
}
 800e338:	4618      	mov	r0, r3
 800e33a:	3708      	adds	r7, #8
 800e33c:	46bd      	mov	sp, r7
 800e33e:	bd80      	pop	{r7, pc}

0800e340 <lcd_display_image>:
#include "fonts.h"



void lcd_display_image(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t *image)
{
 800e340:	b590      	push	{r4, r7, lr}
 800e342:	b085      	sub	sp, #20
 800e344:	af02      	add	r7, sp, #8
 800e346:	4604      	mov	r4, r0
 800e348:	4608      	mov	r0, r1
 800e34a:	4611      	mov	r1, r2
 800e34c:	461a      	mov	r2, r3
 800e34e:	4623      	mov	r3, r4
 800e350:	80fb      	strh	r3, [r7, #6]
 800e352:	4603      	mov	r3, r0
 800e354:	80bb      	strh	r3, [r7, #4]
 800e356:	460b      	mov	r3, r1
 800e358:	807b      	strh	r3, [r7, #2]
 800e35a:	4613      	mov	r3, r2
 800e35c:	803b      	strh	r3, [r7, #0]
	ST7735_DrawImage(x,y,width,height,image);
 800e35e:	883c      	ldrh	r4, [r7, #0]
 800e360:	887a      	ldrh	r2, [r7, #2]
 800e362:	88b9      	ldrh	r1, [r7, #4]
 800e364:	88f8      	ldrh	r0, [r7, #6]
 800e366:	69bb      	ldr	r3, [r7, #24]
 800e368:	9300      	str	r3, [sp, #0]
 800e36a:	4623      	mov	r3, r4
 800e36c:	f000 fa8a 	bl	800e884 <ST7735_DrawImage>

}
 800e370:	bf00      	nop
 800e372:	370c      	adds	r7, #12
 800e374:	46bd      	mov	sp, r7
 800e376:	bd90      	pop	{r4, r7, pc}

0800e378 <lcd_init>:
        p++;
    }
}

void lcd_init(void)
{
 800e378:	b580      	push	{r7, lr}
 800e37a:	af00      	add	r7, sp, #0
	uint32_t i;
	HAL_GPIO_WritePin(LCD_LED_GPIO_Port, LCD_LED_Pin, GPIO_PIN_SET);
 800e37c:	2201      	movs	r2, #1
 800e37e:	2120      	movs	r1, #32
 800e380:	4810      	ldr	r0, [pc, #64]	; (800e3c4 <lcd_init+0x4c>)
 800e382:	f7f7 f9b5 	bl	80056f0 <HAL_GPIO_WritePin>
	ST7735_Init();
 800e386:	f000 f8dd 	bl	800e544 <ST7735_Init>
	ST7735_FillScreen(RED);
 800e38a:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 800e38e:	f000 fa67 	bl	800e860 <ST7735_FillScreen>
	HAL_Delay(200);
 800e392:	20c8      	movs	r0, #200	; 0xc8
 800e394:	f7f2 ff9a 	bl	80012cc <HAL_Delay>
	ST7735_FillScreen(GREEN);
 800e398:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 800e39c:	f000 fa60 	bl	800e860 <ST7735_FillScreen>
	HAL_Delay(200);
 800e3a0:	20c8      	movs	r0, #200	; 0xc8
 800e3a2:	f7f2 ff93 	bl	80012cc <HAL_Delay>
	ST7735_FillScreen(BLUE);
 800e3a6:	201f      	movs	r0, #31
 800e3a8:	f000 fa5a 	bl	800e860 <ST7735_FillScreen>
	HAL_Delay(200);
 800e3ac:	20c8      	movs	r0, #200	; 0xc8
 800e3ae:	f7f2 ff8d 	bl	80012cc <HAL_Delay>
	ST7735_FillScreen(WHITE);
 800e3b2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800e3b6:	f000 fa53 	bl	800e860 <ST7735_FillScreen>
	HAL_Delay(200);
 800e3ba:	20c8      	movs	r0, #200	; 0xc8
 800e3bc:	f7f2 ff86 	bl	80012cc <HAL_Delay>
//	LCD_ShowString(0, 0, 160, 128, 16, " lcd display test ");
//    for(i=0;i<100;i++)
//    {
//    	ST7735_DrawPixel(i,i,RED);
//    }
}
 800e3c0:	bf00      	nop
 800e3c2:	bd80      	pop	{r7, pc}
 800e3c4:	58020000 	.word	0x58020000

0800e3c8 <ST7735_Reset>:
#define ST7735_MADCTL_MY  0x80
#define ST7735_MADCTL_MV  0x20
#define ST7735_MADCTL_RGB 0x00

void ST7735_Reset(void)
{
 800e3c8:	b580      	push	{r7, lr}
 800e3ca:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 800e3cc:	2200      	movs	r2, #0
 800e3ce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800e3d2:	4808      	ldr	r0, [pc, #32]	; (800e3f4 <ST7735_Reset+0x2c>)
 800e3d4:	f7f7 f98c 	bl	80056f0 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800e3d8:	2064      	movs	r0, #100	; 0x64
 800e3da:	f7f2 ff77 	bl	80012cc <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_SET);
 800e3de:	2201      	movs	r2, #1
 800e3e0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800e3e4:	4803      	ldr	r0, [pc, #12]	; (800e3f4 <ST7735_Reset+0x2c>)
 800e3e6:	f7f7 f983 	bl	80056f0 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 800e3ea:	2064      	movs	r0, #100	; 0x64
 800e3ec:	f7f2 ff6e 	bl	80012cc <HAL_Delay>
}
 800e3f0:	bf00      	nop
 800e3f2:	bd80      	pop	{r7, pc}
 800e3f4:	58020c00 	.word	0x58020c00

0800e3f8 <ST7735_WriteCommand>:

void ST7735_WriteCommand(uint8_t cmd)
{
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	b082      	sub	sp, #8
 800e3fc:	af00      	add	r7, sp, #0
 800e3fe:	4603      	mov	r3, r0
 800e400:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_RESET);
 800e402:	2200      	movs	r2, #0
 800e404:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800e408:	480c      	ldr	r0, [pc, #48]	; (800e43c <ST7735_WriteCommand+0x44>)
 800e40a:	f7f7 f971 	bl	80056f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800e40e:	2200      	movs	r2, #0
 800e410:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800e414:	480a      	ldr	r0, [pc, #40]	; (800e440 <ST7735_WriteCommand+0x48>)
 800e416:	f7f7 f96b 	bl	80056f0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &cmd, 1, 100);
 800e41a:	1df9      	adds	r1, r7, #7
 800e41c:	2364      	movs	r3, #100	; 0x64
 800e41e:	2201      	movs	r2, #1
 800e420:	4808      	ldr	r0, [pc, #32]	; (800e444 <ST7735_WriteCommand+0x4c>)
 800e422:	f7fb ff45 	bl	800a2b0 <HAL_SPI_Transmit>
//  HAL_SPI_Transmit_DMA(&hspi2, &cmd, 1);
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 800e426:	2201      	movs	r2, #1
 800e428:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800e42c:	4804      	ldr	r0, [pc, #16]	; (800e440 <ST7735_WriteCommand+0x48>)
 800e42e:	f7f7 f95f 	bl	80056f0 <HAL_GPIO_WritePin>
}
 800e432:	bf00      	nop
 800e434:	3708      	adds	r7, #8
 800e436:	46bd      	mov	sp, r7
 800e438:	bd80      	pop	{r7, pc}
 800e43a:	bf00      	nop
 800e43c:	58020c00 	.word	0x58020c00
 800e440:	58020400 	.word	0x58020400
 800e444:	2400a8c4 	.word	0x2400a8c4

0800e448 <ST7735_WriteData>:

void ST7735_WriteData(uint8_t data)
{
 800e448:	b580      	push	{r7, lr}
 800e44a:	b082      	sub	sp, #8
 800e44c:	af00      	add	r7, sp, #0
 800e44e:	4603      	mov	r3, r0
 800e450:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 800e452:	2201      	movs	r2, #1
 800e454:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800e458:	480c      	ldr	r0, [pc, #48]	; (800e48c <ST7735_WriteData+0x44>)
 800e45a:	f7f7 f949 	bl	80056f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800e45e:	2200      	movs	r2, #0
 800e460:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800e464:	480a      	ldr	r0, [pc, #40]	; (800e490 <ST7735_WriteData+0x48>)
 800e466:	f7f7 f943 	bl	80056f0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, &data, 1, 100);
 800e46a:	1df9      	adds	r1, r7, #7
 800e46c:	2364      	movs	r3, #100	; 0x64
 800e46e:	2201      	movs	r2, #1
 800e470:	4808      	ldr	r0, [pc, #32]	; (800e494 <ST7735_WriteData+0x4c>)
 800e472:	f7fb ff1d 	bl	800a2b0 <HAL_SPI_Transmit>
//  HAL_SPI_Transmit_DMA(&hspi2, &data, 1);
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 800e476:	2201      	movs	r2, #1
 800e478:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800e47c:	4804      	ldr	r0, [pc, #16]	; (800e490 <ST7735_WriteData+0x48>)
 800e47e:	f7f7 f937 	bl	80056f0 <HAL_GPIO_WritePin>
}
 800e482:	bf00      	nop
 800e484:	3708      	adds	r7, #8
 800e486:	46bd      	mov	sp, r7
 800e488:	bd80      	pop	{r7, pc}
 800e48a:	bf00      	nop
 800e48c:	58020c00 	.word	0x58020c00
 800e490:	58020400 	.word	0x58020400
 800e494:	2400a8c4 	.word	0x2400a8c4

0800e498 <ST7735_WriteBuf>:

void ST7735_WriteBuf(uint8_t* data,uint16_t len)
{
 800e498:	b580      	push	{r7, lr}
 800e49a:	b082      	sub	sp, #8
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	6078      	str	r0, [r7, #4]
 800e4a0:	460b      	mov	r3, r1
 800e4a2:	807b      	strh	r3, [r7, #2]
  HAL_GPIO_WritePin(LCD_RS_GPIO_Port, LCD_RS_Pin, GPIO_PIN_SET);
 800e4a4:	2201      	movs	r2, #1
 800e4a6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800e4aa:	480c      	ldr	r0, [pc, #48]	; (800e4dc <ST7735_WriteBuf+0x44>)
 800e4ac:	f7f7 f920 	bl	80056f0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_RESET);
 800e4b0:	2200      	movs	r2, #0
 800e4b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800e4b6:	480a      	ldr	r0, [pc, #40]	; (800e4e0 <ST7735_WriteBuf+0x48>)
 800e4b8:	f7f7 f91a 	bl	80056f0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi2, data, len, 100);
 800e4bc:	887a      	ldrh	r2, [r7, #2]
 800e4be:	2364      	movs	r3, #100	; 0x64
 800e4c0:	6879      	ldr	r1, [r7, #4]
 800e4c2:	4808      	ldr	r0, [pc, #32]	; (800e4e4 <ST7735_WriteBuf+0x4c>)
 800e4c4:	f7fb fef4 	bl	800a2b0 <HAL_SPI_Transmit>
//  HAL_SPI_Transmit_DMA(&hspi2, &data, 1);
  HAL_GPIO_WritePin(LCD_CS_GPIO_Port, LCD_CS_Pin, GPIO_PIN_SET);
 800e4c8:	2201      	movs	r2, #1
 800e4ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800e4ce:	4804      	ldr	r0, [pc, #16]	; (800e4e0 <ST7735_WriteBuf+0x48>)
 800e4d0:	f7f7 f90e 	bl	80056f0 <HAL_GPIO_WritePin>
}
 800e4d4:	bf00      	nop
 800e4d6:	3708      	adds	r7, #8
 800e4d8:	46bd      	mov	sp, r7
 800e4da:	bd80      	pop	{r7, pc}
 800e4dc:	58020c00 	.word	0x58020c00
 800e4e0:	58020400 	.word	0x58020400
 800e4e4:	2400a8c4 	.word	0x2400a8c4

0800e4e8 <ST7735_SetRotation>:


void ST7735_SetRotation(uint8_t rotation)
{
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b084      	sub	sp, #16
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	4603      	mov	r3, r0
 800e4f0:	71fb      	strb	r3, [r7, #7]
    uint8_t madctl = 0;
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	73fb      	strb	r3, [r7, #15]

    switch (rotation)
 800e4f6:	79fb      	ldrb	r3, [r7, #7]
 800e4f8:	2b03      	cmp	r3, #3
 800e4fa:	d817      	bhi.n	800e52c <ST7735_SetRotation+0x44>
 800e4fc:	a201      	add	r2, pc, #4	; (adr r2, 800e504 <ST7735_SetRotation+0x1c>)
 800e4fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e502:	bf00      	nop
 800e504:	0800e515 	.word	0x0800e515
 800e508:	0800e51b 	.word	0x0800e51b
 800e50c:	0800e521 	.word	0x0800e521
 800e510:	0800e527 	.word	0x0800e527
    {
        case 0:
            madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MY | ST7735_MADCTL_RGB;
 800e514:	23c0      	movs	r3, #192	; 0xc0
 800e516:	73fb      	strb	r3, [r7, #15]
            break;
 800e518:	e008      	b.n	800e52c <ST7735_SetRotation+0x44>
        case 1:
            madctl = ST7735_MADCTL_MY | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 800e51a:	23a0      	movs	r3, #160	; 0xa0
 800e51c:	73fb      	strb	r3, [r7, #15]
            break;
 800e51e:	e005      	b.n	800e52c <ST7735_SetRotation+0x44>
        case 2:
            madctl = ST7735_MADCTL_RGB;
 800e520:	2300      	movs	r3, #0
 800e522:	73fb      	strb	r3, [r7, #15]
            break;
 800e524:	e002      	b.n	800e52c <ST7735_SetRotation+0x44>
        case 3:
            madctl = ST7735_MADCTL_MX | ST7735_MADCTL_MV | ST7735_MADCTL_RGB;
 800e526:	2360      	movs	r3, #96	; 0x60
 800e528:	73fb      	strb	r3, [r7, #15]
            break;
 800e52a:	bf00      	nop
    }

    ST7735_WriteCommand(ST7735_MADCTL);
 800e52c:	2036      	movs	r0, #54	; 0x36
 800e52e:	f7ff ff63 	bl	800e3f8 <ST7735_WriteCommand>
    ST7735_WriteData(madctl);
 800e532:	7bfb      	ldrb	r3, [r7, #15]
 800e534:	4618      	mov	r0, r3
 800e536:	f7ff ff87 	bl	800e448 <ST7735_WriteData>
}
 800e53a:	bf00      	nop
 800e53c:	3710      	adds	r7, #16
 800e53e:	46bd      	mov	sp, r7
 800e540:	bd80      	pop	{r7, pc}
 800e542:	bf00      	nop

0800e544 <ST7735_Init>:

void ST7735_Init(void) {
 800e544:	b580      	push	{r7, lr}
 800e546:	af00      	add	r7, sp, #0
  // Initialize the display
  ST7735_Reset();
 800e548:	f7ff ff3e 	bl	800e3c8 <ST7735_Reset>
  ST7735_WriteCommand(ST7735_SLPOUT);
 800e54c:	2011      	movs	r0, #17
 800e54e:	f7ff ff53 	bl	800e3f8 <ST7735_WriteCommand>
  HAL_Delay(120);
 800e552:	2078      	movs	r0, #120	; 0x78
 800e554:	f7f2 feba 	bl	80012cc <HAL_Delay>
  ST7735_WriteCommand(ST7735_FRMCTR1);
 800e558:	20b1      	movs	r0, #177	; 0xb1
 800e55a:	f7ff ff4d 	bl	800e3f8 <ST7735_WriteCommand>
  ST7735_WriteData(0x01);
 800e55e:	2001      	movs	r0, #1
 800e560:	f7ff ff72 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteData(0x2C);
 800e564:	202c      	movs	r0, #44	; 0x2c
 800e566:	f7ff ff6f 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteData(0x2D);
 800e56a:	202d      	movs	r0, #45	; 0x2d
 800e56c:	f7ff ff6c 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_FRMCTR2);
 800e570:	20b2      	movs	r0, #178	; 0xb2
 800e572:	f7ff ff41 	bl	800e3f8 <ST7735_WriteCommand>
  ST7735_WriteData(0x01);
 800e576:	2001      	movs	r0, #1
 800e578:	f7ff ff66 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteData(0x2C);
 800e57c:	202c      	movs	r0, #44	; 0x2c
 800e57e:	f7ff ff63 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteData(0x2D);
 800e582:	202d      	movs	r0, #45	; 0x2d
 800e584:	f7ff ff60 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_FRMCTR3);
 800e588:	20b3      	movs	r0, #179	; 0xb3
 800e58a:	f7ff ff35 	bl	800e3f8 <ST7735_WriteCommand>
  ST7735_WriteData(0x01);
 800e58e:	2001      	movs	r0, #1
 800e590:	f7ff ff5a 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteData(0x2C);
 800e594:	202c      	movs	r0, #44	; 0x2c
 800e596:	f7ff ff57 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteData(0x2D);
 800e59a:	202d      	movs	r0, #45	; 0x2d
 800e59c:	f7ff ff54 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteData(0x01);
 800e5a0:	2001      	movs	r0, #1
 800e5a2:	f7ff ff51 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteData(0x2C);
 800e5a6:	202c      	movs	r0, #44	; 0x2c
 800e5a8:	f7ff ff4e 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteData(0x2D);
 800e5ac:	202d      	movs	r0, #45	; 0x2d
 800e5ae:	f7ff ff4b 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_INVCTR);
 800e5b2:	20b4      	movs	r0, #180	; 0xb4
 800e5b4:	f7ff ff20 	bl	800e3f8 <ST7735_WriteCommand>
  ST7735_WriteData(0x07);
 800e5b8:	2007      	movs	r0, #7
 800e5ba:	f7ff ff45 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_PWCTR1);
 800e5be:	20c0      	movs	r0, #192	; 0xc0
 800e5c0:	f7ff ff1a 	bl	800e3f8 <ST7735_WriteCommand>
  ST7735_WriteData(0xA2);
 800e5c4:	20a2      	movs	r0, #162	; 0xa2
 800e5c6:	f7ff ff3f 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteData(0x02);
 800e5ca:	2002      	movs	r0, #2
 800e5cc:	f7ff ff3c 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteData(0x84);
 800e5d0:	2084      	movs	r0, #132	; 0x84
 800e5d2:	f7ff ff39 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_PWCTR2);
 800e5d6:	20c1      	movs	r0, #193	; 0xc1
 800e5d8:	f7ff ff0e 	bl	800e3f8 <ST7735_WriteCommand>
  ST7735_WriteData(0xC5);
 800e5dc:	20c5      	movs	r0, #197	; 0xc5
 800e5de:	f7ff ff33 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_PWCTR3);
 800e5e2:	20c2      	movs	r0, #194	; 0xc2
 800e5e4:	f7ff ff08 	bl	800e3f8 <ST7735_WriteCommand>
  ST7735_WriteData(0x0A);
 800e5e8:	200a      	movs	r0, #10
 800e5ea:	f7ff ff2d 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteData(0x00);
 800e5ee:	2000      	movs	r0, #0
 800e5f0:	f7ff ff2a 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_PWCTR4);
 800e5f4:	20c3      	movs	r0, #195	; 0xc3
 800e5f6:	f7ff feff 	bl	800e3f8 <ST7735_WriteCommand>
  ST7735_WriteData(0x8A);
 800e5fa:	208a      	movs	r0, #138	; 0x8a
 800e5fc:	f7ff ff24 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteData(0x2A);
 800e600:	202a      	movs	r0, #42	; 0x2a
 800e602:	f7ff ff21 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_PWCTR5);
 800e606:	20c4      	movs	r0, #196	; 0xc4
 800e608:	f7ff fef6 	bl	800e3f8 <ST7735_WriteCommand>
  ST7735_WriteData(0x8A);
 800e60c:	208a      	movs	r0, #138	; 0x8a
 800e60e:	f7ff ff1b 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteData(0xEE);
 800e612:	20ee      	movs	r0, #238	; 0xee
 800e614:	f7ff ff18 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_VMCTR1);
 800e618:	20c5      	movs	r0, #197	; 0xc5
 800e61a:	f7ff feed 	bl	800e3f8 <ST7735_WriteCommand>
  ST7735_WriteData(0x0E);
 800e61e:	200e      	movs	r0, #14
 800e620:	f7ff ff12 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_INVOFF);
 800e624:	2020      	movs	r0, #32
 800e626:	f7ff fee7 	bl	800e3f8 <ST7735_WriteCommand>
  ST7735_WriteCommand(ST7735_COLMOD);
 800e62a:	203a      	movs	r0, #58	; 0x3a
 800e62c:	f7ff fee4 	bl	800e3f8 <ST7735_WriteCommand>
  ST7735_WriteData(0x05);
 800e630:	2005      	movs	r0, #5
 800e632:	f7ff ff09 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_CASET);
 800e636:	202a      	movs	r0, #42	; 0x2a
 800e638:	f7ff fede 	bl	800e3f8 <ST7735_WriteCommand>
  ST7735_WriteData(0x00);
 800e63c:	2000      	movs	r0, #0
 800e63e:	f7ff ff03 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteData(0x00);
 800e642:	2000      	movs	r0, #0
 800e644:	f7ff ff00 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteData(0x00);
 800e648:	2000      	movs	r0, #0
 800e64a:	f7ff fefd 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteData(0x7F);
 800e64e:	207f      	movs	r0, #127	; 0x7f
 800e650:	f7ff fefa 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_RASET);
 800e654:	202b      	movs	r0, #43	; 0x2b
 800e656:	f7ff fecf 	bl	800e3f8 <ST7735_WriteCommand>
  ST7735_WriteData(0x00);
 800e65a:	2000      	movs	r0, #0
 800e65c:	f7ff fef4 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteData(0x00);
 800e660:	2000      	movs	r0, #0
 800e662:	f7ff fef1 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteData(0x00);
 800e666:	2000      	movs	r0, #0
 800e668:	f7ff feee 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteData(0x9F);
 800e66c:	209f      	movs	r0, #159	; 0x9f
 800e66e:	f7ff feeb 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_GMCTRP1);
 800e672:	20e0      	movs	r0, #224	; 0xe0
 800e674:	f7ff fec0 	bl	800e3f8 <ST7735_WriteCommand>
  ST7735_WriteData(0x02);
 800e678:	2002      	movs	r0, #2
 800e67a:	f7ff fee5 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteData(0x1C);
 800e67e:	201c      	movs	r0, #28
 800e680:	f7ff fee2 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteData(0x07);
 800e684:	2007      	movs	r0, #7
 800e686:	f7ff fedf 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteData(0x12);
 800e68a:	2012      	movs	r0, #18
 800e68c:	f7ff fedc 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteData(0x37);
 800e690:	2037      	movs	r0, #55	; 0x37
 800e692:	f7ff fed9 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteData(0x32);
 800e696:	2032      	movs	r0, #50	; 0x32
 800e698:	f7ff fed6 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteData(0x29);
 800e69c:	2029      	movs	r0, #41	; 0x29
 800e69e:	f7ff fed3 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteData(0x2D);
 800e6a2:	202d      	movs	r0, #45	; 0x2d
 800e6a4:	f7ff fed0 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteData(0x29);
 800e6a8:	2029      	movs	r0, #41	; 0x29
 800e6aa:	f7ff fecd 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteData(0x25);
 800e6ae:	2025      	movs	r0, #37	; 0x25
 800e6b0:	f7ff feca 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteData(0x2B);
 800e6b4:	202b      	movs	r0, #43	; 0x2b
 800e6b6:	f7ff fec7 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteData(0x39);
 800e6ba:	2039      	movs	r0, #57	; 0x39
 800e6bc:	f7ff fec4 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteData(0x00);
 800e6c0:	2000      	movs	r0, #0
 800e6c2:	f7ff fec1 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteData(0x01);
 800e6c6:	2001      	movs	r0, #1
 800e6c8:	f7ff febe 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteData(0x03);
 800e6cc:	2003      	movs	r0, #3
 800e6ce:	f7ff febb 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteData(0x10);
 800e6d2:	2010      	movs	r0, #16
 800e6d4:	f7ff feb8 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_GMCTRN1);
 800e6d8:	20e1      	movs	r0, #225	; 0xe1
 800e6da:	f7ff fe8d 	bl	800e3f8 <ST7735_WriteCommand>
  ST7735_WriteData(0x03);
 800e6de:	2003      	movs	r0, #3
 800e6e0:	f7ff feb2 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteData(0x1D);
 800e6e4:	201d      	movs	r0, #29
 800e6e6:	f7ff feaf 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteData(0x07);
 800e6ea:	2007      	movs	r0, #7
 800e6ec:	f7ff feac 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteData(0x06);
 800e6f0:	2006      	movs	r0, #6
 800e6f2:	f7ff fea9 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteData(0x2E);
 800e6f6:	202e      	movs	r0, #46	; 0x2e
 800e6f8:	f7ff fea6 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteData(0x2C);
 800e6fc:	202c      	movs	r0, #44	; 0x2c
 800e6fe:	f7ff fea3 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteData(0x29);
 800e702:	2029      	movs	r0, #41	; 0x29
 800e704:	f7ff fea0 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteData(0x2D);
 800e708:	202d      	movs	r0, #45	; 0x2d
 800e70a:	f7ff fe9d 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteData(0x2E);
 800e70e:	202e      	movs	r0, #46	; 0x2e
 800e710:	f7ff fe9a 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteData(0x2E);
 800e714:	202e      	movs	r0, #46	; 0x2e
 800e716:	f7ff fe97 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteData(0x37);
 800e71a:	2037      	movs	r0, #55	; 0x37
 800e71c:	f7ff fe94 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteData(0x3F);
 800e720:	203f      	movs	r0, #63	; 0x3f
 800e722:	f7ff fe91 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteData(0x00);
 800e726:	2000      	movs	r0, #0
 800e728:	f7ff fe8e 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteData(0x00);
 800e72c:	2000      	movs	r0, #0
 800e72e:	f7ff fe8b 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteData(0x02);
 800e732:	2002      	movs	r0, #2
 800e734:	f7ff fe88 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteData(0x10);
 800e738:	2010      	movs	r0, #16
 800e73a:	f7ff fe85 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteCommand(ST7735_NORON);
 800e73e:	2013      	movs	r0, #19
 800e740:	f7ff fe5a 	bl	800e3f8 <ST7735_WriteCommand>
  HAL_Delay(10);
 800e744:	200a      	movs	r0, #10
 800e746:	f7f2 fdc1 	bl	80012cc <HAL_Delay>
  ST7735_WriteCommand(ST7735_DISPON);
 800e74a:	2029      	movs	r0, #41	; 0x29
 800e74c:	f7ff fe54 	bl	800e3f8 <ST7735_WriteCommand>
  HAL_Delay(10);
 800e750:	200a      	movs	r0, #10
 800e752:	f7f2 fdbb 	bl	80012cc <HAL_Delay>

  ST7735_SetRotation(ST7735_ROTATION);
 800e756:	2000      	movs	r0, #0
 800e758:	f7ff fec6 	bl	800e4e8 <ST7735_SetRotation>
  ST7735_FillScreen(WHITE);
 800e75c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800e760:	f000 f87e 	bl	800e860 <ST7735_FillScreen>
}
 800e764:	bf00      	nop
 800e766:	bd80      	pop	{r7, pc}

0800e768 <ST7735_SetAddressWindow>:

void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1)
{
 800e768:	b590      	push	{r4, r7, lr}
 800e76a:	b083      	sub	sp, #12
 800e76c:	af00      	add	r7, sp, #0
 800e76e:	4604      	mov	r4, r0
 800e770:	4608      	mov	r0, r1
 800e772:	4611      	mov	r1, r2
 800e774:	461a      	mov	r2, r3
 800e776:	4623      	mov	r3, r4
 800e778:	71fb      	strb	r3, [r7, #7]
 800e77a:	4603      	mov	r3, r0
 800e77c:	71bb      	strb	r3, [r7, #6]
 800e77e:	460b      	mov	r3, r1
 800e780:	717b      	strb	r3, [r7, #5]
 800e782:	4613      	mov	r3, r2
 800e784:	713b      	strb	r3, [r7, #4]
  y0 += ST7735_YSTART;

  x1 += ST7735_XSTART;
  y1 += ST7735_YSTART;

  ST7735_WriteCommand(ST7735_CASET);
 800e786:	202a      	movs	r0, #42	; 0x2a
 800e788:	f7ff fe36 	bl	800e3f8 <ST7735_WriteCommand>
  ST7735_WriteData(0x00);
 800e78c:	2000      	movs	r0, #0
 800e78e:	f7ff fe5b 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteData(x0 + ST7735_XSTART);
 800e792:	79fb      	ldrb	r3, [r7, #7]
 800e794:	4618      	mov	r0, r3
 800e796:	f7ff fe57 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteData(0x00);
 800e79a:	2000      	movs	r0, #0
 800e79c:	f7ff fe54 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteData(x1 + ST7735_XSTART);
 800e7a0:	797b      	ldrb	r3, [r7, #5]
 800e7a2:	4618      	mov	r0, r3
 800e7a4:	f7ff fe50 	bl	800e448 <ST7735_WriteData>

  ST7735_WriteCommand(ST7735_RASET);
 800e7a8:	202b      	movs	r0, #43	; 0x2b
 800e7aa:	f7ff fe25 	bl	800e3f8 <ST7735_WriteCommand>
  ST7735_WriteData(0x00);
 800e7ae:	2000      	movs	r0, #0
 800e7b0:	f7ff fe4a 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteData(y0 + ST7735_YSTART);
 800e7b4:	79bb      	ldrb	r3, [r7, #6]
 800e7b6:	4618      	mov	r0, r3
 800e7b8:	f7ff fe46 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteData(0x00);
 800e7bc:	2000      	movs	r0, #0
 800e7be:	f7ff fe43 	bl	800e448 <ST7735_WriteData>
  ST7735_WriteData(y1 + ST7735_YSTART);
 800e7c2:	793b      	ldrb	r3, [r7, #4]
 800e7c4:	4618      	mov	r0, r3
 800e7c6:	f7ff fe3f 	bl	800e448 <ST7735_WriteData>
}
 800e7ca:	bf00      	nop
 800e7cc:	370c      	adds	r7, #12
 800e7ce:	46bd      	mov	sp, r7
 800e7d0:	bd90      	pop	{r4, r7, pc}

0800e7d2 <ST7735_DrawRectangle>:

void ST7735_DrawRectangle(uint16_t x, uint16_t y, uint16_t width, uint16_t height, uint16_t color)
{
 800e7d2:	b590      	push	{r4, r7, lr}
 800e7d4:	b085      	sub	sp, #20
 800e7d6:	af00      	add	r7, sp, #0
 800e7d8:	4604      	mov	r4, r0
 800e7da:	4608      	mov	r0, r1
 800e7dc:	4611      	mov	r1, r2
 800e7de:	461a      	mov	r2, r3
 800e7e0:	4623      	mov	r3, r4
 800e7e2:	80fb      	strh	r3, [r7, #6]
 800e7e4:	4603      	mov	r3, r0
 800e7e6:	80bb      	strh	r3, [r7, #4]
 800e7e8:	460b      	mov	r3, r1
 800e7ea:	807b      	strh	r3, [r7, #2]
 800e7ec:	4613      	mov	r3, r2
 800e7ee:	803b      	strh	r3, [r7, #0]
  ST7735_SetAddressWindow(x, y, x + width - 1, y + height - 1);
 800e7f0:	88fb      	ldrh	r3, [r7, #6]
 800e7f2:	b2d8      	uxtb	r0, r3
 800e7f4:	88bb      	ldrh	r3, [r7, #4]
 800e7f6:	b2d9      	uxtb	r1, r3
 800e7f8:	88fb      	ldrh	r3, [r7, #6]
 800e7fa:	b2da      	uxtb	r2, r3
 800e7fc:	887b      	ldrh	r3, [r7, #2]
 800e7fe:	b2db      	uxtb	r3, r3
 800e800:	4413      	add	r3, r2
 800e802:	b2db      	uxtb	r3, r3
 800e804:	3b01      	subs	r3, #1
 800e806:	b2dc      	uxtb	r4, r3
 800e808:	88bb      	ldrh	r3, [r7, #4]
 800e80a:	b2da      	uxtb	r2, r3
 800e80c:	883b      	ldrh	r3, [r7, #0]
 800e80e:	b2db      	uxtb	r3, r3
 800e810:	4413      	add	r3, r2
 800e812:	b2db      	uxtb	r3, r3
 800e814:	3b01      	subs	r3, #1
 800e816:	b2db      	uxtb	r3, r3
 800e818:	4622      	mov	r2, r4
 800e81a:	f7ff ffa5 	bl	800e768 <ST7735_SetAddressWindow>
  ST7735_WriteCommand(ST7735_RAMWR);
 800e81e:	202c      	movs	r0, #44	; 0x2c
 800e820:	f7ff fdea 	bl	800e3f8 <ST7735_WriteCommand>
  // Write the color data
  for (uint16_t i = 0; i < width * height; i++)
 800e824:	2300      	movs	r3, #0
 800e826:	81fb      	strh	r3, [r7, #14]
 800e828:	e00e      	b.n	800e848 <ST7735_DrawRectangle+0x76>
  {
    ST7735_WriteData(color >> 8);
 800e82a:	8c3b      	ldrh	r3, [r7, #32]
 800e82c:	0a1b      	lsrs	r3, r3, #8
 800e82e:	b29b      	uxth	r3, r3
 800e830:	b2db      	uxtb	r3, r3
 800e832:	4618      	mov	r0, r3
 800e834:	f7ff fe08 	bl	800e448 <ST7735_WriteData>
    ST7735_WriteData(color & 0xFF);
 800e838:	8c3b      	ldrh	r3, [r7, #32]
 800e83a:	b2db      	uxtb	r3, r3
 800e83c:	4618      	mov	r0, r3
 800e83e:	f7ff fe03 	bl	800e448 <ST7735_WriteData>
  for (uint16_t i = 0; i < width * height; i++)
 800e842:	89fb      	ldrh	r3, [r7, #14]
 800e844:	3301      	adds	r3, #1
 800e846:	81fb      	strh	r3, [r7, #14]
 800e848:	89fa      	ldrh	r2, [r7, #14]
 800e84a:	887b      	ldrh	r3, [r7, #2]
 800e84c:	8839      	ldrh	r1, [r7, #0]
 800e84e:	fb01 f303 	mul.w	r3, r1, r3
 800e852:	429a      	cmp	r2, r3
 800e854:	dbe9      	blt.n	800e82a <ST7735_DrawRectangle+0x58>
  }
}
 800e856:	bf00      	nop
 800e858:	bf00      	nop
 800e85a:	3714      	adds	r7, #20
 800e85c:	46bd      	mov	sp, r7
 800e85e:	bd90      	pop	{r4, r7, pc}

0800e860 <ST7735_FillScreen>:
	ST7735_WriteBuf(data,2);

}

void ST7735_FillScreen(uint16_t color)
{
 800e860:	b580      	push	{r7, lr}
 800e862:	b084      	sub	sp, #16
 800e864:	af02      	add	r7, sp, #8
 800e866:	4603      	mov	r3, r0
 800e868:	80fb      	strh	r3, [r7, #6]
  ST7735_DrawRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 800e86a:	88fb      	ldrh	r3, [r7, #6]
 800e86c:	9300      	str	r3, [sp, #0]
 800e86e:	23a0      	movs	r3, #160	; 0xa0
 800e870:	2280      	movs	r2, #128	; 0x80
 800e872:	2100      	movs	r1, #0
 800e874:	2000      	movs	r0, #0
 800e876:	f7ff ffac 	bl	800e7d2 <ST7735_DrawRectangle>
}
 800e87a:	bf00      	nop
 800e87c:	3708      	adds	r7, #8
 800e87e:	46bd      	mov	sp, r7
 800e880:	bd80      	pop	{r7, pc}
	...

0800e884 <ST7735_DrawImage>:

void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t width, uint16_t height,  uint16_t *image)
{
 800e884:	b5b0      	push	{r4, r5, r7, lr}
 800e886:	f5ad 4d20 	sub.w	sp, sp, #40960	; 0xa000
 800e88a:	b084      	sub	sp, #16
 800e88c:	af00      	add	r7, sp, #0
 800e88e:	4605      	mov	r5, r0
 800e890:	460c      	mov	r4, r1
 800e892:	4610      	mov	r0, r2
 800e894:	4619      	mov	r1, r3
 800e896:	f107 0310 	add.w	r3, r7, #16
 800e89a:	462a      	mov	r2, r5
 800e89c:	f823 2c0a 	strh.w	r2, [r3, #-10]
 800e8a0:	f107 0310 	add.w	r3, r7, #16
 800e8a4:	4622      	mov	r2, r4
 800e8a6:	f823 2c0c 	strh.w	r2, [r3, #-12]
 800e8aa:	f107 0310 	add.w	r3, r7, #16
 800e8ae:	4602      	mov	r2, r0
 800e8b0:	f823 2c0e 	strh.w	r2, [r3, #-14]
 800e8b4:	f107 0310 	add.w	r3, r7, #16
 800e8b8:	460a      	mov	r2, r1
 800e8ba:	f823 2c10 	strh.w	r2, [r3, #-16]
  uint8_t frame_tmp[160*128*2] = {0};
 800e8be:	f107 0310 	add.w	r3, r7, #16
 800e8c2:	461a      	mov	r2, r3
 800e8c4:	2300      	movs	r3, #0
 800e8c6:	f842 3c04 	str.w	r3, [r2, #-4]
 800e8ca:	4610      	mov	r0, r2
 800e8cc:	f649 73fc 	movw	r3, #40956	; 0x9ffc
 800e8d0:	461a      	mov	r2, r3
 800e8d2:	2100      	movs	r1, #0
 800e8d4:	f002 fc26 	bl	8011124 <memset>

   //大小端数据转换
    for (uint32_t i = 0; i < width * height; i++)
 800e8d8:	2300      	movs	r3, #0
 800e8da:	f24a 020c 	movw	r2, #40972	; 0xa00c
 800e8de:	443a      	add	r2, r7
 800e8e0:	6013      	str	r3, [r2, #0]
 800e8e2:	e037      	b.n	800e954 <ST7735_DrawImage+0xd0>
    {
    	frame_tmp[2*i] = (image[i] >> 8);
 800e8e4:	f24a 030c 	movw	r3, #40972	; 0xa00c
 800e8e8:	443b      	add	r3, r7
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	005b      	lsls	r3, r3, #1
 800e8ee:	f24a 0220 	movw	r2, #40992	; 0xa020
 800e8f2:	443a      	add	r2, r7
 800e8f4:	6812      	ldr	r2, [r2, #0]
 800e8f6:	4413      	add	r3, r2
 800e8f8:	881b      	ldrh	r3, [r3, #0]
 800e8fa:	0a1b      	lsrs	r3, r3, #8
 800e8fc:	b29a      	uxth	r2, r3
 800e8fe:	f24a 030c 	movw	r3, #40972	; 0xa00c
 800e902:	443b      	add	r3, r7
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	005b      	lsls	r3, r3, #1
 800e908:	b2d2      	uxtb	r2, r2
 800e90a:	f107 0110 	add.w	r1, r7, #16
 800e90e:	440b      	add	r3, r1
 800e910:	f803 2c04 	strb.w	r2, [r3, #-4]
    	frame_tmp[2*i+1] =(image[i] & 0xFF);
 800e914:	f24a 030c 	movw	r3, #40972	; 0xa00c
 800e918:	443b      	add	r3, r7
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	005b      	lsls	r3, r3, #1
 800e91e:	f24a 0220 	movw	r2, #40992	; 0xa020
 800e922:	443a      	add	r2, r7
 800e924:	6812      	ldr	r2, [r2, #0]
 800e926:	4413      	add	r3, r2
 800e928:	881a      	ldrh	r2, [r3, #0]
 800e92a:	f24a 030c 	movw	r3, #40972	; 0xa00c
 800e92e:	443b      	add	r3, r7
 800e930:	681b      	ldr	r3, [r3, #0]
 800e932:	005b      	lsls	r3, r3, #1
 800e934:	3301      	adds	r3, #1
 800e936:	b2d2      	uxtb	r2, r2
 800e938:	f107 0110 	add.w	r1, r7, #16
 800e93c:	440b      	add	r3, r1
 800e93e:	f803 2c04 	strb.w	r2, [r3, #-4]
    for (uint32_t i = 0; i < width * height; i++)
 800e942:	f24a 030c 	movw	r3, #40972	; 0xa00c
 800e946:	443b      	add	r3, r7
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	3301      	adds	r3, #1
 800e94c:	f24a 020c 	movw	r2, #40972	; 0xa00c
 800e950:	443a      	add	r2, r7
 800e952:	6013      	str	r3, [r2, #0]
 800e954:	f107 0310 	add.w	r3, r7, #16
 800e958:	f833 3c0e 	ldrh.w	r3, [r3, #-14]
 800e95c:	f107 0210 	add.w	r2, r7, #16
 800e960:	f832 2c10 	ldrh.w	r2, [r2, #-16]
 800e964:	fb02 f303 	mul.w	r3, r2, r3
 800e968:	461a      	mov	r2, r3
 800e96a:	f24a 030c 	movw	r3, #40972	; 0xa00c
 800e96e:	443b      	add	r3, r7
 800e970:	681b      	ldr	r3, [r3, #0]
 800e972:	4293      	cmp	r3, r2
 800e974:	d3b6      	bcc.n	800e8e4 <ST7735_DrawImage+0x60>
    }
    ST7735_SetAddressWindow(x, y, x + width - 1, y + height - 1);
 800e976:	f107 0310 	add.w	r3, r7, #16
 800e97a:	f833 3c0a 	ldrh.w	r3, [r3, #-10]
 800e97e:	b2d8      	uxtb	r0, r3
 800e980:	f107 0310 	add.w	r3, r7, #16
 800e984:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 800e988:	b2d9      	uxtb	r1, r3
 800e98a:	f107 0310 	add.w	r3, r7, #16
 800e98e:	f833 3c0a 	ldrh.w	r3, [r3, #-10]
 800e992:	b2da      	uxtb	r2, r3
 800e994:	f107 0310 	add.w	r3, r7, #16
 800e998:	f833 3c0e 	ldrh.w	r3, [r3, #-14]
 800e99c:	b2db      	uxtb	r3, r3
 800e99e:	4413      	add	r3, r2
 800e9a0:	b2db      	uxtb	r3, r3
 800e9a2:	3b01      	subs	r3, #1
 800e9a4:	b2dc      	uxtb	r4, r3
 800e9a6:	f107 0310 	add.w	r3, r7, #16
 800e9aa:	f833 3c0c 	ldrh.w	r3, [r3, #-12]
 800e9ae:	b2da      	uxtb	r2, r3
 800e9b0:	f107 0310 	add.w	r3, r7, #16
 800e9b4:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800e9b8:	b2db      	uxtb	r3, r3
 800e9ba:	4413      	add	r3, r2
 800e9bc:	b2db      	uxtb	r3, r3
 800e9be:	3b01      	subs	r3, #1
 800e9c0:	b2db      	uxtb	r3, r3
 800e9c2:	4622      	mov	r2, r4
 800e9c4:	f7ff fed0 	bl	800e768 <ST7735_SetAddressWindow>

    ST7735_WriteCommand(ST7735_RAMWR);
 800e9c8:	202c      	movs	r0, #44	; 0x2c
 800e9ca:	f7ff fd15 	bl	800e3f8 <ST7735_WriteCommand>
    ST7735_WriteBuf((uint8_t*)frame_tmp,width*height*2);
 800e9ce:	f107 0310 	add.w	r3, r7, #16
 800e9d2:	461a      	mov	r2, r3
 800e9d4:	f107 0310 	add.w	r3, r7, #16
 800e9d8:	f832 2c0e 	ldrh.w	r2, [r2, #-14]
 800e9dc:	f833 3c10 	ldrh.w	r3, [r3, #-16]
 800e9e0:	fb12 f303 	smulbb	r3, r2, r3
 800e9e4:	b29b      	uxth	r3, r3
 800e9e6:	005b      	lsls	r3, r3, #1
 800e9e8:	b29a      	uxth	r2, r3
 800e9ea:	4b08      	ldr	r3, [pc, #32]	; (800ea0c <ST7735_DrawImage+0x188>)
 800e9ec:	f503 4320 	add.w	r3, r3, #40960	; 0xa000
 800e9f0:	f103 0310 	add.w	r3, r3, #16
 800e9f4:	443b      	add	r3, r7
 800e9f6:	4611      	mov	r1, r2
 800e9f8:	4618      	mov	r0, r3
 800e9fa:	f7ff fd4d 	bl	800e498 <ST7735_WriteBuf>

}
 800e9fe:	bf00      	nop
 800ea00:	f507 4720 	add.w	r7, r7, #40960	; 0xa000
 800ea04:	3710      	adds	r7, #16
 800ea06:	46bd      	mov	sp, r7
 800ea08:	bdb0      	pop	{r4, r5, r7, pc}
 800ea0a:	bf00      	nop
 800ea0c:	ffff5ffc 	.word	0xffff5ffc

0800ea10 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800ea10:	b580      	push	{r7, lr}
 800ea12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800ea14:	2200      	movs	r2, #0
 800ea16:	4913      	ldr	r1, [pc, #76]	; (800ea64 <MX_USB_DEVICE_Init+0x54>)
 800ea18:	4813      	ldr	r0, [pc, #76]	; (800ea68 <MX_USB_DEVICE_Init+0x58>)
 800ea1a:	f7fe f96f 	bl	800ccfc <USBD_Init>
 800ea1e:	4603      	mov	r3, r0
 800ea20:	2b00      	cmp	r3, #0
 800ea22:	d001      	beq.n	800ea28 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800ea24:	f7f2 f8f2 	bl	8000c0c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800ea28:	4910      	ldr	r1, [pc, #64]	; (800ea6c <MX_USB_DEVICE_Init+0x5c>)
 800ea2a:	480f      	ldr	r0, [pc, #60]	; (800ea68 <MX_USB_DEVICE_Init+0x58>)
 800ea2c:	f7fe f996 	bl	800cd5c <USBD_RegisterClass>
 800ea30:	4603      	mov	r3, r0
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d001      	beq.n	800ea3a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800ea36:	f7f2 f8e9 	bl	8000c0c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800ea3a:	490d      	ldr	r1, [pc, #52]	; (800ea70 <MX_USB_DEVICE_Init+0x60>)
 800ea3c:	480a      	ldr	r0, [pc, #40]	; (800ea68 <MX_USB_DEVICE_Init+0x58>)
 800ea3e:	f7fe f88d 	bl	800cb5c <USBD_CDC_RegisterInterface>
 800ea42:	4603      	mov	r3, r0
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d001      	beq.n	800ea4c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800ea48:	f7f2 f8e0 	bl	8000c0c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800ea4c:	4806      	ldr	r0, [pc, #24]	; (800ea68 <MX_USB_DEVICE_Init+0x58>)
 800ea4e:	f7fe f9bb 	bl	800cdc8 <USBD_Start>
 800ea52:	4603      	mov	r3, r0
 800ea54:	2b00      	cmp	r3, #0
 800ea56:	d001      	beq.n	800ea5c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800ea58:	f7f2 f8d8 	bl	8000c0c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 800ea5c:	f7f8 ff62 	bl	8007924 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800ea60:	bf00      	nop
 800ea62:	bd80      	pop	{r7, pc}
 800ea64:	240000b0 	.word	0x240000b0
 800ea68:	2400a9d0 	.word	0x2400a9d0
 800ea6c:	2400001c 	.word	0x2400001c
 800ea70:	2400009c 	.word	0x2400009c

0800ea74 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800ea74:	b580      	push	{r7, lr}
 800ea76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800ea78:	2200      	movs	r2, #0
 800ea7a:	4905      	ldr	r1, [pc, #20]	; (800ea90 <CDC_Init_FS+0x1c>)
 800ea7c:	4805      	ldr	r0, [pc, #20]	; (800ea94 <CDC_Init_FS+0x20>)
 800ea7e:	f7fe f887 	bl	800cb90 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800ea82:	4905      	ldr	r1, [pc, #20]	; (800ea98 <CDC_Init_FS+0x24>)
 800ea84:	4803      	ldr	r0, [pc, #12]	; (800ea94 <CDC_Init_FS+0x20>)
 800ea86:	f7fe f8a5 	bl	800cbd4 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800ea8a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800ea8c:	4618      	mov	r0, r3
 800ea8e:	bd80      	pop	{r7, pc}
 800ea90:	2400b4ac 	.word	0x2400b4ac
 800ea94:	2400a9d0 	.word	0x2400a9d0
 800ea98:	2400acac 	.word	0x2400acac

0800ea9c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800ea9c:	b480      	push	{r7}
 800ea9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800eaa0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800eaa2:	4618      	mov	r0, r3
 800eaa4:	46bd      	mov	sp, r7
 800eaa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaaa:	4770      	bx	lr

0800eaac <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800eaac:	b480      	push	{r7}
 800eaae:	b083      	sub	sp, #12
 800eab0:	af00      	add	r7, sp, #0
 800eab2:	4603      	mov	r3, r0
 800eab4:	6039      	str	r1, [r7, #0]
 800eab6:	71fb      	strb	r3, [r7, #7]
 800eab8:	4613      	mov	r3, r2
 800eaba:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800eabc:	79fb      	ldrb	r3, [r7, #7]
 800eabe:	2b23      	cmp	r3, #35	; 0x23
 800eac0:	d84a      	bhi.n	800eb58 <CDC_Control_FS+0xac>
 800eac2:	a201      	add	r2, pc, #4	; (adr r2, 800eac8 <CDC_Control_FS+0x1c>)
 800eac4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eac8:	0800eb59 	.word	0x0800eb59
 800eacc:	0800eb59 	.word	0x0800eb59
 800ead0:	0800eb59 	.word	0x0800eb59
 800ead4:	0800eb59 	.word	0x0800eb59
 800ead8:	0800eb59 	.word	0x0800eb59
 800eadc:	0800eb59 	.word	0x0800eb59
 800eae0:	0800eb59 	.word	0x0800eb59
 800eae4:	0800eb59 	.word	0x0800eb59
 800eae8:	0800eb59 	.word	0x0800eb59
 800eaec:	0800eb59 	.word	0x0800eb59
 800eaf0:	0800eb59 	.word	0x0800eb59
 800eaf4:	0800eb59 	.word	0x0800eb59
 800eaf8:	0800eb59 	.word	0x0800eb59
 800eafc:	0800eb59 	.word	0x0800eb59
 800eb00:	0800eb59 	.word	0x0800eb59
 800eb04:	0800eb59 	.word	0x0800eb59
 800eb08:	0800eb59 	.word	0x0800eb59
 800eb0c:	0800eb59 	.word	0x0800eb59
 800eb10:	0800eb59 	.word	0x0800eb59
 800eb14:	0800eb59 	.word	0x0800eb59
 800eb18:	0800eb59 	.word	0x0800eb59
 800eb1c:	0800eb59 	.word	0x0800eb59
 800eb20:	0800eb59 	.word	0x0800eb59
 800eb24:	0800eb59 	.word	0x0800eb59
 800eb28:	0800eb59 	.word	0x0800eb59
 800eb2c:	0800eb59 	.word	0x0800eb59
 800eb30:	0800eb59 	.word	0x0800eb59
 800eb34:	0800eb59 	.word	0x0800eb59
 800eb38:	0800eb59 	.word	0x0800eb59
 800eb3c:	0800eb59 	.word	0x0800eb59
 800eb40:	0800eb59 	.word	0x0800eb59
 800eb44:	0800eb59 	.word	0x0800eb59
 800eb48:	0800eb59 	.word	0x0800eb59
 800eb4c:	0800eb59 	.word	0x0800eb59
 800eb50:	0800eb59 	.word	0x0800eb59
 800eb54:	0800eb59 	.word	0x0800eb59
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800eb58:	bf00      	nop
  }

  return (USBD_OK);
 800eb5a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	370c      	adds	r7, #12
 800eb60:	46bd      	mov	sp, r7
 800eb62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb66:	4770      	bx	lr

0800eb68 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800eb68:	b580      	push	{r7, lr}
 800eb6a:	b082      	sub	sp, #8
 800eb6c:	af00      	add	r7, sp, #0
 800eb6e:	6078      	str	r0, [r7, #4]
 800eb70:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800eb72:	6879      	ldr	r1, [r7, #4]
 800eb74:	4805      	ldr	r0, [pc, #20]	; (800eb8c <CDC_Receive_FS+0x24>)
 800eb76:	f7fe f82d 	bl	800cbd4 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800eb7a:	4804      	ldr	r0, [pc, #16]	; (800eb8c <CDC_Receive_FS+0x24>)
 800eb7c:	f7fe f888 	bl	800cc90 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800eb80:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800eb82:	4618      	mov	r0, r3
 800eb84:	3708      	adds	r7, #8
 800eb86:	46bd      	mov	sp, r7
 800eb88:	bd80      	pop	{r7, pc}
 800eb8a:	bf00      	nop
 800eb8c:	2400a9d0 	.word	0x2400a9d0

0800eb90 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800eb90:	b580      	push	{r7, lr}
 800eb92:	b084      	sub	sp, #16
 800eb94:	af00      	add	r7, sp, #0
 800eb96:	6078      	str	r0, [r7, #4]
 800eb98:	460b      	mov	r3, r1
 800eb9a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800eba0:	4b0d      	ldr	r3, [pc, #52]	; (800ebd8 <CDC_Transmit_FS+0x48>)
 800eba2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800eba6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800eba8:	68bb      	ldr	r3, [r7, #8]
 800ebaa:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d001      	beq.n	800ebb6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ebb2:	2301      	movs	r3, #1
 800ebb4:	e00b      	b.n	800ebce <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ebb6:	887b      	ldrh	r3, [r7, #2]
 800ebb8:	461a      	mov	r2, r3
 800ebba:	6879      	ldr	r1, [r7, #4]
 800ebbc:	4806      	ldr	r0, [pc, #24]	; (800ebd8 <CDC_Transmit_FS+0x48>)
 800ebbe:	f7fd ffe7 	bl	800cb90 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800ebc2:	4805      	ldr	r0, [pc, #20]	; (800ebd8 <CDC_Transmit_FS+0x48>)
 800ebc4:	f7fe f824 	bl	800cc10 <USBD_CDC_TransmitPacket>
 800ebc8:	4603      	mov	r3, r0
 800ebca:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800ebcc:	7bfb      	ldrb	r3, [r7, #15]
}
 800ebce:	4618      	mov	r0, r3
 800ebd0:	3710      	adds	r7, #16
 800ebd2:	46bd      	mov	sp, r7
 800ebd4:	bd80      	pop	{r7, pc}
 800ebd6:	bf00      	nop
 800ebd8:	2400a9d0 	.word	0x2400a9d0

0800ebdc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800ebdc:	b480      	push	{r7}
 800ebde:	b087      	sub	sp, #28
 800ebe0:	af00      	add	r7, sp, #0
 800ebe2:	60f8      	str	r0, [r7, #12]
 800ebe4:	60b9      	str	r1, [r7, #8]
 800ebe6:	4613      	mov	r3, r2
 800ebe8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800ebea:	2300      	movs	r3, #0
 800ebec:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800ebee:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	371c      	adds	r7, #28
 800ebf6:	46bd      	mov	sp, r7
 800ebf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebfc:	4770      	bx	lr
	...

0800ec00 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ec00:	b480      	push	{r7}
 800ec02:	b083      	sub	sp, #12
 800ec04:	af00      	add	r7, sp, #0
 800ec06:	4603      	mov	r3, r0
 800ec08:	6039      	str	r1, [r7, #0]
 800ec0a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800ec0c:	683b      	ldr	r3, [r7, #0]
 800ec0e:	2212      	movs	r2, #18
 800ec10:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800ec12:	4b03      	ldr	r3, [pc, #12]	; (800ec20 <USBD_FS_DeviceDescriptor+0x20>)
}
 800ec14:	4618      	mov	r0, r3
 800ec16:	370c      	adds	r7, #12
 800ec18:	46bd      	mov	sp, r7
 800ec1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec1e:	4770      	bx	lr
 800ec20:	240000d0 	.word	0x240000d0

0800ec24 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ec24:	b480      	push	{r7}
 800ec26:	b083      	sub	sp, #12
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	4603      	mov	r3, r0
 800ec2c:	6039      	str	r1, [r7, #0]
 800ec2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800ec30:	683b      	ldr	r3, [r7, #0]
 800ec32:	2204      	movs	r2, #4
 800ec34:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800ec36:	4b03      	ldr	r3, [pc, #12]	; (800ec44 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800ec38:	4618      	mov	r0, r3
 800ec3a:	370c      	adds	r7, #12
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec42:	4770      	bx	lr
 800ec44:	240000e4 	.word	0x240000e4

0800ec48 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ec48:	b580      	push	{r7, lr}
 800ec4a:	b082      	sub	sp, #8
 800ec4c:	af00      	add	r7, sp, #0
 800ec4e:	4603      	mov	r3, r0
 800ec50:	6039      	str	r1, [r7, #0]
 800ec52:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ec54:	79fb      	ldrb	r3, [r7, #7]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d105      	bne.n	800ec66 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ec5a:	683a      	ldr	r2, [r7, #0]
 800ec5c:	4907      	ldr	r1, [pc, #28]	; (800ec7c <USBD_FS_ProductStrDescriptor+0x34>)
 800ec5e:	4808      	ldr	r0, [pc, #32]	; (800ec80 <USBD_FS_ProductStrDescriptor+0x38>)
 800ec60:	f7ff fa8e 	bl	800e180 <USBD_GetString>
 800ec64:	e004      	b.n	800ec70 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800ec66:	683a      	ldr	r2, [r7, #0]
 800ec68:	4904      	ldr	r1, [pc, #16]	; (800ec7c <USBD_FS_ProductStrDescriptor+0x34>)
 800ec6a:	4805      	ldr	r0, [pc, #20]	; (800ec80 <USBD_FS_ProductStrDescriptor+0x38>)
 800ec6c:	f7ff fa88 	bl	800e180 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ec70:	4b02      	ldr	r3, [pc, #8]	; (800ec7c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800ec72:	4618      	mov	r0, r3
 800ec74:	3708      	adds	r7, #8
 800ec76:	46bd      	mov	sp, r7
 800ec78:	bd80      	pop	{r7, pc}
 800ec7a:	bf00      	nop
 800ec7c:	2400bcac 	.word	0x2400bcac
 800ec80:	08011d50 	.word	0x08011d50

0800ec84 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ec84:	b580      	push	{r7, lr}
 800ec86:	b082      	sub	sp, #8
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	4603      	mov	r3, r0
 800ec8c:	6039      	str	r1, [r7, #0]
 800ec8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800ec90:	683a      	ldr	r2, [r7, #0]
 800ec92:	4904      	ldr	r1, [pc, #16]	; (800eca4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800ec94:	4804      	ldr	r0, [pc, #16]	; (800eca8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800ec96:	f7ff fa73 	bl	800e180 <USBD_GetString>
  return USBD_StrDesc;
 800ec9a:	4b02      	ldr	r3, [pc, #8]	; (800eca4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800ec9c:	4618      	mov	r0, r3
 800ec9e:	3708      	adds	r7, #8
 800eca0:	46bd      	mov	sp, r7
 800eca2:	bd80      	pop	{r7, pc}
 800eca4:	2400bcac 	.word	0x2400bcac
 800eca8:	08011d68 	.word	0x08011d68

0800ecac <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ecac:	b580      	push	{r7, lr}
 800ecae:	b082      	sub	sp, #8
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	4603      	mov	r3, r0
 800ecb4:	6039      	str	r1, [r7, #0]
 800ecb6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800ecb8:	683b      	ldr	r3, [r7, #0]
 800ecba:	221a      	movs	r2, #26
 800ecbc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800ecbe:	f000 f843 	bl	800ed48 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800ecc2:	4b02      	ldr	r3, [pc, #8]	; (800eccc <USBD_FS_SerialStrDescriptor+0x20>)
}
 800ecc4:	4618      	mov	r0, r3
 800ecc6:	3708      	adds	r7, #8
 800ecc8:	46bd      	mov	sp, r7
 800ecca:	bd80      	pop	{r7, pc}
 800eccc:	240000e8 	.word	0x240000e8

0800ecd0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ecd0:	b580      	push	{r7, lr}
 800ecd2:	b082      	sub	sp, #8
 800ecd4:	af00      	add	r7, sp, #0
 800ecd6:	4603      	mov	r3, r0
 800ecd8:	6039      	str	r1, [r7, #0]
 800ecda:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800ecdc:	79fb      	ldrb	r3, [r7, #7]
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d105      	bne.n	800ecee <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ece2:	683a      	ldr	r2, [r7, #0]
 800ece4:	4907      	ldr	r1, [pc, #28]	; (800ed04 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ece6:	4808      	ldr	r0, [pc, #32]	; (800ed08 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ece8:	f7ff fa4a 	bl	800e180 <USBD_GetString>
 800ecec:	e004      	b.n	800ecf8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800ecee:	683a      	ldr	r2, [r7, #0]
 800ecf0:	4904      	ldr	r1, [pc, #16]	; (800ed04 <USBD_FS_ConfigStrDescriptor+0x34>)
 800ecf2:	4805      	ldr	r0, [pc, #20]	; (800ed08 <USBD_FS_ConfigStrDescriptor+0x38>)
 800ecf4:	f7ff fa44 	bl	800e180 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ecf8:	4b02      	ldr	r3, [pc, #8]	; (800ed04 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	3708      	adds	r7, #8
 800ecfe:	46bd      	mov	sp, r7
 800ed00:	bd80      	pop	{r7, pc}
 800ed02:	bf00      	nop
 800ed04:	2400bcac 	.word	0x2400bcac
 800ed08:	08011d7c 	.word	0x08011d7c

0800ed0c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800ed0c:	b580      	push	{r7, lr}
 800ed0e:	b082      	sub	sp, #8
 800ed10:	af00      	add	r7, sp, #0
 800ed12:	4603      	mov	r3, r0
 800ed14:	6039      	str	r1, [r7, #0]
 800ed16:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800ed18:	79fb      	ldrb	r3, [r7, #7]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d105      	bne.n	800ed2a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ed1e:	683a      	ldr	r2, [r7, #0]
 800ed20:	4907      	ldr	r1, [pc, #28]	; (800ed40 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ed22:	4808      	ldr	r0, [pc, #32]	; (800ed44 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ed24:	f7ff fa2c 	bl	800e180 <USBD_GetString>
 800ed28:	e004      	b.n	800ed34 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800ed2a:	683a      	ldr	r2, [r7, #0]
 800ed2c:	4904      	ldr	r1, [pc, #16]	; (800ed40 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800ed2e:	4805      	ldr	r0, [pc, #20]	; (800ed44 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800ed30:	f7ff fa26 	bl	800e180 <USBD_GetString>
  }
  return USBD_StrDesc;
 800ed34:	4b02      	ldr	r3, [pc, #8]	; (800ed40 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800ed36:	4618      	mov	r0, r3
 800ed38:	3708      	adds	r7, #8
 800ed3a:	46bd      	mov	sp, r7
 800ed3c:	bd80      	pop	{r7, pc}
 800ed3e:	bf00      	nop
 800ed40:	2400bcac 	.word	0x2400bcac
 800ed44:	08011d88 	.word	0x08011d88

0800ed48 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800ed48:	b580      	push	{r7, lr}
 800ed4a:	b084      	sub	sp, #16
 800ed4c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800ed4e:	4b0f      	ldr	r3, [pc, #60]	; (800ed8c <Get_SerialNum+0x44>)
 800ed50:	681b      	ldr	r3, [r3, #0]
 800ed52:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800ed54:	4b0e      	ldr	r3, [pc, #56]	; (800ed90 <Get_SerialNum+0x48>)
 800ed56:	681b      	ldr	r3, [r3, #0]
 800ed58:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800ed5a:	4b0e      	ldr	r3, [pc, #56]	; (800ed94 <Get_SerialNum+0x4c>)
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800ed60:	68fa      	ldr	r2, [r7, #12]
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	4413      	add	r3, r2
 800ed66:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800ed68:	68fb      	ldr	r3, [r7, #12]
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d009      	beq.n	800ed82 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800ed6e:	2208      	movs	r2, #8
 800ed70:	4909      	ldr	r1, [pc, #36]	; (800ed98 <Get_SerialNum+0x50>)
 800ed72:	68f8      	ldr	r0, [r7, #12]
 800ed74:	f000 f814 	bl	800eda0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800ed78:	2204      	movs	r2, #4
 800ed7a:	4908      	ldr	r1, [pc, #32]	; (800ed9c <Get_SerialNum+0x54>)
 800ed7c:	68b8      	ldr	r0, [r7, #8]
 800ed7e:	f000 f80f 	bl	800eda0 <IntToUnicode>
  }
}
 800ed82:	bf00      	nop
 800ed84:	3710      	adds	r7, #16
 800ed86:	46bd      	mov	sp, r7
 800ed88:	bd80      	pop	{r7, pc}
 800ed8a:	bf00      	nop
 800ed8c:	1ff1e800 	.word	0x1ff1e800
 800ed90:	1ff1e804 	.word	0x1ff1e804
 800ed94:	1ff1e808 	.word	0x1ff1e808
 800ed98:	240000ea 	.word	0x240000ea
 800ed9c:	240000fa 	.word	0x240000fa

0800eda0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800eda0:	b480      	push	{r7}
 800eda2:	b087      	sub	sp, #28
 800eda4:	af00      	add	r7, sp, #0
 800eda6:	60f8      	str	r0, [r7, #12]
 800eda8:	60b9      	str	r1, [r7, #8]
 800edaa:	4613      	mov	r3, r2
 800edac:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800edae:	2300      	movs	r3, #0
 800edb0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800edb2:	2300      	movs	r3, #0
 800edb4:	75fb      	strb	r3, [r7, #23]
 800edb6:	e027      	b.n	800ee08 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	0f1b      	lsrs	r3, r3, #28
 800edbc:	2b09      	cmp	r3, #9
 800edbe:	d80b      	bhi.n	800edd8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	0f1b      	lsrs	r3, r3, #28
 800edc4:	b2da      	uxtb	r2, r3
 800edc6:	7dfb      	ldrb	r3, [r7, #23]
 800edc8:	005b      	lsls	r3, r3, #1
 800edca:	4619      	mov	r1, r3
 800edcc:	68bb      	ldr	r3, [r7, #8]
 800edce:	440b      	add	r3, r1
 800edd0:	3230      	adds	r2, #48	; 0x30
 800edd2:	b2d2      	uxtb	r2, r2
 800edd4:	701a      	strb	r2, [r3, #0]
 800edd6:	e00a      	b.n	800edee <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800edd8:	68fb      	ldr	r3, [r7, #12]
 800edda:	0f1b      	lsrs	r3, r3, #28
 800eddc:	b2da      	uxtb	r2, r3
 800edde:	7dfb      	ldrb	r3, [r7, #23]
 800ede0:	005b      	lsls	r3, r3, #1
 800ede2:	4619      	mov	r1, r3
 800ede4:	68bb      	ldr	r3, [r7, #8]
 800ede6:	440b      	add	r3, r1
 800ede8:	3237      	adds	r2, #55	; 0x37
 800edea:	b2d2      	uxtb	r2, r2
 800edec:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800edee:	68fb      	ldr	r3, [r7, #12]
 800edf0:	011b      	lsls	r3, r3, #4
 800edf2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800edf4:	7dfb      	ldrb	r3, [r7, #23]
 800edf6:	005b      	lsls	r3, r3, #1
 800edf8:	3301      	adds	r3, #1
 800edfa:	68ba      	ldr	r2, [r7, #8]
 800edfc:	4413      	add	r3, r2
 800edfe:	2200      	movs	r2, #0
 800ee00:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800ee02:	7dfb      	ldrb	r3, [r7, #23]
 800ee04:	3301      	adds	r3, #1
 800ee06:	75fb      	strb	r3, [r7, #23]
 800ee08:	7dfa      	ldrb	r2, [r7, #23]
 800ee0a:	79fb      	ldrb	r3, [r7, #7]
 800ee0c:	429a      	cmp	r2, r3
 800ee0e:	d3d3      	bcc.n	800edb8 <IntToUnicode+0x18>
  }
}
 800ee10:	bf00      	nop
 800ee12:	bf00      	nop
 800ee14:	371c      	adds	r7, #28
 800ee16:	46bd      	mov	sp, r7
 800ee18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee1c:	4770      	bx	lr
	...

0800ee20 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b0ba      	sub	sp, #232	; 0xe8
 800ee24:	af00      	add	r7, sp, #0
 800ee26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ee28:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800ee2c:	2200      	movs	r2, #0
 800ee2e:	601a      	str	r2, [r3, #0]
 800ee30:	605a      	str	r2, [r3, #4]
 800ee32:	609a      	str	r2, [r3, #8]
 800ee34:	60da      	str	r2, [r3, #12]
 800ee36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800ee38:	f107 0310 	add.w	r3, r7, #16
 800ee3c:	22c0      	movs	r2, #192	; 0xc0
 800ee3e:	2100      	movs	r1, #0
 800ee40:	4618      	mov	r0, r3
 800ee42:	f002 f96f 	bl	8011124 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	4a2c      	ldr	r2, [pc, #176]	; (800eefc <HAL_PCD_MspInit+0xdc>)
 800ee4c:	4293      	cmp	r3, r2
 800ee4e:	d151      	bne.n	800eef4 <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 800ee50:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800ee54:	f04f 0300 	mov.w	r3, #0
 800ee58:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800ee5c:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 800ee60:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800ee64:	f107 0310 	add.w	r3, r7, #16
 800ee68:	4618      	mov	r0, r3
 800ee6a:	f7f9 fd8f 	bl	800898c <HAL_RCCEx_PeriphCLKConfig>
 800ee6e:	4603      	mov	r3, r0
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	d001      	beq.n	800ee78 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 800ee74:	f7f1 feca 	bl	8000c0c <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 800ee78:	f7f8 fd54 	bl	8007924 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ee7c:	4b20      	ldr	r3, [pc, #128]	; (800ef00 <HAL_PCD_MspInit+0xe0>)
 800ee7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ee82:	4a1f      	ldr	r2, [pc, #124]	; (800ef00 <HAL_PCD_MspInit+0xe0>)
 800ee84:	f043 0301 	orr.w	r3, r3, #1
 800ee88:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800ee8c:	4b1c      	ldr	r3, [pc, #112]	; (800ef00 <HAL_PCD_MspInit+0xe0>)
 800ee8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800ee92:	f003 0301 	and.w	r3, r3, #1
 800ee96:	60fb      	str	r3, [r7, #12]
 800ee98:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA12     ------> USB_OTG_FS_DP
    PA11     ------> USB_OTG_FS_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 800ee9a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800ee9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800eea2:	2302      	movs	r3, #2
 800eea4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eea8:	2300      	movs	r3, #0
 800eeaa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800eeae:	2300      	movs	r3, #0
 800eeb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800eeb4:	230a      	movs	r3, #10
 800eeb6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800eeba:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800eebe:	4619      	mov	r1, r3
 800eec0:	4810      	ldr	r0, [pc, #64]	; (800ef04 <HAL_PCD_MspInit+0xe4>)
 800eec2:	f7f6 fa65 	bl	8005390 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800eec6:	4b0e      	ldr	r3, [pc, #56]	; (800ef00 <HAL_PCD_MspInit+0xe0>)
 800eec8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800eecc:	4a0c      	ldr	r2, [pc, #48]	; (800ef00 <HAL_PCD_MspInit+0xe0>)
 800eece:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800eed2:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800eed6:	4b0a      	ldr	r3, [pc, #40]	; (800ef00 <HAL_PCD_MspInit+0xe0>)
 800eed8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800eedc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800eee0:	60bb      	str	r3, [r7, #8]
 800eee2:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800eee4:	2200      	movs	r2, #0
 800eee6:	2100      	movs	r1, #0
 800eee8:	2065      	movs	r0, #101	; 0x65
 800eeea:	f7f2 fafa 	bl	80014e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800eeee:	2065      	movs	r0, #101	; 0x65
 800eef0:	f7f2 fb11 	bl	8001516 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800eef4:	bf00      	nop
 800eef6:	37e8      	adds	r7, #232	; 0xe8
 800eef8:	46bd      	mov	sp, r7
 800eefa:	bd80      	pop	{r7, pc}
 800eefc:	40080000 	.word	0x40080000
 800ef00:	58024400 	.word	0x58024400
 800ef04:	58020000 	.word	0x58020000

0800ef08 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef08:	b580      	push	{r7, lr}
 800ef0a:	b082      	sub	sp, #8
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800ef1c:	4619      	mov	r1, r3
 800ef1e:	4610      	mov	r0, r2
 800ef20:	f7fd ff9f 	bl	800ce62 <USBD_LL_SetupStage>
}
 800ef24:	bf00      	nop
 800ef26:	3708      	adds	r7, #8
 800ef28:	46bd      	mov	sp, r7
 800ef2a:	bd80      	pop	{r7, pc}

0800ef2c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef2c:	b580      	push	{r7, lr}
 800ef2e:	b082      	sub	sp, #8
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	6078      	str	r0, [r7, #4]
 800ef34:	460b      	mov	r3, r1
 800ef36:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ef3e:	78fa      	ldrb	r2, [r7, #3]
 800ef40:	6879      	ldr	r1, [r7, #4]
 800ef42:	4613      	mov	r3, r2
 800ef44:	00db      	lsls	r3, r3, #3
 800ef46:	4413      	add	r3, r2
 800ef48:	009b      	lsls	r3, r3, #2
 800ef4a:	440b      	add	r3, r1
 800ef4c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800ef50:	681a      	ldr	r2, [r3, #0]
 800ef52:	78fb      	ldrb	r3, [r7, #3]
 800ef54:	4619      	mov	r1, r3
 800ef56:	f7fd ffd9 	bl	800cf0c <USBD_LL_DataOutStage>
}
 800ef5a:	bf00      	nop
 800ef5c:	3708      	adds	r7, #8
 800ef5e:	46bd      	mov	sp, r7
 800ef60:	bd80      	pop	{r7, pc}

0800ef62 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef62:	b580      	push	{r7, lr}
 800ef64:	b082      	sub	sp, #8
 800ef66:	af00      	add	r7, sp, #0
 800ef68:	6078      	str	r0, [r7, #4]
 800ef6a:	460b      	mov	r3, r1
 800ef6c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800ef74:	78fa      	ldrb	r2, [r7, #3]
 800ef76:	6879      	ldr	r1, [r7, #4]
 800ef78:	4613      	mov	r3, r2
 800ef7a:	00db      	lsls	r3, r3, #3
 800ef7c:	4413      	add	r3, r2
 800ef7e:	009b      	lsls	r3, r3, #2
 800ef80:	440b      	add	r3, r1
 800ef82:	3348      	adds	r3, #72	; 0x48
 800ef84:	681a      	ldr	r2, [r3, #0]
 800ef86:	78fb      	ldrb	r3, [r7, #3]
 800ef88:	4619      	mov	r1, r3
 800ef8a:	f7fe f872 	bl	800d072 <USBD_LL_DataInStage>
}
 800ef8e:	bf00      	nop
 800ef90:	3708      	adds	r7, #8
 800ef92:	46bd      	mov	sp, r7
 800ef94:	bd80      	pop	{r7, pc}

0800ef96 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800ef96:	b580      	push	{r7, lr}
 800ef98:	b082      	sub	sp, #8
 800ef9a:	af00      	add	r7, sp, #0
 800ef9c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800ef9e:	687b      	ldr	r3, [r7, #4]
 800efa0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800efa4:	4618      	mov	r0, r3
 800efa6:	f7fe f9ac 	bl	800d302 <USBD_LL_SOF>
}
 800efaa:	bf00      	nop
 800efac:	3708      	adds	r7, #8
 800efae:	46bd      	mov	sp, r7
 800efb0:	bd80      	pop	{r7, pc}

0800efb2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800efb2:	b580      	push	{r7, lr}
 800efb4:	b084      	sub	sp, #16
 800efb6:	af00      	add	r7, sp, #0
 800efb8:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800efba:	2301      	movs	r3, #1
 800efbc:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 800efbe:	687b      	ldr	r3, [r7, #4]
 800efc0:	691b      	ldr	r3, [r3, #16]
 800efc2:	2b00      	cmp	r3, #0
 800efc4:	d102      	bne.n	800efcc <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 800efc6:	2300      	movs	r3, #0
 800efc8:	73fb      	strb	r3, [r7, #15]
 800efca:	e008      	b.n	800efde <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 800efcc:	687b      	ldr	r3, [r7, #4]
 800efce:	691b      	ldr	r3, [r3, #16]
 800efd0:	2b02      	cmp	r3, #2
 800efd2:	d102      	bne.n	800efda <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 800efd4:	2301      	movs	r3, #1
 800efd6:	73fb      	strb	r3, [r7, #15]
 800efd8:	e001      	b.n	800efde <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 800efda:	f7f1 fe17 	bl	8000c0c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800efe4:	7bfa      	ldrb	r2, [r7, #15]
 800efe6:	4611      	mov	r1, r2
 800efe8:	4618      	mov	r0, r3
 800efea:	f7fe f946 	bl	800d27a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800eff4:	4618      	mov	r0, r3
 800eff6:	f7fe f8ee 	bl	800d1d6 <USBD_LL_Reset>
}
 800effa:	bf00      	nop
 800effc:	3710      	adds	r7, #16
 800effe:	46bd      	mov	sp, r7
 800f000:	bd80      	pop	{r7, pc}
	...

0800f004 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f004:	b580      	push	{r7, lr}
 800f006:	b082      	sub	sp, #8
 800f008:	af00      	add	r7, sp, #0
 800f00a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f012:	4618      	mov	r0, r3
 800f014:	f7fe f941 	bl	800d29a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f020:	681b      	ldr	r3, [r3, #0]
 800f022:	687a      	ldr	r2, [r7, #4]
 800f024:	6812      	ldr	r2, [r2, #0]
 800f026:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800f02a:	f043 0301 	orr.w	r3, r3, #1
 800f02e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	6a1b      	ldr	r3, [r3, #32]
 800f034:	2b00      	cmp	r3, #0
 800f036:	d005      	beq.n	800f044 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800f038:	4b04      	ldr	r3, [pc, #16]	; (800f04c <HAL_PCD_SuspendCallback+0x48>)
 800f03a:	691b      	ldr	r3, [r3, #16]
 800f03c:	4a03      	ldr	r2, [pc, #12]	; (800f04c <HAL_PCD_SuspendCallback+0x48>)
 800f03e:	f043 0306 	orr.w	r3, r3, #6
 800f042:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800f044:	bf00      	nop
 800f046:	3708      	adds	r7, #8
 800f048:	46bd      	mov	sp, r7
 800f04a:	bd80      	pop	{r7, pc}
 800f04c:	e000ed00 	.word	0xe000ed00

0800f050 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f050:	b580      	push	{r7, lr}
 800f052:	b082      	sub	sp, #8
 800f054:	af00      	add	r7, sp, #0
 800f056:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f05e:	4618      	mov	r0, r3
 800f060:	f7fe f937 	bl	800d2d2 <USBD_LL_Resume>
}
 800f064:	bf00      	nop
 800f066:	3708      	adds	r7, #8
 800f068:	46bd      	mov	sp, r7
 800f06a:	bd80      	pop	{r7, pc}

0800f06c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f06c:	b580      	push	{r7, lr}
 800f06e:	b082      	sub	sp, #8
 800f070:	af00      	add	r7, sp, #0
 800f072:	6078      	str	r0, [r7, #4]
 800f074:	460b      	mov	r3, r1
 800f076:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f07e:	78fa      	ldrb	r2, [r7, #3]
 800f080:	4611      	mov	r1, r2
 800f082:	4618      	mov	r0, r3
 800f084:	f7fe f98f 	bl	800d3a6 <USBD_LL_IsoOUTIncomplete>
}
 800f088:	bf00      	nop
 800f08a:	3708      	adds	r7, #8
 800f08c:	46bd      	mov	sp, r7
 800f08e:	bd80      	pop	{r7, pc}

0800f090 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f090:	b580      	push	{r7, lr}
 800f092:	b082      	sub	sp, #8
 800f094:	af00      	add	r7, sp, #0
 800f096:	6078      	str	r0, [r7, #4]
 800f098:	460b      	mov	r3, r1
 800f09a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800f09c:	687b      	ldr	r3, [r7, #4]
 800f09e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f0a2:	78fa      	ldrb	r2, [r7, #3]
 800f0a4:	4611      	mov	r1, r2
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	f7fe f94b 	bl	800d342 <USBD_LL_IsoINIncomplete>
}
 800f0ac:	bf00      	nop
 800f0ae:	3708      	adds	r7, #8
 800f0b0:	46bd      	mov	sp, r7
 800f0b2:	bd80      	pop	{r7, pc}

0800f0b4 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f0b4:	b580      	push	{r7, lr}
 800f0b6:	b082      	sub	sp, #8
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f0c2:	4618      	mov	r0, r3
 800f0c4:	f7fe f9a1 	bl	800d40a <USBD_LL_DevConnected>
}
 800f0c8:	bf00      	nop
 800f0ca:	3708      	adds	r7, #8
 800f0cc:	46bd      	mov	sp, r7
 800f0ce:	bd80      	pop	{r7, pc}

0800f0d0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800f0d0:	b580      	push	{r7, lr}
 800f0d2:	b082      	sub	sp, #8
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800f0de:	4618      	mov	r0, r3
 800f0e0:	f7fe f99e 	bl	800d420 <USBD_LL_DevDisconnected>
}
 800f0e4:	bf00      	nop
 800f0e6:	3708      	adds	r7, #8
 800f0e8:	46bd      	mov	sp, r7
 800f0ea:	bd80      	pop	{r7, pc}

0800f0ec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800f0ec:	b580      	push	{r7, lr}
 800f0ee:	b082      	sub	sp, #8
 800f0f0:	af00      	add	r7, sp, #0
 800f0f2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	781b      	ldrb	r3, [r3, #0]
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d13e      	bne.n	800f17a <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800f0fc:	4a21      	ldr	r2, [pc, #132]	; (800f184 <USBD_LL_Init+0x98>)
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	4a1f      	ldr	r2, [pc, #124]	; (800f184 <USBD_LL_Init+0x98>)
 800f108:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f10c:	4b1d      	ldr	r3, [pc, #116]	; (800f184 <USBD_LL_Init+0x98>)
 800f10e:	4a1e      	ldr	r2, [pc, #120]	; (800f188 <USBD_LL_Init+0x9c>)
 800f110:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 800f112:	4b1c      	ldr	r3, [pc, #112]	; (800f184 <USBD_LL_Init+0x98>)
 800f114:	2209      	movs	r2, #9
 800f116:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800f118:	4b1a      	ldr	r3, [pc, #104]	; (800f184 <USBD_LL_Init+0x98>)
 800f11a:	2202      	movs	r2, #2
 800f11c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f11e:	4b19      	ldr	r3, [pc, #100]	; (800f184 <USBD_LL_Init+0x98>)
 800f120:	2200      	movs	r2, #0
 800f122:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800f124:	4b17      	ldr	r3, [pc, #92]	; (800f184 <USBD_LL_Init+0x98>)
 800f126:	2202      	movs	r2, #2
 800f128:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f12a:	4b16      	ldr	r3, [pc, #88]	; (800f184 <USBD_LL_Init+0x98>)
 800f12c:	2200      	movs	r2, #0
 800f12e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800f130:	4b14      	ldr	r3, [pc, #80]	; (800f184 <USBD_LL_Init+0x98>)
 800f132:	2200      	movs	r2, #0
 800f134:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800f136:	4b13      	ldr	r3, [pc, #76]	; (800f184 <USBD_LL_Init+0x98>)
 800f138:	2200      	movs	r2, #0
 800f13a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 800f13c:	4b11      	ldr	r3, [pc, #68]	; (800f184 <USBD_LL_Init+0x98>)
 800f13e:	2200      	movs	r2, #0
 800f140:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800f142:	4b10      	ldr	r3, [pc, #64]	; (800f184 <USBD_LL_Init+0x98>)
 800f144:	2200      	movs	r2, #0
 800f146:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800f148:	4b0e      	ldr	r3, [pc, #56]	; (800f184 <USBD_LL_Init+0x98>)
 800f14a:	2200      	movs	r2, #0
 800f14c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800f14e:	480d      	ldr	r0, [pc, #52]	; (800f184 <USBD_LL_Init+0x98>)
 800f150:	f7f7 f8f5 	bl	800633e <HAL_PCD_Init>
 800f154:	4603      	mov	r3, r0
 800f156:	2b00      	cmp	r3, #0
 800f158:	d001      	beq.n	800f15e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 800f15a:	f7f1 fd57 	bl	8000c0c <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800f15e:	2180      	movs	r1, #128	; 0x80
 800f160:	4808      	ldr	r0, [pc, #32]	; (800f184 <USBD_LL_Init+0x98>)
 800f162:	f7f8 fb64 	bl	800782e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800f166:	2240      	movs	r2, #64	; 0x40
 800f168:	2100      	movs	r1, #0
 800f16a:	4806      	ldr	r0, [pc, #24]	; (800f184 <USBD_LL_Init+0x98>)
 800f16c:	f7f8 fb18 	bl	80077a0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800f170:	2280      	movs	r2, #128	; 0x80
 800f172:	2101      	movs	r1, #1
 800f174:	4803      	ldr	r0, [pc, #12]	; (800f184 <USBD_LL_Init+0x98>)
 800f176:	f7f8 fb13 	bl	80077a0 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 800f17a:	2300      	movs	r3, #0
}
 800f17c:	4618      	mov	r0, r3
 800f17e:	3708      	adds	r7, #8
 800f180:	46bd      	mov	sp, r7
 800f182:	bd80      	pop	{r7, pc}
 800f184:	2400beac 	.word	0x2400beac
 800f188:	40080000 	.word	0x40080000

0800f18c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800f18c:	b580      	push	{r7, lr}
 800f18e:	b084      	sub	sp, #16
 800f190:	af00      	add	r7, sp, #0
 800f192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f194:	2300      	movs	r3, #0
 800f196:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f198:	2300      	movs	r3, #0
 800f19a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	f7f7 f9ef 	bl	8006586 <HAL_PCD_Start>
 800f1a8:	4603      	mov	r3, r0
 800f1aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f1ac:	7bfb      	ldrb	r3, [r7, #15]
 800f1ae:	4618      	mov	r0, r3
 800f1b0:	f000 f942 	bl	800f438 <USBD_Get_USB_Status>
 800f1b4:	4603      	mov	r3, r0
 800f1b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f1b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	3710      	adds	r7, #16
 800f1be:	46bd      	mov	sp, r7
 800f1c0:	bd80      	pop	{r7, pc}

0800f1c2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800f1c2:	b580      	push	{r7, lr}
 800f1c4:	b084      	sub	sp, #16
 800f1c6:	af00      	add	r7, sp, #0
 800f1c8:	6078      	str	r0, [r7, #4]
 800f1ca:	4608      	mov	r0, r1
 800f1cc:	4611      	mov	r1, r2
 800f1ce:	461a      	mov	r2, r3
 800f1d0:	4603      	mov	r3, r0
 800f1d2:	70fb      	strb	r3, [r7, #3]
 800f1d4:	460b      	mov	r3, r1
 800f1d6:	70bb      	strb	r3, [r7, #2]
 800f1d8:	4613      	mov	r3, r2
 800f1da:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f1dc:	2300      	movs	r3, #0
 800f1de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f1e0:	2300      	movs	r3, #0
 800f1e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f1ea:	78bb      	ldrb	r3, [r7, #2]
 800f1ec:	883a      	ldrh	r2, [r7, #0]
 800f1ee:	78f9      	ldrb	r1, [r7, #3]
 800f1f0:	f7f7 feef 	bl	8006fd2 <HAL_PCD_EP_Open>
 800f1f4:	4603      	mov	r3, r0
 800f1f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f1f8:	7bfb      	ldrb	r3, [r7, #15]
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	f000 f91c 	bl	800f438 <USBD_Get_USB_Status>
 800f200:	4603      	mov	r3, r0
 800f202:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f204:	7bbb      	ldrb	r3, [r7, #14]
}
 800f206:	4618      	mov	r0, r3
 800f208:	3710      	adds	r7, #16
 800f20a:	46bd      	mov	sp, r7
 800f20c:	bd80      	pop	{r7, pc}

0800f20e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f20e:	b580      	push	{r7, lr}
 800f210:	b084      	sub	sp, #16
 800f212:	af00      	add	r7, sp, #0
 800f214:	6078      	str	r0, [r7, #4]
 800f216:	460b      	mov	r3, r1
 800f218:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f21a:	2300      	movs	r3, #0
 800f21c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f21e:	2300      	movs	r3, #0
 800f220:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f228:	78fa      	ldrb	r2, [r7, #3]
 800f22a:	4611      	mov	r1, r2
 800f22c:	4618      	mov	r0, r3
 800f22e:	f7f7 ff38 	bl	80070a2 <HAL_PCD_EP_Close>
 800f232:	4603      	mov	r3, r0
 800f234:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f236:	7bfb      	ldrb	r3, [r7, #15]
 800f238:	4618      	mov	r0, r3
 800f23a:	f000 f8fd 	bl	800f438 <USBD_Get_USB_Status>
 800f23e:	4603      	mov	r3, r0
 800f240:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f242:	7bbb      	ldrb	r3, [r7, #14]
}
 800f244:	4618      	mov	r0, r3
 800f246:	3710      	adds	r7, #16
 800f248:	46bd      	mov	sp, r7
 800f24a:	bd80      	pop	{r7, pc}

0800f24c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f24c:	b580      	push	{r7, lr}
 800f24e:	b084      	sub	sp, #16
 800f250:	af00      	add	r7, sp, #0
 800f252:	6078      	str	r0, [r7, #4]
 800f254:	460b      	mov	r3, r1
 800f256:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f258:	2300      	movs	r3, #0
 800f25a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f25c:	2300      	movs	r3, #0
 800f25e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f266:	78fa      	ldrb	r2, [r7, #3]
 800f268:	4611      	mov	r1, r2
 800f26a:	4618      	mov	r0, r3
 800f26c:	f7f7 fff2 	bl	8007254 <HAL_PCD_EP_SetStall>
 800f270:	4603      	mov	r3, r0
 800f272:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f274:	7bfb      	ldrb	r3, [r7, #15]
 800f276:	4618      	mov	r0, r3
 800f278:	f000 f8de 	bl	800f438 <USBD_Get_USB_Status>
 800f27c:	4603      	mov	r3, r0
 800f27e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f280:	7bbb      	ldrb	r3, [r7, #14]
}
 800f282:	4618      	mov	r0, r3
 800f284:	3710      	adds	r7, #16
 800f286:	46bd      	mov	sp, r7
 800f288:	bd80      	pop	{r7, pc}

0800f28a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f28a:	b580      	push	{r7, lr}
 800f28c:	b084      	sub	sp, #16
 800f28e:	af00      	add	r7, sp, #0
 800f290:	6078      	str	r0, [r7, #4]
 800f292:	460b      	mov	r3, r1
 800f294:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f296:	2300      	movs	r3, #0
 800f298:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f29a:	2300      	movs	r3, #0
 800f29c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f2a4:	78fa      	ldrb	r2, [r7, #3]
 800f2a6:	4611      	mov	r1, r2
 800f2a8:	4618      	mov	r0, r3
 800f2aa:	f7f8 f837 	bl	800731c <HAL_PCD_EP_ClrStall>
 800f2ae:	4603      	mov	r3, r0
 800f2b0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f2b2:	7bfb      	ldrb	r3, [r7, #15]
 800f2b4:	4618      	mov	r0, r3
 800f2b6:	f000 f8bf 	bl	800f438 <USBD_Get_USB_Status>
 800f2ba:	4603      	mov	r3, r0
 800f2bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f2be:	7bbb      	ldrb	r3, [r7, #14]
}
 800f2c0:	4618      	mov	r0, r3
 800f2c2:	3710      	adds	r7, #16
 800f2c4:	46bd      	mov	sp, r7
 800f2c6:	bd80      	pop	{r7, pc}

0800f2c8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f2c8:	b480      	push	{r7}
 800f2ca:	b085      	sub	sp, #20
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	6078      	str	r0, [r7, #4]
 800f2d0:	460b      	mov	r3, r1
 800f2d2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f2da:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800f2dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	da0b      	bge.n	800f2fc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800f2e4:	78fb      	ldrb	r3, [r7, #3]
 800f2e6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f2ea:	68f9      	ldr	r1, [r7, #12]
 800f2ec:	4613      	mov	r3, r2
 800f2ee:	00db      	lsls	r3, r3, #3
 800f2f0:	4413      	add	r3, r2
 800f2f2:	009b      	lsls	r3, r3, #2
 800f2f4:	440b      	add	r3, r1
 800f2f6:	333e      	adds	r3, #62	; 0x3e
 800f2f8:	781b      	ldrb	r3, [r3, #0]
 800f2fa:	e00b      	b.n	800f314 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800f2fc:	78fb      	ldrb	r3, [r7, #3]
 800f2fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800f302:	68f9      	ldr	r1, [r7, #12]
 800f304:	4613      	mov	r3, r2
 800f306:	00db      	lsls	r3, r3, #3
 800f308:	4413      	add	r3, r2
 800f30a:	009b      	lsls	r3, r3, #2
 800f30c:	440b      	add	r3, r1
 800f30e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800f312:	781b      	ldrb	r3, [r3, #0]
  }
}
 800f314:	4618      	mov	r0, r3
 800f316:	3714      	adds	r7, #20
 800f318:	46bd      	mov	sp, r7
 800f31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f31e:	4770      	bx	lr

0800f320 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800f320:	b580      	push	{r7, lr}
 800f322:	b084      	sub	sp, #16
 800f324:	af00      	add	r7, sp, #0
 800f326:	6078      	str	r0, [r7, #4]
 800f328:	460b      	mov	r3, r1
 800f32a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f32c:	2300      	movs	r3, #0
 800f32e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f330:	2300      	movs	r3, #0
 800f332:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f33a:	78fa      	ldrb	r2, [r7, #3]
 800f33c:	4611      	mov	r1, r2
 800f33e:	4618      	mov	r0, r3
 800f340:	f7f7 fe22 	bl	8006f88 <HAL_PCD_SetAddress>
 800f344:	4603      	mov	r3, r0
 800f346:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f348:	7bfb      	ldrb	r3, [r7, #15]
 800f34a:	4618      	mov	r0, r3
 800f34c:	f000 f874 	bl	800f438 <USBD_Get_USB_Status>
 800f350:	4603      	mov	r3, r0
 800f352:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f354:	7bbb      	ldrb	r3, [r7, #14]
}
 800f356:	4618      	mov	r0, r3
 800f358:	3710      	adds	r7, #16
 800f35a:	46bd      	mov	sp, r7
 800f35c:	bd80      	pop	{r7, pc}

0800f35e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f35e:	b580      	push	{r7, lr}
 800f360:	b086      	sub	sp, #24
 800f362:	af00      	add	r7, sp, #0
 800f364:	60f8      	str	r0, [r7, #12]
 800f366:	607a      	str	r2, [r7, #4]
 800f368:	603b      	str	r3, [r7, #0]
 800f36a:	460b      	mov	r3, r1
 800f36c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f36e:	2300      	movs	r3, #0
 800f370:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f372:	2300      	movs	r3, #0
 800f374:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f37c:	7af9      	ldrb	r1, [r7, #11]
 800f37e:	683b      	ldr	r3, [r7, #0]
 800f380:	687a      	ldr	r2, [r7, #4]
 800f382:	f7f7 ff2c 	bl	80071de <HAL_PCD_EP_Transmit>
 800f386:	4603      	mov	r3, r0
 800f388:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f38a:	7dfb      	ldrb	r3, [r7, #23]
 800f38c:	4618      	mov	r0, r3
 800f38e:	f000 f853 	bl	800f438 <USBD_Get_USB_Status>
 800f392:	4603      	mov	r3, r0
 800f394:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f396:	7dbb      	ldrb	r3, [r7, #22]
}
 800f398:	4618      	mov	r0, r3
 800f39a:	3718      	adds	r7, #24
 800f39c:	46bd      	mov	sp, r7
 800f39e:	bd80      	pop	{r7, pc}

0800f3a0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800f3a0:	b580      	push	{r7, lr}
 800f3a2:	b086      	sub	sp, #24
 800f3a4:	af00      	add	r7, sp, #0
 800f3a6:	60f8      	str	r0, [r7, #12]
 800f3a8:	607a      	str	r2, [r7, #4]
 800f3aa:	603b      	str	r3, [r7, #0]
 800f3ac:	460b      	mov	r3, r1
 800f3ae:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f3b0:	2300      	movs	r3, #0
 800f3b2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f3b4:	2300      	movs	r3, #0
 800f3b6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800f3b8:	68fb      	ldr	r3, [r7, #12]
 800f3ba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800f3be:	7af9      	ldrb	r1, [r7, #11]
 800f3c0:	683b      	ldr	r3, [r7, #0]
 800f3c2:	687a      	ldr	r2, [r7, #4]
 800f3c4:	f7f7 feb7 	bl	8007136 <HAL_PCD_EP_Receive>
 800f3c8:	4603      	mov	r3, r0
 800f3ca:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800f3cc:	7dfb      	ldrb	r3, [r7, #23]
 800f3ce:	4618      	mov	r0, r3
 800f3d0:	f000 f832 	bl	800f438 <USBD_Get_USB_Status>
 800f3d4:	4603      	mov	r3, r0
 800f3d6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800f3d8:	7dbb      	ldrb	r3, [r7, #22]
}
 800f3da:	4618      	mov	r0, r3
 800f3dc:	3718      	adds	r7, #24
 800f3de:	46bd      	mov	sp, r7
 800f3e0:	bd80      	pop	{r7, pc}

0800f3e2 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800f3e2:	b580      	push	{r7, lr}
 800f3e4:	b082      	sub	sp, #8
 800f3e6:	af00      	add	r7, sp, #0
 800f3e8:	6078      	str	r0, [r7, #4]
 800f3ea:	460b      	mov	r3, r1
 800f3ec:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800f3f4:	78fa      	ldrb	r2, [r7, #3]
 800f3f6:	4611      	mov	r1, r2
 800f3f8:	4618      	mov	r0, r3
 800f3fa:	f7f7 fed8 	bl	80071ae <HAL_PCD_EP_GetRxCount>
 800f3fe:	4603      	mov	r3, r0
}
 800f400:	4618      	mov	r0, r3
 800f402:	3708      	adds	r7, #8
 800f404:	46bd      	mov	sp, r7
 800f406:	bd80      	pop	{r7, pc}

0800f408 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800f408:	b480      	push	{r7}
 800f40a:	b083      	sub	sp, #12
 800f40c:	af00      	add	r7, sp, #0
 800f40e:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800f410:	4b03      	ldr	r3, [pc, #12]	; (800f420 <USBD_static_malloc+0x18>)
}
 800f412:	4618      	mov	r0, r3
 800f414:	370c      	adds	r7, #12
 800f416:	46bd      	mov	sp, r7
 800f418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f41c:	4770      	bx	lr
 800f41e:	bf00      	nop
 800f420:	2400c3b8 	.word	0x2400c3b8

0800f424 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800f424:	b480      	push	{r7}
 800f426:	b083      	sub	sp, #12
 800f428:	af00      	add	r7, sp, #0
 800f42a:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 800f42c:	bf00      	nop
 800f42e:	370c      	adds	r7, #12
 800f430:	46bd      	mov	sp, r7
 800f432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f436:	4770      	bx	lr

0800f438 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f438:	b480      	push	{r7}
 800f43a:	b085      	sub	sp, #20
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	4603      	mov	r3, r0
 800f440:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800f442:	2300      	movs	r3, #0
 800f444:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f446:	79fb      	ldrb	r3, [r7, #7]
 800f448:	2b03      	cmp	r3, #3
 800f44a:	d817      	bhi.n	800f47c <USBD_Get_USB_Status+0x44>
 800f44c:	a201      	add	r2, pc, #4	; (adr r2, 800f454 <USBD_Get_USB_Status+0x1c>)
 800f44e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f452:	bf00      	nop
 800f454:	0800f465 	.word	0x0800f465
 800f458:	0800f46b 	.word	0x0800f46b
 800f45c:	0800f471 	.word	0x0800f471
 800f460:	0800f477 	.word	0x0800f477
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800f464:	2300      	movs	r3, #0
 800f466:	73fb      	strb	r3, [r7, #15]
    break;
 800f468:	e00b      	b.n	800f482 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800f46a:	2303      	movs	r3, #3
 800f46c:	73fb      	strb	r3, [r7, #15]
    break;
 800f46e:	e008      	b.n	800f482 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800f470:	2301      	movs	r3, #1
 800f472:	73fb      	strb	r3, [r7, #15]
    break;
 800f474:	e005      	b.n	800f482 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800f476:	2303      	movs	r3, #3
 800f478:	73fb      	strb	r3, [r7, #15]
    break;
 800f47a:	e002      	b.n	800f482 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800f47c:	2303      	movs	r3, #3
 800f47e:	73fb      	strb	r3, [r7, #15]
    break;
 800f480:	bf00      	nop
  }
  return usb_status;
 800f482:	7bfb      	ldrb	r3, [r7, #15]
}
 800f484:	4618      	mov	r0, r3
 800f486:	3714      	adds	r7, #20
 800f488:	46bd      	mov	sp, r7
 800f48a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f48e:	4770      	bx	lr

0800f490 <camera_RGB565_init>:
uint32_t jpeg_index;
uint32_t jpeg_start_index;
uint32_t jpeg_end_index;

void camera_RGB565_init(void)
{
 800f490:	b580      	push	{r7, lr}
 800f492:	b082      	sub	sp, #8
 800f494:	af00      	add	r7, sp, #0
	uint8_t ret;
    ret  = ov5640_init();                                               /* 初始化OV5640模块 */
 800f496:	f001 fb53 	bl	8010b40 <ov5640_init>
 800f49a:	4603      	mov	r3, r0
 800f49c:	71fb      	strb	r3, [r7, #7]
    ret += ov5640_set_output_format(OV5640_OUTPUT_FORMAT_RGB565);   /* 设置OV5640输出RGB565图像数据 */
 800f49e:	2000      	movs	r0, #0
 800f4a0:	f001 fa86 	bl	80109b0 <ov5640_set_output_format>
 800f4a4:	4603      	mov	r3, r0
 800f4a6:	461a      	mov	r2, r3
 800f4a8:	79fb      	ldrb	r3, [r7, #7]
 800f4aa:	4413      	add	r3, r2
 800f4ac:	71fb      	strb	r3, [r7, #7]
//    ret += ov5640_auto_focus_init();                                    /* 初始化OV5640模块自动对焦 */
//    ret += ov5640_auto_focus_continuance();                             /* OV5640模块持续自动对焦 */
    ret += ov5640_set_light_mode(OV5640_LIGHT_MODE_ADVANCED_AWB);   /* 设置OV5640模块灯光模式 */
 800f4ae:	2000      	movs	r0, #0
 800f4b0:	f000 f9fc 	bl	800f8ac <ov5640_set_light_mode>
 800f4b4:	4603      	mov	r3, r0
 800f4b6:	461a      	mov	r2, r3
 800f4b8:	79fb      	ldrb	r3, [r7, #7]
 800f4ba:	4413      	add	r3, r2
 800f4bc:	71fb      	strb	r3, [r7, #7]
    ret += ov5640_set_color_saturation(OV5640_COLOR_SATURATION_4);  /* 设置OV5640模块色彩饱度 */
 800f4be:	2004      	movs	r0, #4
 800f4c0:	f000 fb2c 	bl	800fb1c <ov5640_set_color_saturation>
 800f4c4:	4603      	mov	r3, r0
 800f4c6:	461a      	mov	r2, r3
 800f4c8:	79fb      	ldrb	r3, [r7, #7]
 800f4ca:	4413      	add	r3, r2
 800f4cc:	71fb      	strb	r3, [r7, #7]
    ret += ov5640_set_brightness(OV5640_BRIGHTNESS_4);              /* 设置OV5640模块亮度 */
 800f4ce:	2004      	movs	r0, #4
 800f4d0:	f000 fc34 	bl	800fd3c <ov5640_set_brightness>
 800f4d4:	4603      	mov	r3, r0
 800f4d6:	461a      	mov	r2, r3
 800f4d8:	79fb      	ldrb	r3, [r7, #7]
 800f4da:	4413      	add	r3, r2
 800f4dc:	71fb      	strb	r3, [r7, #7]
    ret += ov5640_set_contrast(OV5640_CONTRAST_4);                  /* 设置OV5640模块对比度 */
 800f4de:	2004      	movs	r0, #4
 800f4e0:	f000 fd0e 	bl	800ff00 <ov5640_set_contrast>
 800f4e4:	4603      	mov	r3, r0
 800f4e6:	461a      	mov	r2, r3
 800f4e8:	79fb      	ldrb	r3, [r7, #7]
 800f4ea:	4413      	add	r3, r2
 800f4ec:	71fb      	strb	r3, [r7, #7]
    ret += ov5640_set_hue(OV5640_HUE_6);                            /* 设置OV5640模块色相 */
 800f4ee:	2006      	movs	r0, #6
 800f4f0:	f000 fe24 	bl	801013c <ov5640_set_hue>
 800f4f4:	4603      	mov	r3, r0
 800f4f6:	461a      	mov	r2, r3
 800f4f8:	79fb      	ldrb	r3, [r7, #7]
 800f4fa:	4413      	add	r3, r2
 800f4fc:	71fb      	strb	r3, [r7, #7]
    ret += ov5640_set_special_effect(OV5640_SPECIAL_EFFECT_NORMAL); /* 设置OV5640模块特殊效果 */
 800f4fe:	2000      	movs	r0, #0
 800f500:	f000 ff80 	bl	8010404 <ov5640_set_special_effect>
 800f504:	4603      	mov	r3, r0
 800f506:	461a      	mov	r2, r3
 800f508:	79fb      	ldrb	r3, [r7, #7]
 800f50a:	4413      	add	r3, r2
 800f50c:	71fb      	strb	r3, [r7, #7]
    ret += ov5640_set_exposure_level(OV5640_EXPOSURE_LEVEL_5);      /* 设置OV5640模块曝光度 */
 800f50e:	2005      	movs	r0, #5
 800f510:	f001 f818 	bl	8010544 <ov5640_set_exposure_level>
 800f514:	4603      	mov	r3, r0
 800f516:	461a      	mov	r2, r3
 800f518:	79fb      	ldrb	r3, [r7, #7]
 800f51a:	4413      	add	r3, r2
 800f51c:	71fb      	strb	r3, [r7, #7]
    ret += ov5640_set_sharpness_level(OV5640_SHARPNESS_OFF);        /* 设置OV5640模块锐度 */
 800f51e:	2000      	movs	r0, #0
 800f520:	f001 f98e 	bl	8010840 <ov5640_set_sharpness_level>
 800f524:	4603      	mov	r3, r0
 800f526:	461a      	mov	r2, r3
 800f528:	79fb      	ldrb	r3, [r7, #7]
 800f52a:	4413      	add	r3, r2
 800f52c:	71fb      	strb	r3, [r7, #7]
//    ret += ov5640_set_mirror_flip(OV5640_MIRROR_FLIP_2);            /* 设置OV5640模块镜像/翻转 */
//    ret += ov5640_set_test_pattern(OV5640_TEST_PATTERN_OFF);        /* 设置OV5640模块测试图案 */
    ret += ov5640_set_output_size(RGB565_OUTPUT_WIDTH, RGB565_OUTPUT_HEIGHT);         /* 设置OV5640模块输出图像尺寸 */
 800f52e:	21a0      	movs	r1, #160	; 0xa0
 800f530:	2080      	movs	r0, #128	; 0x80
 800f532:	f001 fa9f 	bl	8010a74 <ov5640_set_output_size>
 800f536:	4603      	mov	r3, r0
 800f538:	461a      	mov	r2, r3
 800f53a:	79fb      	ldrb	r3, [r7, #7]
 800f53c:	4413      	add	r3, r2
 800f53e:	71fb      	strb	r3, [r7, #7]
    if (ret != 0)
 800f540:	79fb      	ldrb	r3, [r7, #7]
 800f542:	2b00      	cmp	r3, #0
 800f544:	d003      	beq.n	800f54e <camera_RGB565_init+0xbe>
    {
        printf("OV5640 init failed!\r\n");
 800f546:	4804      	ldr	r0, [pc, #16]	; (800f558 <camera_RGB565_init+0xc8>)
 800f548:	f001 fcd2 	bl	8010ef0 <puts>
        while (1)
 800f54c:	e7fe      	b.n	800f54c <camera_RGB565_init+0xbc>
        {

        }
    }

}
 800f54e:	bf00      	nop
 800f550:	3708      	adds	r7, #8
 800f552:	46bd      	mov	sp, r7
 800f554:	bd80      	pop	{r7, pc}
 800f556:	bf00      	nop
 800f558:	08011d98 	.word	0x08011d98

0800f55c <HAL_DCMI_FrameEventCallback>:
 * @brief      DCMI接口帧中断回调函数
 * @param
 * @retval
 */
void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 800f55c:	b580      	push	{r7, lr}
 800f55e:	b082      	sub	sp, #8
 800f560:	af00      	add	r7, sp, #0
 800f562:	6078      	str	r0, [r7, #4]
  __ASM volatile ("cpsid i" : : : "memory");
 800f564:	b672      	cpsid	i
}
 800f566:	bf00      	nop
	__disable_irq();
    HAL_DCMI_Suspend(hdcmi); // 拍照完成，挂起 DCMI
 800f568:	6878      	ldr	r0, [r7, #4]
 800f56a:	f7f2 fa7d 	bl	8001a68 <HAL_DCMI_Suspend>
//    HAL_DCMI_Stop(hdcmi);    // 拍照完成，停止 DMA传输
	cam.frame_sta = 1;  //帧中断完成标志置位
 800f56e:	4b04      	ldr	r3, [pc, #16]	; (800f580 <HAL_DCMI_FrameEventCallback+0x24>)
 800f570:	2201      	movs	r2, #1
 800f572:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 800f574:	b662      	cpsie	i
}
 800f576:	bf00      	nop
	__enable_irq();
}
 800f578:	bf00      	nop
 800f57a:	3708      	adds	r7, #8
 800f57c:	46bd      	mov	sp, r7
 800f57e:	bd80      	pop	{r7, pc}
 800f580:	2400c5d8 	.word	0x2400c5d8

0800f584 <ov5640_dcmi_start>:
 * @param       dts_addr        : 帧数据的接收目的地址
 *              len             : 传输的帧数据大小
 * @retval      无
 */
void ov5640_dcmi_start(ov5640_output_format_t mode,uint32_t dts_addr,uint32_t len)
{
 800f584:	b580      	push	{r7, lr}
 800f586:	b084      	sub	sp, #16
 800f588:	af00      	add	r7, sp, #0
 800f58a:	4603      	mov	r3, r0
 800f58c:	60b9      	str	r1, [r7, #8]
 800f58e:	607a      	str	r2, [r7, #4]
 800f590:	73fb      	strb	r3, [r7, #15]
	/* 清空帧接收完成标记
	 * 使能DCMI帧接收中断
	 */
	cam.frame_sta = 0;
 800f592:	4b23      	ldr	r3, [pc, #140]	; (800f620 <ov5640_dcmi_start+0x9c>)
 800f594:	2200      	movs	r2, #0
 800f596:	701a      	strb	r2, [r3, #0]
	if(mode==OV5640_OUTPUT_FORMAT_RGB565)
 800f598:	7bfb      	ldrb	r3, [r7, #15]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d118      	bne.n	800f5d0 <ov5640_dcmi_start+0x4c>
	{
		hdcmi.DMA_Handle->Init.MemInc = DMA_MINC_ENABLE;
 800f59e:	4b21      	ldr	r3, [pc, #132]	; (800f624 <ov5640_dcmi_start+0xa0>)
 800f5a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f5a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f5a6:	611a      	str	r2, [r3, #16]
		hdcmi.DMA_Handle->Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800f5a8:	4b1e      	ldr	r3, [pc, #120]	; (800f624 <ov5640_dcmi_start+0xa0>)
 800f5aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f5ac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800f5b0:	619a      	str	r2, [r3, #24]
	    __HAL_DCMI_ENABLE_IT(&hdcmi, DCMI_IT_FRAME);
 800f5b2:	4b1c      	ldr	r3, [pc, #112]	; (800f624 <ov5640_dcmi_start+0xa0>)
 800f5b4:	681b      	ldr	r3, [r3, #0]
 800f5b6:	68da      	ldr	r2, [r3, #12]
 800f5b8:	4b1a      	ldr	r3, [pc, #104]	; (800f624 <ov5640_dcmi_start+0xa0>)
 800f5ba:	681b      	ldr	r3, [r3, #0]
 800f5bc:	f042 0201 	orr.w	r2, r2, #1
 800f5c0:	60da      	str	r2, [r3, #12]
		HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, dts_addr, len);
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	68ba      	ldr	r2, [r7, #8]
 800f5c6:	2102      	movs	r1, #2
 800f5c8:	4816      	ldr	r0, [pc, #88]	; (800f624 <ov5640_dcmi_start+0xa0>)
 800f5ca:	f7f2 f92b 	bl	8001824 <HAL_DCMI_Start_DMA>
 800f5ce:	e01a      	b.n	800f606 <ov5640_dcmi_start+0x82>
	}
	else if(mode==OV5640_OUTPUT_FORMAT_JPEG)
 800f5d0:	7bfb      	ldrb	r3, [r7, #15]
 800f5d2:	2b01      	cmp	r3, #1
 800f5d4:	d117      	bne.n	800f606 <ov5640_dcmi_start+0x82>
	{
		hdcmi.DMA_Handle->Init.MemInc = DMA_MINC_ENABLE;
 800f5d6:	4b13      	ldr	r3, [pc, #76]	; (800f624 <ov5640_dcmi_start+0xa0>)
 800f5d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f5da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f5de:	611a      	str	r2, [r3, #16]
		hdcmi.DMA_Handle->Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 800f5e0:	4b10      	ldr	r3, [pc, #64]	; (800f624 <ov5640_dcmi_start+0xa0>)
 800f5e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f5e4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800f5e8:	619a      	str	r2, [r3, #24]
		__HAL_DCMI_ENABLE_IT(&hdcmi, DCMI_IT_FRAME);
 800f5ea:	4b0e      	ldr	r3, [pc, #56]	; (800f624 <ov5640_dcmi_start+0xa0>)
 800f5ec:	681b      	ldr	r3, [r3, #0]
 800f5ee:	68da      	ldr	r2, [r3, #12]
 800f5f0:	4b0c      	ldr	r3, [pc, #48]	; (800f624 <ov5640_dcmi_start+0xa0>)
 800f5f2:	681b      	ldr	r3, [r3, #0]
 800f5f4:	f042 0201 	orr.w	r2, r2, #1
 800f5f8:	60da      	str	r2, [r3, #12]
//        HAL_DMAEx_MultiBufferStart(&hdcmi.DMA_Handle,(uint32_t)&hdcmi.DMA_Handle->DR,(uint32_t)&dcmi_line_buf[0],(uint32_t)&dcmi_line_buf[1],jpeg_line_size);//开启双缓冲
//		__HAL_DMA_ENABLE(hdcmi.DMA_Handle); //使能DMA
//		__HAL_DMA_ENABLE_IT(hdcmi.DMA_Handle,DMA_IT_TC);    //开启传输完成中断

		HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, (uint32_t)dts_addr, len);
 800f5fa:	687b      	ldr	r3, [r7, #4]
 800f5fc:	68ba      	ldr	r2, [r7, #8]
 800f5fe:	2102      	movs	r1, #2
 800f600:	4808      	ldr	r0, [pc, #32]	; (800f624 <ov5640_dcmi_start+0xa0>)
 800f602:	f7f2 f90f 	bl	8001824 <HAL_DCMI_Start_DMA>
	}

	/* 等待传输完成 */
	while (cam.frame_sta == 0);
 800f606:	bf00      	nop
 800f608:	4b05      	ldr	r3, [pc, #20]	; (800f620 <ov5640_dcmi_start+0x9c>)
 800f60a:	781b      	ldrb	r3, [r3, #0]
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d0fb      	beq.n	800f608 <ov5640_dcmi_start+0x84>
	HAL_DCMI_Stop(&hdcmi);
 800f610:	4804      	ldr	r0, [pc, #16]	; (800f624 <ov5640_dcmi_start+0xa0>)
 800f612:	f7f2 f9c9 	bl	80019a8 <HAL_DCMI_Stop>
}
 800f616:	bf00      	nop
 800f618:	3710      	adds	r7, #16
 800f61a:	46bd      	mov	sp, r7
 800f61c:	bd80      	pop	{r7, pc}
 800f61e:	bf00      	nop
 800f620:	2400c5d8 	.word	0x2400c5d8
 800f624:	2400a7a8 	.word	0x2400a7a8

0800f628 <TFT_LCD_RGB565_run>:
 * @brief       例程演示入口函数
 * @param       无
 * @retval      无
 */
void TFT_LCD_RGB565_run(void)
{
 800f628:	b580      	push	{r7, lr}
 800f62a:	b082      	sub	sp, #8
 800f62c:	af02      	add	r7, sp, #8

//    uint16_t height_index;
//    uint16_t width_index;
	/* 获取图像数据,数据存储在framebuffer中*/
    memset((void *)framebuffer, 0, RGB565_OUTPUT_HEIGHT*RGB565_OUTPUT_WIDTH*2);
 800f62e:	f44f 4220 	mov.w	r2, #40960	; 0xa000
 800f632:	2100      	movs	r1, #0
 800f634:	480a      	ldr	r0, [pc, #40]	; (800f660 <TFT_LCD_RGB565_run+0x38>)
 800f636:	f001 fd75 	bl	8011124 <memset>
    ov5640_dcmi_start(OV5640_OUTPUT_FORMAT_RGB565,(uint32_t)&framebuffer,RGB565_OUTPUT_WIDTH*RGB565_OUTPUT_HEIGHT/2 );
 800f63a:	4b09      	ldr	r3, [pc, #36]	; (800f660 <TFT_LCD_RGB565_run+0x38>)
 800f63c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800f640:	4619      	mov	r1, r3
 800f642:	2000      	movs	r0, #0
 800f644:	f7ff ff9e 	bl	800f584 <ov5640_dcmi_start>
	/* 显示至LCD */
    lcd_display_image(0,0,RGB565_OUTPUT_WIDTH,RGB565_OUTPUT_HEIGHT,framebuffer);
 800f648:	4b05      	ldr	r3, [pc, #20]	; (800f660 <TFT_LCD_RGB565_run+0x38>)
 800f64a:	9300      	str	r3, [sp, #0]
 800f64c:	23a0      	movs	r3, #160	; 0xa0
 800f64e:	2280      	movs	r2, #128	; 0x80
 800f650:	2100      	movs	r1, #0
 800f652:	2000      	movs	r0, #0
 800f654:	f7fe fe74 	bl	800e340 <lcd_display_image>
//		for (width_index=0; width_index<RGB565_OUTPUT_WIDTH; width_index++)
//		{
//			ST7735_DrawPixel(width_index, height_index, framebuffer[height_index * RGB565_OUTPUT_WIDTH + width_index]);
//		}
//	}
}
 800f658:	bf00      	nop
 800f65a:	46bd      	mov	sp, r7
 800f65c:	bd80      	pop	{r7, pc}
 800f65e:	bf00      	nop
 800f660:	24000768 	.word	0x24000768

0800f664 <ov5640_write_reg>:
 * @param       reg: 寄存器地址
 *              dat: 待写入的值
 * @retval      无
 */
static void ov5640_write_reg(uint16_t reg, uint8_t dat)
{
 800f664:	b580      	push	{r7, lr}
 800f666:	b082      	sub	sp, #8
 800f668:	af00      	add	r7, sp, #0
 800f66a:	4603      	mov	r3, r0
 800f66c:	460a      	mov	r2, r1
 800f66e:	80fb      	strh	r3, [r7, #6]
 800f670:	4613      	mov	r3, r2
 800f672:	717b      	strb	r3, [r7, #5]
    BSP_I2C2_WriteReg16(OV5640_IIC_ADDR,reg,&dat,1);
 800f674:	1d7a      	adds	r2, r7, #5
 800f676:	88f9      	ldrh	r1, [r7, #6]
 800f678:	2301      	movs	r3, #1
 800f67a:	2078      	movs	r0, #120	; 0x78
 800f67c:	f001 fad4 	bl	8010c28 <BSP_I2C2_WriteReg16>
}
 800f680:	bf00      	nop
 800f682:	3708      	adds	r7, #8
 800f684:	46bd      	mov	sp, r7
 800f686:	bd80      	pop	{r7, pc}

0800f688 <ov5640_read_reg>:
 * @brief       OV5640模块读寄存器
 * @param       reg: 寄存器的地址
 * @retval      读取到的寄存器值
 */
static uint8_t ov5640_read_reg(uint16_t reg)
{
 800f688:	b580      	push	{r7, lr}
 800f68a:	b084      	sub	sp, #16
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	4603      	mov	r3, r0
 800f690:	80fb      	strh	r3, [r7, #6]
    uint8_t dat = 0;
 800f692:	2300      	movs	r3, #0
 800f694:	73fb      	strb	r3, [r7, #15]

    BSP_I2C2_ReadReg16(OV5640_IIC_ADDR,reg,&dat,1);
 800f696:	f107 020f 	add.w	r2, r7, #15
 800f69a:	88f9      	ldrh	r1, [r7, #6]
 800f69c:	2301      	movs	r3, #1
 800f69e:	2078      	movs	r0, #120	; 0x78
 800f6a0:	f001 fadf 	bl	8010c62 <BSP_I2C2_ReadReg16>

    return dat;
 800f6a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f6a6:	4618      	mov	r0, r3
 800f6a8:	3710      	adds	r7, #16
 800f6aa:	46bd      	mov	sp, r7
 800f6ac:	bd80      	pop	{r7, pc}
	...

0800f6b0 <ov5640_hw_init>:
 * @brief       OV5640模块硬件初始化
 * @param       无
 * @retval      无
 */
static void ov5640_hw_init(void)
{
 800f6b0:	b580      	push	{r7, lr}
 800f6b2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(DCMI_RST_GPIO_Port, DCMI_RST_Pin, GPIO_PIN_SET);
 800f6b4:	2201      	movs	r2, #1
 800f6b6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800f6ba:	4805      	ldr	r0, [pc, #20]	; (800f6d0 <ov5640_hw_init+0x20>)
 800f6bc:	f7f6 f818 	bl	80056f0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(DCMI_PWDN_GPIO_Port, DCMI_PWDN_Pin, GPIO_PIN_SET);
 800f6c0:	2201      	movs	r2, #1
 800f6c2:	2180      	movs	r1, #128	; 0x80
 800f6c4:	4803      	ldr	r0, [pc, #12]	; (800f6d4 <ov5640_hw_init+0x24>)
 800f6c6:	f7f6 f813 	bl	80056f0 <HAL_GPIO_WritePin>

}
 800f6ca:	bf00      	nop
 800f6cc:	bd80      	pop	{r7, pc}
 800f6ce:	bf00      	nop
 800f6d0:	58020000 	.word	0x58020000
 800f6d4:	58020c00 	.word	0x58020c00

0800f6d8 <ov5640_exit_power_down>:
 * @brief       OV5640模块退出掉电模式
 * @param       无
 * @retval      无
 */
static void ov5640_exit_power_down(void)
{
 800f6d8:	b580      	push	{r7, lr}
 800f6da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DCMI_RST_GPIO_Port, DCMI_RST_Pin, GPIO_PIN_RESET);
 800f6dc:	2200      	movs	r2, #0
 800f6de:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800f6e2:	480c      	ldr	r0, [pc, #48]	; (800f714 <ov5640_exit_power_down+0x3c>)
 800f6e4:	f7f6 f804 	bl	80056f0 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 800f6e8:	2014      	movs	r0, #20
 800f6ea:	f7f1 fdef 	bl	80012cc <HAL_Delay>
    HAL_GPIO_WritePin(DCMI_PWDN_GPIO_Port, DCMI_PWDN_Pin, GPIO_PIN_RESET);
 800f6ee:	2200      	movs	r2, #0
 800f6f0:	2180      	movs	r1, #128	; 0x80
 800f6f2:	4809      	ldr	r0, [pc, #36]	; (800f718 <ov5640_exit_power_down+0x40>)
 800f6f4:	f7f5 fffc 	bl	80056f0 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 800f6f8:	2005      	movs	r0, #5
 800f6fa:	f7f1 fde7 	bl	80012cc <HAL_Delay>
    HAL_GPIO_WritePin(DCMI_RST_GPIO_Port, DCMI_RST_Pin, GPIO_PIN_SET);
 800f6fe:	2201      	movs	r2, #1
 800f700:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800f704:	4803      	ldr	r0, [pc, #12]	; (800f714 <ov5640_exit_power_down+0x3c>)
 800f706:	f7f5 fff3 	bl	80056f0 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 800f70a:	2014      	movs	r0, #20
 800f70c:	f7f1 fdde 	bl	80012cc <HAL_Delay>
}
 800f710:	bf00      	nop
 800f712:	bd80      	pop	{r7, pc}
 800f714:	58020000 	.word	0x58020000
 800f718:	58020c00 	.word	0x58020c00

0800f71c <ov5640_hw_reset>:
 * @brief       OV5640模块硬件复位
 * @param       无
 * @retval      无
 */
static void ov5640_hw_reset(void)
{
 800f71c:	b580      	push	{r7, lr}
 800f71e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(DCMI_RST_GPIO_Port, DCMI_RST_Pin, GPIO_PIN_RESET);
 800f720:	2200      	movs	r2, #0
 800f722:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800f726:	4808      	ldr	r0, [pc, #32]	; (800f748 <ov5640_hw_reset+0x2c>)
 800f728:	f7f5 ffe2 	bl	80056f0 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 800f72c:	2014      	movs	r0, #20
 800f72e:	f7f1 fdcd 	bl	80012cc <HAL_Delay>
    HAL_GPIO_WritePin(DCMI_RST_GPIO_Port, DCMI_RST_Pin, GPIO_PIN_SET);
 800f732:	2201      	movs	r2, #1
 800f734:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800f738:	4803      	ldr	r0, [pc, #12]	; (800f748 <ov5640_hw_reset+0x2c>)
 800f73a:	f7f5 ffd9 	bl	80056f0 <HAL_GPIO_WritePin>
    HAL_Delay(20);
 800f73e:	2014      	movs	r0, #20
 800f740:	f7f1 fdc4 	bl	80012cc <HAL_Delay>
}
 800f744:	bf00      	nop
 800f746:	bd80      	pop	{r7, pc}
 800f748:	58020000 	.word	0x58020000

0800f74c <ov5640_sw_reset>:
 * @brief       OV5640模块软件复位
 * @param       无
 * @retval      无
 */
static void ov5640_sw_reset(void)
{
 800f74c:	b580      	push	{r7, lr}
 800f74e:	b082      	sub	sp, #8
 800f750:	af00      	add	r7, sp, #0
    uint8_t reg3103;
    reg3103 = ov5640_read_reg(0x3103);
 800f752:	f243 1003 	movw	r0, #12547	; 0x3103
 800f756:	f7ff ff97 	bl	800f688 <ov5640_read_reg>
 800f75a:	4603      	mov	r3, r0
 800f75c:	71fb      	strb	r3, [r7, #7]
    reg3103 &= ~(0x01 << 1);
 800f75e:	79fb      	ldrb	r3, [r7, #7]
 800f760:	f023 0302 	bic.w	r3, r3, #2
 800f764:	71fb      	strb	r3, [r7, #7]
    ov5640_write_reg(0x3103, reg3103);
 800f766:	79fb      	ldrb	r3, [r7, #7]
 800f768:	4619      	mov	r1, r3
 800f76a:	f243 1003 	movw	r0, #12547	; 0x3103
 800f76e:	f7ff ff79 	bl	800f664 <ov5640_write_reg>
    ov5640_write_reg(0x3008, 0x80);
 800f772:	2180      	movs	r1, #128	; 0x80
 800f774:	f243 0008 	movw	r0, #12296	; 0x3008
 800f778:	f7ff ff74 	bl	800f664 <ov5640_write_reg>
    HAL_Delay(10);
 800f77c:	200a      	movs	r0, #10
 800f77e:	f7f1 fda5 	bl	80012cc <HAL_Delay>
}
 800f782:	bf00      	nop
 800f784:	3708      	adds	r7, #8
 800f786:	46bd      	mov	sp, r7
 800f788:	bd80      	pop	{r7, pc}

0800f78a <ov5640_get_chip_id>:
 * @brief       获取OV5640模块芯片ID
 * @param       无
 * @retval      芯片ID
 */
static uint16_t ov5640_get_chip_id(void)
{
 800f78a:	b580      	push	{r7, lr}
 800f78c:	b082      	sub	sp, #8
 800f78e:	af00      	add	r7, sp, #0
    uint16_t chip_id;

    chip_id = ov5640_read_reg(0x300A) << 8;
 800f790:	f243 000a 	movw	r0, #12298	; 0x300a
 800f794:	f7ff ff78 	bl	800f688 <ov5640_read_reg>
 800f798:	4603      	mov	r3, r0
 800f79a:	b29b      	uxth	r3, r3
 800f79c:	021b      	lsls	r3, r3, #8
 800f79e:	80fb      	strh	r3, [r7, #6]
    chip_id |= ov5640_read_reg(0x300B);
 800f7a0:	f243 000b 	movw	r0, #12299	; 0x300b
 800f7a4:	f7ff ff70 	bl	800f688 <ov5640_read_reg>
 800f7a8:	4603      	mov	r3, r0
 800f7aa:	b29a      	uxth	r2, r3
 800f7ac:	88fb      	ldrh	r3, [r7, #6]
 800f7ae:	4313      	orrs	r3, r2
 800f7b0:	80fb      	strh	r3, [r7, #6]

    return chip_id;
 800f7b2:	88fb      	ldrh	r3, [r7, #6]
}
 800f7b4:	4618      	mov	r0, r3
 800f7b6:	3708      	adds	r7, #8
 800f7b8:	46bd      	mov	sp, r7
 800f7ba:	bd80      	pop	{r7, pc}

0800f7bc <ov5640_init_reg>:
 * @brief       初始化OV5640寄存器配置
 * @param       无
 * @retval      无
 */
static void ov5640_init_reg(void)
{
 800f7bc:	b580      	push	{r7, lr}
 800f7be:	b082      	sub	sp, #8
 800f7c0:	af00      	add	r7, sp, #0
    uint32_t cfg_index;

    for (cfg_index=0; cfg_index<sizeof(ov5640_init_cfg)/sizeof(ov5640_reg_cfg_t); cfg_index++)
 800f7c2:	2300      	movs	r3, #0
 800f7c4:	607b      	str	r3, [r7, #4]
 800f7c6:	e021      	b.n	800f80c <ov5640_init_reg+0x50>
    {
    	if(ov5640_init_cfg[cfg_index].reg==0&&ov5640_init_cfg[cfg_index].dat==0)
 800f7c8:	4a15      	ldr	r2, [pc, #84]	; (800f820 <ov5640_init_reg+0x64>)
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 800f7d0:	2b00      	cmp	r3, #0
 800f7d2:	d106      	bne.n	800f7e2 <ov5640_init_reg+0x26>
 800f7d4:	4a12      	ldr	r2, [pc, #72]	; (800f820 <ov5640_init_reg+0x64>)
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	009b      	lsls	r3, r3, #2
 800f7da:	4413      	add	r3, r2
 800f7dc:	789b      	ldrb	r3, [r3, #2]
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	d010      	beq.n	800f804 <ov5640_init_reg+0x48>
    	{
    		continue;
    	}
        ov5640_write_reg(ov5640_init_cfg[cfg_index].reg, ov5640_init_cfg[cfg_index].dat);
 800f7e2:	4a0f      	ldr	r2, [pc, #60]	; (800f820 <ov5640_init_reg+0x64>)
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 800f7ea:	490d      	ldr	r1, [pc, #52]	; (800f820 <ov5640_init_reg+0x64>)
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	009b      	lsls	r3, r3, #2
 800f7f0:	440b      	add	r3, r1
 800f7f2:	789b      	ldrb	r3, [r3, #2]
 800f7f4:	4619      	mov	r1, r3
 800f7f6:	4610      	mov	r0, r2
 800f7f8:	f7ff ff34 	bl	800f664 <ov5640_write_reg>
        HAL_Delay(1);
 800f7fc:	2001      	movs	r0, #1
 800f7fe:	f7f1 fd65 	bl	80012cc <HAL_Delay>
 800f802:	e000      	b.n	800f806 <ov5640_init_reg+0x4a>
    		continue;
 800f804:	bf00      	nop
    for (cfg_index=0; cfg_index<sizeof(ov5640_init_cfg)/sizeof(ov5640_reg_cfg_t); cfg_index++)
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	3301      	adds	r3, #1
 800f80a:	607b      	str	r3, [r7, #4]
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800f812:	d3d9      	bcc.n	800f7c8 <ov5640_init_reg+0xc>

    }
}
 800f814:	bf00      	nop
 800f816:	bf00      	nop
 800f818:	3708      	adds	r7, #8
 800f81a:	46bd      	mov	sp, r7
 800f81c:	bd80      	pop	{r7, pc}
 800f81e:	bf00      	nop
 800f820:	24000104 	.word	0x24000104

0800f824 <ov5640_get_output_size>:
 * @brief       获取OV5640模块输出图像尺寸
 * @param       无
 * @retval      无
 */
static void ov5640_get_output_size(void)
{
 800f824:	b580      	push	{r7, lr}
 800f826:	b082      	sub	sp, #8
 800f828:	af00      	add	r7, sp, #0
    uint8_t reg380A;
    uint8_t reg380B;
    uint16_t x_output_size;
    uint16_t y_output_size;

    HAL_Delay(100);
 800f82a:	2064      	movs	r0, #100	; 0x64
 800f82c:	f7f1 fd4e 	bl	80012cc <HAL_Delay>

    reg3808 = ov5640_read_reg(0x3808);
 800f830:	f643 0008 	movw	r0, #14344	; 0x3808
 800f834:	f7ff ff28 	bl	800f688 <ov5640_read_reg>
 800f838:	4603      	mov	r3, r0
 800f83a:	71fb      	strb	r3, [r7, #7]
    reg3809 = ov5640_read_reg(0x3809);
 800f83c:	f643 0009 	movw	r0, #14345	; 0x3809
 800f840:	f7ff ff22 	bl	800f688 <ov5640_read_reg>
 800f844:	4603      	mov	r3, r0
 800f846:	71bb      	strb	r3, [r7, #6]
    reg380A = ov5640_read_reg(0x380A);
 800f848:	f643 000a 	movw	r0, #14346	; 0x380a
 800f84c:	f7ff ff1c 	bl	800f688 <ov5640_read_reg>
 800f850:	4603      	mov	r3, r0
 800f852:	717b      	strb	r3, [r7, #5]
    reg380B = ov5640_read_reg(0x380B);
 800f854:	f643 000b 	movw	r0, #14347	; 0x380b
 800f858:	f7ff ff16 	bl	800f688 <ov5640_read_reg>
 800f85c:	4603      	mov	r3, r0
 800f85e:	713b      	strb	r3, [r7, #4]

    x_output_size = (uint16_t)((reg3808 & 0x0F) << 8) | reg3809;
 800f860:	79fb      	ldrb	r3, [r7, #7]
 800f862:	b29b      	uxth	r3, r3
 800f864:	021b      	lsls	r3, r3, #8
 800f866:	b29b      	uxth	r3, r3
 800f868:	b21b      	sxth	r3, r3
 800f86a:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800f86e:	b21a      	sxth	r2, r3
 800f870:	79bb      	ldrb	r3, [r7, #6]
 800f872:	b21b      	sxth	r3, r3
 800f874:	4313      	orrs	r3, r2
 800f876:	b21b      	sxth	r3, r3
 800f878:	807b      	strh	r3, [r7, #2]
    y_output_size = (uint16_t)((reg380A & 0x07) << 8) | reg380B;
 800f87a:	797b      	ldrb	r3, [r7, #5]
 800f87c:	b29b      	uxth	r3, r3
 800f87e:	021b      	lsls	r3, r3, #8
 800f880:	b29b      	uxth	r3, r3
 800f882:	b21b      	sxth	r3, r3
 800f884:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f888:	b21a      	sxth	r2, r3
 800f88a:	793b      	ldrb	r3, [r7, #4]
 800f88c:	b21b      	sxth	r3, r3
 800f88e:	4313      	orrs	r3, r2
 800f890:	b21b      	sxth	r3, r3
 800f892:	803b      	strh	r3, [r7, #0]

    ov5640_sta.output.width = x_output_size;
 800f894:	4a04      	ldr	r2, [pc, #16]	; (800f8a8 <ov5640_get_output_size+0x84>)
 800f896:	887b      	ldrh	r3, [r7, #2]
 800f898:	8113      	strh	r3, [r2, #8]
    ov5640_sta.output.height = y_output_size;
 800f89a:	4a03      	ldr	r2, [pc, #12]	; (800f8a8 <ov5640_get_output_size+0x84>)
 800f89c:	883b      	ldrh	r3, [r7, #0]
 800f89e:	8153      	strh	r3, [r2, #10]
}
 800f8a0:	bf00      	nop
 800f8a2:	3708      	adds	r7, #8
 800f8a4:	46bd      	mov	sp, r7
 800f8a6:	bd80      	pop	{r7, pc}
 800f8a8:	2400c5dc 	.word	0x2400c5dc

0800f8ac <ov5640_set_light_mode>:
 *                    OV5640_LIGHT_MODE_MANUAL_CLOUDY: Manual cloudy
 * @retval      OV5640_EOK   : 设置OV5640模块灯光模式成功
 *              OV5640_EINVAL: 传入参数错误
 */
uint8_t ov5640_set_light_mode(ov5640_light_mode_t mode)
{
 800f8ac:	b580      	push	{r7, lr}
 800f8ae:	b082      	sub	sp, #8
 800f8b0:	af00      	add	r7, sp, #0
 800f8b2:	4603      	mov	r3, r0
 800f8b4:	71fb      	strb	r3, [r7, #7]
    switch (mode)
 800f8b6:	79fb      	ldrb	r3, [r7, #7]
 800f8b8:	2b05      	cmp	r3, #5
 800f8ba:	f200 8128 	bhi.w	800fb0e <ov5640_set_light_mode+0x262>
 800f8be:	a201      	add	r2, pc, #4	; (adr r2, 800f8c4 <ov5640_set_light_mode+0x18>)
 800f8c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f8c4:	0800f8dd 	.word	0x0800f8dd
 800f8c8:	0800f9c5 	.word	0x0800f9c5
 800f8cc:	0800f9ef 	.word	0x0800f9ef
 800f8d0:	0800fa37 	.word	0x0800fa37
 800f8d4:	0800fa7f 	.word	0x0800fa7f
 800f8d8:	0800fac7 	.word	0x0800fac7
    {
        case OV5640_LIGHT_MODE_ADVANCED_AWB:
        {
            ov5640_write_reg(0x3406, 0x00);
 800f8dc:	2100      	movs	r1, #0
 800f8de:	f243 4006 	movw	r0, #13318	; 0x3406
 800f8e2:	f7ff febf 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5192, 0x04);
 800f8e6:	2104      	movs	r1, #4
 800f8e8:	f245 1092 	movw	r0, #20882	; 0x5192
 800f8ec:	f7ff feba 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5191, 0xF8);
 800f8f0:	21f8      	movs	r1, #248	; 0xf8
 800f8f2:	f245 1091 	movw	r0, #20881	; 0x5191
 800f8f6:	f7ff feb5 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5193, 0x70);
 800f8fa:	2170      	movs	r1, #112	; 0x70
 800f8fc:	f245 1093 	movw	r0, #20883	; 0x5193
 800f900:	f7ff feb0 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5194, 0xF0);
 800f904:	21f0      	movs	r1, #240	; 0xf0
 800f906:	f245 1094 	movw	r0, #20884	; 0x5194
 800f90a:	f7ff feab 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5195, 0xF0);
 800f90e:	21f0      	movs	r1, #240	; 0xf0
 800f910:	f245 1095 	movw	r0, #20885	; 0x5195
 800f914:	f7ff fea6 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x518D, 0x3D);
 800f918:	213d      	movs	r1, #61	; 0x3d
 800f91a:	f245 108d 	movw	r0, #20877	; 0x518d
 800f91e:	f7ff fea1 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x518F, 0x54);
 800f922:	2154      	movs	r1, #84	; 0x54
 800f924:	f245 108f 	movw	r0, #20879	; 0x518f
 800f928:	f7ff fe9c 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x518E, 0x3D);
 800f92c:	213d      	movs	r1, #61	; 0x3d
 800f92e:	f245 108e 	movw	r0, #20878	; 0x518e
 800f932:	f7ff fe97 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5190, 0x54);
 800f936:	2154      	movs	r1, #84	; 0x54
 800f938:	f245 1090 	movw	r0, #20880	; 0x5190
 800f93c:	f7ff fe92 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x518B, 0xA8);
 800f940:	21a8      	movs	r1, #168	; 0xa8
 800f942:	f245 108b 	movw	r0, #20875	; 0x518b
 800f946:	f7ff fe8d 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x518C, 0xA8);
 800f94a:	21a8      	movs	r1, #168	; 0xa8
 800f94c:	f245 108c 	movw	r0, #20876	; 0x518c
 800f950:	f7ff fe88 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5187, 0x18);
 800f954:	2118      	movs	r1, #24
 800f956:	f245 1087 	movw	r0, #20871	; 0x5187
 800f95a:	f7ff fe83 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5188, 0x18);
 800f95e:	2118      	movs	r1, #24
 800f960:	f245 1088 	movw	r0, #20872	; 0x5188
 800f964:	f7ff fe7e 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5189, 0x6E);
 800f968:	216e      	movs	r1, #110	; 0x6e
 800f96a:	f245 1089 	movw	r0, #20873	; 0x5189
 800f96e:	f7ff fe79 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x518A, 0x68);
 800f972:	2168      	movs	r1, #104	; 0x68
 800f974:	f245 108a 	movw	r0, #20874	; 0x518a
 800f978:	f7ff fe74 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5186, 0x1C);
 800f97c:	211c      	movs	r1, #28
 800f97e:	f245 1086 	movw	r0, #20870	; 0x5186
 800f982:	f7ff fe6f 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5181, 0x50);
 800f986:	2150      	movs	r1, #80	; 0x50
 800f988:	f245 1081 	movw	r0, #20865	; 0x5181
 800f98c:	f7ff fe6a 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5184, 0x25);
 800f990:	2125      	movs	r1, #37	; 0x25
 800f992:	f245 1084 	movw	r0, #20868	; 0x5184
 800f996:	f7ff fe65 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5182, 0x11);
 800f99a:	2111      	movs	r1, #17
 800f99c:	f245 1082 	movw	r0, #20866	; 0x5182
 800f9a0:	f7ff fe60 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5183, 0x14);
 800f9a4:	2114      	movs	r1, #20
 800f9a6:	f245 1083 	movw	r0, #20867	; 0x5183
 800f9aa:	f7ff fe5b 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5184, 0x25);
 800f9ae:	2125      	movs	r1, #37	; 0x25
 800f9b0:	f245 1084 	movw	r0, #20868	; 0x5184
 800f9b4:	f7ff fe56 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5185, 0x24);
 800f9b8:	2124      	movs	r1, #36	; 0x24
 800f9ba:	f245 1085 	movw	r0, #20869	; 0x5185
 800f9be:	f7ff fe51 	bl	800f664 <ov5640_write_reg>
            break;
 800f9c2:	e0a6      	b.n	800fb12 <ov5640_set_light_mode+0x266>
        }
        case OV5640_LIGHT_MODE_SIMPLE_AWB:
        {
            ov5640_write_reg(0x3406, 0x00);
 800f9c4:	2100      	movs	r1, #0
 800f9c6:	f243 4006 	movw	r0, #13318	; 0x3406
 800f9ca:	f7ff fe4b 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5183, 0x94);
 800f9ce:	2194      	movs	r1, #148	; 0x94
 800f9d0:	f245 1083 	movw	r0, #20867	; 0x5183
 800f9d4:	f7ff fe46 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5191, 0xFF);
 800f9d8:	21ff      	movs	r1, #255	; 0xff
 800f9da:	f245 1091 	movw	r0, #20881	; 0x5191
 800f9de:	f7ff fe41 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5192, 0x00);
 800f9e2:	2100      	movs	r1, #0
 800f9e4:	f245 1092 	movw	r0, #20882	; 0x5192
 800f9e8:	f7ff fe3c 	bl	800f664 <ov5640_write_reg>
            break;
 800f9ec:	e091      	b.n	800fb12 <ov5640_set_light_mode+0x266>
        }
        case OV5640_LIGHT_MODE_MANUAL_DAY:
        {
            ov5640_write_reg(0x3406, 0x01);
 800f9ee:	2101      	movs	r1, #1
 800f9f0:	f243 4006 	movw	r0, #13318	; 0x3406
 800f9f4:	f7ff fe36 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3400, 0x06);
 800f9f8:	2106      	movs	r1, #6
 800f9fa:	f44f 5050 	mov.w	r0, #13312	; 0x3400
 800f9fe:	f7ff fe31 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3401, 0x1C);
 800fa02:	211c      	movs	r1, #28
 800fa04:	f243 4001 	movw	r0, #13313	; 0x3401
 800fa08:	f7ff fe2c 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3402, 0x04);
 800fa0c:	2104      	movs	r1, #4
 800fa0e:	f243 4002 	movw	r0, #13314	; 0x3402
 800fa12:	f7ff fe27 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3403, 0x00);
 800fa16:	2100      	movs	r1, #0
 800fa18:	f243 4003 	movw	r0, #13315	; 0x3403
 800fa1c:	f7ff fe22 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3404, 0x04);
 800fa20:	2104      	movs	r1, #4
 800fa22:	f243 4004 	movw	r0, #13316	; 0x3404
 800fa26:	f7ff fe1d 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3405, 0xF3);
 800fa2a:	21f3      	movs	r1, #243	; 0xf3
 800fa2c:	f243 4005 	movw	r0, #13317	; 0x3405
 800fa30:	f7ff fe18 	bl	800f664 <ov5640_write_reg>
            break;
 800fa34:	e06d      	b.n	800fb12 <ov5640_set_light_mode+0x266>
        }
        case OV5640_LIGHT_MODE_MANUAL_A:
        {
            ov5640_write_reg(0x3406, 0x01);
 800fa36:	2101      	movs	r1, #1
 800fa38:	f243 4006 	movw	r0, #13318	; 0x3406
 800fa3c:	f7ff fe12 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3400, 0x04);
 800fa40:	2104      	movs	r1, #4
 800fa42:	f44f 5050 	mov.w	r0, #13312	; 0x3400
 800fa46:	f7ff fe0d 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3401, 0x10);
 800fa4a:	2110      	movs	r1, #16
 800fa4c:	f243 4001 	movw	r0, #13313	; 0x3401
 800fa50:	f7ff fe08 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3402, 0x04);
 800fa54:	2104      	movs	r1, #4
 800fa56:	f243 4002 	movw	r0, #13314	; 0x3402
 800fa5a:	f7ff fe03 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3403, 0x00);
 800fa5e:	2100      	movs	r1, #0
 800fa60:	f243 4003 	movw	r0, #13315	; 0x3403
 800fa64:	f7ff fdfe 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3404, 0x08);
 800fa68:	2108      	movs	r1, #8
 800fa6a:	f243 4004 	movw	r0, #13316	; 0x3404
 800fa6e:	f7ff fdf9 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3405, 0xB6);
 800fa72:	21b6      	movs	r1, #182	; 0xb6
 800fa74:	f243 4005 	movw	r0, #13317	; 0x3405
 800fa78:	f7ff fdf4 	bl	800f664 <ov5640_write_reg>
            break;
 800fa7c:	e049      	b.n	800fb12 <ov5640_set_light_mode+0x266>
        }
        case OV5640_LIGHT_MODE_MANUAL_CWF:
        {
            ov5640_write_reg(0x3406, 0x01);
 800fa7e:	2101      	movs	r1, #1
 800fa80:	f243 4006 	movw	r0, #13318	; 0x3406
 800fa84:	f7ff fdee 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3400, 0x05);
 800fa88:	2105      	movs	r1, #5
 800fa8a:	f44f 5050 	mov.w	r0, #13312	; 0x3400
 800fa8e:	f7ff fde9 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3401, 0x48);
 800fa92:	2148      	movs	r1, #72	; 0x48
 800fa94:	f243 4001 	movw	r0, #13313	; 0x3401
 800fa98:	f7ff fde4 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3402, 0x04);
 800fa9c:	2104      	movs	r1, #4
 800fa9e:	f243 4002 	movw	r0, #13314	; 0x3402
 800faa2:	f7ff fddf 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3403, 0x00);
 800faa6:	2100      	movs	r1, #0
 800faa8:	f243 4003 	movw	r0, #13315	; 0x3403
 800faac:	f7ff fdda 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3404, 0x07);
 800fab0:	2107      	movs	r1, #7
 800fab2:	f243 4004 	movw	r0, #13316	; 0x3404
 800fab6:	f7ff fdd5 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3405, 0xCF);
 800faba:	21cf      	movs	r1, #207	; 0xcf
 800fabc:	f243 4005 	movw	r0, #13317	; 0x3405
 800fac0:	f7ff fdd0 	bl	800f664 <ov5640_write_reg>
            break;
 800fac4:	e025      	b.n	800fb12 <ov5640_set_light_mode+0x266>
        }
        case OV5640_LIGHT_MODE_MANUAL_CLOUDY:
        {
            ov5640_write_reg(0x3406, 0x01);
 800fac6:	2101      	movs	r1, #1
 800fac8:	f243 4006 	movw	r0, #13318	; 0x3406
 800facc:	f7ff fdca 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3400, 0x06);
 800fad0:	2106      	movs	r1, #6
 800fad2:	f44f 5050 	mov.w	r0, #13312	; 0x3400
 800fad6:	f7ff fdc5 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3401, 0x48);
 800fada:	2148      	movs	r1, #72	; 0x48
 800fadc:	f243 4001 	movw	r0, #13313	; 0x3401
 800fae0:	f7ff fdc0 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3402, 0x04);
 800fae4:	2104      	movs	r1, #4
 800fae6:	f243 4002 	movw	r0, #13314	; 0x3402
 800faea:	f7ff fdbb 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3403, 0x00);
 800faee:	2100      	movs	r1, #0
 800faf0:	f243 4003 	movw	r0, #13315	; 0x3403
 800faf4:	f7ff fdb6 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3404, 0x04);
 800faf8:	2104      	movs	r1, #4
 800fafa:	f243 4004 	movw	r0, #13316	; 0x3404
 800fafe:	f7ff fdb1 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3405, 0xD3);
 800fb02:	21d3      	movs	r1, #211	; 0xd3
 800fb04:	f243 4005 	movw	r0, #13317	; 0x3405
 800fb08:	f7ff fdac 	bl	800f664 <ov5640_write_reg>
            break;
 800fb0c:	e001      	b.n	800fb12 <ov5640_set_light_mode+0x266>
        }
        default:
        {
            return OV5640_EINVAL;
 800fb0e:	2302      	movs	r3, #2
 800fb10:	e000      	b.n	800fb14 <ov5640_set_light_mode+0x268>
        }
    }

    return OV5640_EOK;
 800fb12:	2300      	movs	r3, #0
}
 800fb14:	4618      	mov	r0, r3
 800fb16:	3708      	adds	r7, #8
 800fb18:	46bd      	mov	sp, r7
 800fb1a:	bd80      	pop	{r7, pc}

0800fb1c <ov5640_set_color_saturation>:
 *                          OV5640_COLOR_SATURATION_8: -4
 * @retval      OV5640_EOK   : 设置OV5640模块色彩饱和度成功
 *              OV5640_EINVAL: 传入参数错误
 */
uint8_t ov5640_set_color_saturation(ov5640_color_saturation_t saturation)
{
 800fb1c:	b580      	push	{r7, lr}
 800fb1e:	b082      	sub	sp, #8
 800fb20:	af00      	add	r7, sp, #0
 800fb22:	4603      	mov	r3, r0
 800fb24:	71fb      	strb	r3, [r7, #7]
    switch (saturation)
 800fb26:	79fb      	ldrb	r3, [r7, #7]
 800fb28:	2b08      	cmp	r3, #8
 800fb2a:	f200 80ff 	bhi.w	800fd2c <ov5640_set_color_saturation+0x210>
 800fb2e:	a201      	add	r2, pc, #4	; (adr r2, 800fb34 <ov5640_set_color_saturation+0x18>)
 800fb30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb34:	0800fb59 	.word	0x0800fb59
 800fb38:	0800fb8d 	.word	0x0800fb8d
 800fb3c:	0800fbc1 	.word	0x0800fbc1
 800fb40:	0800fbf5 	.word	0x0800fbf5
 800fb44:	0800fc29 	.word	0x0800fc29
 800fb48:	0800fc5d 	.word	0x0800fc5d
 800fb4c:	0800fc91 	.word	0x0800fc91
 800fb50:	0800fcc5 	.word	0x0800fcc5
 800fb54:	0800fcf9 	.word	0x0800fcf9
    {
        case OV5640_COLOR_SATURATION_0:
        {
            ov5640_write_reg(0x5001, 0xFF);
 800fb58:	21ff      	movs	r1, #255	; 0xff
 800fb5a:	f245 0001 	movw	r0, #20481	; 0x5001
 800fb5e:	f7ff fd81 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5583, 0x80);
 800fb62:	2180      	movs	r1, #128	; 0x80
 800fb64:	f245 5083 	movw	r0, #21891	; 0x5583
 800fb68:	f7ff fd7c 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5584, 0x80);
 800fb6c:	2180      	movs	r1, #128	; 0x80
 800fb6e:	f245 5084 	movw	r0, #21892	; 0x5584
 800fb72:	f7ff fd77 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x02);
 800fb76:	2102      	movs	r1, #2
 800fb78:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 800fb7c:	f7ff fd72 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x41);
 800fb80:	2141      	movs	r1, #65	; 0x41
 800fb82:	f245 5088 	movw	r0, #21896	; 0x5588
 800fb86:	f7ff fd6d 	bl	800f664 <ov5640_write_reg>
            break;
 800fb8a:	e0d1      	b.n	800fd30 <ov5640_set_color_saturation+0x214>
        }
        case OV5640_COLOR_SATURATION_1:
        {
            ov5640_write_reg(0x5001, 0xFF);
 800fb8c:	21ff      	movs	r1, #255	; 0xff
 800fb8e:	f245 0001 	movw	r0, #20481	; 0x5001
 800fb92:	f7ff fd67 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5583, 0x70);
 800fb96:	2170      	movs	r1, #112	; 0x70
 800fb98:	f245 5083 	movw	r0, #21891	; 0x5583
 800fb9c:	f7ff fd62 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5584, 0x70);
 800fba0:	2170      	movs	r1, #112	; 0x70
 800fba2:	f245 5084 	movw	r0, #21892	; 0x5584
 800fba6:	f7ff fd5d 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x02);
 800fbaa:	2102      	movs	r1, #2
 800fbac:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 800fbb0:	f7ff fd58 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x41);
 800fbb4:	2141      	movs	r1, #65	; 0x41
 800fbb6:	f245 5088 	movw	r0, #21896	; 0x5588
 800fbba:	f7ff fd53 	bl	800f664 <ov5640_write_reg>
            break;
 800fbbe:	e0b7      	b.n	800fd30 <ov5640_set_color_saturation+0x214>
        }
        case OV5640_COLOR_SATURATION_2:
        {
            ov5640_write_reg(0x5001, 0xFF);
 800fbc0:	21ff      	movs	r1, #255	; 0xff
 800fbc2:	f245 0001 	movw	r0, #20481	; 0x5001
 800fbc6:	f7ff fd4d 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5583, 0x60);
 800fbca:	2160      	movs	r1, #96	; 0x60
 800fbcc:	f245 5083 	movw	r0, #21891	; 0x5583
 800fbd0:	f7ff fd48 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5584, 0x60);
 800fbd4:	2160      	movs	r1, #96	; 0x60
 800fbd6:	f245 5084 	movw	r0, #21892	; 0x5584
 800fbda:	f7ff fd43 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x02);
 800fbde:	2102      	movs	r1, #2
 800fbe0:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 800fbe4:	f7ff fd3e 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x41);
 800fbe8:	2141      	movs	r1, #65	; 0x41
 800fbea:	f245 5088 	movw	r0, #21896	; 0x5588
 800fbee:	f7ff fd39 	bl	800f664 <ov5640_write_reg>
            break;
 800fbf2:	e09d      	b.n	800fd30 <ov5640_set_color_saturation+0x214>
        }
        case OV5640_COLOR_SATURATION_3:
        {
            ov5640_write_reg(0x5001, 0xFF);
 800fbf4:	21ff      	movs	r1, #255	; 0xff
 800fbf6:	f245 0001 	movw	r0, #20481	; 0x5001
 800fbfa:	f7ff fd33 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5583, 0x50);
 800fbfe:	2150      	movs	r1, #80	; 0x50
 800fc00:	f245 5083 	movw	r0, #21891	; 0x5583
 800fc04:	f7ff fd2e 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5584, 0x50);
 800fc08:	2150      	movs	r1, #80	; 0x50
 800fc0a:	f245 5084 	movw	r0, #21892	; 0x5584
 800fc0e:	f7ff fd29 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x02);
 800fc12:	2102      	movs	r1, #2
 800fc14:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 800fc18:	f7ff fd24 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x41);
 800fc1c:	2141      	movs	r1, #65	; 0x41
 800fc1e:	f245 5088 	movw	r0, #21896	; 0x5588
 800fc22:	f7ff fd1f 	bl	800f664 <ov5640_write_reg>
            break;
 800fc26:	e083      	b.n	800fd30 <ov5640_set_color_saturation+0x214>
        }
        case OV5640_COLOR_SATURATION_4:
        {
            ov5640_write_reg(0x5001, 0xFF);
 800fc28:	21ff      	movs	r1, #255	; 0xff
 800fc2a:	f245 0001 	movw	r0, #20481	; 0x5001
 800fc2e:	f7ff fd19 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5583, 0x40);
 800fc32:	2140      	movs	r1, #64	; 0x40
 800fc34:	f245 5083 	movw	r0, #21891	; 0x5583
 800fc38:	f7ff fd14 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5584, 0x40);
 800fc3c:	2140      	movs	r1, #64	; 0x40
 800fc3e:	f245 5084 	movw	r0, #21892	; 0x5584
 800fc42:	f7ff fd0f 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x02);
 800fc46:	2102      	movs	r1, #2
 800fc48:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 800fc4c:	f7ff fd0a 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x41);
 800fc50:	2141      	movs	r1, #65	; 0x41
 800fc52:	f245 5088 	movw	r0, #21896	; 0x5588
 800fc56:	f7ff fd05 	bl	800f664 <ov5640_write_reg>
            break;
 800fc5a:	e069      	b.n	800fd30 <ov5640_set_color_saturation+0x214>
        }
        case OV5640_COLOR_SATURATION_5:
        {
            ov5640_write_reg(0x5001, 0xFF);
 800fc5c:	21ff      	movs	r1, #255	; 0xff
 800fc5e:	f245 0001 	movw	r0, #20481	; 0x5001
 800fc62:	f7ff fcff 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5583, 0x30);
 800fc66:	2130      	movs	r1, #48	; 0x30
 800fc68:	f245 5083 	movw	r0, #21891	; 0x5583
 800fc6c:	f7ff fcfa 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5584, 0x30);
 800fc70:	2130      	movs	r1, #48	; 0x30
 800fc72:	f245 5084 	movw	r0, #21892	; 0x5584
 800fc76:	f7ff fcf5 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x02);
 800fc7a:	2102      	movs	r1, #2
 800fc7c:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 800fc80:	f7ff fcf0 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x41);
 800fc84:	2141      	movs	r1, #65	; 0x41
 800fc86:	f245 5088 	movw	r0, #21896	; 0x5588
 800fc8a:	f7ff fceb 	bl	800f664 <ov5640_write_reg>
            break;
 800fc8e:	e04f      	b.n	800fd30 <ov5640_set_color_saturation+0x214>
        }
        case OV5640_COLOR_SATURATION_6:
        {
            ov5640_write_reg(0x5001, 0xFF);
 800fc90:	21ff      	movs	r1, #255	; 0xff
 800fc92:	f245 0001 	movw	r0, #20481	; 0x5001
 800fc96:	f7ff fce5 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5583, 0x20);
 800fc9a:	2120      	movs	r1, #32
 800fc9c:	f245 5083 	movw	r0, #21891	; 0x5583
 800fca0:	f7ff fce0 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5584, 0x20);
 800fca4:	2120      	movs	r1, #32
 800fca6:	f245 5084 	movw	r0, #21892	; 0x5584
 800fcaa:	f7ff fcdb 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x02);
 800fcae:	2102      	movs	r1, #2
 800fcb0:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 800fcb4:	f7ff fcd6 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x41);
 800fcb8:	2141      	movs	r1, #65	; 0x41
 800fcba:	f245 5088 	movw	r0, #21896	; 0x5588
 800fcbe:	f7ff fcd1 	bl	800f664 <ov5640_write_reg>
            break;
 800fcc2:	e035      	b.n	800fd30 <ov5640_set_color_saturation+0x214>
        }
        case OV5640_COLOR_SATURATION_7:
        {
            ov5640_write_reg(0x5001, 0xFF);
 800fcc4:	21ff      	movs	r1, #255	; 0xff
 800fcc6:	f245 0001 	movw	r0, #20481	; 0x5001
 800fcca:	f7ff fccb 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5583, 0x10);
 800fcce:	2110      	movs	r1, #16
 800fcd0:	f245 5083 	movw	r0, #21891	; 0x5583
 800fcd4:	f7ff fcc6 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5584, 0x10);
 800fcd8:	2110      	movs	r1, #16
 800fcda:	f245 5084 	movw	r0, #21892	; 0x5584
 800fcde:	f7ff fcc1 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x02);
 800fce2:	2102      	movs	r1, #2
 800fce4:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 800fce8:	f7ff fcbc 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x41);
 800fcec:	2141      	movs	r1, #65	; 0x41
 800fcee:	f245 5088 	movw	r0, #21896	; 0x5588
 800fcf2:	f7ff fcb7 	bl	800f664 <ov5640_write_reg>
            break;
 800fcf6:	e01b      	b.n	800fd30 <ov5640_set_color_saturation+0x214>
        }
        case OV5640_COLOR_SATURATION_8:
        {
            ov5640_write_reg(0x5001, 0xFF);
 800fcf8:	21ff      	movs	r1, #255	; 0xff
 800fcfa:	f245 0001 	movw	r0, #20481	; 0x5001
 800fcfe:	f7ff fcb1 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5583, 0x00);
 800fd02:	2100      	movs	r1, #0
 800fd04:	f245 5083 	movw	r0, #21891	; 0x5583
 800fd08:	f7ff fcac 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5584, 0x00);
 800fd0c:	2100      	movs	r1, #0
 800fd0e:	f245 5084 	movw	r0, #21892	; 0x5584
 800fd12:	f7ff fca7 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x02);
 800fd16:	2102      	movs	r1, #2
 800fd18:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 800fd1c:	f7ff fca2 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x41);
 800fd20:	2141      	movs	r1, #65	; 0x41
 800fd22:	f245 5088 	movw	r0, #21896	; 0x5588
 800fd26:	f7ff fc9d 	bl	800f664 <ov5640_write_reg>
            break;
 800fd2a:	e001      	b.n	800fd30 <ov5640_set_color_saturation+0x214>
        }
        default:
        {
            return OV5640_EINVAL;
 800fd2c:	2302      	movs	r3, #2
 800fd2e:	e000      	b.n	800fd32 <ov5640_set_color_saturation+0x216>
        }
    }

    return OV5640_EOK;
 800fd30:	2300      	movs	r3, #0
}
 800fd32:	4618      	mov	r0, r3
 800fd34:	3708      	adds	r7, #8
 800fd36:	46bd      	mov	sp, r7
 800fd38:	bd80      	pop	{r7, pc}
 800fd3a:	bf00      	nop

0800fd3c <ov5640_set_brightness>:
 *                          OV5640_BRIGHTNESS_8: -4
 * @retval      OV5640_EOK   : 设置OV5640模块亮度成功
 *              OV5640_EINVAL: 传入参数错误
 */
uint8_t ov5640_set_brightness(ov5640_brightness_t brightness)
{
 800fd3c:	b580      	push	{r7, lr}
 800fd3e:	b082      	sub	sp, #8
 800fd40:	af00      	add	r7, sp, #0
 800fd42:	4603      	mov	r3, r0
 800fd44:	71fb      	strb	r3, [r7, #7]
    switch (brightness)
 800fd46:	79fb      	ldrb	r3, [r7, #7]
 800fd48:	2b08      	cmp	r3, #8
 800fd4a:	f200 80d2 	bhi.w	800fef2 <ov5640_set_brightness+0x1b6>
 800fd4e:	a201      	add	r2, pc, #4	; (adr r2, 800fd54 <ov5640_set_brightness+0x18>)
 800fd50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fd54:	0800fd79 	.word	0x0800fd79
 800fd58:	0800fda3 	.word	0x0800fda3
 800fd5c:	0800fdcd 	.word	0x0800fdcd
 800fd60:	0800fdf7 	.word	0x0800fdf7
 800fd64:	0800fe21 	.word	0x0800fe21
 800fd68:	0800fe4b 	.word	0x0800fe4b
 800fd6c:	0800fe75 	.word	0x0800fe75
 800fd70:	0800fe9f 	.word	0x0800fe9f
 800fd74:	0800fec9 	.word	0x0800fec9
    {
        case OV5640_BRIGHTNESS_0:
        {
            ov5640_write_reg(0x5001, 0xFF);
 800fd78:	21ff      	movs	r1, #255	; 0xff
 800fd7a:	f245 0001 	movw	r0, #20481	; 0x5001
 800fd7e:	f7ff fc71 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5587, 0x40);
 800fd82:	2140      	movs	r1, #64	; 0x40
 800fd84:	f245 5087 	movw	r0, #21895	; 0x5587
 800fd88:	f7ff fc6c 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x04);
 800fd8c:	2104      	movs	r1, #4
 800fd8e:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 800fd92:	f7ff fc67 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x01);
 800fd96:	2101      	movs	r1, #1
 800fd98:	f245 5088 	movw	r0, #21896	; 0x5588
 800fd9c:	f7ff fc62 	bl	800f664 <ov5640_write_reg>
            break;
 800fda0:	e0a9      	b.n	800fef6 <ov5640_set_brightness+0x1ba>
        }
        case OV5640_BRIGHTNESS_1:
        {
            ov5640_write_reg(0x5001, 0xFF);
 800fda2:	21ff      	movs	r1, #255	; 0xff
 800fda4:	f245 0001 	movw	r0, #20481	; 0x5001
 800fda8:	f7ff fc5c 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5587, 0x30);
 800fdac:	2130      	movs	r1, #48	; 0x30
 800fdae:	f245 5087 	movw	r0, #21895	; 0x5587
 800fdb2:	f7ff fc57 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x04);
 800fdb6:	2104      	movs	r1, #4
 800fdb8:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 800fdbc:	f7ff fc52 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x01);
 800fdc0:	2101      	movs	r1, #1
 800fdc2:	f245 5088 	movw	r0, #21896	; 0x5588
 800fdc6:	f7ff fc4d 	bl	800f664 <ov5640_write_reg>
            break;
 800fdca:	e094      	b.n	800fef6 <ov5640_set_brightness+0x1ba>
        }
        case OV5640_BRIGHTNESS_2:
        {
            ov5640_write_reg(0x5001, 0xFF);
 800fdcc:	21ff      	movs	r1, #255	; 0xff
 800fdce:	f245 0001 	movw	r0, #20481	; 0x5001
 800fdd2:	f7ff fc47 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5587, 0x20);
 800fdd6:	2120      	movs	r1, #32
 800fdd8:	f245 5087 	movw	r0, #21895	; 0x5587
 800fddc:	f7ff fc42 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x04);
 800fde0:	2104      	movs	r1, #4
 800fde2:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 800fde6:	f7ff fc3d 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x01);
 800fdea:	2101      	movs	r1, #1
 800fdec:	f245 5088 	movw	r0, #21896	; 0x5588
 800fdf0:	f7ff fc38 	bl	800f664 <ov5640_write_reg>
            break;
 800fdf4:	e07f      	b.n	800fef6 <ov5640_set_brightness+0x1ba>
        }
        case OV5640_BRIGHTNESS_3:
        {
            ov5640_write_reg(0x5001, 0xFF);
 800fdf6:	21ff      	movs	r1, #255	; 0xff
 800fdf8:	f245 0001 	movw	r0, #20481	; 0x5001
 800fdfc:	f7ff fc32 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5587, 0x10);
 800fe00:	2110      	movs	r1, #16
 800fe02:	f245 5087 	movw	r0, #21895	; 0x5587
 800fe06:	f7ff fc2d 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x04);
 800fe0a:	2104      	movs	r1, #4
 800fe0c:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 800fe10:	f7ff fc28 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x01);
 800fe14:	2101      	movs	r1, #1
 800fe16:	f245 5088 	movw	r0, #21896	; 0x5588
 800fe1a:	f7ff fc23 	bl	800f664 <ov5640_write_reg>
            break;
 800fe1e:	e06a      	b.n	800fef6 <ov5640_set_brightness+0x1ba>
        }
        case OV5640_BRIGHTNESS_4:
        {
            ov5640_write_reg(0x5001, 0xFF);
 800fe20:	21ff      	movs	r1, #255	; 0xff
 800fe22:	f245 0001 	movw	r0, #20481	; 0x5001
 800fe26:	f7ff fc1d 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5587, 0x00);
 800fe2a:	2100      	movs	r1, #0
 800fe2c:	f245 5087 	movw	r0, #21895	; 0x5587
 800fe30:	f7ff fc18 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x04);
 800fe34:	2104      	movs	r1, #4
 800fe36:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 800fe3a:	f7ff fc13 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x01);
 800fe3e:	2101      	movs	r1, #1
 800fe40:	f245 5088 	movw	r0, #21896	; 0x5588
 800fe44:	f7ff fc0e 	bl	800f664 <ov5640_write_reg>
            break;
 800fe48:	e055      	b.n	800fef6 <ov5640_set_brightness+0x1ba>
        }
        case OV5640_BRIGHTNESS_5:
        {
            ov5640_write_reg(0x5001, 0xFF);
 800fe4a:	21ff      	movs	r1, #255	; 0xff
 800fe4c:	f245 0001 	movw	r0, #20481	; 0x5001
 800fe50:	f7ff fc08 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5587, 0x10);
 800fe54:	2110      	movs	r1, #16
 800fe56:	f245 5087 	movw	r0, #21895	; 0x5587
 800fe5a:	f7ff fc03 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x04);
 800fe5e:	2104      	movs	r1, #4
 800fe60:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 800fe64:	f7ff fbfe 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x09);
 800fe68:	2109      	movs	r1, #9
 800fe6a:	f245 5088 	movw	r0, #21896	; 0x5588
 800fe6e:	f7ff fbf9 	bl	800f664 <ov5640_write_reg>
            break;
 800fe72:	e040      	b.n	800fef6 <ov5640_set_brightness+0x1ba>
        }
        case OV5640_BRIGHTNESS_6:
        {
            ov5640_write_reg(0x5001, 0xFF);
 800fe74:	21ff      	movs	r1, #255	; 0xff
 800fe76:	f245 0001 	movw	r0, #20481	; 0x5001
 800fe7a:	f7ff fbf3 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5587, 0x20);
 800fe7e:	2120      	movs	r1, #32
 800fe80:	f245 5087 	movw	r0, #21895	; 0x5587
 800fe84:	f7ff fbee 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x04);
 800fe88:	2104      	movs	r1, #4
 800fe8a:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 800fe8e:	f7ff fbe9 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x09);
 800fe92:	2109      	movs	r1, #9
 800fe94:	f245 5088 	movw	r0, #21896	; 0x5588
 800fe98:	f7ff fbe4 	bl	800f664 <ov5640_write_reg>
            break;
 800fe9c:	e02b      	b.n	800fef6 <ov5640_set_brightness+0x1ba>
        }
        case OV5640_BRIGHTNESS_7:
        {
            ov5640_write_reg(0x5001, 0xFF);
 800fe9e:	21ff      	movs	r1, #255	; 0xff
 800fea0:	f245 0001 	movw	r0, #20481	; 0x5001
 800fea4:	f7ff fbde 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5587, 0x30);
 800fea8:	2130      	movs	r1, #48	; 0x30
 800feaa:	f245 5087 	movw	r0, #21895	; 0x5587
 800feae:	f7ff fbd9 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x04);
 800feb2:	2104      	movs	r1, #4
 800feb4:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 800feb8:	f7ff fbd4 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x09);
 800febc:	2109      	movs	r1, #9
 800febe:	f245 5088 	movw	r0, #21896	; 0x5588
 800fec2:	f7ff fbcf 	bl	800f664 <ov5640_write_reg>
            break;
 800fec6:	e016      	b.n	800fef6 <ov5640_set_brightness+0x1ba>
        }
        case OV5640_BRIGHTNESS_8:
        {
            ov5640_write_reg(0x5001, 0xFF);
 800fec8:	21ff      	movs	r1, #255	; 0xff
 800feca:	f245 0001 	movw	r0, #20481	; 0x5001
 800fece:	f7ff fbc9 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5587, 0x40);
 800fed2:	2140      	movs	r1, #64	; 0x40
 800fed4:	f245 5087 	movw	r0, #21895	; 0x5587
 800fed8:	f7ff fbc4 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x04);
 800fedc:	2104      	movs	r1, #4
 800fede:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 800fee2:	f7ff fbbf 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x09);
 800fee6:	2109      	movs	r1, #9
 800fee8:	f245 5088 	movw	r0, #21896	; 0x5588
 800feec:	f7ff fbba 	bl	800f664 <ov5640_write_reg>
            break;
 800fef0:	e001      	b.n	800fef6 <ov5640_set_brightness+0x1ba>
        }
        default:
        {
            return OV5640_EINVAL;
 800fef2:	2302      	movs	r3, #2
 800fef4:	e000      	b.n	800fef8 <ov5640_set_brightness+0x1bc>
        }
    }

    return OV5640_EOK;
 800fef6:	2300      	movs	r3, #0
}
 800fef8:	4618      	mov	r0, r3
 800fefa:	3708      	adds	r7, #8
 800fefc:	46bd      	mov	sp, r7
 800fefe:	bd80      	pop	{r7, pc}

0800ff00 <ov5640_set_contrast>:
 *                        OV5640_CONTRAST_8: -4
 * @retval      OV5640_EOK   : 设置OV5640模块对比度成功
 *              OV5640_EINVAL: 传入参数错误
 */
uint8_t ov5640_set_contrast(ov5640_contrast_t contrast)
{
 800ff00:	b580      	push	{r7, lr}
 800ff02:	b082      	sub	sp, #8
 800ff04:	af00      	add	r7, sp, #0
 800ff06:	4603      	mov	r3, r0
 800ff08:	71fb      	strb	r3, [r7, #7]
    switch (contrast)
 800ff0a:	79fb      	ldrb	r3, [r7, #7]
 800ff0c:	2b08      	cmp	r3, #8
 800ff0e:	f200 810e 	bhi.w	801012e <ov5640_set_contrast+0x22e>
 800ff12:	a201      	add	r2, pc, #4	; (adr r2, 800ff18 <ov5640_set_contrast+0x18>)
 800ff14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ff18:	0800ff3d 	.word	0x0800ff3d
 800ff1c:	0800ff71 	.word	0x0800ff71
 800ff20:	0800ffa5 	.word	0x0800ffa5
 800ff24:	0800ffd9 	.word	0x0800ffd9
 800ff28:	0801000d 	.word	0x0801000d
 800ff2c:	0801005f 	.word	0x0801005f
 800ff30:	08010093 	.word	0x08010093
 800ff34:	080100c7 	.word	0x080100c7
 800ff38:	080100fb 	.word	0x080100fb
    {
        case OV5640_CONTRAST_0:
        {
            ov5640_write_reg(0x5001, 0xFF);
 800ff3c:	21ff      	movs	r1, #255	; 0xff
 800ff3e:	f245 0001 	movw	r0, #20481	; 0x5001
 800ff42:	f7ff fb8f 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x04);
 800ff46:	2104      	movs	r1, #4
 800ff48:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 800ff4c:	f7ff fb8a 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5586, 0x30);
 800ff50:	2130      	movs	r1, #48	; 0x30
 800ff52:	f245 5086 	movw	r0, #21894	; 0x5586
 800ff56:	f7ff fb85 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5585, 0x30);
 800ff5a:	2130      	movs	r1, #48	; 0x30
 800ff5c:	f245 5085 	movw	r0, #21893	; 0x5585
 800ff60:	f7ff fb80 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x41);
 800ff64:	2141      	movs	r1, #65	; 0x41
 800ff66:	f245 5088 	movw	r0, #21896	; 0x5588
 800ff6a:	f7ff fb7b 	bl	800f664 <ov5640_write_reg>
            break;
 800ff6e:	e0e0      	b.n	8010132 <ov5640_set_contrast+0x232>
        }
        case OV5640_CONTRAST_1:
        {
            ov5640_write_reg(0x5001, 0xFF);
 800ff70:	21ff      	movs	r1, #255	; 0xff
 800ff72:	f245 0001 	movw	r0, #20481	; 0x5001
 800ff76:	f7ff fb75 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x04);
 800ff7a:	2104      	movs	r1, #4
 800ff7c:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 800ff80:	f7ff fb70 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5586, 0x2C);
 800ff84:	212c      	movs	r1, #44	; 0x2c
 800ff86:	f245 5086 	movw	r0, #21894	; 0x5586
 800ff8a:	f7ff fb6b 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5585, 0x2C);
 800ff8e:	212c      	movs	r1, #44	; 0x2c
 800ff90:	f245 5085 	movw	r0, #21893	; 0x5585
 800ff94:	f7ff fb66 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x41);
 800ff98:	2141      	movs	r1, #65	; 0x41
 800ff9a:	f245 5088 	movw	r0, #21896	; 0x5588
 800ff9e:	f7ff fb61 	bl	800f664 <ov5640_write_reg>
            break;
 800ffa2:	e0c6      	b.n	8010132 <ov5640_set_contrast+0x232>
        }
        case OV5640_CONTRAST_2:
        {
            ov5640_write_reg(0x5001, 0xFF);
 800ffa4:	21ff      	movs	r1, #255	; 0xff
 800ffa6:	f245 0001 	movw	r0, #20481	; 0x5001
 800ffaa:	f7ff fb5b 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x04);
 800ffae:	2104      	movs	r1, #4
 800ffb0:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 800ffb4:	f7ff fb56 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5586, 0x28);
 800ffb8:	2128      	movs	r1, #40	; 0x28
 800ffba:	f245 5086 	movw	r0, #21894	; 0x5586
 800ffbe:	f7ff fb51 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5585, 0x28);
 800ffc2:	2128      	movs	r1, #40	; 0x28
 800ffc4:	f245 5085 	movw	r0, #21893	; 0x5585
 800ffc8:	f7ff fb4c 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x41);
 800ffcc:	2141      	movs	r1, #65	; 0x41
 800ffce:	f245 5088 	movw	r0, #21896	; 0x5588
 800ffd2:	f7ff fb47 	bl	800f664 <ov5640_write_reg>
            break;
 800ffd6:	e0ac      	b.n	8010132 <ov5640_set_contrast+0x232>
        }
        case OV5640_CONTRAST_3:
        {
            ov5640_write_reg(0x5001, 0xFF);
 800ffd8:	21ff      	movs	r1, #255	; 0xff
 800ffda:	f245 0001 	movw	r0, #20481	; 0x5001
 800ffde:	f7ff fb41 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x04);
 800ffe2:	2104      	movs	r1, #4
 800ffe4:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 800ffe8:	f7ff fb3c 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5586, 0x24);
 800ffec:	2124      	movs	r1, #36	; 0x24
 800ffee:	f245 5086 	movw	r0, #21894	; 0x5586
 800fff2:	f7ff fb37 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5585, 0x24);
 800fff6:	2124      	movs	r1, #36	; 0x24
 800fff8:	f245 5085 	movw	r0, #21893	; 0x5585
 800fffc:	f7ff fb32 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x41);
 8010000:	2141      	movs	r1, #65	; 0x41
 8010002:	f245 5088 	movw	r0, #21896	; 0x5588
 8010006:	f7ff fb2d 	bl	800f664 <ov5640_write_reg>
            break;
 801000a:	e092      	b.n	8010132 <ov5640_set_contrast+0x232>
        }
        case OV5640_CONTRAST_4:
        {
        	ov5640_write_reg(0x3212, 0x03);
 801000c:	2103      	movs	r1, #3
 801000e:	f243 2012 	movw	r0, #12818	; 0x3212
 8010012:	f7ff fb27 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5001, 0xFF);
 8010016:	21ff      	movs	r1, #255	; 0xff
 8010018:	f245 0001 	movw	r0, #20481	; 0x5001
 801001c:	f7ff fb22 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x04);
 8010020:	2104      	movs	r1, #4
 8010022:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 8010026:	f7ff fb1d 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5586, 0x20);
 801002a:	2120      	movs	r1, #32
 801002c:	f245 5086 	movw	r0, #21894	; 0x5586
 8010030:	f7ff fb18 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5585, 0x20);
 8010034:	2120      	movs	r1, #32
 8010036:	f245 5085 	movw	r0, #21893	; 0x5585
 801003a:	f7ff fb13 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x41);
 801003e:	2141      	movs	r1, #65	; 0x41
 8010040:	f245 5088 	movw	r0, #21896	; 0x5588
 8010044:	f7ff fb0e 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3212, 0x13);
 8010048:	2113      	movs	r1, #19
 801004a:	f243 2012 	movw	r0, #12818	; 0x3212
 801004e:	f7ff fb09 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3212, 0xa3);
 8010052:	21a3      	movs	r1, #163	; 0xa3
 8010054:	f243 2012 	movw	r0, #12818	; 0x3212
 8010058:	f7ff fb04 	bl	800f664 <ov5640_write_reg>
            break;
 801005c:	e069      	b.n	8010132 <ov5640_set_contrast+0x232>
        }
        case OV5640_CONTRAST_5:
        {
            ov5640_write_reg(0x5001, 0xFF);
 801005e:	21ff      	movs	r1, #255	; 0xff
 8010060:	f245 0001 	movw	r0, #20481	; 0x5001
 8010064:	f7ff fafe 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x04);
 8010068:	2104      	movs	r1, #4
 801006a:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 801006e:	f7ff faf9 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5586, 0x1C);
 8010072:	211c      	movs	r1, #28
 8010074:	f245 5086 	movw	r0, #21894	; 0x5586
 8010078:	f7ff faf4 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5585, 0x1C);
 801007c:	211c      	movs	r1, #28
 801007e:	f245 5085 	movw	r0, #21893	; 0x5585
 8010082:	f7ff faef 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x41);
 8010086:	2141      	movs	r1, #65	; 0x41
 8010088:	f245 5088 	movw	r0, #21896	; 0x5588
 801008c:	f7ff faea 	bl	800f664 <ov5640_write_reg>
            break;
 8010090:	e04f      	b.n	8010132 <ov5640_set_contrast+0x232>
        }
        case OV5640_CONTRAST_6:
        {
            ov5640_write_reg(0x5001, 0xFF);
 8010092:	21ff      	movs	r1, #255	; 0xff
 8010094:	f245 0001 	movw	r0, #20481	; 0x5001
 8010098:	f7ff fae4 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x04);
 801009c:	2104      	movs	r1, #4
 801009e:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 80100a2:	f7ff fadf 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5586, 0x18);
 80100a6:	2118      	movs	r1, #24
 80100a8:	f245 5086 	movw	r0, #21894	; 0x5586
 80100ac:	f7ff fada 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5585, 0x18);
 80100b0:	2118      	movs	r1, #24
 80100b2:	f245 5085 	movw	r0, #21893	; 0x5585
 80100b6:	f7ff fad5 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x41);
 80100ba:	2141      	movs	r1, #65	; 0x41
 80100bc:	f245 5088 	movw	r0, #21896	; 0x5588
 80100c0:	f7ff fad0 	bl	800f664 <ov5640_write_reg>
            break;
 80100c4:	e035      	b.n	8010132 <ov5640_set_contrast+0x232>
        }
        case OV5640_CONTRAST_7:
        {
            ov5640_write_reg(0x5001, 0xFF);
 80100c6:	21ff      	movs	r1, #255	; 0xff
 80100c8:	f245 0001 	movw	r0, #20481	; 0x5001
 80100cc:	f7ff faca 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x04);
 80100d0:	2104      	movs	r1, #4
 80100d2:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 80100d6:	f7ff fac5 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5586, 0x14);
 80100da:	2114      	movs	r1, #20
 80100dc:	f245 5086 	movw	r0, #21894	; 0x5586
 80100e0:	f7ff fac0 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5585, 0x14);
 80100e4:	2114      	movs	r1, #20
 80100e6:	f245 5085 	movw	r0, #21893	; 0x5585
 80100ea:	f7ff fabb 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x41);
 80100ee:	2141      	movs	r1, #65	; 0x41
 80100f0:	f245 5088 	movw	r0, #21896	; 0x5588
 80100f4:	f7ff fab6 	bl	800f664 <ov5640_write_reg>
            break;
 80100f8:	e01b      	b.n	8010132 <ov5640_set_contrast+0x232>
        }
        case OV5640_CONTRAST_8:
        {
            ov5640_write_reg(0x5001, 0xFF);
 80100fa:	21ff      	movs	r1, #255	; 0xff
 80100fc:	f245 0001 	movw	r0, #20481	; 0x5001
 8010100:	f7ff fab0 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x04);
 8010104:	2104      	movs	r1, #4
 8010106:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 801010a:	f7ff faab 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5586, 0x10);
 801010e:	2110      	movs	r1, #16
 8010110:	f245 5086 	movw	r0, #21894	; 0x5586
 8010114:	f7ff faa6 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5585, 0x10);
 8010118:	2110      	movs	r1, #16
 801011a:	f245 5085 	movw	r0, #21893	; 0x5585
 801011e:	f7ff faa1 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x41);
 8010122:	2141      	movs	r1, #65	; 0x41
 8010124:	f245 5088 	movw	r0, #21896	; 0x5588
 8010128:	f7ff fa9c 	bl	800f664 <ov5640_write_reg>
            break;
 801012c:	e001      	b.n	8010132 <ov5640_set_contrast+0x232>
        }
        default:
        {
            return OV5640_EINVAL;
 801012e:	2302      	movs	r3, #2
 8010130:	e000      	b.n	8010134 <ov5640_set_contrast+0x234>
        }
    }

    return OV5640_EOK;
 8010132:	2300      	movs	r3, #0
}
 8010134:	4618      	mov	r0, r3
 8010136:	3708      	adds	r7, #8
 8010138:	46bd      	mov	sp, r7
 801013a:	bd80      	pop	{r7, pc}

0801013c <ov5640_set_hue>:
 *                        OV5640_HUE_11: +150 degree
 * @retval      OV5640_EOK   : 设置OV5640模块色相成功
 *              OV5640_EINVAL: 传入参数错误
 */
uint8_t ov5640_set_hue(ov5640_hue_t hue)
{
 801013c:	b580      	push	{r7, lr}
 801013e:	b082      	sub	sp, #8
 8010140:	af00      	add	r7, sp, #0
 8010142:	4603      	mov	r3, r0
 8010144:	71fb      	strb	r3, [r7, #7]
    switch (hue)
 8010146:	79fb      	ldrb	r3, [r7, #7]
 8010148:	2b0b      	cmp	r3, #11
 801014a:	f200 8153 	bhi.w	80103f4 <ov5640_set_hue+0x2b8>
 801014e:	a201      	add	r2, pc, #4	; (adr r2, 8010154 <ov5640_set_hue+0x18>)
 8010150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010154:	08010185 	.word	0x08010185
 8010158:	080101b9 	.word	0x080101b9
 801015c:	080101ed 	.word	0x080101ed
 8010160:	08010221 	.word	0x08010221
 8010164:	08010255 	.word	0x08010255
 8010168:	08010289 	.word	0x08010289
 801016c:	080102bd 	.word	0x080102bd
 8010170:	080102f1 	.word	0x080102f1
 8010174:	08010325 	.word	0x08010325
 8010178:	08010359 	.word	0x08010359
 801017c:	0801038d 	.word	0x0801038d
 8010180:	080103c1 	.word	0x080103c1
    {
        case OV5640_HUE_0:
        {
            ov5640_write_reg(0x5001, 0xFF);
 8010184:	21ff      	movs	r1, #255	; 0xff
 8010186:	f245 0001 	movw	r0, #20481	; 0x5001
 801018a:	f7ff fa6b 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x01);
 801018e:	2101      	movs	r1, #1
 8010190:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 8010194:	f7ff fa66 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5581, 0x80);
 8010198:	2180      	movs	r1, #128	; 0x80
 801019a:	f245 5081 	movw	r0, #21889	; 0x5581
 801019e:	f7ff fa61 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5582, 0x00);
 80101a2:	2100      	movs	r1, #0
 80101a4:	f245 5082 	movw	r0, #21890	; 0x5582
 80101a8:	f7ff fa5c 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x32);
 80101ac:	2132      	movs	r1, #50	; 0x32
 80101ae:	f245 5088 	movw	r0, #21896	; 0x5588
 80101b2:	f7ff fa57 	bl	800f664 <ov5640_write_reg>
            break;
 80101b6:	e11f      	b.n	80103f8 <ov5640_set_hue+0x2bc>
        }
        case OV5640_HUE_1:
        {
            ov5640_write_reg(0x5001, 0xFF);
 80101b8:	21ff      	movs	r1, #255	; 0xff
 80101ba:	f245 0001 	movw	r0, #20481	; 0x5001
 80101be:	f7ff fa51 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x01);
 80101c2:	2101      	movs	r1, #1
 80101c4:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 80101c8:	f7ff fa4c 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5581, 0x6F);
 80101cc:	216f      	movs	r1, #111	; 0x6f
 80101ce:	f245 5081 	movw	r0, #21889	; 0x5581
 80101d2:	f7ff fa47 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5582, 0x40);
 80101d6:	2140      	movs	r1, #64	; 0x40
 80101d8:	f245 5082 	movw	r0, #21890	; 0x5582
 80101dc:	f7ff fa42 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x32);
 80101e0:	2132      	movs	r1, #50	; 0x32
 80101e2:	f245 5088 	movw	r0, #21896	; 0x5588
 80101e6:	f7ff fa3d 	bl	800f664 <ov5640_write_reg>
            break;
 80101ea:	e105      	b.n	80103f8 <ov5640_set_hue+0x2bc>
        }
        case OV5640_HUE_2:
        {
            ov5640_write_reg(0x5001, 0xFF);
 80101ec:	21ff      	movs	r1, #255	; 0xff
 80101ee:	f245 0001 	movw	r0, #20481	; 0x5001
 80101f2:	f7ff fa37 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x01);
 80101f6:	2101      	movs	r1, #1
 80101f8:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 80101fc:	f7ff fa32 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5581, 0x40);
 8010200:	2140      	movs	r1, #64	; 0x40
 8010202:	f245 5081 	movw	r0, #21889	; 0x5581
 8010206:	f7ff fa2d 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5582, 0x6F);
 801020a:	216f      	movs	r1, #111	; 0x6f
 801020c:	f245 5082 	movw	r0, #21890	; 0x5582
 8010210:	f7ff fa28 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x32);
 8010214:	2132      	movs	r1, #50	; 0x32
 8010216:	f245 5088 	movw	r0, #21896	; 0x5588
 801021a:	f7ff fa23 	bl	800f664 <ov5640_write_reg>
            break;
 801021e:	e0eb      	b.n	80103f8 <ov5640_set_hue+0x2bc>
        }
        case OV5640_HUE_3:
        {
            ov5640_write_reg(0x5001, 0xFF);
 8010220:	21ff      	movs	r1, #255	; 0xff
 8010222:	f245 0001 	movw	r0, #20481	; 0x5001
 8010226:	f7ff fa1d 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x01);
 801022a:	2101      	movs	r1, #1
 801022c:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 8010230:	f7ff fa18 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5581, 0x00);
 8010234:	2100      	movs	r1, #0
 8010236:	f245 5081 	movw	r0, #21889	; 0x5581
 801023a:	f7ff fa13 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5582, 0x80);
 801023e:	2180      	movs	r1, #128	; 0x80
 8010240:	f245 5082 	movw	r0, #21890	; 0x5582
 8010244:	f7ff fa0e 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x02);
 8010248:	2102      	movs	r1, #2
 801024a:	f245 5088 	movw	r0, #21896	; 0x5588
 801024e:	f7ff fa09 	bl	800f664 <ov5640_write_reg>
            break;
 8010252:	e0d1      	b.n	80103f8 <ov5640_set_hue+0x2bc>
        }
        case OV5640_HUE_4:
        {
            ov5640_write_reg(0x5001, 0xFF);
 8010254:	21ff      	movs	r1, #255	; 0xff
 8010256:	f245 0001 	movw	r0, #20481	; 0x5001
 801025a:	f7ff fa03 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x01);
 801025e:	2101      	movs	r1, #1
 8010260:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 8010264:	f7ff f9fe 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5581, 0x40);
 8010268:	2140      	movs	r1, #64	; 0x40
 801026a:	f245 5081 	movw	r0, #21889	; 0x5581
 801026e:	f7ff f9f9 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5582, 0x6F);
 8010272:	216f      	movs	r1, #111	; 0x6f
 8010274:	f245 5082 	movw	r0, #21890	; 0x5582
 8010278:	f7ff f9f4 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x02);
 801027c:	2102      	movs	r1, #2
 801027e:	f245 5088 	movw	r0, #21896	; 0x5588
 8010282:	f7ff f9ef 	bl	800f664 <ov5640_write_reg>
            break;
 8010286:	e0b7      	b.n	80103f8 <ov5640_set_hue+0x2bc>
        }
        case OV5640_HUE_5:
        {
            ov5640_write_reg(0x5001, 0xFF);
 8010288:	21ff      	movs	r1, #255	; 0xff
 801028a:	f245 0001 	movw	r0, #20481	; 0x5001
 801028e:	f7ff f9e9 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x01);
 8010292:	2101      	movs	r1, #1
 8010294:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 8010298:	f7ff f9e4 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5581, 0x6F);
 801029c:	216f      	movs	r1, #111	; 0x6f
 801029e:	f245 5081 	movw	r0, #21889	; 0x5581
 80102a2:	f7ff f9df 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5582, 0x40);
 80102a6:	2140      	movs	r1, #64	; 0x40
 80102a8:	f245 5082 	movw	r0, #21890	; 0x5582
 80102ac:	f7ff f9da 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x02);
 80102b0:	2102      	movs	r1, #2
 80102b2:	f245 5088 	movw	r0, #21896	; 0x5588
 80102b6:	f7ff f9d5 	bl	800f664 <ov5640_write_reg>
            break;
 80102ba:	e09d      	b.n	80103f8 <ov5640_set_hue+0x2bc>
        }
        case OV5640_HUE_6:
        {
            ov5640_write_reg(0x5001, 0xFF);
 80102bc:	21ff      	movs	r1, #255	; 0xff
 80102be:	f245 0001 	movw	r0, #20481	; 0x5001
 80102c2:	f7ff f9cf 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x01);
 80102c6:	2101      	movs	r1, #1
 80102c8:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 80102cc:	f7ff f9ca 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5581, 0x80);
 80102d0:	2180      	movs	r1, #128	; 0x80
 80102d2:	f245 5081 	movw	r0, #21889	; 0x5581
 80102d6:	f7ff f9c5 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5582, 0x00);
 80102da:	2100      	movs	r1, #0
 80102dc:	f245 5082 	movw	r0, #21890	; 0x5582
 80102e0:	f7ff f9c0 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x01);
 80102e4:	2101      	movs	r1, #1
 80102e6:	f245 5088 	movw	r0, #21896	; 0x5588
 80102ea:	f7ff f9bb 	bl	800f664 <ov5640_write_reg>
            break;
 80102ee:	e083      	b.n	80103f8 <ov5640_set_hue+0x2bc>
        }
        case OV5640_HUE_7:
        {
            ov5640_write_reg(0x5001, 0xFF);
 80102f0:	21ff      	movs	r1, #255	; 0xff
 80102f2:	f245 0001 	movw	r0, #20481	; 0x5001
 80102f6:	f7ff f9b5 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x01);
 80102fa:	2101      	movs	r1, #1
 80102fc:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 8010300:	f7ff f9b0 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5581, 0x6F);
 8010304:	216f      	movs	r1, #111	; 0x6f
 8010306:	f245 5081 	movw	r0, #21889	; 0x5581
 801030a:	f7ff f9ab 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5582, 0x40);
 801030e:	2140      	movs	r1, #64	; 0x40
 8010310:	f245 5082 	movw	r0, #21890	; 0x5582
 8010314:	f7ff f9a6 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x01);
 8010318:	2101      	movs	r1, #1
 801031a:	f245 5088 	movw	r0, #21896	; 0x5588
 801031e:	f7ff f9a1 	bl	800f664 <ov5640_write_reg>
            break;
 8010322:	e069      	b.n	80103f8 <ov5640_set_hue+0x2bc>
        }
        case OV5640_HUE_8:
        {
            ov5640_write_reg(0x5001, 0xFF);
 8010324:	21ff      	movs	r1, #255	; 0xff
 8010326:	f245 0001 	movw	r0, #20481	; 0x5001
 801032a:	f7ff f99b 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x01);
 801032e:	2101      	movs	r1, #1
 8010330:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 8010334:	f7ff f996 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5581, 0x40);
 8010338:	2140      	movs	r1, #64	; 0x40
 801033a:	f245 5081 	movw	r0, #21889	; 0x5581
 801033e:	f7ff f991 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5582, 0x6F);
 8010342:	216f      	movs	r1, #111	; 0x6f
 8010344:	f245 5082 	movw	r0, #21890	; 0x5582
 8010348:	f7ff f98c 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x01);
 801034c:	2101      	movs	r1, #1
 801034e:	f245 5088 	movw	r0, #21896	; 0x5588
 8010352:	f7ff f987 	bl	800f664 <ov5640_write_reg>
            break;
 8010356:	e04f      	b.n	80103f8 <ov5640_set_hue+0x2bc>
        }
        case OV5640_HUE_9:
        {
            ov5640_write_reg(0x5001, 0xFF);
 8010358:	21ff      	movs	r1, #255	; 0xff
 801035a:	f245 0001 	movw	r0, #20481	; 0x5001
 801035e:	f7ff f981 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x01);
 8010362:	2101      	movs	r1, #1
 8010364:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 8010368:	f7ff f97c 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5581, 0x00);
 801036c:	2100      	movs	r1, #0
 801036e:	f245 5081 	movw	r0, #21889	; 0x5581
 8010372:	f7ff f977 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5582, 0x80);
 8010376:	2180      	movs	r1, #128	; 0x80
 8010378:	f245 5082 	movw	r0, #21890	; 0x5582
 801037c:	f7ff f972 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x31);
 8010380:	2131      	movs	r1, #49	; 0x31
 8010382:	f245 5088 	movw	r0, #21896	; 0x5588
 8010386:	f7ff f96d 	bl	800f664 <ov5640_write_reg>
            break;
 801038a:	e035      	b.n	80103f8 <ov5640_set_hue+0x2bc>
        }
        case OV5640_HUE_10:
        {
            ov5640_write_reg(0x5001, 0xFF);
 801038c:	21ff      	movs	r1, #255	; 0xff
 801038e:	f245 0001 	movw	r0, #20481	; 0x5001
 8010392:	f7ff f967 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x01);
 8010396:	2101      	movs	r1, #1
 8010398:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 801039c:	f7ff f962 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5581, 0x40);
 80103a0:	2140      	movs	r1, #64	; 0x40
 80103a2:	f245 5081 	movw	r0, #21889	; 0x5581
 80103a6:	f7ff f95d 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5582, 0x6F);
 80103aa:	216f      	movs	r1, #111	; 0x6f
 80103ac:	f245 5082 	movw	r0, #21890	; 0x5582
 80103b0:	f7ff f958 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x31);
 80103b4:	2131      	movs	r1, #49	; 0x31
 80103b6:	f245 5088 	movw	r0, #21896	; 0x5588
 80103ba:	f7ff f953 	bl	800f664 <ov5640_write_reg>
            break;
 80103be:	e01b      	b.n	80103f8 <ov5640_set_hue+0x2bc>
        }
        case OV5640_HUE_11:
        {
            ov5640_write_reg(0x5001, 0xFF);
 80103c0:	21ff      	movs	r1, #255	; 0xff
 80103c2:	f245 0001 	movw	r0, #20481	; 0x5001
 80103c6:	f7ff f94d 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x01);
 80103ca:	2101      	movs	r1, #1
 80103cc:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 80103d0:	f7ff f948 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5581, 0x6F);
 80103d4:	216f      	movs	r1, #111	; 0x6f
 80103d6:	f245 5081 	movw	r0, #21889	; 0x5581
 80103da:	f7ff f943 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5582, 0x40);
 80103de:	2140      	movs	r1, #64	; 0x40
 80103e0:	f245 5082 	movw	r0, #21890	; 0x5582
 80103e4:	f7ff f93e 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5588, 0x31);
 80103e8:	2131      	movs	r1, #49	; 0x31
 80103ea:	f245 5088 	movw	r0, #21896	; 0x5588
 80103ee:	f7ff f939 	bl	800f664 <ov5640_write_reg>
            break;
 80103f2:	e001      	b.n	80103f8 <ov5640_set_hue+0x2bc>
        }
        default:
        {
            return OV5640_EINVAL;
 80103f4:	2302      	movs	r3, #2
 80103f6:	e000      	b.n	80103fa <ov5640_set_hue+0x2be>
        }
    }

    return OV5640_EOK;
 80103f8:	2300      	movs	r3, #0
}
 80103fa:	4618      	mov	r0, r3
 80103fc:	3708      	adds	r7, #8
 80103fe:	46bd      	mov	sp, r7
 8010400:	bd80      	pop	{r7, pc}
 8010402:	bf00      	nop

08010404 <ov5640_set_special_effect>:
 *                        OV5640_SPECIAL_EFFECT_NEGATIVE: Negative
 * @retval      OV5640_EOK   : 设置OV5640模块特殊效果成功
 *              OV5640_EINVAL: 传入参数错误
 */
uint8_t ov5640_set_special_effect(ov5640_special_effect_t effect)
{
 8010404:	b580      	push	{r7, lr}
 8010406:	b082      	sub	sp, #8
 8010408:	af00      	add	r7, sp, #0
 801040a:	4603      	mov	r3, r0
 801040c:	71fb      	strb	r3, [r7, #7]
    switch (effect)
 801040e:	79fb      	ldrb	r3, [r7, #7]
 8010410:	2b06      	cmp	r3, #6
 8010412:	f200 8090 	bhi.w	8010536 <ov5640_set_special_effect+0x132>
 8010416:	a201      	add	r2, pc, #4	; (adr r2, 801041c <ov5640_set_special_effect+0x18>)
 8010418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801041c:	08010439 	.word	0x08010439
 8010420:	0801044f 	.word	0x0801044f
 8010424:	08010479 	.word	0x08010479
 8010428:	080104a3 	.word	0x080104a3
 801042c:	080104cd 	.word	0x080104cd
 8010430:	080104f7 	.word	0x080104f7
 8010434:	08010521 	.word	0x08010521
    {
        case OV5640_SPECIAL_EFFECT_NORMAL:
        {
            ov5640_write_reg(0x5001, 0x7F);
 8010438:	217f      	movs	r1, #127	; 0x7f
 801043a:	f245 0001 	movw	r0, #20481	; 0x5001
 801043e:	f7ff f911 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x00);
 8010442:	2100      	movs	r1, #0
 8010444:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 8010448:	f7ff f90c 	bl	800f664 <ov5640_write_reg>
            break;
 801044c:	e075      	b.n	801053a <ov5640_set_special_effect+0x136>
        }
        case OV5640_SPECIAL_EFFECT_BW:
        {
            ov5640_write_reg(0x5001, 0xFF);
 801044e:	21ff      	movs	r1, #255	; 0xff
 8010450:	f245 0001 	movw	r0, #20481	; 0x5001
 8010454:	f7ff f906 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x18);
 8010458:	2118      	movs	r1, #24
 801045a:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 801045e:	f7ff f901 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5583, 0x80);
 8010462:	2180      	movs	r1, #128	; 0x80
 8010464:	f245 5083 	movw	r0, #21891	; 0x5583
 8010468:	f7ff f8fc 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5584, 0x80);
 801046c:	2180      	movs	r1, #128	; 0x80
 801046e:	f245 5084 	movw	r0, #21892	; 0x5584
 8010472:	f7ff f8f7 	bl	800f664 <ov5640_write_reg>
            break;
 8010476:	e060      	b.n	801053a <ov5640_set_special_effect+0x136>
        }
        case OV5640_SPECIAL_EFFECT_BLUISH:
        {
            ov5640_write_reg(0x5001, 0xFF);
 8010478:	21ff      	movs	r1, #255	; 0xff
 801047a:	f245 0001 	movw	r0, #20481	; 0x5001
 801047e:	f7ff f8f1 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x18);
 8010482:	2118      	movs	r1, #24
 8010484:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 8010488:	f7ff f8ec 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5583, 0xA0);
 801048c:	21a0      	movs	r1, #160	; 0xa0
 801048e:	f245 5083 	movw	r0, #21891	; 0x5583
 8010492:	f7ff f8e7 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5584, 0x40);
 8010496:	2140      	movs	r1, #64	; 0x40
 8010498:	f245 5084 	movw	r0, #21892	; 0x5584
 801049c:	f7ff f8e2 	bl	800f664 <ov5640_write_reg>
            break;
 80104a0:	e04b      	b.n	801053a <ov5640_set_special_effect+0x136>
        }
        case OV5640_SPECIAL_EFFECT_SEPIA:
        {
            ov5640_write_reg(0x5001, 0xFF);
 80104a2:	21ff      	movs	r1, #255	; 0xff
 80104a4:	f245 0001 	movw	r0, #20481	; 0x5001
 80104a8:	f7ff f8dc 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x18);
 80104ac:	2118      	movs	r1, #24
 80104ae:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 80104b2:	f7ff f8d7 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5583, 0x40);
 80104b6:	2140      	movs	r1, #64	; 0x40
 80104b8:	f245 5083 	movw	r0, #21891	; 0x5583
 80104bc:	f7ff f8d2 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5584, 0xA0);
 80104c0:	21a0      	movs	r1, #160	; 0xa0
 80104c2:	f245 5084 	movw	r0, #21892	; 0x5584
 80104c6:	f7ff f8cd 	bl	800f664 <ov5640_write_reg>
            break;
 80104ca:	e036      	b.n	801053a <ov5640_set_special_effect+0x136>
        }
        case OV5640_SPECIAL_EFFECT_REDDISH:
        {
            ov5640_write_reg(0x5001, 0xFF);
 80104cc:	21ff      	movs	r1, #255	; 0xff
 80104ce:	f245 0001 	movw	r0, #20481	; 0x5001
 80104d2:	f7ff f8c7 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x18);
 80104d6:	2118      	movs	r1, #24
 80104d8:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 80104dc:	f7ff f8c2 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5583, 0x80);
 80104e0:	2180      	movs	r1, #128	; 0x80
 80104e2:	f245 5083 	movw	r0, #21891	; 0x5583
 80104e6:	f7ff f8bd 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5584, 0xC0);
 80104ea:	21c0      	movs	r1, #192	; 0xc0
 80104ec:	f245 5084 	movw	r0, #21892	; 0x5584
 80104f0:	f7ff f8b8 	bl	800f664 <ov5640_write_reg>
            break;
 80104f4:	e021      	b.n	801053a <ov5640_set_special_effect+0x136>
        }
        case OV5640_SPECIAL_EFFECT_GREENISH:
        {
            ov5640_write_reg(0x5001, 0xFF);
 80104f6:	21ff      	movs	r1, #255	; 0xff
 80104f8:	f245 0001 	movw	r0, #20481	; 0x5001
 80104fc:	f7ff f8b2 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x18);
 8010500:	2118      	movs	r1, #24
 8010502:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 8010506:	f7ff f8ad 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5583, 0x60);
 801050a:	2160      	movs	r1, #96	; 0x60
 801050c:	f245 5083 	movw	r0, #21891	; 0x5583
 8010510:	f7ff f8a8 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5584, 0x60);
 8010514:	2160      	movs	r1, #96	; 0x60
 8010516:	f245 5084 	movw	r0, #21892	; 0x5584
 801051a:	f7ff f8a3 	bl	800f664 <ov5640_write_reg>
            break;
 801051e:	e00c      	b.n	801053a <ov5640_set_special_effect+0x136>
        }
        case OV5640_SPECIAL_EFFECT_NEGATIVE:
        {
            ov5640_write_reg(0x5001, 0xFF);
 8010520:	21ff      	movs	r1, #255	; 0xff
 8010522:	f245 0001 	movw	r0, #20481	; 0x5001
 8010526:	f7ff f89d 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5580, 0x40);
 801052a:	2140      	movs	r1, #64	; 0x40
 801052c:	f44f 40ab 	mov.w	r0, #21888	; 0x5580
 8010530:	f7ff f898 	bl	800f664 <ov5640_write_reg>
            break;
 8010534:	e001      	b.n	801053a <ov5640_set_special_effect+0x136>
        }
        default:
        {
            return OV5640_EINVAL;
 8010536:	2302      	movs	r3, #2
 8010538:	e000      	b.n	801053c <ov5640_set_special_effect+0x138>
        }
    }

    return OV5640_EOK;
 801053a:	2300      	movs	r3, #0
}
 801053c:	4618      	mov	r0, r3
 801053e:	3708      	adds	r7, #8
 8010540:	46bd      	mov	sp, r7
 8010542:	bd80      	pop	{r7, pc}

08010544 <ov5640_set_exposure_level>:
 *                        OV5640_EXPOSURE_LEVEL_10: 1.7EV
 * @retval      OV5640_EOK   : 设置OV5640模块曝光度成功
 *              OV5640_EINVAL: 传入参数错误
 */
uint8_t ov5640_set_exposure_level(ov5640_exposure_level_t level)
{
 8010544:	b580      	push	{r7, lr}
 8010546:	b082      	sub	sp, #8
 8010548:	af00      	add	r7, sp, #0
 801054a:	4603      	mov	r3, r0
 801054c:	71fb      	strb	r3, [r7, #7]
    switch (level)
 801054e:	79fb      	ldrb	r3, [r7, #7]
 8010550:	2b0a      	cmp	r3, #10
 8010552:	f200 816e 	bhi.w	8010832 <ov5640_set_exposure_level+0x2ee>
 8010556:	a201      	add	r2, pc, #4	; (adr r2, 801055c <ov5640_set_exposure_level+0x18>)
 8010558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801055c:	08010589 	.word	0x08010589
 8010560:	080105c7 	.word	0x080105c7
 8010564:	08010605 	.word	0x08010605
 8010568:	08010643 	.word	0x08010643
 801056c:	08010681 	.word	0x08010681
 8010570:	080106bf 	.word	0x080106bf
 8010574:	080106fd 	.word	0x080106fd
 8010578:	0801073b 	.word	0x0801073b
 801057c:	08010779 	.word	0x08010779
 8010580:	080107b7 	.word	0x080107b7
 8010584:	080107f5 	.word	0x080107f5
    {
        case OV5640_EXPOSURE_LEVEL_0:
        {
            ov5640_write_reg(0x3A0F, 0x10);
 8010588:	2110      	movs	r1, #16
 801058a:	f643 200f 	movw	r0, #14863	; 0x3a0f
 801058e:	f7ff f869 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3A10, 0x08);
 8010592:	2108      	movs	r1, #8
 8010594:	f643 2010 	movw	r0, #14864	; 0x3a10
 8010598:	f7ff f864 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3A1B, 0x10);
 801059c:	2110      	movs	r1, #16
 801059e:	f643 201b 	movw	r0, #14875	; 0x3a1b
 80105a2:	f7ff f85f 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3A1E, 0x08);
 80105a6:	2108      	movs	r1, #8
 80105a8:	f643 201e 	movw	r0, #14878	; 0x3a1e
 80105ac:	f7ff f85a 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3A11, 0x20);
 80105b0:	2120      	movs	r1, #32
 80105b2:	f643 2011 	movw	r0, #14865	; 0x3a11
 80105b6:	f7ff f855 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3A1F, 0x10);
 80105ba:	2110      	movs	r1, #16
 80105bc:	f643 201f 	movw	r0, #14879	; 0x3a1f
 80105c0:	f7ff f850 	bl	800f664 <ov5640_write_reg>
            break;
 80105c4:	e137      	b.n	8010836 <ov5640_set_exposure_level+0x2f2>
        }
        case OV5640_EXPOSURE_LEVEL_1:
        {
            ov5640_write_reg(0x3A0F, 0x18);
 80105c6:	2118      	movs	r1, #24
 80105c8:	f643 200f 	movw	r0, #14863	; 0x3a0f
 80105cc:	f7ff f84a 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3A10, 0x10);
 80105d0:	2110      	movs	r1, #16
 80105d2:	f643 2010 	movw	r0, #14864	; 0x3a10
 80105d6:	f7ff f845 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3A1B, 0x18);
 80105da:	2118      	movs	r1, #24
 80105dc:	f643 201b 	movw	r0, #14875	; 0x3a1b
 80105e0:	f7ff f840 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3A1E, 0x10);
 80105e4:	2110      	movs	r1, #16
 80105e6:	f643 201e 	movw	r0, #14878	; 0x3a1e
 80105ea:	f7ff f83b 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3A11, 0x30);
 80105ee:	2130      	movs	r1, #48	; 0x30
 80105f0:	f643 2011 	movw	r0, #14865	; 0x3a11
 80105f4:	f7ff f836 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3A1F, 0x10);
 80105f8:	2110      	movs	r1, #16
 80105fa:	f643 201f 	movw	r0, #14879	; 0x3a1f
 80105fe:	f7ff f831 	bl	800f664 <ov5640_write_reg>
            break;
 8010602:	e118      	b.n	8010836 <ov5640_set_exposure_level+0x2f2>
        }
        case OV5640_EXPOSURE_LEVEL_2:
        {
            ov5640_write_reg(0x3A0F, 0x20);
 8010604:	2120      	movs	r1, #32
 8010606:	f643 200f 	movw	r0, #14863	; 0x3a0f
 801060a:	f7ff f82b 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3A10, 0x18);
 801060e:	2118      	movs	r1, #24
 8010610:	f643 2010 	movw	r0, #14864	; 0x3a10
 8010614:	f7ff f826 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3A11, 0x41);
 8010618:	2141      	movs	r1, #65	; 0x41
 801061a:	f643 2011 	movw	r0, #14865	; 0x3a11
 801061e:	f7ff f821 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3A1B, 0x20);
 8010622:	2120      	movs	r1, #32
 8010624:	f643 201b 	movw	r0, #14875	; 0x3a1b
 8010628:	f7ff f81c 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3A1E, 0x18);
 801062c:	2118      	movs	r1, #24
 801062e:	f643 201e 	movw	r0, #14878	; 0x3a1e
 8010632:	f7ff f817 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3A1F, 0x10);
 8010636:	2110      	movs	r1, #16
 8010638:	f643 201f 	movw	r0, #14879	; 0x3a1f
 801063c:	f7ff f812 	bl	800f664 <ov5640_write_reg>
            break;
 8010640:	e0f9      	b.n	8010836 <ov5640_set_exposure_level+0x2f2>
        }
        case OV5640_EXPOSURE_LEVEL_3:
        {
            ov5640_write_reg(0x3A0F, 0x28);
 8010642:	2128      	movs	r1, #40	; 0x28
 8010644:	f643 200f 	movw	r0, #14863	; 0x3a0f
 8010648:	f7ff f80c 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3A10, 0x20);
 801064c:	2120      	movs	r1, #32
 801064e:	f643 2010 	movw	r0, #14864	; 0x3a10
 8010652:	f7ff f807 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3A11, 0x51);
 8010656:	2151      	movs	r1, #81	; 0x51
 8010658:	f643 2011 	movw	r0, #14865	; 0x3a11
 801065c:	f7ff f802 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3A1B, 0x28);
 8010660:	2128      	movs	r1, #40	; 0x28
 8010662:	f643 201b 	movw	r0, #14875	; 0x3a1b
 8010666:	f7fe fffd 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3A1E, 0x20);
 801066a:	2120      	movs	r1, #32
 801066c:	f643 201e 	movw	r0, #14878	; 0x3a1e
 8010670:	f7fe fff8 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3A1F, 0x10);
 8010674:	2110      	movs	r1, #16
 8010676:	f643 201f 	movw	r0, #14879	; 0x3a1f
 801067a:	f7fe fff3 	bl	800f664 <ov5640_write_reg>
            break;
 801067e:	e0da      	b.n	8010836 <ov5640_set_exposure_level+0x2f2>
        }
        case OV5640_EXPOSURE_LEVEL_4:
        {
            ov5640_write_reg(0x3A0F, 0x30);
 8010680:	2130      	movs	r1, #48	; 0x30
 8010682:	f643 200f 	movw	r0, #14863	; 0x3a0f
 8010686:	f7fe ffed 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3A10, 0x28);
 801068a:	2128      	movs	r1, #40	; 0x28
 801068c:	f643 2010 	movw	r0, #14864	; 0x3a10
 8010690:	f7fe ffe8 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3A11, 0x61);
 8010694:	2161      	movs	r1, #97	; 0x61
 8010696:	f643 2011 	movw	r0, #14865	; 0x3a11
 801069a:	f7fe ffe3 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3A1B, 0x30);
 801069e:	2130      	movs	r1, #48	; 0x30
 80106a0:	f643 201b 	movw	r0, #14875	; 0x3a1b
 80106a4:	f7fe ffde 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3A1E, 0x28);
 80106a8:	2128      	movs	r1, #40	; 0x28
 80106aa:	f643 201e 	movw	r0, #14878	; 0x3a1e
 80106ae:	f7fe ffd9 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3A1F, 0x10);
 80106b2:	2110      	movs	r1, #16
 80106b4:	f643 201f 	movw	r0, #14879	; 0x3a1f
 80106b8:	f7fe ffd4 	bl	800f664 <ov5640_write_reg>
            break;
 80106bc:	e0bb      	b.n	8010836 <ov5640_set_exposure_level+0x2f2>
        }
        case OV5640_EXPOSURE_LEVEL_5:
        {
            ov5640_write_reg(0x3A0F, 0x38);
 80106be:	2138      	movs	r1, #56	; 0x38
 80106c0:	f643 200f 	movw	r0, #14863	; 0x3a0f
 80106c4:	f7fe ffce 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3A10, 0x30);
 80106c8:	2130      	movs	r1, #48	; 0x30
 80106ca:	f643 2010 	movw	r0, #14864	; 0x3a10
 80106ce:	f7fe ffc9 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3A11, 0x61);
 80106d2:	2161      	movs	r1, #97	; 0x61
 80106d4:	f643 2011 	movw	r0, #14865	; 0x3a11
 80106d8:	f7fe ffc4 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3A1B, 0x38);
 80106dc:	2138      	movs	r1, #56	; 0x38
 80106de:	f643 201b 	movw	r0, #14875	; 0x3a1b
 80106e2:	f7fe ffbf 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3A1E, 0x30);
 80106e6:	2130      	movs	r1, #48	; 0x30
 80106e8:	f643 201e 	movw	r0, #14878	; 0x3a1e
 80106ec:	f7fe ffba 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3A1F, 0x10);
 80106f0:	2110      	movs	r1, #16
 80106f2:	f643 201f 	movw	r0, #14879	; 0x3a1f
 80106f6:	f7fe ffb5 	bl	800f664 <ov5640_write_reg>
            break;
 80106fa:	e09c      	b.n	8010836 <ov5640_set_exposure_level+0x2f2>
        }
        case OV5640_EXPOSURE_LEVEL_6:
        {
            ov5640_write_reg(0x3A0F, 0x40);
 80106fc:	2140      	movs	r1, #64	; 0x40
 80106fe:	f643 200f 	movw	r0, #14863	; 0x3a0f
 8010702:	f7fe ffaf 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3A10, 0x38);
 8010706:	2138      	movs	r1, #56	; 0x38
 8010708:	f643 2010 	movw	r0, #14864	; 0x3a10
 801070c:	f7fe ffaa 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3A11, 0x71);
 8010710:	2171      	movs	r1, #113	; 0x71
 8010712:	f643 2011 	movw	r0, #14865	; 0x3a11
 8010716:	f7fe ffa5 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3A1B, 0x40);
 801071a:	2140      	movs	r1, #64	; 0x40
 801071c:	f643 201b 	movw	r0, #14875	; 0x3a1b
 8010720:	f7fe ffa0 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3A1E, 0x38);
 8010724:	2138      	movs	r1, #56	; 0x38
 8010726:	f643 201e 	movw	r0, #14878	; 0x3a1e
 801072a:	f7fe ff9b 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3A1F, 0x10);
 801072e:	2110      	movs	r1, #16
 8010730:	f643 201f 	movw	r0, #14879	; 0x3a1f
 8010734:	f7fe ff96 	bl	800f664 <ov5640_write_reg>
            break;
 8010738:	e07d      	b.n	8010836 <ov5640_set_exposure_level+0x2f2>
        }
        case OV5640_EXPOSURE_LEVEL_7:
        {
            ov5640_write_reg(0x3A0F, 0x48);
 801073a:	2148      	movs	r1, #72	; 0x48
 801073c:	f643 200f 	movw	r0, #14863	; 0x3a0f
 8010740:	f7fe ff90 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3A10, 0x40);
 8010744:	2140      	movs	r1, #64	; 0x40
 8010746:	f643 2010 	movw	r0, #14864	; 0x3a10
 801074a:	f7fe ff8b 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3A11, 0x80);
 801074e:	2180      	movs	r1, #128	; 0x80
 8010750:	f643 2011 	movw	r0, #14865	; 0x3a11
 8010754:	f7fe ff86 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3A1B, 0x48);
 8010758:	2148      	movs	r1, #72	; 0x48
 801075a:	f643 201b 	movw	r0, #14875	; 0x3a1b
 801075e:	f7fe ff81 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3A1E, 0x40);
 8010762:	2140      	movs	r1, #64	; 0x40
 8010764:	f643 201e 	movw	r0, #14878	; 0x3a1e
 8010768:	f7fe ff7c 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3A1F, 0x20);
 801076c:	2120      	movs	r1, #32
 801076e:	f643 201f 	movw	r0, #14879	; 0x3a1f
 8010772:	f7fe ff77 	bl	800f664 <ov5640_write_reg>
            break;
 8010776:	e05e      	b.n	8010836 <ov5640_set_exposure_level+0x2f2>
        }
        case OV5640_EXPOSURE_LEVEL_8:
        {
            ov5640_write_reg(0x3A0F, 0x50);
 8010778:	2150      	movs	r1, #80	; 0x50
 801077a:	f643 200f 	movw	r0, #14863	; 0x3a0f
 801077e:	f7fe ff71 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3A10, 0x48);
 8010782:	2148      	movs	r1, #72	; 0x48
 8010784:	f643 2010 	movw	r0, #14864	; 0x3a10
 8010788:	f7fe ff6c 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3A11, 0x90);
 801078c:	2190      	movs	r1, #144	; 0x90
 801078e:	f643 2011 	movw	r0, #14865	; 0x3a11
 8010792:	f7fe ff67 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3A1B, 0x50);
 8010796:	2150      	movs	r1, #80	; 0x50
 8010798:	f643 201b 	movw	r0, #14875	; 0x3a1b
 801079c:	f7fe ff62 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3A1E, 0x48);
 80107a0:	2148      	movs	r1, #72	; 0x48
 80107a2:	f643 201e 	movw	r0, #14878	; 0x3a1e
 80107a6:	f7fe ff5d 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3A1F, 0x20);
 80107aa:	2120      	movs	r1, #32
 80107ac:	f643 201f 	movw	r0, #14879	; 0x3a1f
 80107b0:	f7fe ff58 	bl	800f664 <ov5640_write_reg>
            break;
 80107b4:	e03f      	b.n	8010836 <ov5640_set_exposure_level+0x2f2>
        }
        case OV5640_EXPOSURE_LEVEL_9:
        {
            ov5640_write_reg(0x3A0F, 0x58);
 80107b6:	2158      	movs	r1, #88	; 0x58
 80107b8:	f643 200f 	movw	r0, #14863	; 0x3a0f
 80107bc:	f7fe ff52 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3A10, 0x50);
 80107c0:	2150      	movs	r1, #80	; 0x50
 80107c2:	f643 2010 	movw	r0, #14864	; 0x3a10
 80107c6:	f7fe ff4d 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3A11, 0x91);
 80107ca:	2191      	movs	r1, #145	; 0x91
 80107cc:	f643 2011 	movw	r0, #14865	; 0x3a11
 80107d0:	f7fe ff48 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3A1B, 0x58);
 80107d4:	2158      	movs	r1, #88	; 0x58
 80107d6:	f643 201b 	movw	r0, #14875	; 0x3a1b
 80107da:	f7fe ff43 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3A1E, 0x50);
 80107de:	2150      	movs	r1, #80	; 0x50
 80107e0:	f643 201e 	movw	r0, #14878	; 0x3a1e
 80107e4:	f7fe ff3e 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3A1F, 0x20);
 80107e8:	2120      	movs	r1, #32
 80107ea:	f643 201f 	movw	r0, #14879	; 0x3a1f
 80107ee:	f7fe ff39 	bl	800f664 <ov5640_write_reg>
            break;
 80107f2:	e020      	b.n	8010836 <ov5640_set_exposure_level+0x2f2>
        }
        case OV5640_EXPOSURE_LEVEL_10:
        {
            ov5640_write_reg(0x3A0F, 0x60);
 80107f4:	2160      	movs	r1, #96	; 0x60
 80107f6:	f643 200f 	movw	r0, #14863	; 0x3a0f
 80107fa:	f7fe ff33 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3A10, 0x58);
 80107fe:	2158      	movs	r1, #88	; 0x58
 8010800:	f643 2010 	movw	r0, #14864	; 0x3a10
 8010804:	f7fe ff2e 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3A11, 0xA0);
 8010808:	21a0      	movs	r1, #160	; 0xa0
 801080a:	f643 2011 	movw	r0, #14865	; 0x3a11
 801080e:	f7fe ff29 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3A1B, 0x60);
 8010812:	2160      	movs	r1, #96	; 0x60
 8010814:	f643 201b 	movw	r0, #14875	; 0x3a1b
 8010818:	f7fe ff24 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3A1E, 0x58);
 801081c:	2158      	movs	r1, #88	; 0x58
 801081e:	f643 201e 	movw	r0, #14878	; 0x3a1e
 8010822:	f7fe ff1f 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x3A1F, 0x20);
 8010826:	2120      	movs	r1, #32
 8010828:	f643 201f 	movw	r0, #14879	; 0x3a1f
 801082c:	f7fe ff1a 	bl	800f664 <ov5640_write_reg>
            break;
 8010830:	e001      	b.n	8010836 <ov5640_set_exposure_level+0x2f2>
        }
        default:
        {
            return OV5640_EINVAL;
 8010832:	2302      	movs	r3, #2
 8010834:	e000      	b.n	8010838 <ov5640_set_exposure_level+0x2f4>
        }
    }

    return OV5640_EOK;
 8010836:	2300      	movs	r3, #0
}
 8010838:	4618      	mov	r0, r3
 801083a:	3708      	adds	r7, #8
 801083c:	46bd      	mov	sp, r7
 801083e:	bd80      	pop	{r7, pc}

08010840 <ov5640_set_sharpness_level>:
 *                        OV5640_SHARPNESS_AUTO : Sharpness Auto
 * @retval      OV5640_EOK   : 设置OV5640模块锐度成功
 *              OV5640_EINVAL: 传入参数错误
 */
uint8_t ov5640_set_sharpness_level(ov5640_sharpness_t sharpness)
{
 8010840:	b580      	push	{r7, lr}
 8010842:	b082      	sub	sp, #8
 8010844:	af00      	add	r7, sp, #0
 8010846:	4603      	mov	r3, r0
 8010848:	71fb      	strb	r3, [r7, #7]
    switch (sharpness)
 801084a:	79fb      	ldrb	r3, [r7, #7]
 801084c:	2b09      	cmp	r3, #9
 801084e:	f200 80a8 	bhi.w	80109a2 <ov5640_set_sharpness_level+0x162>
 8010852:	a201      	add	r2, pc, #4	; (adr r2, 8010858 <ov5640_set_sharpness_level+0x18>)
 8010854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010858:	08010881 	.word	0x08010881
 801085c:	08010897 	.word	0x08010897
 8010860:	080108ad 	.word	0x080108ad
 8010864:	080108c3 	.word	0x080108c3
 8010868:	080108d9 	.word	0x080108d9
 801086c:	080108ef 	.word	0x080108ef
 8010870:	08010905 	.word	0x08010905
 8010874:	0801091b 	.word	0x0801091b
 8010878:	08010931 	.word	0x08010931
 801087c:	08010947 	.word	0x08010947
    {
        case OV5640_SHARPNESS_OFF:
        {
            ov5640_write_reg(0x5308, 0x65);
 8010880:	2165      	movs	r1, #101	; 0x65
 8010882:	f245 3008 	movw	r0, #21256	; 0x5308
 8010886:	f7fe feed 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5302, 0x00);
 801088a:	2100      	movs	r1, #0
 801088c:	f245 3002 	movw	r0, #21250	; 0x5302
 8010890:	f7fe fee8 	bl	800f664 <ov5640_write_reg>
            break;
 8010894:	e087      	b.n	80109a6 <ov5640_set_sharpness_level+0x166>
        }
        case OV5640_SHARPNESS_1:
        {
            ov5640_write_reg(0x5308, 0x65);
 8010896:	2165      	movs	r1, #101	; 0x65
 8010898:	f245 3008 	movw	r0, #21256	; 0x5308
 801089c:	f7fe fee2 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5302, 0x02);
 80108a0:	2102      	movs	r1, #2
 80108a2:	f245 3002 	movw	r0, #21250	; 0x5302
 80108a6:	f7fe fedd 	bl	800f664 <ov5640_write_reg>
            break;
 80108aa:	e07c      	b.n	80109a6 <ov5640_set_sharpness_level+0x166>
        }
        case OV5640_SHARPNESS_2:
        {
            ov5640_write_reg(0x5308, 0x65);
 80108ac:	2165      	movs	r1, #101	; 0x65
 80108ae:	f245 3008 	movw	r0, #21256	; 0x5308
 80108b2:	f7fe fed7 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5302, 0x04);
 80108b6:	2104      	movs	r1, #4
 80108b8:	f245 3002 	movw	r0, #21250	; 0x5302
 80108bc:	f7fe fed2 	bl	800f664 <ov5640_write_reg>
            break;
 80108c0:	e071      	b.n	80109a6 <ov5640_set_sharpness_level+0x166>
        }
        case OV5640_SHARPNESS_3:
        {
            ov5640_write_reg(0x5308, 0x65);
 80108c2:	2165      	movs	r1, #101	; 0x65
 80108c4:	f245 3008 	movw	r0, #21256	; 0x5308
 80108c8:	f7fe fecc 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5302, 0x08);
 80108cc:	2108      	movs	r1, #8
 80108ce:	f245 3002 	movw	r0, #21250	; 0x5302
 80108d2:	f7fe fec7 	bl	800f664 <ov5640_write_reg>
            break;
 80108d6:	e066      	b.n	80109a6 <ov5640_set_sharpness_level+0x166>
        }
        case OV5640_SHARPNESS_4:
        {
            ov5640_write_reg(0x5308, 0x65);
 80108d8:	2165      	movs	r1, #101	; 0x65
 80108da:	f245 3008 	movw	r0, #21256	; 0x5308
 80108de:	f7fe fec1 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5302, 0x0C);
 80108e2:	210c      	movs	r1, #12
 80108e4:	f245 3002 	movw	r0, #21250	; 0x5302
 80108e8:	f7fe febc 	bl	800f664 <ov5640_write_reg>
            break;
 80108ec:	e05b      	b.n	80109a6 <ov5640_set_sharpness_level+0x166>
        }
        case OV5640_SHARPNESS_5:
        {
            ov5640_write_reg(0x5308, 0x65);
 80108ee:	2165      	movs	r1, #101	; 0x65
 80108f0:	f245 3008 	movw	r0, #21256	; 0x5308
 80108f4:	f7fe feb6 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5302, 0x10);
 80108f8:	2110      	movs	r1, #16
 80108fa:	f245 3002 	movw	r0, #21250	; 0x5302
 80108fe:	f7fe feb1 	bl	800f664 <ov5640_write_reg>
            break;
 8010902:	e050      	b.n	80109a6 <ov5640_set_sharpness_level+0x166>
        }
        case OV5640_SHARPNESS_6:
        {
            ov5640_write_reg(0x5308, 0x65);
 8010904:	2165      	movs	r1, #101	; 0x65
 8010906:	f245 3008 	movw	r0, #21256	; 0x5308
 801090a:	f7fe feab 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5302, 0x14);
 801090e:	2114      	movs	r1, #20
 8010910:	f245 3002 	movw	r0, #21250	; 0x5302
 8010914:	f7fe fea6 	bl	800f664 <ov5640_write_reg>
            break;
 8010918:	e045      	b.n	80109a6 <ov5640_set_sharpness_level+0x166>
        }
        case OV5640_SHARPNESS_7:
        {
            ov5640_write_reg(0x5308, 0x65);
 801091a:	2165      	movs	r1, #101	; 0x65
 801091c:	f245 3008 	movw	r0, #21256	; 0x5308
 8010920:	f7fe fea0 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5302, 0x18);
 8010924:	2118      	movs	r1, #24
 8010926:	f245 3002 	movw	r0, #21250	; 0x5302
 801092a:	f7fe fe9b 	bl	800f664 <ov5640_write_reg>
            break;
 801092e:	e03a      	b.n	80109a6 <ov5640_set_sharpness_level+0x166>
        }
        case OV5640_SHARPNESS_8:
        {
            ov5640_write_reg(0x5308, 0x65);
 8010930:	2165      	movs	r1, #101	; 0x65
 8010932:	f245 3008 	movw	r0, #21256	; 0x5308
 8010936:	f7fe fe95 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5302, 0x20);
 801093a:	2120      	movs	r1, #32
 801093c:	f245 3002 	movw	r0, #21250	; 0x5302
 8010940:	f7fe fe90 	bl	800f664 <ov5640_write_reg>
            break;
 8010944:	e02f      	b.n	80109a6 <ov5640_set_sharpness_level+0x166>
        }
        case OV5640_SHARPNESS_AUTO:
        {
            ov5640_write_reg(0x5308, 0x25);
 8010946:	2125      	movs	r1, #37	; 0x25
 8010948:	f245 3008 	movw	r0, #21256	; 0x5308
 801094c:	f7fe fe8a 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5300, 0x08);
 8010950:	2108      	movs	r1, #8
 8010952:	f44f 40a6 	mov.w	r0, #21248	; 0x5300
 8010956:	f7fe fe85 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5301, 0x30);
 801095a:	2130      	movs	r1, #48	; 0x30
 801095c:	f245 3001 	movw	r0, #21249	; 0x5301
 8010960:	f7fe fe80 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5302, 0x10);
 8010964:	2110      	movs	r1, #16
 8010966:	f245 3002 	movw	r0, #21250	; 0x5302
 801096a:	f7fe fe7b 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5303, 0x00);
 801096e:	2100      	movs	r1, #0
 8010970:	f245 3003 	movw	r0, #21251	; 0x5303
 8010974:	f7fe fe76 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x5309, 0x08);
 8010978:	2108      	movs	r1, #8
 801097a:	f245 3009 	movw	r0, #21257	; 0x5309
 801097e:	f7fe fe71 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x530A, 0x30);
 8010982:	2130      	movs	r1, #48	; 0x30
 8010984:	f245 300a 	movw	r0, #21258	; 0x530a
 8010988:	f7fe fe6c 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x530B, 0x04);
 801098c:	2104      	movs	r1, #4
 801098e:	f245 300b 	movw	r0, #21259	; 0x530b
 8010992:	f7fe fe67 	bl	800f664 <ov5640_write_reg>
            ov5640_write_reg(0x530C, 0x06);
 8010996:	2106      	movs	r1, #6
 8010998:	f245 300c 	movw	r0, #21260	; 0x530c
 801099c:	f7fe fe62 	bl	800f664 <ov5640_write_reg>
            break;
 80109a0:	e001      	b.n	80109a6 <ov5640_set_sharpness_level+0x166>
        }
        default:
        {
            return OV5640_EINVAL;
 80109a2:	2302      	movs	r3, #2
 80109a4:	e000      	b.n	80109a8 <ov5640_set_sharpness_level+0x168>
        }
    }

    return OV5640_EOK;
 80109a6:	2300      	movs	r3, #0
}
 80109a8:	4618      	mov	r0, r3
 80109aa:	3708      	adds	r7, #8
 80109ac:	46bd      	mov	sp, r7
 80109ae:	bd80      	pop	{r7, pc}

080109b0 <ov5640_set_output_format>:
 *                    OV5640_OUTPUT_FORMAT_JPEG  : JPEG
 * @retval      OV5640_EOK   : 设置OV5640模块输出图像格式成功
 *              OV5640_EINVAL: 传入参数错误
 */
uint8_t ov5640_set_output_format(ov5640_output_format_t format)
{
 80109b0:	b580      	push	{r7, lr}
 80109b2:	b084      	sub	sp, #16
 80109b4:	af00      	add	r7, sp, #0
 80109b6:	4603      	mov	r3, r0
 80109b8:	71fb      	strb	r3, [r7, #7]
    uint32_t cfg_index;

    switch (format)
 80109ba:	79fb      	ldrb	r3, [r7, #7]
 80109bc:	2b00      	cmp	r3, #0
 80109be:	d002      	beq.n	80109c6 <ov5640_set_output_format+0x16>
 80109c0:	2b01      	cmp	r3, #1
 80109c2:	d026      	beq.n	8010a12 <ov5640_set_output_format+0x62>
 80109c4:	e04b      	b.n	8010a5e <ov5640_set_output_format+0xae>
    {
        case OV5640_OUTPUT_FORMAT_RGB565:
        {
            for (cfg_index=0; cfg_index<sizeof(ov5640_rgb565_cfg)/sizeof(ov5640_reg_cfg_t); cfg_index++)
 80109c6:	2300      	movs	r3, #0
 80109c8:	60fb      	str	r3, [r7, #12]
 80109ca:	e01e      	b.n	8010a0a <ov5640_set_output_format+0x5a>
            {
            	if(ov5640_rgb565_cfg[cfg_index].reg==0&&ov5640_rgb565_cfg[cfg_index].dat==0)
 80109cc:	4a27      	ldr	r2, [pc, #156]	; (8010a6c <ov5640_set_output_format+0xbc>)
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 80109d4:	2b00      	cmp	r3, #0
 80109d6:	d106      	bne.n	80109e6 <ov5640_set_output_format+0x36>
 80109d8:	4a24      	ldr	r2, [pc, #144]	; (8010a6c <ov5640_set_output_format+0xbc>)
 80109da:	68fb      	ldr	r3, [r7, #12]
 80109dc:	009b      	lsls	r3, r3, #2
 80109de:	4413      	add	r3, r2
 80109e0:	789b      	ldrb	r3, [r3, #2]
 80109e2:	2b00      	cmp	r3, #0
 80109e4:	d00d      	beq.n	8010a02 <ov5640_set_output_format+0x52>
            	{
            		continue;
            	}
                ov5640_write_reg(ov5640_rgb565_cfg[cfg_index].reg, ov5640_rgb565_cfg[cfg_index].dat);
 80109e6:	4a21      	ldr	r2, [pc, #132]	; (8010a6c <ov5640_set_output_format+0xbc>)
 80109e8:	68fb      	ldr	r3, [r7, #12]
 80109ea:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 80109ee:	491f      	ldr	r1, [pc, #124]	; (8010a6c <ov5640_set_output_format+0xbc>)
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	009b      	lsls	r3, r3, #2
 80109f4:	440b      	add	r3, r1
 80109f6:	789b      	ldrb	r3, [r3, #2]
 80109f8:	4619      	mov	r1, r3
 80109fa:	4610      	mov	r0, r2
 80109fc:	f7fe fe32 	bl	800f664 <ov5640_write_reg>
 8010a00:	e000      	b.n	8010a04 <ov5640_set_output_format+0x54>
            		continue;
 8010a02:	bf00      	nop
            for (cfg_index=0; cfg_index<sizeof(ov5640_rgb565_cfg)/sizeof(ov5640_reg_cfg_t); cfg_index++)
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	3301      	adds	r3, #1
 8010a08:	60fb      	str	r3, [r7, #12]
 8010a0a:	68fb      	ldr	r3, [r7, #12]
 8010a0c:	2b2c      	cmp	r3, #44	; 0x2c
 8010a0e:	d9dd      	bls.n	80109cc <ov5640_set_output_format+0x1c>
            }
            break;
 8010a10:	e027      	b.n	8010a62 <ov5640_set_output_format+0xb2>
        }
        case OV5640_OUTPUT_FORMAT_JPEG:
        {
            for (cfg_index=0; cfg_index<sizeof(ov5640_jpeg_cfg)/sizeof(ov5640_reg_cfg_t); cfg_index++)
 8010a12:	2300      	movs	r3, #0
 8010a14:	60fb      	str	r3, [r7, #12]
 8010a16:	e01e      	b.n	8010a56 <ov5640_set_output_format+0xa6>
            {
            	if(ov5640_jpeg_cfg[cfg_index].reg==0&&ov5640_jpeg_cfg[cfg_index].dat==0)
 8010a18:	4a15      	ldr	r2, [pc, #84]	; (8010a70 <ov5640_set_output_format+0xc0>)
 8010a1a:	68fb      	ldr	r3, [r7, #12]
 8010a1c:	f832 3023 	ldrh.w	r3, [r2, r3, lsl #2]
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d106      	bne.n	8010a32 <ov5640_set_output_format+0x82>
 8010a24:	4a12      	ldr	r2, [pc, #72]	; (8010a70 <ov5640_set_output_format+0xc0>)
 8010a26:	68fb      	ldr	r3, [r7, #12]
 8010a28:	009b      	lsls	r3, r3, #2
 8010a2a:	4413      	add	r3, r2
 8010a2c:	789b      	ldrb	r3, [r3, #2]
 8010a2e:	2b00      	cmp	r3, #0
 8010a30:	d00d      	beq.n	8010a4e <ov5640_set_output_format+0x9e>
            	{
            		continue;
            	}
                ov5640_write_reg(ov5640_jpeg_cfg[cfg_index].reg, ov5640_jpeg_cfg[cfg_index].dat);
 8010a32:	4a0f      	ldr	r2, [pc, #60]	; (8010a70 <ov5640_set_output_format+0xc0>)
 8010a34:	68fb      	ldr	r3, [r7, #12]
 8010a36:	f832 2023 	ldrh.w	r2, [r2, r3, lsl #2]
 8010a3a:	490d      	ldr	r1, [pc, #52]	; (8010a70 <ov5640_set_output_format+0xc0>)
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	009b      	lsls	r3, r3, #2
 8010a40:	440b      	add	r3, r1
 8010a42:	789b      	ldrb	r3, [r3, #2]
 8010a44:	4619      	mov	r1, r3
 8010a46:	4610      	mov	r0, r2
 8010a48:	f7fe fe0c 	bl	800f664 <ov5640_write_reg>
 8010a4c:	e000      	b.n	8010a50 <ov5640_set_output_format+0xa0>
            		continue;
 8010a4e:	bf00      	nop
            for (cfg_index=0; cfg_index<sizeof(ov5640_jpeg_cfg)/sizeof(ov5640_reg_cfg_t); cfg_index++)
 8010a50:	68fb      	ldr	r3, [r7, #12]
 8010a52:	3301      	adds	r3, #1
 8010a54:	60fb      	str	r3, [r7, #12]
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	2b28      	cmp	r3, #40	; 0x28
 8010a5a:	d9dd      	bls.n	8010a18 <ov5640_set_output_format+0x68>
            }
            break;
 8010a5c:	e001      	b.n	8010a62 <ov5640_set_output_format+0xb2>
        }
        default:
        {
            return OV5640_EINVAL;
 8010a5e:	2302      	movs	r3, #2
 8010a60:	e000      	b.n	8010a64 <ov5640_set_output_format+0xb4>
        }
    }

    return OV5640_EOK;
 8010a62:	2300      	movs	r3, #0
}
 8010a64:	4618      	mov	r0, r3
 8010a66:	3710      	adds	r7, #16
 8010a68:	46bd      	mov	sp, r7
 8010a6a:	bd80      	pop	{r7, pc}
 8010a6c:	240005b4 	.word	0x240005b4
 8010a70:	24000668 	.word	0x24000668

08010a74 <ov5640_set_output_size>:
 * @param       width : 实际输出图像的宽度（可能被缩放）
 *              height: 实际输出图像的高度（可能被缩放）
 * @retval      OV5640_EOK   : 设置OV5640模块输出图像窗口成功
 */
uint8_t ov5640_set_output_size(uint16_t width, uint16_t height)
{
 8010a74:	b580      	push	{r7, lr}
 8010a76:	b084      	sub	sp, #16
 8010a78:	af00      	add	r7, sp, #0
 8010a7a:	4603      	mov	r3, r0
 8010a7c:	460a      	mov	r2, r1
 8010a7e:	80fb      	strh	r3, [r7, #6]
 8010a80:	4613      	mov	r3, r2
 8010a82:	80bb      	strh	r3, [r7, #4]
    uint8_t reg3808;
    uint8_t reg3809;
    uint8_t reg380A;
    uint8_t reg380B;

    reg3808 = ov5640_read_reg(0x3808);
 8010a84:	f643 0008 	movw	r0, #14344	; 0x3808
 8010a88:	f7fe fdfe 	bl	800f688 <ov5640_read_reg>
 8010a8c:	4603      	mov	r3, r0
 8010a8e:	73fb      	strb	r3, [r7, #15]
    reg380A = ov5640_read_reg(0x380A);
 8010a90:	f643 000a 	movw	r0, #14346	; 0x380a
 8010a94:	f7fe fdf8 	bl	800f688 <ov5640_read_reg>
 8010a98:	4603      	mov	r3, r0
 8010a9a:	73bb      	strb	r3, [r7, #14]

    reg3808 &= ~0x0F;
 8010a9c:	7bfb      	ldrb	r3, [r7, #15]
 8010a9e:	f023 030f 	bic.w	r3, r3, #15
 8010aa2:	73fb      	strb	r3, [r7, #15]
    reg3808 |= (uint8_t)(width >> 8) & 0x0F;
 8010aa4:	88fb      	ldrh	r3, [r7, #6]
 8010aa6:	0a1b      	lsrs	r3, r3, #8
 8010aa8:	b29b      	uxth	r3, r3
 8010aaa:	b25b      	sxtb	r3, r3
 8010aac:	f003 030f 	and.w	r3, r3, #15
 8010ab0:	b25a      	sxtb	r2, r3
 8010ab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010ab6:	4313      	orrs	r3, r2
 8010ab8:	b25b      	sxtb	r3, r3
 8010aba:	73fb      	strb	r3, [r7, #15]
    reg3809 = (uint8_t)width & 0xFF;
 8010abc:	88fb      	ldrh	r3, [r7, #6]
 8010abe:	737b      	strb	r3, [r7, #13]
    reg380A &= ~0x07;
 8010ac0:	7bbb      	ldrb	r3, [r7, #14]
 8010ac2:	f023 0307 	bic.w	r3, r3, #7
 8010ac6:	73bb      	strb	r3, [r7, #14]
    reg380A |= (uint8_t)(height >> 8) & 0x07;
 8010ac8:	88bb      	ldrh	r3, [r7, #4]
 8010aca:	0a1b      	lsrs	r3, r3, #8
 8010acc:	b29b      	uxth	r3, r3
 8010ace:	b25b      	sxtb	r3, r3
 8010ad0:	f003 0307 	and.w	r3, r3, #7
 8010ad4:	b25a      	sxtb	r2, r3
 8010ad6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8010ada:	4313      	orrs	r3, r2
 8010adc:	b25b      	sxtb	r3, r3
 8010ade:	73bb      	strb	r3, [r7, #14]
    reg380B = (uint8_t)height & 0xFF;
 8010ae0:	88bb      	ldrh	r3, [r7, #4]
 8010ae2:	733b      	strb	r3, [r7, #12]

    ov5640_write_reg(0x3212, 0x03);
 8010ae4:	2103      	movs	r1, #3
 8010ae6:	f243 2012 	movw	r0, #12818	; 0x3212
 8010aea:	f7fe fdbb 	bl	800f664 <ov5640_write_reg>
    ov5640_write_reg(0x3808, reg3808);
 8010aee:	7bfb      	ldrb	r3, [r7, #15]
 8010af0:	4619      	mov	r1, r3
 8010af2:	f643 0008 	movw	r0, #14344	; 0x3808
 8010af6:	f7fe fdb5 	bl	800f664 <ov5640_write_reg>
    ov5640_write_reg(0x3809, reg3809);
 8010afa:	7b7b      	ldrb	r3, [r7, #13]
 8010afc:	4619      	mov	r1, r3
 8010afe:	f643 0009 	movw	r0, #14345	; 0x3809
 8010b02:	f7fe fdaf 	bl	800f664 <ov5640_write_reg>
    ov5640_write_reg(0x380A, reg380A);
 8010b06:	7bbb      	ldrb	r3, [r7, #14]
 8010b08:	4619      	mov	r1, r3
 8010b0a:	f643 000a 	movw	r0, #14346	; 0x380a
 8010b0e:	f7fe fda9 	bl	800f664 <ov5640_write_reg>
    ov5640_write_reg(0x380B, reg380B);
 8010b12:	7b3b      	ldrb	r3, [r7, #12]
 8010b14:	4619      	mov	r1, r3
 8010b16:	f643 000b 	movw	r0, #14347	; 0x380b
 8010b1a:	f7fe fda3 	bl	800f664 <ov5640_write_reg>
    ov5640_write_reg(0x3212, 0x13);
 8010b1e:	2113      	movs	r1, #19
 8010b20:	f243 2012 	movw	r0, #12818	; 0x3212
 8010b24:	f7fe fd9e 	bl	800f664 <ov5640_write_reg>
    ov5640_write_reg(0x3212, 0xA3);
 8010b28:	21a3      	movs	r1, #163	; 0xa3
 8010b2a:	f243 2012 	movw	r0, #12818	; 0x3212
 8010b2e:	f7fe fd99 	bl	800f664 <ov5640_write_reg>

    ov5640_get_output_size();
 8010b32:	f7fe fe77 	bl	800f824 <ov5640_get_output_size>

    return OV5640_EOK;
 8010b36:	2300      	movs	r3, #0
}
 8010b38:	4618      	mov	r0, r3
 8010b3a:	3710      	adds	r7, #16
 8010b3c:	46bd      	mov	sp, r7
 8010b3e:	bd80      	pop	{r7, pc}

08010b40 <ov5640_init>:
 * @retval      OV5640_EOK   : OV5640模块初始化成功
 *              OV5640_ERROR : 通讯出错，OV5640模块初始化失败
 *              OV5640_ENOMEM: 内存不足，OV5640模块初始化失败
 */
uint8_t ov5640_init(void)
{
 8010b40:	b580      	push	{r7, lr}
 8010b42:	b082      	sub	sp, #8
 8010b44:	af00      	add	r7, sp, #0
    uint16_t chip_id = 0x0000;
 8010b46:	2300      	movs	r3, #0
 8010b48:	80fb      	strh	r3, [r7, #6]

    ov5640_hw_init();               /* OV5640模块硬件初始化 */
 8010b4a:	f7fe fdb1 	bl	800f6b0 <ov5640_hw_init>
    ov5640_exit_power_down();       /* OV5640模块退出掉电模式 */
 8010b4e:	f7fe fdc3 	bl	800f6d8 <ov5640_exit_power_down>
    ov5640_hw_reset();              /* OV5640模块硬件复位 */
 8010b52:	f7fe fde3 	bl	800f71c <ov5640_hw_reset>
    ov5640_sw_reset();              /* OV5640模块软件复位 */
 8010b56:	f7fe fdf9 	bl	800f74c <ov5640_sw_reset>

    chip_id = ov5640_get_chip_id(); /* 获取芯片ID */
 8010b5a:	f7fe fe16 	bl	800f78a <ov5640_get_chip_id>
 8010b5e:	4603      	mov	r3, r0
 8010b60:	80fb      	strh	r3, [r7, #6]
    usb_printf("chip id is %x \r\n",chip_id);
 8010b62:	88fb      	ldrh	r3, [r7, #6]
 8010b64:	4619      	mov	r1, r3
 8010b66:	480a      	ldr	r0, [pc, #40]	; (8010b90 <ov5640_init+0x50>)
 8010b68:	f000 f898 	bl	8010c9c <usb_printf>
    if (chip_id != OV5640_CHIP_ID)
 8010b6c:	88fb      	ldrh	r3, [r7, #6]
 8010b6e:	f245 6240 	movw	r2, #22080	; 0x5640
 8010b72:	4293      	cmp	r3, r2
 8010b74:	d004      	beq.n	8010b80 <ov5640_init+0x40>
    {
    	usb_printf("no ov5640 \r\n");
 8010b76:	4807      	ldr	r0, [pc, #28]	; (8010b94 <ov5640_init+0x54>)
 8010b78:	f000 f890 	bl	8010c9c <usb_printf>
        return OV5640_ERROR;
 8010b7c:	23ff      	movs	r3, #255	; 0xff
 8010b7e:	e002      	b.n	8010b86 <ov5640_init+0x46>
    }

    ov5640_init_reg();              /* 初始化OV5640寄存器配置 */
 8010b80:	f7fe fe1c 	bl	800f7bc <ov5640_init_reg>
    return OV5640_OK;
 8010b84:	2300      	movs	r3, #0
}
 8010b86:	4618      	mov	r0, r3
 8010b88:	3708      	adds	r7, #8
 8010b8a:	46bd      	mov	sp, r7
 8010b8c:	bd80      	pop	{r7, pc}
 8010b8e:	bf00      	nop
 8010b90:	08011db0 	.word	0x08011db0
 8010b94:	08011dc4 	.word	0x08011dc4

08010b98 <I2C1_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C1_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8010b98:	b580      	push	{r7, lr}
 8010b9a:	b088      	sub	sp, #32
 8010b9c:	af04      	add	r7, sp, #16
 8010b9e:	607b      	str	r3, [r7, #4]
 8010ba0:	4603      	mov	r3, r0
 8010ba2:	81fb      	strh	r3, [r7, #14]
 8010ba4:	460b      	mov	r3, r1
 8010ba6:	81bb      	strh	r3, [r7, #12]
 8010ba8:	4613      	mov	r3, r2
 8010baa:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hi2c1, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8010bac:	8978      	ldrh	r0, [r7, #10]
 8010bae:	89ba      	ldrh	r2, [r7, #12]
 8010bb0:	89f9      	ldrh	r1, [r7, #14]
 8010bb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010bb6:	9302      	str	r3, [sp, #8]
 8010bb8:	8b3b      	ldrh	r3, [r7, #24]
 8010bba:	9301      	str	r3, [sp, #4]
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	9300      	str	r3, [sp, #0]
 8010bc0:	4603      	mov	r3, r0
 8010bc2:	4806      	ldr	r0, [pc, #24]	; (8010bdc <I2C1_WriteReg+0x44>)
 8010bc4:	f7f4 fe3e 	bl	8005844 <HAL_I2C_Mem_Write>
 8010bc8:	4603      	mov	r3, r0
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	d101      	bne.n	8010bd2 <I2C1_WriteReg+0x3a>
  {
    return HAL_OK;
 8010bce:	2300      	movs	r3, #0
 8010bd0:	e000      	b.n	8010bd4 <I2C1_WriteReg+0x3c>
  }

  return HAL_ERROR;
 8010bd2:	2301      	movs	r3, #1
}
 8010bd4:	4618      	mov	r0, r3
 8010bd6:	3710      	adds	r7, #16
 8010bd8:	46bd      	mov	sp, r7
 8010bda:	bd80      	pop	{r7, pc}
 8010bdc:	2400a870 	.word	0x2400a870

08010be0 <I2C1_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C1_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8010be0:	b580      	push	{r7, lr}
 8010be2:	b088      	sub	sp, #32
 8010be4:	af04      	add	r7, sp, #16
 8010be6:	607b      	str	r3, [r7, #4]
 8010be8:	4603      	mov	r3, r0
 8010bea:	81fb      	strh	r3, [r7, #14]
 8010bec:	460b      	mov	r3, r1
 8010bee:	81bb      	strh	r3, [r7, #12]
 8010bf0:	4613      	mov	r3, r2
 8010bf2:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hi2c1, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8010bf4:	8978      	ldrh	r0, [r7, #10]
 8010bf6:	89ba      	ldrh	r2, [r7, #12]
 8010bf8:	89f9      	ldrh	r1, [r7, #14]
 8010bfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8010bfe:	9302      	str	r3, [sp, #8]
 8010c00:	8b3b      	ldrh	r3, [r7, #24]
 8010c02:	9301      	str	r3, [sp, #4]
 8010c04:	687b      	ldr	r3, [r7, #4]
 8010c06:	9300      	str	r3, [sp, #0]
 8010c08:	4603      	mov	r3, r0
 8010c0a:	4806      	ldr	r0, [pc, #24]	; (8010c24 <I2C1_ReadReg+0x44>)
 8010c0c:	f7f4 ff2e 	bl	8005a6c <HAL_I2C_Mem_Read>
 8010c10:	4603      	mov	r3, r0
 8010c12:	2b00      	cmp	r3, #0
 8010c14:	d101      	bne.n	8010c1a <I2C1_ReadReg+0x3a>
  {
    return HAL_OK;
 8010c16:	2300      	movs	r3, #0
 8010c18:	e000      	b.n	8010c1c <I2C1_ReadReg+0x3c>
  }

  return HAL_ERROR;
 8010c1a:	2301      	movs	r3, #1
}
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	3710      	adds	r7, #16
 8010c20:	46bd      	mov	sp, r7
 8010c22:	bd80      	pop	{r7, pc}
 8010c24:	2400a870 	.word	0x2400a870

08010c28 <BSP_I2C2_WriteReg16>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C2_WriteReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8010c28:	b580      	push	{r7, lr}
 8010c2a:	b086      	sub	sp, #24
 8010c2c:	af02      	add	r7, sp, #8
 8010c2e:	60ba      	str	r2, [r7, #8]
 8010c30:	461a      	mov	r2, r3
 8010c32:	4603      	mov	r3, r0
 8010c34:	81fb      	strh	r3, [r7, #14]
 8010c36:	460b      	mov	r3, r1
 8010c38:	81bb      	strh	r3, [r7, #12]
 8010c3a:	4613      	mov	r3, r2
 8010c3c:	80fb      	strh	r3, [r7, #6]
  if(I2C1_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 8010c3e:	89b9      	ldrh	r1, [r7, #12]
 8010c40:	89f8      	ldrh	r0, [r7, #14]
 8010c42:	88fb      	ldrh	r3, [r7, #6]
 8010c44:	9300      	str	r3, [sp, #0]
 8010c46:	68bb      	ldr	r3, [r7, #8]
 8010c48:	2202      	movs	r2, #2
 8010c4a:	f7ff ffa5 	bl	8010b98 <I2C1_WriteReg>
 8010c4e:	4603      	mov	r3, r0
 8010c50:	2b00      	cmp	r3, #0
 8010c52:	d101      	bne.n	8010c58 <BSP_I2C2_WriteReg16+0x30>
  {
	 return HAL_OK;
 8010c54:	2300      	movs	r3, #0
 8010c56:	e000      	b.n	8010c5a <BSP_I2C2_WriteReg16+0x32>
  }
  return HAL_ERROR;
 8010c58:	2301      	movs	r3, #1
}
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	3710      	adds	r7, #16
 8010c5e:	46bd      	mov	sp, r7
 8010c60:	bd80      	pop	{r7, pc}

08010c62 <BSP_I2C2_ReadReg16>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C2_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8010c62:	b580      	push	{r7, lr}
 8010c64:	b086      	sub	sp, #24
 8010c66:	af02      	add	r7, sp, #8
 8010c68:	60ba      	str	r2, [r7, #8]
 8010c6a:	461a      	mov	r2, r3
 8010c6c:	4603      	mov	r3, r0
 8010c6e:	81fb      	strh	r3, [r7, #14]
 8010c70:	460b      	mov	r3, r1
 8010c72:	81bb      	strh	r3, [r7, #12]
 8010c74:	4613      	mov	r3, r2
 8010c76:	80fb      	strh	r3, [r7, #6]
  if(I2C1_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 8010c78:	89b9      	ldrh	r1, [r7, #12]
 8010c7a:	89f8      	ldrh	r0, [r7, #14]
 8010c7c:	88fb      	ldrh	r3, [r7, #6]
 8010c7e:	9300      	str	r3, [sp, #0]
 8010c80:	68bb      	ldr	r3, [r7, #8]
 8010c82:	2202      	movs	r2, #2
 8010c84:	f7ff ffac 	bl	8010be0 <I2C1_ReadReg>
 8010c88:	4603      	mov	r3, r0
 8010c8a:	2b00      	cmp	r3, #0
 8010c8c:	d101      	bne.n	8010c92 <BSP_I2C2_ReadReg16+0x30>
  {
	 return HAL_OK;
 8010c8e:	2300      	movs	r3, #0
 8010c90:	e000      	b.n	8010c94 <BSP_I2C2_ReadReg16+0x32>
  }
  return HAL_ERROR;
 8010c92:	2301      	movs	r3, #1
}
 8010c94:	4618      	mov	r0, r3
 8010c96:	3710      	adds	r7, #16
 8010c98:	46bd      	mov	sp, r7
 8010c9a:	bd80      	pop	{r7, pc}

08010c9c <usb_printf>:
#include "usbd_cdc_if.h"

//extern uint8_t UserTxBufferFS[APP_TX_DATA_SIZE];

void usb_printf(const char *format, ...)
{
 8010c9c:	b40f      	push	{r0, r1, r2, r3}
 8010c9e:	b580      	push	{r7, lr}
 8010ca0:	f6ad 0d08 	subw	sp, sp, #2056	; 0x808
 8010ca4:	af00      	add	r7, sp, #0
    va_list args;
    uint32_t length;
    uint8_t buf[APP_TX_DATA_SIZE];

    va_start(args, format);
 8010ca6:	f607 0314 	addw	r3, r7, #2068	; 0x814
 8010caa:	f8c7 3800 	str.w	r3, [r7, #2048]	; 0x800
    length = vsnprintf((char *)buf, APP_TX_DATA_SIZE, (char *)format, args);
 8010cae:	4638      	mov	r0, r7
 8010cb0:	f8d7 3800 	ldr.w	r3, [r7, #2048]	; 0x800
 8010cb4:	f8d7 2810 	ldr.w	r2, [r7, #2064]	; 0x810
 8010cb8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8010cbc:	f000 f98e 	bl	8010fdc <vsniprintf>
 8010cc0:	4603      	mov	r3, r0
 8010cc2:	f8c7 3804 	str.w	r3, [r7, #2052]	; 0x804
    va_end(args);
    CDC_Transmit_FS(buf, length);
 8010cc6:	f8d7 3804 	ldr.w	r3, [r7, #2052]	; 0x804
 8010cca:	b29a      	uxth	r2, r3
 8010ccc:	463b      	mov	r3, r7
 8010cce:	4611      	mov	r1, r2
 8010cd0:	4618      	mov	r0, r3
 8010cd2:	f7fd ff5d 	bl	800eb90 <CDC_Transmit_FS>
}
 8010cd6:	bf00      	nop
 8010cd8:	f607 0708 	addw	r7, r7, #2056	; 0x808
 8010cdc:	46bd      	mov	sp, r7
 8010cde:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010ce2:	b004      	add	sp, #16
 8010ce4:	4770      	bx	lr
	...

08010ce8 <std>:
 8010ce8:	2300      	movs	r3, #0
 8010cea:	b510      	push	{r4, lr}
 8010cec:	4604      	mov	r4, r0
 8010cee:	e9c0 3300 	strd	r3, r3, [r0]
 8010cf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8010cf6:	6083      	str	r3, [r0, #8]
 8010cf8:	8181      	strh	r1, [r0, #12]
 8010cfa:	6643      	str	r3, [r0, #100]	; 0x64
 8010cfc:	81c2      	strh	r2, [r0, #14]
 8010cfe:	6183      	str	r3, [r0, #24]
 8010d00:	4619      	mov	r1, r3
 8010d02:	2208      	movs	r2, #8
 8010d04:	305c      	adds	r0, #92	; 0x5c
 8010d06:	f000 fa0d 	bl	8011124 <memset>
 8010d0a:	4b05      	ldr	r3, [pc, #20]	; (8010d20 <std+0x38>)
 8010d0c:	6263      	str	r3, [r4, #36]	; 0x24
 8010d0e:	4b05      	ldr	r3, [pc, #20]	; (8010d24 <std+0x3c>)
 8010d10:	62a3      	str	r3, [r4, #40]	; 0x28
 8010d12:	4b05      	ldr	r3, [pc, #20]	; (8010d28 <std+0x40>)
 8010d14:	62e3      	str	r3, [r4, #44]	; 0x2c
 8010d16:	4b05      	ldr	r3, [pc, #20]	; (8010d2c <std+0x44>)
 8010d18:	6224      	str	r4, [r4, #32]
 8010d1a:	6323      	str	r3, [r4, #48]	; 0x30
 8010d1c:	bd10      	pop	{r4, pc}
 8010d1e:	bf00      	nop
 8010d20:	08010f01 	.word	0x08010f01
 8010d24:	08010f23 	.word	0x08010f23
 8010d28:	08010f5b 	.word	0x08010f5b
 8010d2c:	08010f7f 	.word	0x08010f7f

08010d30 <stdio_exit_handler>:
 8010d30:	4a02      	ldr	r2, [pc, #8]	; (8010d3c <stdio_exit_handler+0xc>)
 8010d32:	4903      	ldr	r1, [pc, #12]	; (8010d40 <stdio_exit_handler+0x10>)
 8010d34:	4803      	ldr	r0, [pc, #12]	; (8010d44 <stdio_exit_handler+0x14>)
 8010d36:	f000 b869 	b.w	8010e0c <_fwalk_sglue>
 8010d3a:	bf00      	nop
 8010d3c:	2400070c 	.word	0x2400070c
 8010d40:	08011ae5 	.word	0x08011ae5
 8010d44:	24000718 	.word	0x24000718

08010d48 <cleanup_stdio>:
 8010d48:	6841      	ldr	r1, [r0, #4]
 8010d4a:	4b0c      	ldr	r3, [pc, #48]	; (8010d7c <cleanup_stdio+0x34>)
 8010d4c:	4299      	cmp	r1, r3
 8010d4e:	b510      	push	{r4, lr}
 8010d50:	4604      	mov	r4, r0
 8010d52:	d001      	beq.n	8010d58 <cleanup_stdio+0x10>
 8010d54:	f000 fec6 	bl	8011ae4 <_fflush_r>
 8010d58:	68a1      	ldr	r1, [r4, #8]
 8010d5a:	4b09      	ldr	r3, [pc, #36]	; (8010d80 <cleanup_stdio+0x38>)
 8010d5c:	4299      	cmp	r1, r3
 8010d5e:	d002      	beq.n	8010d66 <cleanup_stdio+0x1e>
 8010d60:	4620      	mov	r0, r4
 8010d62:	f000 febf 	bl	8011ae4 <_fflush_r>
 8010d66:	68e1      	ldr	r1, [r4, #12]
 8010d68:	4b06      	ldr	r3, [pc, #24]	; (8010d84 <cleanup_stdio+0x3c>)
 8010d6a:	4299      	cmp	r1, r3
 8010d6c:	d004      	beq.n	8010d78 <cleanup_stdio+0x30>
 8010d6e:	4620      	mov	r0, r4
 8010d70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010d74:	f000 beb6 	b.w	8011ae4 <_fflush_r>
 8010d78:	bd10      	pop	{r4, pc}
 8010d7a:	bf00      	nop
 8010d7c:	2400c5e8 	.word	0x2400c5e8
 8010d80:	2400c650 	.word	0x2400c650
 8010d84:	2400c6b8 	.word	0x2400c6b8

08010d88 <global_stdio_init.part.0>:
 8010d88:	b510      	push	{r4, lr}
 8010d8a:	4b0b      	ldr	r3, [pc, #44]	; (8010db8 <global_stdio_init.part.0+0x30>)
 8010d8c:	4c0b      	ldr	r4, [pc, #44]	; (8010dbc <global_stdio_init.part.0+0x34>)
 8010d8e:	4a0c      	ldr	r2, [pc, #48]	; (8010dc0 <global_stdio_init.part.0+0x38>)
 8010d90:	601a      	str	r2, [r3, #0]
 8010d92:	4620      	mov	r0, r4
 8010d94:	2200      	movs	r2, #0
 8010d96:	2104      	movs	r1, #4
 8010d98:	f7ff ffa6 	bl	8010ce8 <std>
 8010d9c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8010da0:	2201      	movs	r2, #1
 8010da2:	2109      	movs	r1, #9
 8010da4:	f7ff ffa0 	bl	8010ce8 <std>
 8010da8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8010dac:	2202      	movs	r2, #2
 8010dae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010db2:	2112      	movs	r1, #18
 8010db4:	f7ff bf98 	b.w	8010ce8 <std>
 8010db8:	2400c720 	.word	0x2400c720
 8010dbc:	2400c5e8 	.word	0x2400c5e8
 8010dc0:	08010d31 	.word	0x08010d31

08010dc4 <__sfp_lock_acquire>:
 8010dc4:	4801      	ldr	r0, [pc, #4]	; (8010dcc <__sfp_lock_acquire+0x8>)
 8010dc6:	f000 ba25 	b.w	8011214 <__retarget_lock_acquire_recursive>
 8010dca:	bf00      	nop
 8010dcc:	2400c729 	.word	0x2400c729

08010dd0 <__sfp_lock_release>:
 8010dd0:	4801      	ldr	r0, [pc, #4]	; (8010dd8 <__sfp_lock_release+0x8>)
 8010dd2:	f000 ba20 	b.w	8011216 <__retarget_lock_release_recursive>
 8010dd6:	bf00      	nop
 8010dd8:	2400c729 	.word	0x2400c729

08010ddc <__sinit>:
 8010ddc:	b510      	push	{r4, lr}
 8010dde:	4604      	mov	r4, r0
 8010de0:	f7ff fff0 	bl	8010dc4 <__sfp_lock_acquire>
 8010de4:	6a23      	ldr	r3, [r4, #32]
 8010de6:	b11b      	cbz	r3, 8010df0 <__sinit+0x14>
 8010de8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010dec:	f7ff bff0 	b.w	8010dd0 <__sfp_lock_release>
 8010df0:	4b04      	ldr	r3, [pc, #16]	; (8010e04 <__sinit+0x28>)
 8010df2:	6223      	str	r3, [r4, #32]
 8010df4:	4b04      	ldr	r3, [pc, #16]	; (8010e08 <__sinit+0x2c>)
 8010df6:	681b      	ldr	r3, [r3, #0]
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d1f5      	bne.n	8010de8 <__sinit+0xc>
 8010dfc:	f7ff ffc4 	bl	8010d88 <global_stdio_init.part.0>
 8010e00:	e7f2      	b.n	8010de8 <__sinit+0xc>
 8010e02:	bf00      	nop
 8010e04:	08010d49 	.word	0x08010d49
 8010e08:	2400c720 	.word	0x2400c720

08010e0c <_fwalk_sglue>:
 8010e0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e10:	4607      	mov	r7, r0
 8010e12:	4688      	mov	r8, r1
 8010e14:	4614      	mov	r4, r2
 8010e16:	2600      	movs	r6, #0
 8010e18:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8010e1c:	f1b9 0901 	subs.w	r9, r9, #1
 8010e20:	d505      	bpl.n	8010e2e <_fwalk_sglue+0x22>
 8010e22:	6824      	ldr	r4, [r4, #0]
 8010e24:	2c00      	cmp	r4, #0
 8010e26:	d1f7      	bne.n	8010e18 <_fwalk_sglue+0xc>
 8010e28:	4630      	mov	r0, r6
 8010e2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010e2e:	89ab      	ldrh	r3, [r5, #12]
 8010e30:	2b01      	cmp	r3, #1
 8010e32:	d907      	bls.n	8010e44 <_fwalk_sglue+0x38>
 8010e34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8010e38:	3301      	adds	r3, #1
 8010e3a:	d003      	beq.n	8010e44 <_fwalk_sglue+0x38>
 8010e3c:	4629      	mov	r1, r5
 8010e3e:	4638      	mov	r0, r7
 8010e40:	47c0      	blx	r8
 8010e42:	4306      	orrs	r6, r0
 8010e44:	3568      	adds	r5, #104	; 0x68
 8010e46:	e7e9      	b.n	8010e1c <_fwalk_sglue+0x10>

08010e48 <_puts_r>:
 8010e48:	6a03      	ldr	r3, [r0, #32]
 8010e4a:	b570      	push	{r4, r5, r6, lr}
 8010e4c:	6884      	ldr	r4, [r0, #8]
 8010e4e:	4605      	mov	r5, r0
 8010e50:	460e      	mov	r6, r1
 8010e52:	b90b      	cbnz	r3, 8010e58 <_puts_r+0x10>
 8010e54:	f7ff ffc2 	bl	8010ddc <__sinit>
 8010e58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010e5a:	07db      	lsls	r3, r3, #31
 8010e5c:	d405      	bmi.n	8010e6a <_puts_r+0x22>
 8010e5e:	89a3      	ldrh	r3, [r4, #12]
 8010e60:	0598      	lsls	r0, r3, #22
 8010e62:	d402      	bmi.n	8010e6a <_puts_r+0x22>
 8010e64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010e66:	f000 f9d5 	bl	8011214 <__retarget_lock_acquire_recursive>
 8010e6a:	89a3      	ldrh	r3, [r4, #12]
 8010e6c:	0719      	lsls	r1, r3, #28
 8010e6e:	d513      	bpl.n	8010e98 <_puts_r+0x50>
 8010e70:	6923      	ldr	r3, [r4, #16]
 8010e72:	b18b      	cbz	r3, 8010e98 <_puts_r+0x50>
 8010e74:	3e01      	subs	r6, #1
 8010e76:	68a3      	ldr	r3, [r4, #8]
 8010e78:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8010e7c:	3b01      	subs	r3, #1
 8010e7e:	60a3      	str	r3, [r4, #8]
 8010e80:	b9e9      	cbnz	r1, 8010ebe <_puts_r+0x76>
 8010e82:	2b00      	cmp	r3, #0
 8010e84:	da2e      	bge.n	8010ee4 <_puts_r+0x9c>
 8010e86:	4622      	mov	r2, r4
 8010e88:	210a      	movs	r1, #10
 8010e8a:	4628      	mov	r0, r5
 8010e8c:	f000 f8b4 	bl	8010ff8 <__swbuf_r>
 8010e90:	3001      	adds	r0, #1
 8010e92:	d007      	beq.n	8010ea4 <_puts_r+0x5c>
 8010e94:	250a      	movs	r5, #10
 8010e96:	e007      	b.n	8010ea8 <_puts_r+0x60>
 8010e98:	4621      	mov	r1, r4
 8010e9a:	4628      	mov	r0, r5
 8010e9c:	f000 f8ea 	bl	8011074 <__swsetup_r>
 8010ea0:	2800      	cmp	r0, #0
 8010ea2:	d0e7      	beq.n	8010e74 <_puts_r+0x2c>
 8010ea4:	f04f 35ff 	mov.w	r5, #4294967295
 8010ea8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8010eaa:	07da      	lsls	r2, r3, #31
 8010eac:	d405      	bmi.n	8010eba <_puts_r+0x72>
 8010eae:	89a3      	ldrh	r3, [r4, #12]
 8010eb0:	059b      	lsls	r3, r3, #22
 8010eb2:	d402      	bmi.n	8010eba <_puts_r+0x72>
 8010eb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8010eb6:	f000 f9ae 	bl	8011216 <__retarget_lock_release_recursive>
 8010eba:	4628      	mov	r0, r5
 8010ebc:	bd70      	pop	{r4, r5, r6, pc}
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	da04      	bge.n	8010ecc <_puts_r+0x84>
 8010ec2:	69a2      	ldr	r2, [r4, #24]
 8010ec4:	429a      	cmp	r2, r3
 8010ec6:	dc06      	bgt.n	8010ed6 <_puts_r+0x8e>
 8010ec8:	290a      	cmp	r1, #10
 8010eca:	d004      	beq.n	8010ed6 <_puts_r+0x8e>
 8010ecc:	6823      	ldr	r3, [r4, #0]
 8010ece:	1c5a      	adds	r2, r3, #1
 8010ed0:	6022      	str	r2, [r4, #0]
 8010ed2:	7019      	strb	r1, [r3, #0]
 8010ed4:	e7cf      	b.n	8010e76 <_puts_r+0x2e>
 8010ed6:	4622      	mov	r2, r4
 8010ed8:	4628      	mov	r0, r5
 8010eda:	f000 f88d 	bl	8010ff8 <__swbuf_r>
 8010ede:	3001      	adds	r0, #1
 8010ee0:	d1c9      	bne.n	8010e76 <_puts_r+0x2e>
 8010ee2:	e7df      	b.n	8010ea4 <_puts_r+0x5c>
 8010ee4:	6823      	ldr	r3, [r4, #0]
 8010ee6:	250a      	movs	r5, #10
 8010ee8:	1c5a      	adds	r2, r3, #1
 8010eea:	6022      	str	r2, [r4, #0]
 8010eec:	701d      	strb	r5, [r3, #0]
 8010eee:	e7db      	b.n	8010ea8 <_puts_r+0x60>

08010ef0 <puts>:
 8010ef0:	4b02      	ldr	r3, [pc, #8]	; (8010efc <puts+0xc>)
 8010ef2:	4601      	mov	r1, r0
 8010ef4:	6818      	ldr	r0, [r3, #0]
 8010ef6:	f7ff bfa7 	b.w	8010e48 <_puts_r>
 8010efa:	bf00      	nop
 8010efc:	24000764 	.word	0x24000764

08010f00 <__sread>:
 8010f00:	b510      	push	{r4, lr}
 8010f02:	460c      	mov	r4, r1
 8010f04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f08:	f000 f936 	bl	8011178 <_read_r>
 8010f0c:	2800      	cmp	r0, #0
 8010f0e:	bfab      	itete	ge
 8010f10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8010f12:	89a3      	ldrhlt	r3, [r4, #12]
 8010f14:	181b      	addge	r3, r3, r0
 8010f16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8010f1a:	bfac      	ite	ge
 8010f1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8010f1e:	81a3      	strhlt	r3, [r4, #12]
 8010f20:	bd10      	pop	{r4, pc}

08010f22 <__swrite>:
 8010f22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010f26:	461f      	mov	r7, r3
 8010f28:	898b      	ldrh	r3, [r1, #12]
 8010f2a:	05db      	lsls	r3, r3, #23
 8010f2c:	4605      	mov	r5, r0
 8010f2e:	460c      	mov	r4, r1
 8010f30:	4616      	mov	r6, r2
 8010f32:	d505      	bpl.n	8010f40 <__swrite+0x1e>
 8010f34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f38:	2302      	movs	r3, #2
 8010f3a:	2200      	movs	r2, #0
 8010f3c:	f000 f90a 	bl	8011154 <_lseek_r>
 8010f40:	89a3      	ldrh	r3, [r4, #12]
 8010f42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010f46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010f4a:	81a3      	strh	r3, [r4, #12]
 8010f4c:	4632      	mov	r2, r6
 8010f4e:	463b      	mov	r3, r7
 8010f50:	4628      	mov	r0, r5
 8010f52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010f56:	f000 b921 	b.w	801119c <_write_r>

08010f5a <__sseek>:
 8010f5a:	b510      	push	{r4, lr}
 8010f5c:	460c      	mov	r4, r1
 8010f5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f62:	f000 f8f7 	bl	8011154 <_lseek_r>
 8010f66:	1c43      	adds	r3, r0, #1
 8010f68:	89a3      	ldrh	r3, [r4, #12]
 8010f6a:	bf15      	itete	ne
 8010f6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8010f6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8010f72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8010f76:	81a3      	strheq	r3, [r4, #12]
 8010f78:	bf18      	it	ne
 8010f7a:	81a3      	strhne	r3, [r4, #12]
 8010f7c:	bd10      	pop	{r4, pc}

08010f7e <__sclose>:
 8010f7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8010f82:	f000 b8d7 	b.w	8011134 <_close_r>

08010f86 <_vsniprintf_r>:
 8010f86:	b530      	push	{r4, r5, lr}
 8010f88:	4614      	mov	r4, r2
 8010f8a:	2c00      	cmp	r4, #0
 8010f8c:	b09b      	sub	sp, #108	; 0x6c
 8010f8e:	4605      	mov	r5, r0
 8010f90:	461a      	mov	r2, r3
 8010f92:	da05      	bge.n	8010fa0 <_vsniprintf_r+0x1a>
 8010f94:	238b      	movs	r3, #139	; 0x8b
 8010f96:	6003      	str	r3, [r0, #0]
 8010f98:	f04f 30ff 	mov.w	r0, #4294967295
 8010f9c:	b01b      	add	sp, #108	; 0x6c
 8010f9e:	bd30      	pop	{r4, r5, pc}
 8010fa0:	f44f 7302 	mov.w	r3, #520	; 0x208
 8010fa4:	f8ad 300c 	strh.w	r3, [sp, #12]
 8010fa8:	bf14      	ite	ne
 8010faa:	f104 33ff 	addne.w	r3, r4, #4294967295
 8010fae:	4623      	moveq	r3, r4
 8010fb0:	9302      	str	r3, [sp, #8]
 8010fb2:	9305      	str	r3, [sp, #20]
 8010fb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010fb8:	9100      	str	r1, [sp, #0]
 8010fba:	9104      	str	r1, [sp, #16]
 8010fbc:	f8ad 300e 	strh.w	r3, [sp, #14]
 8010fc0:	4669      	mov	r1, sp
 8010fc2:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8010fc4:	f000 fa7a 	bl	80114bc <_svfiprintf_r>
 8010fc8:	1c43      	adds	r3, r0, #1
 8010fca:	bfbc      	itt	lt
 8010fcc:	238b      	movlt	r3, #139	; 0x8b
 8010fce:	602b      	strlt	r3, [r5, #0]
 8010fd0:	2c00      	cmp	r4, #0
 8010fd2:	d0e3      	beq.n	8010f9c <_vsniprintf_r+0x16>
 8010fd4:	9b00      	ldr	r3, [sp, #0]
 8010fd6:	2200      	movs	r2, #0
 8010fd8:	701a      	strb	r2, [r3, #0]
 8010fda:	e7df      	b.n	8010f9c <_vsniprintf_r+0x16>

08010fdc <vsniprintf>:
 8010fdc:	b507      	push	{r0, r1, r2, lr}
 8010fde:	9300      	str	r3, [sp, #0]
 8010fe0:	4613      	mov	r3, r2
 8010fe2:	460a      	mov	r2, r1
 8010fe4:	4601      	mov	r1, r0
 8010fe6:	4803      	ldr	r0, [pc, #12]	; (8010ff4 <vsniprintf+0x18>)
 8010fe8:	6800      	ldr	r0, [r0, #0]
 8010fea:	f7ff ffcc 	bl	8010f86 <_vsniprintf_r>
 8010fee:	b003      	add	sp, #12
 8010ff0:	f85d fb04 	ldr.w	pc, [sp], #4
 8010ff4:	24000764 	.word	0x24000764

08010ff8 <__swbuf_r>:
 8010ff8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ffa:	460e      	mov	r6, r1
 8010ffc:	4614      	mov	r4, r2
 8010ffe:	4605      	mov	r5, r0
 8011000:	b118      	cbz	r0, 801100a <__swbuf_r+0x12>
 8011002:	6a03      	ldr	r3, [r0, #32]
 8011004:	b90b      	cbnz	r3, 801100a <__swbuf_r+0x12>
 8011006:	f7ff fee9 	bl	8010ddc <__sinit>
 801100a:	69a3      	ldr	r3, [r4, #24]
 801100c:	60a3      	str	r3, [r4, #8]
 801100e:	89a3      	ldrh	r3, [r4, #12]
 8011010:	071a      	lsls	r2, r3, #28
 8011012:	d525      	bpl.n	8011060 <__swbuf_r+0x68>
 8011014:	6923      	ldr	r3, [r4, #16]
 8011016:	b31b      	cbz	r3, 8011060 <__swbuf_r+0x68>
 8011018:	6823      	ldr	r3, [r4, #0]
 801101a:	6922      	ldr	r2, [r4, #16]
 801101c:	1a98      	subs	r0, r3, r2
 801101e:	6963      	ldr	r3, [r4, #20]
 8011020:	b2f6      	uxtb	r6, r6
 8011022:	4283      	cmp	r3, r0
 8011024:	4637      	mov	r7, r6
 8011026:	dc04      	bgt.n	8011032 <__swbuf_r+0x3a>
 8011028:	4621      	mov	r1, r4
 801102a:	4628      	mov	r0, r5
 801102c:	f000 fd5a 	bl	8011ae4 <_fflush_r>
 8011030:	b9e0      	cbnz	r0, 801106c <__swbuf_r+0x74>
 8011032:	68a3      	ldr	r3, [r4, #8]
 8011034:	3b01      	subs	r3, #1
 8011036:	60a3      	str	r3, [r4, #8]
 8011038:	6823      	ldr	r3, [r4, #0]
 801103a:	1c5a      	adds	r2, r3, #1
 801103c:	6022      	str	r2, [r4, #0]
 801103e:	701e      	strb	r6, [r3, #0]
 8011040:	6962      	ldr	r2, [r4, #20]
 8011042:	1c43      	adds	r3, r0, #1
 8011044:	429a      	cmp	r2, r3
 8011046:	d004      	beq.n	8011052 <__swbuf_r+0x5a>
 8011048:	89a3      	ldrh	r3, [r4, #12]
 801104a:	07db      	lsls	r3, r3, #31
 801104c:	d506      	bpl.n	801105c <__swbuf_r+0x64>
 801104e:	2e0a      	cmp	r6, #10
 8011050:	d104      	bne.n	801105c <__swbuf_r+0x64>
 8011052:	4621      	mov	r1, r4
 8011054:	4628      	mov	r0, r5
 8011056:	f000 fd45 	bl	8011ae4 <_fflush_r>
 801105a:	b938      	cbnz	r0, 801106c <__swbuf_r+0x74>
 801105c:	4638      	mov	r0, r7
 801105e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011060:	4621      	mov	r1, r4
 8011062:	4628      	mov	r0, r5
 8011064:	f000 f806 	bl	8011074 <__swsetup_r>
 8011068:	2800      	cmp	r0, #0
 801106a:	d0d5      	beq.n	8011018 <__swbuf_r+0x20>
 801106c:	f04f 37ff 	mov.w	r7, #4294967295
 8011070:	e7f4      	b.n	801105c <__swbuf_r+0x64>
	...

08011074 <__swsetup_r>:
 8011074:	b538      	push	{r3, r4, r5, lr}
 8011076:	4b2a      	ldr	r3, [pc, #168]	; (8011120 <__swsetup_r+0xac>)
 8011078:	4605      	mov	r5, r0
 801107a:	6818      	ldr	r0, [r3, #0]
 801107c:	460c      	mov	r4, r1
 801107e:	b118      	cbz	r0, 8011088 <__swsetup_r+0x14>
 8011080:	6a03      	ldr	r3, [r0, #32]
 8011082:	b90b      	cbnz	r3, 8011088 <__swsetup_r+0x14>
 8011084:	f7ff feaa 	bl	8010ddc <__sinit>
 8011088:	89a3      	ldrh	r3, [r4, #12]
 801108a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801108e:	0718      	lsls	r0, r3, #28
 8011090:	d422      	bmi.n	80110d8 <__swsetup_r+0x64>
 8011092:	06d9      	lsls	r1, r3, #27
 8011094:	d407      	bmi.n	80110a6 <__swsetup_r+0x32>
 8011096:	2309      	movs	r3, #9
 8011098:	602b      	str	r3, [r5, #0]
 801109a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801109e:	81a3      	strh	r3, [r4, #12]
 80110a0:	f04f 30ff 	mov.w	r0, #4294967295
 80110a4:	e034      	b.n	8011110 <__swsetup_r+0x9c>
 80110a6:	0758      	lsls	r0, r3, #29
 80110a8:	d512      	bpl.n	80110d0 <__swsetup_r+0x5c>
 80110aa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80110ac:	b141      	cbz	r1, 80110c0 <__swsetup_r+0x4c>
 80110ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80110b2:	4299      	cmp	r1, r3
 80110b4:	d002      	beq.n	80110bc <__swsetup_r+0x48>
 80110b6:	4628      	mov	r0, r5
 80110b8:	f000 f8ae 	bl	8011218 <_free_r>
 80110bc:	2300      	movs	r3, #0
 80110be:	6363      	str	r3, [r4, #52]	; 0x34
 80110c0:	89a3      	ldrh	r3, [r4, #12]
 80110c2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80110c6:	81a3      	strh	r3, [r4, #12]
 80110c8:	2300      	movs	r3, #0
 80110ca:	6063      	str	r3, [r4, #4]
 80110cc:	6923      	ldr	r3, [r4, #16]
 80110ce:	6023      	str	r3, [r4, #0]
 80110d0:	89a3      	ldrh	r3, [r4, #12]
 80110d2:	f043 0308 	orr.w	r3, r3, #8
 80110d6:	81a3      	strh	r3, [r4, #12]
 80110d8:	6923      	ldr	r3, [r4, #16]
 80110da:	b94b      	cbnz	r3, 80110f0 <__swsetup_r+0x7c>
 80110dc:	89a3      	ldrh	r3, [r4, #12]
 80110de:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80110e2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80110e6:	d003      	beq.n	80110f0 <__swsetup_r+0x7c>
 80110e8:	4621      	mov	r1, r4
 80110ea:	4628      	mov	r0, r5
 80110ec:	f000 fd48 	bl	8011b80 <__smakebuf_r>
 80110f0:	89a0      	ldrh	r0, [r4, #12]
 80110f2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80110f6:	f010 0301 	ands.w	r3, r0, #1
 80110fa:	d00a      	beq.n	8011112 <__swsetup_r+0x9e>
 80110fc:	2300      	movs	r3, #0
 80110fe:	60a3      	str	r3, [r4, #8]
 8011100:	6963      	ldr	r3, [r4, #20]
 8011102:	425b      	negs	r3, r3
 8011104:	61a3      	str	r3, [r4, #24]
 8011106:	6923      	ldr	r3, [r4, #16]
 8011108:	b943      	cbnz	r3, 801111c <__swsetup_r+0xa8>
 801110a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801110e:	d1c4      	bne.n	801109a <__swsetup_r+0x26>
 8011110:	bd38      	pop	{r3, r4, r5, pc}
 8011112:	0781      	lsls	r1, r0, #30
 8011114:	bf58      	it	pl
 8011116:	6963      	ldrpl	r3, [r4, #20]
 8011118:	60a3      	str	r3, [r4, #8]
 801111a:	e7f4      	b.n	8011106 <__swsetup_r+0x92>
 801111c:	2000      	movs	r0, #0
 801111e:	e7f7      	b.n	8011110 <__swsetup_r+0x9c>
 8011120:	24000764 	.word	0x24000764

08011124 <memset>:
 8011124:	4402      	add	r2, r0
 8011126:	4603      	mov	r3, r0
 8011128:	4293      	cmp	r3, r2
 801112a:	d100      	bne.n	801112e <memset+0xa>
 801112c:	4770      	bx	lr
 801112e:	f803 1b01 	strb.w	r1, [r3], #1
 8011132:	e7f9      	b.n	8011128 <memset+0x4>

08011134 <_close_r>:
 8011134:	b538      	push	{r3, r4, r5, lr}
 8011136:	4d06      	ldr	r5, [pc, #24]	; (8011150 <_close_r+0x1c>)
 8011138:	2300      	movs	r3, #0
 801113a:	4604      	mov	r4, r0
 801113c:	4608      	mov	r0, r1
 801113e:	602b      	str	r3, [r5, #0]
 8011140:	f7ef ff15 	bl	8000f6e <_close>
 8011144:	1c43      	adds	r3, r0, #1
 8011146:	d102      	bne.n	801114e <_close_r+0x1a>
 8011148:	682b      	ldr	r3, [r5, #0]
 801114a:	b103      	cbz	r3, 801114e <_close_r+0x1a>
 801114c:	6023      	str	r3, [r4, #0]
 801114e:	bd38      	pop	{r3, r4, r5, pc}
 8011150:	2400c724 	.word	0x2400c724

08011154 <_lseek_r>:
 8011154:	b538      	push	{r3, r4, r5, lr}
 8011156:	4d07      	ldr	r5, [pc, #28]	; (8011174 <_lseek_r+0x20>)
 8011158:	4604      	mov	r4, r0
 801115a:	4608      	mov	r0, r1
 801115c:	4611      	mov	r1, r2
 801115e:	2200      	movs	r2, #0
 8011160:	602a      	str	r2, [r5, #0]
 8011162:	461a      	mov	r2, r3
 8011164:	f7ef ff2a 	bl	8000fbc <_lseek>
 8011168:	1c43      	adds	r3, r0, #1
 801116a:	d102      	bne.n	8011172 <_lseek_r+0x1e>
 801116c:	682b      	ldr	r3, [r5, #0]
 801116e:	b103      	cbz	r3, 8011172 <_lseek_r+0x1e>
 8011170:	6023      	str	r3, [r4, #0]
 8011172:	bd38      	pop	{r3, r4, r5, pc}
 8011174:	2400c724 	.word	0x2400c724

08011178 <_read_r>:
 8011178:	b538      	push	{r3, r4, r5, lr}
 801117a:	4d07      	ldr	r5, [pc, #28]	; (8011198 <_read_r+0x20>)
 801117c:	4604      	mov	r4, r0
 801117e:	4608      	mov	r0, r1
 8011180:	4611      	mov	r1, r2
 8011182:	2200      	movs	r2, #0
 8011184:	602a      	str	r2, [r5, #0]
 8011186:	461a      	mov	r2, r3
 8011188:	f7ef feb8 	bl	8000efc <_read>
 801118c:	1c43      	adds	r3, r0, #1
 801118e:	d102      	bne.n	8011196 <_read_r+0x1e>
 8011190:	682b      	ldr	r3, [r5, #0]
 8011192:	b103      	cbz	r3, 8011196 <_read_r+0x1e>
 8011194:	6023      	str	r3, [r4, #0]
 8011196:	bd38      	pop	{r3, r4, r5, pc}
 8011198:	2400c724 	.word	0x2400c724

0801119c <_write_r>:
 801119c:	b538      	push	{r3, r4, r5, lr}
 801119e:	4d07      	ldr	r5, [pc, #28]	; (80111bc <_write_r+0x20>)
 80111a0:	4604      	mov	r4, r0
 80111a2:	4608      	mov	r0, r1
 80111a4:	4611      	mov	r1, r2
 80111a6:	2200      	movs	r2, #0
 80111a8:	602a      	str	r2, [r5, #0]
 80111aa:	461a      	mov	r2, r3
 80111ac:	f7ef fec3 	bl	8000f36 <_write>
 80111b0:	1c43      	adds	r3, r0, #1
 80111b2:	d102      	bne.n	80111ba <_write_r+0x1e>
 80111b4:	682b      	ldr	r3, [r5, #0]
 80111b6:	b103      	cbz	r3, 80111ba <_write_r+0x1e>
 80111b8:	6023      	str	r3, [r4, #0]
 80111ba:	bd38      	pop	{r3, r4, r5, pc}
 80111bc:	2400c724 	.word	0x2400c724

080111c0 <__errno>:
 80111c0:	4b01      	ldr	r3, [pc, #4]	; (80111c8 <__errno+0x8>)
 80111c2:	6818      	ldr	r0, [r3, #0]
 80111c4:	4770      	bx	lr
 80111c6:	bf00      	nop
 80111c8:	24000764 	.word	0x24000764

080111cc <__libc_init_array>:
 80111cc:	b570      	push	{r4, r5, r6, lr}
 80111ce:	4d0d      	ldr	r5, [pc, #52]	; (8011204 <__libc_init_array+0x38>)
 80111d0:	4c0d      	ldr	r4, [pc, #52]	; (8011208 <__libc_init_array+0x3c>)
 80111d2:	1b64      	subs	r4, r4, r5
 80111d4:	10a4      	asrs	r4, r4, #2
 80111d6:	2600      	movs	r6, #0
 80111d8:	42a6      	cmp	r6, r4
 80111da:	d109      	bne.n	80111f0 <__libc_init_array+0x24>
 80111dc:	4d0b      	ldr	r5, [pc, #44]	; (801120c <__libc_init_array+0x40>)
 80111de:	4c0c      	ldr	r4, [pc, #48]	; (8011210 <__libc_init_array+0x44>)
 80111e0:	f000 fd9c 	bl	8011d1c <_init>
 80111e4:	1b64      	subs	r4, r4, r5
 80111e6:	10a4      	asrs	r4, r4, #2
 80111e8:	2600      	movs	r6, #0
 80111ea:	42a6      	cmp	r6, r4
 80111ec:	d105      	bne.n	80111fa <__libc_init_array+0x2e>
 80111ee:	bd70      	pop	{r4, r5, r6, pc}
 80111f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80111f4:	4798      	blx	r3
 80111f6:	3601      	adds	r6, #1
 80111f8:	e7ee      	b.n	80111d8 <__libc_init_array+0xc>
 80111fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80111fe:	4798      	blx	r3
 8011200:	3601      	adds	r6, #1
 8011202:	e7f2      	b.n	80111ea <__libc_init_array+0x1e>
 8011204:	08011e20 	.word	0x08011e20
 8011208:	08011e20 	.word	0x08011e20
 801120c:	08011e20 	.word	0x08011e20
 8011210:	08011e24 	.word	0x08011e24

08011214 <__retarget_lock_acquire_recursive>:
 8011214:	4770      	bx	lr

08011216 <__retarget_lock_release_recursive>:
 8011216:	4770      	bx	lr

08011218 <_free_r>:
 8011218:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801121a:	2900      	cmp	r1, #0
 801121c:	d044      	beq.n	80112a8 <_free_r+0x90>
 801121e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011222:	9001      	str	r0, [sp, #4]
 8011224:	2b00      	cmp	r3, #0
 8011226:	f1a1 0404 	sub.w	r4, r1, #4
 801122a:	bfb8      	it	lt
 801122c:	18e4      	addlt	r4, r4, r3
 801122e:	f000 f8df 	bl	80113f0 <__malloc_lock>
 8011232:	4a1e      	ldr	r2, [pc, #120]	; (80112ac <_free_r+0x94>)
 8011234:	9801      	ldr	r0, [sp, #4]
 8011236:	6813      	ldr	r3, [r2, #0]
 8011238:	b933      	cbnz	r3, 8011248 <_free_r+0x30>
 801123a:	6063      	str	r3, [r4, #4]
 801123c:	6014      	str	r4, [r2, #0]
 801123e:	b003      	add	sp, #12
 8011240:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8011244:	f000 b8da 	b.w	80113fc <__malloc_unlock>
 8011248:	42a3      	cmp	r3, r4
 801124a:	d908      	bls.n	801125e <_free_r+0x46>
 801124c:	6825      	ldr	r5, [r4, #0]
 801124e:	1961      	adds	r1, r4, r5
 8011250:	428b      	cmp	r3, r1
 8011252:	bf01      	itttt	eq
 8011254:	6819      	ldreq	r1, [r3, #0]
 8011256:	685b      	ldreq	r3, [r3, #4]
 8011258:	1949      	addeq	r1, r1, r5
 801125a:	6021      	streq	r1, [r4, #0]
 801125c:	e7ed      	b.n	801123a <_free_r+0x22>
 801125e:	461a      	mov	r2, r3
 8011260:	685b      	ldr	r3, [r3, #4]
 8011262:	b10b      	cbz	r3, 8011268 <_free_r+0x50>
 8011264:	42a3      	cmp	r3, r4
 8011266:	d9fa      	bls.n	801125e <_free_r+0x46>
 8011268:	6811      	ldr	r1, [r2, #0]
 801126a:	1855      	adds	r5, r2, r1
 801126c:	42a5      	cmp	r5, r4
 801126e:	d10b      	bne.n	8011288 <_free_r+0x70>
 8011270:	6824      	ldr	r4, [r4, #0]
 8011272:	4421      	add	r1, r4
 8011274:	1854      	adds	r4, r2, r1
 8011276:	42a3      	cmp	r3, r4
 8011278:	6011      	str	r1, [r2, #0]
 801127a:	d1e0      	bne.n	801123e <_free_r+0x26>
 801127c:	681c      	ldr	r4, [r3, #0]
 801127e:	685b      	ldr	r3, [r3, #4]
 8011280:	6053      	str	r3, [r2, #4]
 8011282:	440c      	add	r4, r1
 8011284:	6014      	str	r4, [r2, #0]
 8011286:	e7da      	b.n	801123e <_free_r+0x26>
 8011288:	d902      	bls.n	8011290 <_free_r+0x78>
 801128a:	230c      	movs	r3, #12
 801128c:	6003      	str	r3, [r0, #0]
 801128e:	e7d6      	b.n	801123e <_free_r+0x26>
 8011290:	6825      	ldr	r5, [r4, #0]
 8011292:	1961      	adds	r1, r4, r5
 8011294:	428b      	cmp	r3, r1
 8011296:	bf04      	itt	eq
 8011298:	6819      	ldreq	r1, [r3, #0]
 801129a:	685b      	ldreq	r3, [r3, #4]
 801129c:	6063      	str	r3, [r4, #4]
 801129e:	bf04      	itt	eq
 80112a0:	1949      	addeq	r1, r1, r5
 80112a2:	6021      	streq	r1, [r4, #0]
 80112a4:	6054      	str	r4, [r2, #4]
 80112a6:	e7ca      	b.n	801123e <_free_r+0x26>
 80112a8:	b003      	add	sp, #12
 80112aa:	bd30      	pop	{r4, r5, pc}
 80112ac:	2400c72c 	.word	0x2400c72c

080112b0 <sbrk_aligned>:
 80112b0:	b570      	push	{r4, r5, r6, lr}
 80112b2:	4e0e      	ldr	r6, [pc, #56]	; (80112ec <sbrk_aligned+0x3c>)
 80112b4:	460c      	mov	r4, r1
 80112b6:	6831      	ldr	r1, [r6, #0]
 80112b8:	4605      	mov	r5, r0
 80112ba:	b911      	cbnz	r1, 80112c2 <sbrk_aligned+0x12>
 80112bc:	f000 fcd8 	bl	8011c70 <_sbrk_r>
 80112c0:	6030      	str	r0, [r6, #0]
 80112c2:	4621      	mov	r1, r4
 80112c4:	4628      	mov	r0, r5
 80112c6:	f000 fcd3 	bl	8011c70 <_sbrk_r>
 80112ca:	1c43      	adds	r3, r0, #1
 80112cc:	d00a      	beq.n	80112e4 <sbrk_aligned+0x34>
 80112ce:	1cc4      	adds	r4, r0, #3
 80112d0:	f024 0403 	bic.w	r4, r4, #3
 80112d4:	42a0      	cmp	r0, r4
 80112d6:	d007      	beq.n	80112e8 <sbrk_aligned+0x38>
 80112d8:	1a21      	subs	r1, r4, r0
 80112da:	4628      	mov	r0, r5
 80112dc:	f000 fcc8 	bl	8011c70 <_sbrk_r>
 80112e0:	3001      	adds	r0, #1
 80112e2:	d101      	bne.n	80112e8 <sbrk_aligned+0x38>
 80112e4:	f04f 34ff 	mov.w	r4, #4294967295
 80112e8:	4620      	mov	r0, r4
 80112ea:	bd70      	pop	{r4, r5, r6, pc}
 80112ec:	2400c730 	.word	0x2400c730

080112f0 <_malloc_r>:
 80112f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80112f4:	1ccd      	adds	r5, r1, #3
 80112f6:	f025 0503 	bic.w	r5, r5, #3
 80112fa:	3508      	adds	r5, #8
 80112fc:	2d0c      	cmp	r5, #12
 80112fe:	bf38      	it	cc
 8011300:	250c      	movcc	r5, #12
 8011302:	2d00      	cmp	r5, #0
 8011304:	4607      	mov	r7, r0
 8011306:	db01      	blt.n	801130c <_malloc_r+0x1c>
 8011308:	42a9      	cmp	r1, r5
 801130a:	d905      	bls.n	8011318 <_malloc_r+0x28>
 801130c:	230c      	movs	r3, #12
 801130e:	603b      	str	r3, [r7, #0]
 8011310:	2600      	movs	r6, #0
 8011312:	4630      	mov	r0, r6
 8011314:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011318:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80113ec <_malloc_r+0xfc>
 801131c:	f000 f868 	bl	80113f0 <__malloc_lock>
 8011320:	f8d8 3000 	ldr.w	r3, [r8]
 8011324:	461c      	mov	r4, r3
 8011326:	bb5c      	cbnz	r4, 8011380 <_malloc_r+0x90>
 8011328:	4629      	mov	r1, r5
 801132a:	4638      	mov	r0, r7
 801132c:	f7ff ffc0 	bl	80112b0 <sbrk_aligned>
 8011330:	1c43      	adds	r3, r0, #1
 8011332:	4604      	mov	r4, r0
 8011334:	d155      	bne.n	80113e2 <_malloc_r+0xf2>
 8011336:	f8d8 4000 	ldr.w	r4, [r8]
 801133a:	4626      	mov	r6, r4
 801133c:	2e00      	cmp	r6, #0
 801133e:	d145      	bne.n	80113cc <_malloc_r+0xdc>
 8011340:	2c00      	cmp	r4, #0
 8011342:	d048      	beq.n	80113d6 <_malloc_r+0xe6>
 8011344:	6823      	ldr	r3, [r4, #0]
 8011346:	4631      	mov	r1, r6
 8011348:	4638      	mov	r0, r7
 801134a:	eb04 0903 	add.w	r9, r4, r3
 801134e:	f000 fc8f 	bl	8011c70 <_sbrk_r>
 8011352:	4581      	cmp	r9, r0
 8011354:	d13f      	bne.n	80113d6 <_malloc_r+0xe6>
 8011356:	6821      	ldr	r1, [r4, #0]
 8011358:	1a6d      	subs	r5, r5, r1
 801135a:	4629      	mov	r1, r5
 801135c:	4638      	mov	r0, r7
 801135e:	f7ff ffa7 	bl	80112b0 <sbrk_aligned>
 8011362:	3001      	adds	r0, #1
 8011364:	d037      	beq.n	80113d6 <_malloc_r+0xe6>
 8011366:	6823      	ldr	r3, [r4, #0]
 8011368:	442b      	add	r3, r5
 801136a:	6023      	str	r3, [r4, #0]
 801136c:	f8d8 3000 	ldr.w	r3, [r8]
 8011370:	2b00      	cmp	r3, #0
 8011372:	d038      	beq.n	80113e6 <_malloc_r+0xf6>
 8011374:	685a      	ldr	r2, [r3, #4]
 8011376:	42a2      	cmp	r2, r4
 8011378:	d12b      	bne.n	80113d2 <_malloc_r+0xe2>
 801137a:	2200      	movs	r2, #0
 801137c:	605a      	str	r2, [r3, #4]
 801137e:	e00f      	b.n	80113a0 <_malloc_r+0xb0>
 8011380:	6822      	ldr	r2, [r4, #0]
 8011382:	1b52      	subs	r2, r2, r5
 8011384:	d41f      	bmi.n	80113c6 <_malloc_r+0xd6>
 8011386:	2a0b      	cmp	r2, #11
 8011388:	d917      	bls.n	80113ba <_malloc_r+0xca>
 801138a:	1961      	adds	r1, r4, r5
 801138c:	42a3      	cmp	r3, r4
 801138e:	6025      	str	r5, [r4, #0]
 8011390:	bf18      	it	ne
 8011392:	6059      	strne	r1, [r3, #4]
 8011394:	6863      	ldr	r3, [r4, #4]
 8011396:	bf08      	it	eq
 8011398:	f8c8 1000 	streq.w	r1, [r8]
 801139c:	5162      	str	r2, [r4, r5]
 801139e:	604b      	str	r3, [r1, #4]
 80113a0:	4638      	mov	r0, r7
 80113a2:	f104 060b 	add.w	r6, r4, #11
 80113a6:	f000 f829 	bl	80113fc <__malloc_unlock>
 80113aa:	f026 0607 	bic.w	r6, r6, #7
 80113ae:	1d23      	adds	r3, r4, #4
 80113b0:	1af2      	subs	r2, r6, r3
 80113b2:	d0ae      	beq.n	8011312 <_malloc_r+0x22>
 80113b4:	1b9b      	subs	r3, r3, r6
 80113b6:	50a3      	str	r3, [r4, r2]
 80113b8:	e7ab      	b.n	8011312 <_malloc_r+0x22>
 80113ba:	42a3      	cmp	r3, r4
 80113bc:	6862      	ldr	r2, [r4, #4]
 80113be:	d1dd      	bne.n	801137c <_malloc_r+0x8c>
 80113c0:	f8c8 2000 	str.w	r2, [r8]
 80113c4:	e7ec      	b.n	80113a0 <_malloc_r+0xb0>
 80113c6:	4623      	mov	r3, r4
 80113c8:	6864      	ldr	r4, [r4, #4]
 80113ca:	e7ac      	b.n	8011326 <_malloc_r+0x36>
 80113cc:	4634      	mov	r4, r6
 80113ce:	6876      	ldr	r6, [r6, #4]
 80113d0:	e7b4      	b.n	801133c <_malloc_r+0x4c>
 80113d2:	4613      	mov	r3, r2
 80113d4:	e7cc      	b.n	8011370 <_malloc_r+0x80>
 80113d6:	230c      	movs	r3, #12
 80113d8:	603b      	str	r3, [r7, #0]
 80113da:	4638      	mov	r0, r7
 80113dc:	f000 f80e 	bl	80113fc <__malloc_unlock>
 80113e0:	e797      	b.n	8011312 <_malloc_r+0x22>
 80113e2:	6025      	str	r5, [r4, #0]
 80113e4:	e7dc      	b.n	80113a0 <_malloc_r+0xb0>
 80113e6:	605b      	str	r3, [r3, #4]
 80113e8:	deff      	udf	#255	; 0xff
 80113ea:	bf00      	nop
 80113ec:	2400c72c 	.word	0x2400c72c

080113f0 <__malloc_lock>:
 80113f0:	4801      	ldr	r0, [pc, #4]	; (80113f8 <__malloc_lock+0x8>)
 80113f2:	f7ff bf0f 	b.w	8011214 <__retarget_lock_acquire_recursive>
 80113f6:	bf00      	nop
 80113f8:	2400c728 	.word	0x2400c728

080113fc <__malloc_unlock>:
 80113fc:	4801      	ldr	r0, [pc, #4]	; (8011404 <__malloc_unlock+0x8>)
 80113fe:	f7ff bf0a 	b.w	8011216 <__retarget_lock_release_recursive>
 8011402:	bf00      	nop
 8011404:	2400c728 	.word	0x2400c728

08011408 <__ssputs_r>:
 8011408:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801140c:	688e      	ldr	r6, [r1, #8]
 801140e:	461f      	mov	r7, r3
 8011410:	42be      	cmp	r6, r7
 8011412:	680b      	ldr	r3, [r1, #0]
 8011414:	4682      	mov	sl, r0
 8011416:	460c      	mov	r4, r1
 8011418:	4690      	mov	r8, r2
 801141a:	d82c      	bhi.n	8011476 <__ssputs_r+0x6e>
 801141c:	898a      	ldrh	r2, [r1, #12]
 801141e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011422:	d026      	beq.n	8011472 <__ssputs_r+0x6a>
 8011424:	6965      	ldr	r5, [r4, #20]
 8011426:	6909      	ldr	r1, [r1, #16]
 8011428:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801142c:	eba3 0901 	sub.w	r9, r3, r1
 8011430:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011434:	1c7b      	adds	r3, r7, #1
 8011436:	444b      	add	r3, r9
 8011438:	106d      	asrs	r5, r5, #1
 801143a:	429d      	cmp	r5, r3
 801143c:	bf38      	it	cc
 801143e:	461d      	movcc	r5, r3
 8011440:	0553      	lsls	r3, r2, #21
 8011442:	d527      	bpl.n	8011494 <__ssputs_r+0x8c>
 8011444:	4629      	mov	r1, r5
 8011446:	f7ff ff53 	bl	80112f0 <_malloc_r>
 801144a:	4606      	mov	r6, r0
 801144c:	b360      	cbz	r0, 80114a8 <__ssputs_r+0xa0>
 801144e:	6921      	ldr	r1, [r4, #16]
 8011450:	464a      	mov	r2, r9
 8011452:	f000 fc1d 	bl	8011c90 <memcpy>
 8011456:	89a3      	ldrh	r3, [r4, #12]
 8011458:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801145c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011460:	81a3      	strh	r3, [r4, #12]
 8011462:	6126      	str	r6, [r4, #16]
 8011464:	6165      	str	r5, [r4, #20]
 8011466:	444e      	add	r6, r9
 8011468:	eba5 0509 	sub.w	r5, r5, r9
 801146c:	6026      	str	r6, [r4, #0]
 801146e:	60a5      	str	r5, [r4, #8]
 8011470:	463e      	mov	r6, r7
 8011472:	42be      	cmp	r6, r7
 8011474:	d900      	bls.n	8011478 <__ssputs_r+0x70>
 8011476:	463e      	mov	r6, r7
 8011478:	6820      	ldr	r0, [r4, #0]
 801147a:	4632      	mov	r2, r6
 801147c:	4641      	mov	r1, r8
 801147e:	f000 fbbb 	bl	8011bf8 <memmove>
 8011482:	68a3      	ldr	r3, [r4, #8]
 8011484:	1b9b      	subs	r3, r3, r6
 8011486:	60a3      	str	r3, [r4, #8]
 8011488:	6823      	ldr	r3, [r4, #0]
 801148a:	4433      	add	r3, r6
 801148c:	6023      	str	r3, [r4, #0]
 801148e:	2000      	movs	r0, #0
 8011490:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011494:	462a      	mov	r2, r5
 8011496:	f000 fc09 	bl	8011cac <_realloc_r>
 801149a:	4606      	mov	r6, r0
 801149c:	2800      	cmp	r0, #0
 801149e:	d1e0      	bne.n	8011462 <__ssputs_r+0x5a>
 80114a0:	6921      	ldr	r1, [r4, #16]
 80114a2:	4650      	mov	r0, sl
 80114a4:	f7ff feb8 	bl	8011218 <_free_r>
 80114a8:	230c      	movs	r3, #12
 80114aa:	f8ca 3000 	str.w	r3, [sl]
 80114ae:	89a3      	ldrh	r3, [r4, #12]
 80114b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80114b4:	81a3      	strh	r3, [r4, #12]
 80114b6:	f04f 30ff 	mov.w	r0, #4294967295
 80114ba:	e7e9      	b.n	8011490 <__ssputs_r+0x88>

080114bc <_svfiprintf_r>:
 80114bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114c0:	4698      	mov	r8, r3
 80114c2:	898b      	ldrh	r3, [r1, #12]
 80114c4:	061b      	lsls	r3, r3, #24
 80114c6:	b09d      	sub	sp, #116	; 0x74
 80114c8:	4607      	mov	r7, r0
 80114ca:	460d      	mov	r5, r1
 80114cc:	4614      	mov	r4, r2
 80114ce:	d50e      	bpl.n	80114ee <_svfiprintf_r+0x32>
 80114d0:	690b      	ldr	r3, [r1, #16]
 80114d2:	b963      	cbnz	r3, 80114ee <_svfiprintf_r+0x32>
 80114d4:	2140      	movs	r1, #64	; 0x40
 80114d6:	f7ff ff0b 	bl	80112f0 <_malloc_r>
 80114da:	6028      	str	r0, [r5, #0]
 80114dc:	6128      	str	r0, [r5, #16]
 80114de:	b920      	cbnz	r0, 80114ea <_svfiprintf_r+0x2e>
 80114e0:	230c      	movs	r3, #12
 80114e2:	603b      	str	r3, [r7, #0]
 80114e4:	f04f 30ff 	mov.w	r0, #4294967295
 80114e8:	e0d0      	b.n	801168c <_svfiprintf_r+0x1d0>
 80114ea:	2340      	movs	r3, #64	; 0x40
 80114ec:	616b      	str	r3, [r5, #20]
 80114ee:	2300      	movs	r3, #0
 80114f0:	9309      	str	r3, [sp, #36]	; 0x24
 80114f2:	2320      	movs	r3, #32
 80114f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80114f8:	f8cd 800c 	str.w	r8, [sp, #12]
 80114fc:	2330      	movs	r3, #48	; 0x30
 80114fe:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80116a4 <_svfiprintf_r+0x1e8>
 8011502:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011506:	f04f 0901 	mov.w	r9, #1
 801150a:	4623      	mov	r3, r4
 801150c:	469a      	mov	sl, r3
 801150e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011512:	b10a      	cbz	r2, 8011518 <_svfiprintf_r+0x5c>
 8011514:	2a25      	cmp	r2, #37	; 0x25
 8011516:	d1f9      	bne.n	801150c <_svfiprintf_r+0x50>
 8011518:	ebba 0b04 	subs.w	fp, sl, r4
 801151c:	d00b      	beq.n	8011536 <_svfiprintf_r+0x7a>
 801151e:	465b      	mov	r3, fp
 8011520:	4622      	mov	r2, r4
 8011522:	4629      	mov	r1, r5
 8011524:	4638      	mov	r0, r7
 8011526:	f7ff ff6f 	bl	8011408 <__ssputs_r>
 801152a:	3001      	adds	r0, #1
 801152c:	f000 80a9 	beq.w	8011682 <_svfiprintf_r+0x1c6>
 8011530:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011532:	445a      	add	r2, fp
 8011534:	9209      	str	r2, [sp, #36]	; 0x24
 8011536:	f89a 3000 	ldrb.w	r3, [sl]
 801153a:	2b00      	cmp	r3, #0
 801153c:	f000 80a1 	beq.w	8011682 <_svfiprintf_r+0x1c6>
 8011540:	2300      	movs	r3, #0
 8011542:	f04f 32ff 	mov.w	r2, #4294967295
 8011546:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801154a:	f10a 0a01 	add.w	sl, sl, #1
 801154e:	9304      	str	r3, [sp, #16]
 8011550:	9307      	str	r3, [sp, #28]
 8011552:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011556:	931a      	str	r3, [sp, #104]	; 0x68
 8011558:	4654      	mov	r4, sl
 801155a:	2205      	movs	r2, #5
 801155c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011560:	4850      	ldr	r0, [pc, #320]	; (80116a4 <_svfiprintf_r+0x1e8>)
 8011562:	f7ee febd 	bl	80002e0 <memchr>
 8011566:	9a04      	ldr	r2, [sp, #16]
 8011568:	b9d8      	cbnz	r0, 80115a2 <_svfiprintf_r+0xe6>
 801156a:	06d0      	lsls	r0, r2, #27
 801156c:	bf44      	itt	mi
 801156e:	2320      	movmi	r3, #32
 8011570:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011574:	0711      	lsls	r1, r2, #28
 8011576:	bf44      	itt	mi
 8011578:	232b      	movmi	r3, #43	; 0x2b
 801157a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801157e:	f89a 3000 	ldrb.w	r3, [sl]
 8011582:	2b2a      	cmp	r3, #42	; 0x2a
 8011584:	d015      	beq.n	80115b2 <_svfiprintf_r+0xf6>
 8011586:	9a07      	ldr	r2, [sp, #28]
 8011588:	4654      	mov	r4, sl
 801158a:	2000      	movs	r0, #0
 801158c:	f04f 0c0a 	mov.w	ip, #10
 8011590:	4621      	mov	r1, r4
 8011592:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011596:	3b30      	subs	r3, #48	; 0x30
 8011598:	2b09      	cmp	r3, #9
 801159a:	d94d      	bls.n	8011638 <_svfiprintf_r+0x17c>
 801159c:	b1b0      	cbz	r0, 80115cc <_svfiprintf_r+0x110>
 801159e:	9207      	str	r2, [sp, #28]
 80115a0:	e014      	b.n	80115cc <_svfiprintf_r+0x110>
 80115a2:	eba0 0308 	sub.w	r3, r0, r8
 80115a6:	fa09 f303 	lsl.w	r3, r9, r3
 80115aa:	4313      	orrs	r3, r2
 80115ac:	9304      	str	r3, [sp, #16]
 80115ae:	46a2      	mov	sl, r4
 80115b0:	e7d2      	b.n	8011558 <_svfiprintf_r+0x9c>
 80115b2:	9b03      	ldr	r3, [sp, #12]
 80115b4:	1d19      	adds	r1, r3, #4
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	9103      	str	r1, [sp, #12]
 80115ba:	2b00      	cmp	r3, #0
 80115bc:	bfbb      	ittet	lt
 80115be:	425b      	neglt	r3, r3
 80115c0:	f042 0202 	orrlt.w	r2, r2, #2
 80115c4:	9307      	strge	r3, [sp, #28]
 80115c6:	9307      	strlt	r3, [sp, #28]
 80115c8:	bfb8      	it	lt
 80115ca:	9204      	strlt	r2, [sp, #16]
 80115cc:	7823      	ldrb	r3, [r4, #0]
 80115ce:	2b2e      	cmp	r3, #46	; 0x2e
 80115d0:	d10c      	bne.n	80115ec <_svfiprintf_r+0x130>
 80115d2:	7863      	ldrb	r3, [r4, #1]
 80115d4:	2b2a      	cmp	r3, #42	; 0x2a
 80115d6:	d134      	bne.n	8011642 <_svfiprintf_r+0x186>
 80115d8:	9b03      	ldr	r3, [sp, #12]
 80115da:	1d1a      	adds	r2, r3, #4
 80115dc:	681b      	ldr	r3, [r3, #0]
 80115de:	9203      	str	r2, [sp, #12]
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	bfb8      	it	lt
 80115e4:	f04f 33ff 	movlt.w	r3, #4294967295
 80115e8:	3402      	adds	r4, #2
 80115ea:	9305      	str	r3, [sp, #20]
 80115ec:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80116b4 <_svfiprintf_r+0x1f8>
 80115f0:	7821      	ldrb	r1, [r4, #0]
 80115f2:	2203      	movs	r2, #3
 80115f4:	4650      	mov	r0, sl
 80115f6:	f7ee fe73 	bl	80002e0 <memchr>
 80115fa:	b138      	cbz	r0, 801160c <_svfiprintf_r+0x150>
 80115fc:	9b04      	ldr	r3, [sp, #16]
 80115fe:	eba0 000a 	sub.w	r0, r0, sl
 8011602:	2240      	movs	r2, #64	; 0x40
 8011604:	4082      	lsls	r2, r0
 8011606:	4313      	orrs	r3, r2
 8011608:	3401      	adds	r4, #1
 801160a:	9304      	str	r3, [sp, #16]
 801160c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011610:	4825      	ldr	r0, [pc, #148]	; (80116a8 <_svfiprintf_r+0x1ec>)
 8011612:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011616:	2206      	movs	r2, #6
 8011618:	f7ee fe62 	bl	80002e0 <memchr>
 801161c:	2800      	cmp	r0, #0
 801161e:	d038      	beq.n	8011692 <_svfiprintf_r+0x1d6>
 8011620:	4b22      	ldr	r3, [pc, #136]	; (80116ac <_svfiprintf_r+0x1f0>)
 8011622:	bb1b      	cbnz	r3, 801166c <_svfiprintf_r+0x1b0>
 8011624:	9b03      	ldr	r3, [sp, #12]
 8011626:	3307      	adds	r3, #7
 8011628:	f023 0307 	bic.w	r3, r3, #7
 801162c:	3308      	adds	r3, #8
 801162e:	9303      	str	r3, [sp, #12]
 8011630:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011632:	4433      	add	r3, r6
 8011634:	9309      	str	r3, [sp, #36]	; 0x24
 8011636:	e768      	b.n	801150a <_svfiprintf_r+0x4e>
 8011638:	fb0c 3202 	mla	r2, ip, r2, r3
 801163c:	460c      	mov	r4, r1
 801163e:	2001      	movs	r0, #1
 8011640:	e7a6      	b.n	8011590 <_svfiprintf_r+0xd4>
 8011642:	2300      	movs	r3, #0
 8011644:	3401      	adds	r4, #1
 8011646:	9305      	str	r3, [sp, #20]
 8011648:	4619      	mov	r1, r3
 801164a:	f04f 0c0a 	mov.w	ip, #10
 801164e:	4620      	mov	r0, r4
 8011650:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011654:	3a30      	subs	r2, #48	; 0x30
 8011656:	2a09      	cmp	r2, #9
 8011658:	d903      	bls.n	8011662 <_svfiprintf_r+0x1a6>
 801165a:	2b00      	cmp	r3, #0
 801165c:	d0c6      	beq.n	80115ec <_svfiprintf_r+0x130>
 801165e:	9105      	str	r1, [sp, #20]
 8011660:	e7c4      	b.n	80115ec <_svfiprintf_r+0x130>
 8011662:	fb0c 2101 	mla	r1, ip, r1, r2
 8011666:	4604      	mov	r4, r0
 8011668:	2301      	movs	r3, #1
 801166a:	e7f0      	b.n	801164e <_svfiprintf_r+0x192>
 801166c:	ab03      	add	r3, sp, #12
 801166e:	9300      	str	r3, [sp, #0]
 8011670:	462a      	mov	r2, r5
 8011672:	4b0f      	ldr	r3, [pc, #60]	; (80116b0 <_svfiprintf_r+0x1f4>)
 8011674:	a904      	add	r1, sp, #16
 8011676:	4638      	mov	r0, r7
 8011678:	f3af 8000 	nop.w
 801167c:	1c42      	adds	r2, r0, #1
 801167e:	4606      	mov	r6, r0
 8011680:	d1d6      	bne.n	8011630 <_svfiprintf_r+0x174>
 8011682:	89ab      	ldrh	r3, [r5, #12]
 8011684:	065b      	lsls	r3, r3, #25
 8011686:	f53f af2d 	bmi.w	80114e4 <_svfiprintf_r+0x28>
 801168a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801168c:	b01d      	add	sp, #116	; 0x74
 801168e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011692:	ab03      	add	r3, sp, #12
 8011694:	9300      	str	r3, [sp, #0]
 8011696:	462a      	mov	r2, r5
 8011698:	4b05      	ldr	r3, [pc, #20]	; (80116b0 <_svfiprintf_r+0x1f4>)
 801169a:	a904      	add	r1, sp, #16
 801169c:	4638      	mov	r0, r7
 801169e:	f000 f879 	bl	8011794 <_printf_i>
 80116a2:	e7eb      	b.n	801167c <_svfiprintf_r+0x1c0>
 80116a4:	08011dec 	.word	0x08011dec
 80116a8:	08011df6 	.word	0x08011df6
 80116ac:	00000000 	.word	0x00000000
 80116b0:	08011409 	.word	0x08011409
 80116b4:	08011df2 	.word	0x08011df2

080116b8 <_printf_common>:
 80116b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80116bc:	4616      	mov	r6, r2
 80116be:	4699      	mov	r9, r3
 80116c0:	688a      	ldr	r2, [r1, #8]
 80116c2:	690b      	ldr	r3, [r1, #16]
 80116c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80116c8:	4293      	cmp	r3, r2
 80116ca:	bfb8      	it	lt
 80116cc:	4613      	movlt	r3, r2
 80116ce:	6033      	str	r3, [r6, #0]
 80116d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80116d4:	4607      	mov	r7, r0
 80116d6:	460c      	mov	r4, r1
 80116d8:	b10a      	cbz	r2, 80116de <_printf_common+0x26>
 80116da:	3301      	adds	r3, #1
 80116dc:	6033      	str	r3, [r6, #0]
 80116de:	6823      	ldr	r3, [r4, #0]
 80116e0:	0699      	lsls	r1, r3, #26
 80116e2:	bf42      	ittt	mi
 80116e4:	6833      	ldrmi	r3, [r6, #0]
 80116e6:	3302      	addmi	r3, #2
 80116e8:	6033      	strmi	r3, [r6, #0]
 80116ea:	6825      	ldr	r5, [r4, #0]
 80116ec:	f015 0506 	ands.w	r5, r5, #6
 80116f0:	d106      	bne.n	8011700 <_printf_common+0x48>
 80116f2:	f104 0a19 	add.w	sl, r4, #25
 80116f6:	68e3      	ldr	r3, [r4, #12]
 80116f8:	6832      	ldr	r2, [r6, #0]
 80116fa:	1a9b      	subs	r3, r3, r2
 80116fc:	42ab      	cmp	r3, r5
 80116fe:	dc26      	bgt.n	801174e <_printf_common+0x96>
 8011700:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8011704:	1e13      	subs	r3, r2, #0
 8011706:	6822      	ldr	r2, [r4, #0]
 8011708:	bf18      	it	ne
 801170a:	2301      	movne	r3, #1
 801170c:	0692      	lsls	r2, r2, #26
 801170e:	d42b      	bmi.n	8011768 <_printf_common+0xb0>
 8011710:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8011714:	4649      	mov	r1, r9
 8011716:	4638      	mov	r0, r7
 8011718:	47c0      	blx	r8
 801171a:	3001      	adds	r0, #1
 801171c:	d01e      	beq.n	801175c <_printf_common+0xa4>
 801171e:	6823      	ldr	r3, [r4, #0]
 8011720:	6922      	ldr	r2, [r4, #16]
 8011722:	f003 0306 	and.w	r3, r3, #6
 8011726:	2b04      	cmp	r3, #4
 8011728:	bf02      	ittt	eq
 801172a:	68e5      	ldreq	r5, [r4, #12]
 801172c:	6833      	ldreq	r3, [r6, #0]
 801172e:	1aed      	subeq	r5, r5, r3
 8011730:	68a3      	ldr	r3, [r4, #8]
 8011732:	bf0c      	ite	eq
 8011734:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8011738:	2500      	movne	r5, #0
 801173a:	4293      	cmp	r3, r2
 801173c:	bfc4      	itt	gt
 801173e:	1a9b      	subgt	r3, r3, r2
 8011740:	18ed      	addgt	r5, r5, r3
 8011742:	2600      	movs	r6, #0
 8011744:	341a      	adds	r4, #26
 8011746:	42b5      	cmp	r5, r6
 8011748:	d11a      	bne.n	8011780 <_printf_common+0xc8>
 801174a:	2000      	movs	r0, #0
 801174c:	e008      	b.n	8011760 <_printf_common+0xa8>
 801174e:	2301      	movs	r3, #1
 8011750:	4652      	mov	r2, sl
 8011752:	4649      	mov	r1, r9
 8011754:	4638      	mov	r0, r7
 8011756:	47c0      	blx	r8
 8011758:	3001      	adds	r0, #1
 801175a:	d103      	bne.n	8011764 <_printf_common+0xac>
 801175c:	f04f 30ff 	mov.w	r0, #4294967295
 8011760:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011764:	3501      	adds	r5, #1
 8011766:	e7c6      	b.n	80116f6 <_printf_common+0x3e>
 8011768:	18e1      	adds	r1, r4, r3
 801176a:	1c5a      	adds	r2, r3, #1
 801176c:	2030      	movs	r0, #48	; 0x30
 801176e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8011772:	4422      	add	r2, r4
 8011774:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8011778:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801177c:	3302      	adds	r3, #2
 801177e:	e7c7      	b.n	8011710 <_printf_common+0x58>
 8011780:	2301      	movs	r3, #1
 8011782:	4622      	mov	r2, r4
 8011784:	4649      	mov	r1, r9
 8011786:	4638      	mov	r0, r7
 8011788:	47c0      	blx	r8
 801178a:	3001      	adds	r0, #1
 801178c:	d0e6      	beq.n	801175c <_printf_common+0xa4>
 801178e:	3601      	adds	r6, #1
 8011790:	e7d9      	b.n	8011746 <_printf_common+0x8e>
	...

08011794 <_printf_i>:
 8011794:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011798:	7e0f      	ldrb	r7, [r1, #24]
 801179a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801179c:	2f78      	cmp	r7, #120	; 0x78
 801179e:	4691      	mov	r9, r2
 80117a0:	4680      	mov	r8, r0
 80117a2:	460c      	mov	r4, r1
 80117a4:	469a      	mov	sl, r3
 80117a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80117aa:	d807      	bhi.n	80117bc <_printf_i+0x28>
 80117ac:	2f62      	cmp	r7, #98	; 0x62
 80117ae:	d80a      	bhi.n	80117c6 <_printf_i+0x32>
 80117b0:	2f00      	cmp	r7, #0
 80117b2:	f000 80d4 	beq.w	801195e <_printf_i+0x1ca>
 80117b6:	2f58      	cmp	r7, #88	; 0x58
 80117b8:	f000 80c0 	beq.w	801193c <_printf_i+0x1a8>
 80117bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80117c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80117c4:	e03a      	b.n	801183c <_printf_i+0xa8>
 80117c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80117ca:	2b15      	cmp	r3, #21
 80117cc:	d8f6      	bhi.n	80117bc <_printf_i+0x28>
 80117ce:	a101      	add	r1, pc, #4	; (adr r1, 80117d4 <_printf_i+0x40>)
 80117d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80117d4:	0801182d 	.word	0x0801182d
 80117d8:	08011841 	.word	0x08011841
 80117dc:	080117bd 	.word	0x080117bd
 80117e0:	080117bd 	.word	0x080117bd
 80117e4:	080117bd 	.word	0x080117bd
 80117e8:	080117bd 	.word	0x080117bd
 80117ec:	08011841 	.word	0x08011841
 80117f0:	080117bd 	.word	0x080117bd
 80117f4:	080117bd 	.word	0x080117bd
 80117f8:	080117bd 	.word	0x080117bd
 80117fc:	080117bd 	.word	0x080117bd
 8011800:	08011945 	.word	0x08011945
 8011804:	0801186d 	.word	0x0801186d
 8011808:	080118ff 	.word	0x080118ff
 801180c:	080117bd 	.word	0x080117bd
 8011810:	080117bd 	.word	0x080117bd
 8011814:	08011967 	.word	0x08011967
 8011818:	080117bd 	.word	0x080117bd
 801181c:	0801186d 	.word	0x0801186d
 8011820:	080117bd 	.word	0x080117bd
 8011824:	080117bd 	.word	0x080117bd
 8011828:	08011907 	.word	0x08011907
 801182c:	682b      	ldr	r3, [r5, #0]
 801182e:	1d1a      	adds	r2, r3, #4
 8011830:	681b      	ldr	r3, [r3, #0]
 8011832:	602a      	str	r2, [r5, #0]
 8011834:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8011838:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801183c:	2301      	movs	r3, #1
 801183e:	e09f      	b.n	8011980 <_printf_i+0x1ec>
 8011840:	6820      	ldr	r0, [r4, #0]
 8011842:	682b      	ldr	r3, [r5, #0]
 8011844:	0607      	lsls	r7, r0, #24
 8011846:	f103 0104 	add.w	r1, r3, #4
 801184a:	6029      	str	r1, [r5, #0]
 801184c:	d501      	bpl.n	8011852 <_printf_i+0xbe>
 801184e:	681e      	ldr	r6, [r3, #0]
 8011850:	e003      	b.n	801185a <_printf_i+0xc6>
 8011852:	0646      	lsls	r6, r0, #25
 8011854:	d5fb      	bpl.n	801184e <_printf_i+0xba>
 8011856:	f9b3 6000 	ldrsh.w	r6, [r3]
 801185a:	2e00      	cmp	r6, #0
 801185c:	da03      	bge.n	8011866 <_printf_i+0xd2>
 801185e:	232d      	movs	r3, #45	; 0x2d
 8011860:	4276      	negs	r6, r6
 8011862:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011866:	485a      	ldr	r0, [pc, #360]	; (80119d0 <_printf_i+0x23c>)
 8011868:	230a      	movs	r3, #10
 801186a:	e012      	b.n	8011892 <_printf_i+0xfe>
 801186c:	682b      	ldr	r3, [r5, #0]
 801186e:	6820      	ldr	r0, [r4, #0]
 8011870:	1d19      	adds	r1, r3, #4
 8011872:	6029      	str	r1, [r5, #0]
 8011874:	0605      	lsls	r5, r0, #24
 8011876:	d501      	bpl.n	801187c <_printf_i+0xe8>
 8011878:	681e      	ldr	r6, [r3, #0]
 801187a:	e002      	b.n	8011882 <_printf_i+0xee>
 801187c:	0641      	lsls	r1, r0, #25
 801187e:	d5fb      	bpl.n	8011878 <_printf_i+0xe4>
 8011880:	881e      	ldrh	r6, [r3, #0]
 8011882:	4853      	ldr	r0, [pc, #332]	; (80119d0 <_printf_i+0x23c>)
 8011884:	2f6f      	cmp	r7, #111	; 0x6f
 8011886:	bf0c      	ite	eq
 8011888:	2308      	moveq	r3, #8
 801188a:	230a      	movne	r3, #10
 801188c:	2100      	movs	r1, #0
 801188e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8011892:	6865      	ldr	r5, [r4, #4]
 8011894:	60a5      	str	r5, [r4, #8]
 8011896:	2d00      	cmp	r5, #0
 8011898:	bfa2      	ittt	ge
 801189a:	6821      	ldrge	r1, [r4, #0]
 801189c:	f021 0104 	bicge.w	r1, r1, #4
 80118a0:	6021      	strge	r1, [r4, #0]
 80118a2:	b90e      	cbnz	r6, 80118a8 <_printf_i+0x114>
 80118a4:	2d00      	cmp	r5, #0
 80118a6:	d04b      	beq.n	8011940 <_printf_i+0x1ac>
 80118a8:	4615      	mov	r5, r2
 80118aa:	fbb6 f1f3 	udiv	r1, r6, r3
 80118ae:	fb03 6711 	mls	r7, r3, r1, r6
 80118b2:	5dc7      	ldrb	r7, [r0, r7]
 80118b4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80118b8:	4637      	mov	r7, r6
 80118ba:	42bb      	cmp	r3, r7
 80118bc:	460e      	mov	r6, r1
 80118be:	d9f4      	bls.n	80118aa <_printf_i+0x116>
 80118c0:	2b08      	cmp	r3, #8
 80118c2:	d10b      	bne.n	80118dc <_printf_i+0x148>
 80118c4:	6823      	ldr	r3, [r4, #0]
 80118c6:	07de      	lsls	r6, r3, #31
 80118c8:	d508      	bpl.n	80118dc <_printf_i+0x148>
 80118ca:	6923      	ldr	r3, [r4, #16]
 80118cc:	6861      	ldr	r1, [r4, #4]
 80118ce:	4299      	cmp	r1, r3
 80118d0:	bfde      	ittt	le
 80118d2:	2330      	movle	r3, #48	; 0x30
 80118d4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80118d8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80118dc:	1b52      	subs	r2, r2, r5
 80118de:	6122      	str	r2, [r4, #16]
 80118e0:	f8cd a000 	str.w	sl, [sp]
 80118e4:	464b      	mov	r3, r9
 80118e6:	aa03      	add	r2, sp, #12
 80118e8:	4621      	mov	r1, r4
 80118ea:	4640      	mov	r0, r8
 80118ec:	f7ff fee4 	bl	80116b8 <_printf_common>
 80118f0:	3001      	adds	r0, #1
 80118f2:	d14a      	bne.n	801198a <_printf_i+0x1f6>
 80118f4:	f04f 30ff 	mov.w	r0, #4294967295
 80118f8:	b004      	add	sp, #16
 80118fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80118fe:	6823      	ldr	r3, [r4, #0]
 8011900:	f043 0320 	orr.w	r3, r3, #32
 8011904:	6023      	str	r3, [r4, #0]
 8011906:	4833      	ldr	r0, [pc, #204]	; (80119d4 <_printf_i+0x240>)
 8011908:	2778      	movs	r7, #120	; 0x78
 801190a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801190e:	6823      	ldr	r3, [r4, #0]
 8011910:	6829      	ldr	r1, [r5, #0]
 8011912:	061f      	lsls	r7, r3, #24
 8011914:	f851 6b04 	ldr.w	r6, [r1], #4
 8011918:	d402      	bmi.n	8011920 <_printf_i+0x18c>
 801191a:	065f      	lsls	r7, r3, #25
 801191c:	bf48      	it	mi
 801191e:	b2b6      	uxthmi	r6, r6
 8011920:	07df      	lsls	r7, r3, #31
 8011922:	bf48      	it	mi
 8011924:	f043 0320 	orrmi.w	r3, r3, #32
 8011928:	6029      	str	r1, [r5, #0]
 801192a:	bf48      	it	mi
 801192c:	6023      	strmi	r3, [r4, #0]
 801192e:	b91e      	cbnz	r6, 8011938 <_printf_i+0x1a4>
 8011930:	6823      	ldr	r3, [r4, #0]
 8011932:	f023 0320 	bic.w	r3, r3, #32
 8011936:	6023      	str	r3, [r4, #0]
 8011938:	2310      	movs	r3, #16
 801193a:	e7a7      	b.n	801188c <_printf_i+0xf8>
 801193c:	4824      	ldr	r0, [pc, #144]	; (80119d0 <_printf_i+0x23c>)
 801193e:	e7e4      	b.n	801190a <_printf_i+0x176>
 8011940:	4615      	mov	r5, r2
 8011942:	e7bd      	b.n	80118c0 <_printf_i+0x12c>
 8011944:	682b      	ldr	r3, [r5, #0]
 8011946:	6826      	ldr	r6, [r4, #0]
 8011948:	6961      	ldr	r1, [r4, #20]
 801194a:	1d18      	adds	r0, r3, #4
 801194c:	6028      	str	r0, [r5, #0]
 801194e:	0635      	lsls	r5, r6, #24
 8011950:	681b      	ldr	r3, [r3, #0]
 8011952:	d501      	bpl.n	8011958 <_printf_i+0x1c4>
 8011954:	6019      	str	r1, [r3, #0]
 8011956:	e002      	b.n	801195e <_printf_i+0x1ca>
 8011958:	0670      	lsls	r0, r6, #25
 801195a:	d5fb      	bpl.n	8011954 <_printf_i+0x1c0>
 801195c:	8019      	strh	r1, [r3, #0]
 801195e:	2300      	movs	r3, #0
 8011960:	6123      	str	r3, [r4, #16]
 8011962:	4615      	mov	r5, r2
 8011964:	e7bc      	b.n	80118e0 <_printf_i+0x14c>
 8011966:	682b      	ldr	r3, [r5, #0]
 8011968:	1d1a      	adds	r2, r3, #4
 801196a:	602a      	str	r2, [r5, #0]
 801196c:	681d      	ldr	r5, [r3, #0]
 801196e:	6862      	ldr	r2, [r4, #4]
 8011970:	2100      	movs	r1, #0
 8011972:	4628      	mov	r0, r5
 8011974:	f7ee fcb4 	bl	80002e0 <memchr>
 8011978:	b108      	cbz	r0, 801197e <_printf_i+0x1ea>
 801197a:	1b40      	subs	r0, r0, r5
 801197c:	6060      	str	r0, [r4, #4]
 801197e:	6863      	ldr	r3, [r4, #4]
 8011980:	6123      	str	r3, [r4, #16]
 8011982:	2300      	movs	r3, #0
 8011984:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8011988:	e7aa      	b.n	80118e0 <_printf_i+0x14c>
 801198a:	6923      	ldr	r3, [r4, #16]
 801198c:	462a      	mov	r2, r5
 801198e:	4649      	mov	r1, r9
 8011990:	4640      	mov	r0, r8
 8011992:	47d0      	blx	sl
 8011994:	3001      	adds	r0, #1
 8011996:	d0ad      	beq.n	80118f4 <_printf_i+0x160>
 8011998:	6823      	ldr	r3, [r4, #0]
 801199a:	079b      	lsls	r3, r3, #30
 801199c:	d413      	bmi.n	80119c6 <_printf_i+0x232>
 801199e:	68e0      	ldr	r0, [r4, #12]
 80119a0:	9b03      	ldr	r3, [sp, #12]
 80119a2:	4298      	cmp	r0, r3
 80119a4:	bfb8      	it	lt
 80119a6:	4618      	movlt	r0, r3
 80119a8:	e7a6      	b.n	80118f8 <_printf_i+0x164>
 80119aa:	2301      	movs	r3, #1
 80119ac:	4632      	mov	r2, r6
 80119ae:	4649      	mov	r1, r9
 80119b0:	4640      	mov	r0, r8
 80119b2:	47d0      	blx	sl
 80119b4:	3001      	adds	r0, #1
 80119b6:	d09d      	beq.n	80118f4 <_printf_i+0x160>
 80119b8:	3501      	adds	r5, #1
 80119ba:	68e3      	ldr	r3, [r4, #12]
 80119bc:	9903      	ldr	r1, [sp, #12]
 80119be:	1a5b      	subs	r3, r3, r1
 80119c0:	42ab      	cmp	r3, r5
 80119c2:	dcf2      	bgt.n	80119aa <_printf_i+0x216>
 80119c4:	e7eb      	b.n	801199e <_printf_i+0x20a>
 80119c6:	2500      	movs	r5, #0
 80119c8:	f104 0619 	add.w	r6, r4, #25
 80119cc:	e7f5      	b.n	80119ba <_printf_i+0x226>
 80119ce:	bf00      	nop
 80119d0:	08011dfd 	.word	0x08011dfd
 80119d4:	08011e0e 	.word	0x08011e0e

080119d8 <__sflush_r>:
 80119d8:	898a      	ldrh	r2, [r1, #12]
 80119da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80119de:	4605      	mov	r5, r0
 80119e0:	0710      	lsls	r0, r2, #28
 80119e2:	460c      	mov	r4, r1
 80119e4:	d458      	bmi.n	8011a98 <__sflush_r+0xc0>
 80119e6:	684b      	ldr	r3, [r1, #4]
 80119e8:	2b00      	cmp	r3, #0
 80119ea:	dc05      	bgt.n	80119f8 <__sflush_r+0x20>
 80119ec:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	dc02      	bgt.n	80119f8 <__sflush_r+0x20>
 80119f2:	2000      	movs	r0, #0
 80119f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80119f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80119fa:	2e00      	cmp	r6, #0
 80119fc:	d0f9      	beq.n	80119f2 <__sflush_r+0x1a>
 80119fe:	2300      	movs	r3, #0
 8011a00:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011a04:	682f      	ldr	r7, [r5, #0]
 8011a06:	6a21      	ldr	r1, [r4, #32]
 8011a08:	602b      	str	r3, [r5, #0]
 8011a0a:	d032      	beq.n	8011a72 <__sflush_r+0x9a>
 8011a0c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011a0e:	89a3      	ldrh	r3, [r4, #12]
 8011a10:	075a      	lsls	r2, r3, #29
 8011a12:	d505      	bpl.n	8011a20 <__sflush_r+0x48>
 8011a14:	6863      	ldr	r3, [r4, #4]
 8011a16:	1ac0      	subs	r0, r0, r3
 8011a18:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011a1a:	b10b      	cbz	r3, 8011a20 <__sflush_r+0x48>
 8011a1c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011a1e:	1ac0      	subs	r0, r0, r3
 8011a20:	2300      	movs	r3, #0
 8011a22:	4602      	mov	r2, r0
 8011a24:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011a26:	6a21      	ldr	r1, [r4, #32]
 8011a28:	4628      	mov	r0, r5
 8011a2a:	47b0      	blx	r6
 8011a2c:	1c43      	adds	r3, r0, #1
 8011a2e:	89a3      	ldrh	r3, [r4, #12]
 8011a30:	d106      	bne.n	8011a40 <__sflush_r+0x68>
 8011a32:	6829      	ldr	r1, [r5, #0]
 8011a34:	291d      	cmp	r1, #29
 8011a36:	d82b      	bhi.n	8011a90 <__sflush_r+0xb8>
 8011a38:	4a29      	ldr	r2, [pc, #164]	; (8011ae0 <__sflush_r+0x108>)
 8011a3a:	410a      	asrs	r2, r1
 8011a3c:	07d6      	lsls	r6, r2, #31
 8011a3e:	d427      	bmi.n	8011a90 <__sflush_r+0xb8>
 8011a40:	2200      	movs	r2, #0
 8011a42:	6062      	str	r2, [r4, #4]
 8011a44:	04d9      	lsls	r1, r3, #19
 8011a46:	6922      	ldr	r2, [r4, #16]
 8011a48:	6022      	str	r2, [r4, #0]
 8011a4a:	d504      	bpl.n	8011a56 <__sflush_r+0x7e>
 8011a4c:	1c42      	adds	r2, r0, #1
 8011a4e:	d101      	bne.n	8011a54 <__sflush_r+0x7c>
 8011a50:	682b      	ldr	r3, [r5, #0]
 8011a52:	b903      	cbnz	r3, 8011a56 <__sflush_r+0x7e>
 8011a54:	6560      	str	r0, [r4, #84]	; 0x54
 8011a56:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011a58:	602f      	str	r7, [r5, #0]
 8011a5a:	2900      	cmp	r1, #0
 8011a5c:	d0c9      	beq.n	80119f2 <__sflush_r+0x1a>
 8011a5e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011a62:	4299      	cmp	r1, r3
 8011a64:	d002      	beq.n	8011a6c <__sflush_r+0x94>
 8011a66:	4628      	mov	r0, r5
 8011a68:	f7ff fbd6 	bl	8011218 <_free_r>
 8011a6c:	2000      	movs	r0, #0
 8011a6e:	6360      	str	r0, [r4, #52]	; 0x34
 8011a70:	e7c0      	b.n	80119f4 <__sflush_r+0x1c>
 8011a72:	2301      	movs	r3, #1
 8011a74:	4628      	mov	r0, r5
 8011a76:	47b0      	blx	r6
 8011a78:	1c41      	adds	r1, r0, #1
 8011a7a:	d1c8      	bne.n	8011a0e <__sflush_r+0x36>
 8011a7c:	682b      	ldr	r3, [r5, #0]
 8011a7e:	2b00      	cmp	r3, #0
 8011a80:	d0c5      	beq.n	8011a0e <__sflush_r+0x36>
 8011a82:	2b1d      	cmp	r3, #29
 8011a84:	d001      	beq.n	8011a8a <__sflush_r+0xb2>
 8011a86:	2b16      	cmp	r3, #22
 8011a88:	d101      	bne.n	8011a8e <__sflush_r+0xb6>
 8011a8a:	602f      	str	r7, [r5, #0]
 8011a8c:	e7b1      	b.n	80119f2 <__sflush_r+0x1a>
 8011a8e:	89a3      	ldrh	r3, [r4, #12]
 8011a90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011a94:	81a3      	strh	r3, [r4, #12]
 8011a96:	e7ad      	b.n	80119f4 <__sflush_r+0x1c>
 8011a98:	690f      	ldr	r7, [r1, #16]
 8011a9a:	2f00      	cmp	r7, #0
 8011a9c:	d0a9      	beq.n	80119f2 <__sflush_r+0x1a>
 8011a9e:	0793      	lsls	r3, r2, #30
 8011aa0:	680e      	ldr	r6, [r1, #0]
 8011aa2:	bf08      	it	eq
 8011aa4:	694b      	ldreq	r3, [r1, #20]
 8011aa6:	600f      	str	r7, [r1, #0]
 8011aa8:	bf18      	it	ne
 8011aaa:	2300      	movne	r3, #0
 8011aac:	eba6 0807 	sub.w	r8, r6, r7
 8011ab0:	608b      	str	r3, [r1, #8]
 8011ab2:	f1b8 0f00 	cmp.w	r8, #0
 8011ab6:	dd9c      	ble.n	80119f2 <__sflush_r+0x1a>
 8011ab8:	6a21      	ldr	r1, [r4, #32]
 8011aba:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011abc:	4643      	mov	r3, r8
 8011abe:	463a      	mov	r2, r7
 8011ac0:	4628      	mov	r0, r5
 8011ac2:	47b0      	blx	r6
 8011ac4:	2800      	cmp	r0, #0
 8011ac6:	dc06      	bgt.n	8011ad6 <__sflush_r+0xfe>
 8011ac8:	89a3      	ldrh	r3, [r4, #12]
 8011aca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011ace:	81a3      	strh	r3, [r4, #12]
 8011ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8011ad4:	e78e      	b.n	80119f4 <__sflush_r+0x1c>
 8011ad6:	4407      	add	r7, r0
 8011ad8:	eba8 0800 	sub.w	r8, r8, r0
 8011adc:	e7e9      	b.n	8011ab2 <__sflush_r+0xda>
 8011ade:	bf00      	nop
 8011ae0:	dfbffffe 	.word	0xdfbffffe

08011ae4 <_fflush_r>:
 8011ae4:	b538      	push	{r3, r4, r5, lr}
 8011ae6:	690b      	ldr	r3, [r1, #16]
 8011ae8:	4605      	mov	r5, r0
 8011aea:	460c      	mov	r4, r1
 8011aec:	b913      	cbnz	r3, 8011af4 <_fflush_r+0x10>
 8011aee:	2500      	movs	r5, #0
 8011af0:	4628      	mov	r0, r5
 8011af2:	bd38      	pop	{r3, r4, r5, pc}
 8011af4:	b118      	cbz	r0, 8011afe <_fflush_r+0x1a>
 8011af6:	6a03      	ldr	r3, [r0, #32]
 8011af8:	b90b      	cbnz	r3, 8011afe <_fflush_r+0x1a>
 8011afa:	f7ff f96f 	bl	8010ddc <__sinit>
 8011afe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011b02:	2b00      	cmp	r3, #0
 8011b04:	d0f3      	beq.n	8011aee <_fflush_r+0xa>
 8011b06:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011b08:	07d0      	lsls	r0, r2, #31
 8011b0a:	d404      	bmi.n	8011b16 <_fflush_r+0x32>
 8011b0c:	0599      	lsls	r1, r3, #22
 8011b0e:	d402      	bmi.n	8011b16 <_fflush_r+0x32>
 8011b10:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011b12:	f7ff fb7f 	bl	8011214 <__retarget_lock_acquire_recursive>
 8011b16:	4628      	mov	r0, r5
 8011b18:	4621      	mov	r1, r4
 8011b1a:	f7ff ff5d 	bl	80119d8 <__sflush_r>
 8011b1e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011b20:	07da      	lsls	r2, r3, #31
 8011b22:	4605      	mov	r5, r0
 8011b24:	d4e4      	bmi.n	8011af0 <_fflush_r+0xc>
 8011b26:	89a3      	ldrh	r3, [r4, #12]
 8011b28:	059b      	lsls	r3, r3, #22
 8011b2a:	d4e1      	bmi.n	8011af0 <_fflush_r+0xc>
 8011b2c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011b2e:	f7ff fb72 	bl	8011216 <__retarget_lock_release_recursive>
 8011b32:	e7dd      	b.n	8011af0 <_fflush_r+0xc>

08011b34 <__swhatbuf_r>:
 8011b34:	b570      	push	{r4, r5, r6, lr}
 8011b36:	460c      	mov	r4, r1
 8011b38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011b3c:	2900      	cmp	r1, #0
 8011b3e:	b096      	sub	sp, #88	; 0x58
 8011b40:	4615      	mov	r5, r2
 8011b42:	461e      	mov	r6, r3
 8011b44:	da0d      	bge.n	8011b62 <__swhatbuf_r+0x2e>
 8011b46:	89a3      	ldrh	r3, [r4, #12]
 8011b48:	f013 0f80 	tst.w	r3, #128	; 0x80
 8011b4c:	f04f 0100 	mov.w	r1, #0
 8011b50:	bf0c      	ite	eq
 8011b52:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8011b56:	2340      	movne	r3, #64	; 0x40
 8011b58:	2000      	movs	r0, #0
 8011b5a:	6031      	str	r1, [r6, #0]
 8011b5c:	602b      	str	r3, [r5, #0]
 8011b5e:	b016      	add	sp, #88	; 0x58
 8011b60:	bd70      	pop	{r4, r5, r6, pc}
 8011b62:	466a      	mov	r2, sp
 8011b64:	f000 f862 	bl	8011c2c <_fstat_r>
 8011b68:	2800      	cmp	r0, #0
 8011b6a:	dbec      	blt.n	8011b46 <__swhatbuf_r+0x12>
 8011b6c:	9901      	ldr	r1, [sp, #4]
 8011b6e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8011b72:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8011b76:	4259      	negs	r1, r3
 8011b78:	4159      	adcs	r1, r3
 8011b7a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011b7e:	e7eb      	b.n	8011b58 <__swhatbuf_r+0x24>

08011b80 <__smakebuf_r>:
 8011b80:	898b      	ldrh	r3, [r1, #12]
 8011b82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011b84:	079d      	lsls	r5, r3, #30
 8011b86:	4606      	mov	r6, r0
 8011b88:	460c      	mov	r4, r1
 8011b8a:	d507      	bpl.n	8011b9c <__smakebuf_r+0x1c>
 8011b8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8011b90:	6023      	str	r3, [r4, #0]
 8011b92:	6123      	str	r3, [r4, #16]
 8011b94:	2301      	movs	r3, #1
 8011b96:	6163      	str	r3, [r4, #20]
 8011b98:	b002      	add	sp, #8
 8011b9a:	bd70      	pop	{r4, r5, r6, pc}
 8011b9c:	ab01      	add	r3, sp, #4
 8011b9e:	466a      	mov	r2, sp
 8011ba0:	f7ff ffc8 	bl	8011b34 <__swhatbuf_r>
 8011ba4:	9900      	ldr	r1, [sp, #0]
 8011ba6:	4605      	mov	r5, r0
 8011ba8:	4630      	mov	r0, r6
 8011baa:	f7ff fba1 	bl	80112f0 <_malloc_r>
 8011bae:	b948      	cbnz	r0, 8011bc4 <__smakebuf_r+0x44>
 8011bb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011bb4:	059a      	lsls	r2, r3, #22
 8011bb6:	d4ef      	bmi.n	8011b98 <__smakebuf_r+0x18>
 8011bb8:	f023 0303 	bic.w	r3, r3, #3
 8011bbc:	f043 0302 	orr.w	r3, r3, #2
 8011bc0:	81a3      	strh	r3, [r4, #12]
 8011bc2:	e7e3      	b.n	8011b8c <__smakebuf_r+0xc>
 8011bc4:	89a3      	ldrh	r3, [r4, #12]
 8011bc6:	6020      	str	r0, [r4, #0]
 8011bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011bcc:	81a3      	strh	r3, [r4, #12]
 8011bce:	9b00      	ldr	r3, [sp, #0]
 8011bd0:	6163      	str	r3, [r4, #20]
 8011bd2:	9b01      	ldr	r3, [sp, #4]
 8011bd4:	6120      	str	r0, [r4, #16]
 8011bd6:	b15b      	cbz	r3, 8011bf0 <__smakebuf_r+0x70>
 8011bd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8011bdc:	4630      	mov	r0, r6
 8011bde:	f000 f837 	bl	8011c50 <_isatty_r>
 8011be2:	b128      	cbz	r0, 8011bf0 <__smakebuf_r+0x70>
 8011be4:	89a3      	ldrh	r3, [r4, #12]
 8011be6:	f023 0303 	bic.w	r3, r3, #3
 8011bea:	f043 0301 	orr.w	r3, r3, #1
 8011bee:	81a3      	strh	r3, [r4, #12]
 8011bf0:	89a3      	ldrh	r3, [r4, #12]
 8011bf2:	431d      	orrs	r5, r3
 8011bf4:	81a5      	strh	r5, [r4, #12]
 8011bf6:	e7cf      	b.n	8011b98 <__smakebuf_r+0x18>

08011bf8 <memmove>:
 8011bf8:	4288      	cmp	r0, r1
 8011bfa:	b510      	push	{r4, lr}
 8011bfc:	eb01 0402 	add.w	r4, r1, r2
 8011c00:	d902      	bls.n	8011c08 <memmove+0x10>
 8011c02:	4284      	cmp	r4, r0
 8011c04:	4623      	mov	r3, r4
 8011c06:	d807      	bhi.n	8011c18 <memmove+0x20>
 8011c08:	1e43      	subs	r3, r0, #1
 8011c0a:	42a1      	cmp	r1, r4
 8011c0c:	d008      	beq.n	8011c20 <memmove+0x28>
 8011c0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011c12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011c16:	e7f8      	b.n	8011c0a <memmove+0x12>
 8011c18:	4402      	add	r2, r0
 8011c1a:	4601      	mov	r1, r0
 8011c1c:	428a      	cmp	r2, r1
 8011c1e:	d100      	bne.n	8011c22 <memmove+0x2a>
 8011c20:	bd10      	pop	{r4, pc}
 8011c22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011c26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8011c2a:	e7f7      	b.n	8011c1c <memmove+0x24>

08011c2c <_fstat_r>:
 8011c2c:	b538      	push	{r3, r4, r5, lr}
 8011c2e:	4d07      	ldr	r5, [pc, #28]	; (8011c4c <_fstat_r+0x20>)
 8011c30:	2300      	movs	r3, #0
 8011c32:	4604      	mov	r4, r0
 8011c34:	4608      	mov	r0, r1
 8011c36:	4611      	mov	r1, r2
 8011c38:	602b      	str	r3, [r5, #0]
 8011c3a:	f7ef f9a4 	bl	8000f86 <_fstat>
 8011c3e:	1c43      	adds	r3, r0, #1
 8011c40:	d102      	bne.n	8011c48 <_fstat_r+0x1c>
 8011c42:	682b      	ldr	r3, [r5, #0]
 8011c44:	b103      	cbz	r3, 8011c48 <_fstat_r+0x1c>
 8011c46:	6023      	str	r3, [r4, #0]
 8011c48:	bd38      	pop	{r3, r4, r5, pc}
 8011c4a:	bf00      	nop
 8011c4c:	2400c724 	.word	0x2400c724

08011c50 <_isatty_r>:
 8011c50:	b538      	push	{r3, r4, r5, lr}
 8011c52:	4d06      	ldr	r5, [pc, #24]	; (8011c6c <_isatty_r+0x1c>)
 8011c54:	2300      	movs	r3, #0
 8011c56:	4604      	mov	r4, r0
 8011c58:	4608      	mov	r0, r1
 8011c5a:	602b      	str	r3, [r5, #0]
 8011c5c:	f7ef f9a3 	bl	8000fa6 <_isatty>
 8011c60:	1c43      	adds	r3, r0, #1
 8011c62:	d102      	bne.n	8011c6a <_isatty_r+0x1a>
 8011c64:	682b      	ldr	r3, [r5, #0]
 8011c66:	b103      	cbz	r3, 8011c6a <_isatty_r+0x1a>
 8011c68:	6023      	str	r3, [r4, #0]
 8011c6a:	bd38      	pop	{r3, r4, r5, pc}
 8011c6c:	2400c724 	.word	0x2400c724

08011c70 <_sbrk_r>:
 8011c70:	b538      	push	{r3, r4, r5, lr}
 8011c72:	4d06      	ldr	r5, [pc, #24]	; (8011c8c <_sbrk_r+0x1c>)
 8011c74:	2300      	movs	r3, #0
 8011c76:	4604      	mov	r4, r0
 8011c78:	4608      	mov	r0, r1
 8011c7a:	602b      	str	r3, [r5, #0]
 8011c7c:	f7ef f9ac 	bl	8000fd8 <_sbrk>
 8011c80:	1c43      	adds	r3, r0, #1
 8011c82:	d102      	bne.n	8011c8a <_sbrk_r+0x1a>
 8011c84:	682b      	ldr	r3, [r5, #0]
 8011c86:	b103      	cbz	r3, 8011c8a <_sbrk_r+0x1a>
 8011c88:	6023      	str	r3, [r4, #0]
 8011c8a:	bd38      	pop	{r3, r4, r5, pc}
 8011c8c:	2400c724 	.word	0x2400c724

08011c90 <memcpy>:
 8011c90:	440a      	add	r2, r1
 8011c92:	4291      	cmp	r1, r2
 8011c94:	f100 33ff 	add.w	r3, r0, #4294967295
 8011c98:	d100      	bne.n	8011c9c <memcpy+0xc>
 8011c9a:	4770      	bx	lr
 8011c9c:	b510      	push	{r4, lr}
 8011c9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011ca2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011ca6:	4291      	cmp	r1, r2
 8011ca8:	d1f9      	bne.n	8011c9e <memcpy+0xe>
 8011caa:	bd10      	pop	{r4, pc}

08011cac <_realloc_r>:
 8011cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011cb0:	4680      	mov	r8, r0
 8011cb2:	4614      	mov	r4, r2
 8011cb4:	460e      	mov	r6, r1
 8011cb6:	b921      	cbnz	r1, 8011cc2 <_realloc_r+0x16>
 8011cb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8011cbc:	4611      	mov	r1, r2
 8011cbe:	f7ff bb17 	b.w	80112f0 <_malloc_r>
 8011cc2:	b92a      	cbnz	r2, 8011cd0 <_realloc_r+0x24>
 8011cc4:	f7ff faa8 	bl	8011218 <_free_r>
 8011cc8:	4625      	mov	r5, r4
 8011cca:	4628      	mov	r0, r5
 8011ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011cd0:	f000 f81b 	bl	8011d0a <_malloc_usable_size_r>
 8011cd4:	4284      	cmp	r4, r0
 8011cd6:	4607      	mov	r7, r0
 8011cd8:	d802      	bhi.n	8011ce0 <_realloc_r+0x34>
 8011cda:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8011cde:	d812      	bhi.n	8011d06 <_realloc_r+0x5a>
 8011ce0:	4621      	mov	r1, r4
 8011ce2:	4640      	mov	r0, r8
 8011ce4:	f7ff fb04 	bl	80112f0 <_malloc_r>
 8011ce8:	4605      	mov	r5, r0
 8011cea:	2800      	cmp	r0, #0
 8011cec:	d0ed      	beq.n	8011cca <_realloc_r+0x1e>
 8011cee:	42bc      	cmp	r4, r7
 8011cf0:	4622      	mov	r2, r4
 8011cf2:	4631      	mov	r1, r6
 8011cf4:	bf28      	it	cs
 8011cf6:	463a      	movcs	r2, r7
 8011cf8:	f7ff ffca 	bl	8011c90 <memcpy>
 8011cfc:	4631      	mov	r1, r6
 8011cfe:	4640      	mov	r0, r8
 8011d00:	f7ff fa8a 	bl	8011218 <_free_r>
 8011d04:	e7e1      	b.n	8011cca <_realloc_r+0x1e>
 8011d06:	4635      	mov	r5, r6
 8011d08:	e7df      	b.n	8011cca <_realloc_r+0x1e>

08011d0a <_malloc_usable_size_r>:
 8011d0a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011d0e:	1f18      	subs	r0, r3, #4
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	bfbc      	itt	lt
 8011d14:	580b      	ldrlt	r3, [r1, r0]
 8011d16:	18c0      	addlt	r0, r0, r3
 8011d18:	4770      	bx	lr
	...

08011d1c <_init>:
 8011d1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d1e:	bf00      	nop
 8011d20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011d22:	bc08      	pop	{r3}
 8011d24:	469e      	mov	lr, r3
 8011d26:	4770      	bx	lr

08011d28 <_fini>:
 8011d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011d2a:	bf00      	nop
 8011d2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011d2e:	bc08      	pop	{r3}
 8011d30:	469e      	mov	lr, r3
 8011d32:	4770      	bx	lr
